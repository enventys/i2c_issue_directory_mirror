
LoRaWan_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049f8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000194  08004ab8  08004ab8  00014ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004c4c  08004c4c  00014c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004c54  08004c54  00014c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08004c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000055c  20000074  08004cd0  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000800  200005d0  08004cd0  000205d0  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00026814  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005d27  00000000  00000000  000468b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000014b0  00000000  00000000  0004c5d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000019a0  00000000  00000000  0004da88  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00011670  00000000  00000000  0004f428  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001a649  00000000  00000000  00060a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000988b6  00000000  00000000  0007b0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007b  00000000  00000000  00113997  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003e98  00000000  00000000  00113a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_loc    0000e33a  00000000  00000000  001178ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004aa0 	.word	0x08004aa0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	08004aa0 	.word	0x08004aa0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_uldivmod>:
 800042c:	2b00      	cmp	r3, #0
 800042e:	d111      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000430:	2a00      	cmp	r2, #0
 8000432:	d10f      	bne.n	8000454 <__aeabi_uldivmod+0x28>
 8000434:	2900      	cmp	r1, #0
 8000436:	d100      	bne.n	800043a <__aeabi_uldivmod+0xe>
 8000438:	2800      	cmp	r0, #0
 800043a:	d002      	beq.n	8000442 <__aeabi_uldivmod+0x16>
 800043c:	2100      	movs	r1, #0
 800043e:	43c9      	mvns	r1, r1
 8000440:	1c08      	adds	r0, r1, #0
 8000442:	b407      	push	{r0, r1, r2}
 8000444:	4802      	ldr	r0, [pc, #8]	; (8000450 <__aeabi_uldivmod+0x24>)
 8000446:	a102      	add	r1, pc, #8	; (adr r1, 8000450 <__aeabi_uldivmod+0x24>)
 8000448:	1840      	adds	r0, r0, r1
 800044a:	9002      	str	r0, [sp, #8]
 800044c:	bd03      	pop	{r0, r1, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	ffffffd9 	.word	0xffffffd9
 8000454:	b403      	push	{r0, r1}
 8000456:	4668      	mov	r0, sp
 8000458:	b501      	push	{r0, lr}
 800045a:	9802      	ldr	r0, [sp, #8]
 800045c:	f000 f830 	bl	80004c0 <__udivmoddi4>
 8000460:	9b01      	ldr	r3, [sp, #4]
 8000462:	469e      	mov	lr, r3
 8000464:	b002      	add	sp, #8
 8000466:	bc0c      	pop	{r2, r3}
 8000468:	4770      	bx	lr
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_lmul>:
 800046c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800046e:	46ce      	mov	lr, r9
 8000470:	4647      	mov	r7, r8
 8000472:	0415      	lsls	r5, r2, #16
 8000474:	0c2d      	lsrs	r5, r5, #16
 8000476:	002e      	movs	r6, r5
 8000478:	b580      	push	{r7, lr}
 800047a:	0407      	lsls	r7, r0, #16
 800047c:	0c14      	lsrs	r4, r2, #16
 800047e:	0c3f      	lsrs	r7, r7, #16
 8000480:	4699      	mov	r9, r3
 8000482:	0c03      	lsrs	r3, r0, #16
 8000484:	437e      	muls	r6, r7
 8000486:	435d      	muls	r5, r3
 8000488:	4367      	muls	r7, r4
 800048a:	4363      	muls	r3, r4
 800048c:	197f      	adds	r7, r7, r5
 800048e:	0c34      	lsrs	r4, r6, #16
 8000490:	19e4      	adds	r4, r4, r7
 8000492:	469c      	mov	ip, r3
 8000494:	42a5      	cmp	r5, r4
 8000496:	d903      	bls.n	80004a0 <__aeabi_lmul+0x34>
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	025b      	lsls	r3, r3, #9
 800049c:	4698      	mov	r8, r3
 800049e:	44c4      	add	ip, r8
 80004a0:	464b      	mov	r3, r9
 80004a2:	4343      	muls	r3, r0
 80004a4:	4351      	muls	r1, r2
 80004a6:	0c25      	lsrs	r5, r4, #16
 80004a8:	0436      	lsls	r6, r6, #16
 80004aa:	4465      	add	r5, ip
 80004ac:	0c36      	lsrs	r6, r6, #16
 80004ae:	0424      	lsls	r4, r4, #16
 80004b0:	19a4      	adds	r4, r4, r6
 80004b2:	195b      	adds	r3, r3, r5
 80004b4:	1859      	adds	r1, r3, r1
 80004b6:	0020      	movs	r0, r4
 80004b8:	bc0c      	pop	{r2, r3}
 80004ba:	4690      	mov	r8, r2
 80004bc:	4699      	mov	r9, r3
 80004be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080004c0 <__udivmoddi4>:
 80004c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004c2:	464f      	mov	r7, r9
 80004c4:	4646      	mov	r6, r8
 80004c6:	46d6      	mov	lr, sl
 80004c8:	b5c0      	push	{r6, r7, lr}
 80004ca:	0004      	movs	r4, r0
 80004cc:	b082      	sub	sp, #8
 80004ce:	000d      	movs	r5, r1
 80004d0:	4691      	mov	r9, r2
 80004d2:	4698      	mov	r8, r3
 80004d4:	428b      	cmp	r3, r1
 80004d6:	d82f      	bhi.n	8000538 <__udivmoddi4+0x78>
 80004d8:	d02c      	beq.n	8000534 <__udivmoddi4+0x74>
 80004da:	4641      	mov	r1, r8
 80004dc:	4648      	mov	r0, r9
 80004de:	f000 f8cf 	bl	8000680 <__clzdi2>
 80004e2:	0029      	movs	r1, r5
 80004e4:	0006      	movs	r6, r0
 80004e6:	0020      	movs	r0, r4
 80004e8:	f000 f8ca 	bl	8000680 <__clzdi2>
 80004ec:	1a33      	subs	r3, r6, r0
 80004ee:	469c      	mov	ip, r3
 80004f0:	3b20      	subs	r3, #32
 80004f2:	469a      	mov	sl, r3
 80004f4:	d500      	bpl.n	80004f8 <__udivmoddi4+0x38>
 80004f6:	e076      	b.n	80005e6 <__udivmoddi4+0x126>
 80004f8:	464b      	mov	r3, r9
 80004fa:	4652      	mov	r2, sl
 80004fc:	4093      	lsls	r3, r2
 80004fe:	001f      	movs	r7, r3
 8000500:	464b      	mov	r3, r9
 8000502:	4662      	mov	r2, ip
 8000504:	4093      	lsls	r3, r2
 8000506:	001e      	movs	r6, r3
 8000508:	42af      	cmp	r7, r5
 800050a:	d828      	bhi.n	800055e <__udivmoddi4+0x9e>
 800050c:	d025      	beq.n	800055a <__udivmoddi4+0x9a>
 800050e:	4653      	mov	r3, sl
 8000510:	1ba4      	subs	r4, r4, r6
 8000512:	41bd      	sbcs	r5, r7
 8000514:	2b00      	cmp	r3, #0
 8000516:	da00      	bge.n	800051a <__udivmoddi4+0x5a>
 8000518:	e07b      	b.n	8000612 <__udivmoddi4+0x152>
 800051a:	2200      	movs	r2, #0
 800051c:	2300      	movs	r3, #0
 800051e:	9200      	str	r2, [sp, #0]
 8000520:	9301      	str	r3, [sp, #4]
 8000522:	2301      	movs	r3, #1
 8000524:	4652      	mov	r2, sl
 8000526:	4093      	lsls	r3, r2
 8000528:	9301      	str	r3, [sp, #4]
 800052a:	2301      	movs	r3, #1
 800052c:	4662      	mov	r2, ip
 800052e:	4093      	lsls	r3, r2
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	e018      	b.n	8000566 <__udivmoddi4+0xa6>
 8000534:	4282      	cmp	r2, r0
 8000536:	d9d0      	bls.n	80004da <__udivmoddi4+0x1a>
 8000538:	2200      	movs	r2, #0
 800053a:	2300      	movs	r3, #0
 800053c:	9200      	str	r2, [sp, #0]
 800053e:	9301      	str	r3, [sp, #4]
 8000540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <__udivmoddi4+0x8a>
 8000546:	601c      	str	r4, [r3, #0]
 8000548:	605d      	str	r5, [r3, #4]
 800054a:	9800      	ldr	r0, [sp, #0]
 800054c:	9901      	ldr	r1, [sp, #4]
 800054e:	b002      	add	sp, #8
 8000550:	bc1c      	pop	{r2, r3, r4}
 8000552:	4690      	mov	r8, r2
 8000554:	4699      	mov	r9, r3
 8000556:	46a2      	mov	sl, r4
 8000558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800055a:	42a3      	cmp	r3, r4
 800055c:	d9d7      	bls.n	800050e <__udivmoddi4+0x4e>
 800055e:	2200      	movs	r2, #0
 8000560:	2300      	movs	r3, #0
 8000562:	9200      	str	r2, [sp, #0]
 8000564:	9301      	str	r3, [sp, #4]
 8000566:	4663      	mov	r3, ip
 8000568:	2b00      	cmp	r3, #0
 800056a:	d0e9      	beq.n	8000540 <__udivmoddi4+0x80>
 800056c:	07fb      	lsls	r3, r7, #31
 800056e:	4698      	mov	r8, r3
 8000570:	4641      	mov	r1, r8
 8000572:	0872      	lsrs	r2, r6, #1
 8000574:	430a      	orrs	r2, r1
 8000576:	087b      	lsrs	r3, r7, #1
 8000578:	4666      	mov	r6, ip
 800057a:	e00e      	b.n	800059a <__udivmoddi4+0xda>
 800057c:	42ab      	cmp	r3, r5
 800057e:	d101      	bne.n	8000584 <__udivmoddi4+0xc4>
 8000580:	42a2      	cmp	r2, r4
 8000582:	d80c      	bhi.n	800059e <__udivmoddi4+0xde>
 8000584:	1aa4      	subs	r4, r4, r2
 8000586:	419d      	sbcs	r5, r3
 8000588:	2001      	movs	r0, #1
 800058a:	1924      	adds	r4, r4, r4
 800058c:	416d      	adcs	r5, r5
 800058e:	2100      	movs	r1, #0
 8000590:	3e01      	subs	r6, #1
 8000592:	1824      	adds	r4, r4, r0
 8000594:	414d      	adcs	r5, r1
 8000596:	2e00      	cmp	r6, #0
 8000598:	d006      	beq.n	80005a8 <__udivmoddi4+0xe8>
 800059a:	42ab      	cmp	r3, r5
 800059c:	d9ee      	bls.n	800057c <__udivmoddi4+0xbc>
 800059e:	3e01      	subs	r6, #1
 80005a0:	1924      	adds	r4, r4, r4
 80005a2:	416d      	adcs	r5, r5
 80005a4:	2e00      	cmp	r6, #0
 80005a6:	d1f8      	bne.n	800059a <__udivmoddi4+0xda>
 80005a8:	9800      	ldr	r0, [sp, #0]
 80005aa:	9901      	ldr	r1, [sp, #4]
 80005ac:	4653      	mov	r3, sl
 80005ae:	1900      	adds	r0, r0, r4
 80005b0:	4169      	adcs	r1, r5
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	db23      	blt.n	80005fe <__udivmoddi4+0x13e>
 80005b6:	002b      	movs	r3, r5
 80005b8:	4652      	mov	r2, sl
 80005ba:	40d3      	lsrs	r3, r2
 80005bc:	002a      	movs	r2, r5
 80005be:	4664      	mov	r4, ip
 80005c0:	40e2      	lsrs	r2, r4
 80005c2:	001c      	movs	r4, r3
 80005c4:	4653      	mov	r3, sl
 80005c6:	0015      	movs	r5, r2
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	db2d      	blt.n	8000628 <__udivmoddi4+0x168>
 80005cc:	0026      	movs	r6, r4
 80005ce:	4657      	mov	r7, sl
 80005d0:	40be      	lsls	r6, r7
 80005d2:	0033      	movs	r3, r6
 80005d4:	0026      	movs	r6, r4
 80005d6:	4667      	mov	r7, ip
 80005d8:	40be      	lsls	r6, r7
 80005da:	0032      	movs	r2, r6
 80005dc:	1a80      	subs	r0, r0, r2
 80005de:	4199      	sbcs	r1, r3
 80005e0:	9000      	str	r0, [sp, #0]
 80005e2:	9101      	str	r1, [sp, #4]
 80005e4:	e7ac      	b.n	8000540 <__udivmoddi4+0x80>
 80005e6:	4662      	mov	r2, ip
 80005e8:	2320      	movs	r3, #32
 80005ea:	1a9b      	subs	r3, r3, r2
 80005ec:	464a      	mov	r2, r9
 80005ee:	40da      	lsrs	r2, r3
 80005f0:	4661      	mov	r1, ip
 80005f2:	0013      	movs	r3, r2
 80005f4:	4642      	mov	r2, r8
 80005f6:	408a      	lsls	r2, r1
 80005f8:	0017      	movs	r7, r2
 80005fa:	431f      	orrs	r7, r3
 80005fc:	e780      	b.n	8000500 <__udivmoddi4+0x40>
 80005fe:	4662      	mov	r2, ip
 8000600:	2320      	movs	r3, #32
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	002a      	movs	r2, r5
 8000606:	4666      	mov	r6, ip
 8000608:	409a      	lsls	r2, r3
 800060a:	0023      	movs	r3, r4
 800060c:	40f3      	lsrs	r3, r6
 800060e:	4313      	orrs	r3, r2
 8000610:	e7d4      	b.n	80005bc <__udivmoddi4+0xfc>
 8000612:	4662      	mov	r2, ip
 8000614:	2320      	movs	r3, #32
 8000616:	2100      	movs	r1, #0
 8000618:	1a9b      	subs	r3, r3, r2
 800061a:	2200      	movs	r2, #0
 800061c:	9100      	str	r1, [sp, #0]
 800061e:	9201      	str	r2, [sp, #4]
 8000620:	2201      	movs	r2, #1
 8000622:	40da      	lsrs	r2, r3
 8000624:	9201      	str	r2, [sp, #4]
 8000626:	e780      	b.n	800052a <__udivmoddi4+0x6a>
 8000628:	2320      	movs	r3, #32
 800062a:	4662      	mov	r2, ip
 800062c:	0026      	movs	r6, r4
 800062e:	1a9b      	subs	r3, r3, r2
 8000630:	40de      	lsrs	r6, r3
 8000632:	002f      	movs	r7, r5
 8000634:	46b0      	mov	r8, r6
 8000636:	4666      	mov	r6, ip
 8000638:	40b7      	lsls	r7, r6
 800063a:	4646      	mov	r6, r8
 800063c:	003b      	movs	r3, r7
 800063e:	4333      	orrs	r3, r6
 8000640:	e7c8      	b.n	80005d4 <__udivmoddi4+0x114>
 8000642:	46c0      	nop			; (mov r8, r8)

08000644 <__clzsi2>:
 8000644:	211c      	movs	r1, #28
 8000646:	2301      	movs	r3, #1
 8000648:	041b      	lsls	r3, r3, #16
 800064a:	4298      	cmp	r0, r3
 800064c:	d301      	bcc.n	8000652 <__clzsi2+0xe>
 800064e:	0c00      	lsrs	r0, r0, #16
 8000650:	3910      	subs	r1, #16
 8000652:	0a1b      	lsrs	r3, r3, #8
 8000654:	4298      	cmp	r0, r3
 8000656:	d301      	bcc.n	800065c <__clzsi2+0x18>
 8000658:	0a00      	lsrs	r0, r0, #8
 800065a:	3908      	subs	r1, #8
 800065c:	091b      	lsrs	r3, r3, #4
 800065e:	4298      	cmp	r0, r3
 8000660:	d301      	bcc.n	8000666 <__clzsi2+0x22>
 8000662:	0900      	lsrs	r0, r0, #4
 8000664:	3904      	subs	r1, #4
 8000666:	a202      	add	r2, pc, #8	; (adr r2, 8000670 <__clzsi2+0x2c>)
 8000668:	5c10      	ldrb	r0, [r2, r0]
 800066a:	1840      	adds	r0, r0, r1
 800066c:	4770      	bx	lr
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	02020304 	.word	0x02020304
 8000674:	01010101 	.word	0x01010101
	...

08000680 <__clzdi2>:
 8000680:	b510      	push	{r4, lr}
 8000682:	2900      	cmp	r1, #0
 8000684:	d103      	bne.n	800068e <__clzdi2+0xe>
 8000686:	f7ff ffdd 	bl	8000644 <__clzsi2>
 800068a:	3020      	adds	r0, #32
 800068c:	e002      	b.n	8000694 <__clzdi2+0x14>
 800068e:	1c08      	adds	r0, r1, #0
 8000690:	f7ff ffd8 	bl	8000644 <__clzsi2>
 8000694:	bd10      	pop	{r4, pc}
 8000696:	46c0      	nop			; (mov r8, r8)

08000698 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8000698:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800069a:	f000 fbc9 	bl	8000e30 <SystemApp_Init>
  /* USER CODE END MX_LoRaWAN_Init_2 */
//  LoRaWAN_Init();
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800069e:	bd10      	pop	{r4, pc}

080006a0 <HAL_I2C_MspInit>:
  }

  return ret;
}
extern void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006a0:	b510      	push	{r4, lr}
 80006a2:	0004      	movs	r4, r0
 80006a4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a6:	2214      	movs	r2, #20
 80006a8:	2100      	movs	r1, #0
 80006aa:	a801      	add	r0, sp, #4
 80006ac:	f003 fdf1 	bl	8004292 <memset>
  if(i2cHandle->Instance==I2C1)
 80006b0:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <HAL_I2C_MspInit+0x58>)
 80006b2:	6822      	ldr	r2, [r4, #0]
 80006b4:	429a      	cmp	r2, r3
 80006b6:	d11c      	bne.n	80006f2 <HAL_I2C_MspInit+0x52>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b8:	2002      	movs	r0, #2
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <HAL_I2C_MspInit+0x5c>)
 80006bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80006be:	4301      	orrs	r1, r0
 80006c0:	62d9      	str	r1, [r3, #44]	; 0x2c
 80006c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006c4:	4002      	ands	r2, r0
 80006c6:	9200      	str	r2, [sp, #0]
 80006c8:	9a00      	ldr	r2, [sp, #0]
    /**I2C1 GPIO Configuration    
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006ca:	2280      	movs	r2, #128	; 0x80
 80006cc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80006ce:	0392      	lsls	r2, r2, #14
 80006d0:	430a      	orrs	r2, r1
 80006d2:	639a      	str	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80006d4:	23c0      	movs	r3, #192	; 0xc0
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006da:	2312      	movs	r3, #18
 80006dc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006de:	3b11      	subs	r3, #17
 80006e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e2:	181b      	adds	r3, r3, r0
 80006e4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006e8:	3301      	adds	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <HAL_I2C_MspInit+0x60>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006ec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ee:	f001 f949 	bl	8001984 <HAL_GPIO_Init>
  }
}
 80006f2:	b006      	add	sp, #24
 80006f4:	bd10      	pop	{r4, pc}
 80006f6:	46c0      	nop			; (mov r8, r8)
 80006f8:	40005400 	.word	0x40005400
 80006fc:	40021000 	.word	0x40021000
 8000700:	50000400 	.word	0x50000400

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b510      	push	{r4, lr}
 8000706:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	222c      	movs	r2, #44	; 0x2c
 800070a:	2100      	movs	r1, #0
 800070c:	a807      	add	r0, sp, #28
 800070e:	f003 fdc0 	bl	8004292 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2214      	movs	r2, #20
 8000714:	2100      	movs	r1, #0
 8000716:	a801      	add	r0, sp, #4
 8000718:	f003 fdbb 	bl	8004292 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 800071c:	2302      	movs	r3, #2
 800071e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8000720:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 8000722:	2380      	movs	r3, #128	; 0x80
 8000724:	031b      	lsls	r3, r3, #12
 8000726:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8000728:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800072a:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800072e:	041b      	lsls	r3, r3, #16

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8000732:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000734:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8000736:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f001 fc2a 	bl	8001f90 <HAL_RCC_OscConfig>
 800073c:	2800      	cmp	r0, #0
 800073e:	d000      	beq.n	8000742 <SystemClock_Config+0x3e>
 8000740:	e7fe      	b.n	8000740 <SystemClock_Config+0x3c>
  {
    Error_Handler();
  }

  /* Set Voltage scale1 as MCU will run at 32MHz */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	2380      	movs	r3, #128	; 0x80
 8000744:	4a10      	ldr	r2, [pc, #64]	; (8000788 <SystemClock_Config+0x84>)
 8000746:	055b      	lsls	r3, r3, #21
 8000748:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800074a:	430b      	orrs	r3, r1
 800074c:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <SystemClock_Config+0x88>)
 8000750:	490f      	ldr	r1, [pc, #60]	; (8000790 <SystemClock_Config+0x8c>)
 8000752:	681a      	ldr	r2, [r3, #0]
 8000754:	4011      	ands	r1, r2
 8000756:	2280      	movs	r2, #128	; 0x80
 8000758:	0112      	lsls	r2, r2, #4
 800075a:	430a      	orrs	r2, r1
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	001a      	movs	r2, r3

  /* Poll VOSF bit of in PWR_CSR. Wait until it is reset to 0 */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 8000760:	6853      	ldr	r3, [r2, #4]
 8000762:	4023      	ands	r3, r4
 8000764:	d1fc      	bne.n	8000760 <SystemClock_Config+0x5c>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
  clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000766:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000768:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800076a:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800076c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	3a0c      	subs	r2, #12
 8000770:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000772:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000774:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000776:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000778:	f001 fe9a 	bl	80024b0 <HAL_RCC_ClockConfig>
 800077c:	2800      	cmp	r0, #0
 800077e:	d000      	beq.n	8000782 <SystemClock_Config+0x7e>
 8000780:	e7fe      	b.n	8000780 <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
}
 8000782:	b014      	add	sp, #80	; 0x50
 8000784:	bd10      	pop	{r4, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	40021000 	.word	0x40021000
 800078c:	40007000 	.word	0x40007000
 8000790:	ffffe7ff 	.word	0xffffe7ff

08000794 <main>:
{
 8000794:	b5f0      	push	{r4, r5, r6, r7, lr}
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000796:	2602      	movs	r6, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000798:	2501      	movs	r5, #1
{
 800079a:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 800079c:	f000 ff30 	bl	8001600 <HAL_Init>
  SystemClock_Config();
 80007a0:	f7ff ffb0 	bl	8000704 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	2208      	movs	r2, #8
 80007a6:	2100      	movs	r1, #0
 80007a8:	a806      	add	r0, sp, #24
 80007aa:	f003 fd72 	bl	8004292 <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ae:	4b3c      	ldr	r3, [pc, #240]	; (80008a0 <main+0x10c>)

  /*Configure GPIO pins : PA1 PA7 PA6 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b0:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b4:	a903      	add	r1, sp, #12
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4332      	orrs	r2, r6
 80007b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007bc:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4032      	ands	r2, r6
 80007c0:	9201      	str	r2, [sp, #4]
 80007c2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007c6:	432a      	orrs	r2, r5
 80007c8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007cc:	9505      	str	r5, [sp, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ce:	402b      	ands	r3, r5
 80007d0:	9302      	str	r3, [sp, #8]
 80007d2:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5;
 80007d4:	23e2      	movs	r3, #226	; 0xe2
 80007d6:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d8:	4b32      	ldr	r3, [pc, #200]	; (80008a4 <main+0x110>)
 80007da:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f001 f8d2 	bl	8001984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2005      	movs	r0, #5
 80007e4:	0011      	movs	r1, r2
 80007e6:	f000 ff43 	bl	8001670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 80007ea:	2005      	movs	r0, #5
 80007ec:	f000 ff6a 	bl	80016c4 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2007      	movs	r0, #7
 80007f4:	0011      	movs	r1, r2
 80007f6:	f000 ff3b 	bl	8001670 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80007fa:	2007      	movs	r0, #7
 80007fc:	f000 ff62 	bl	80016c4 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8000800:	4c29      	ldr	r4, [pc, #164]	; (80008a8 <main+0x114>)
 8000802:	4b2a      	ldr	r3, [pc, #168]	; (80008ac <main+0x118>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000804:	0020      	movs	r0, r4
  hi2c1.Instance = I2C1;
 8000806:	6023      	str	r3, [r4, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000808:	23e1      	movs	r3, #225	; 0xe1
 800080a:	00db      	lsls	r3, r3, #3
 800080c:	6063      	str	r3, [r4, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800080e:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000810:	60e5      	str	r5, [r4, #12]
  hi2c1.Init.OwnAddress1 = 0;
 8000812:	60a3      	str	r3, [r4, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000814:	6123      	str	r3, [r4, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000816:	6163      	str	r3, [r4, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000818:	61a3      	str	r3, [r4, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800081a:	61e3      	str	r3, [r4, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800081c:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800081e:	f001 fa1f 	bl	8001c60 <HAL_I2C_Init>
 8000822:	1e01      	subs	r1, r0, #0
 8000824:	d000      	beq.n	8000828 <main+0x94>
 8000826:	e7fe      	b.n	8000826 <main+0x92>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000828:	0020      	movs	r0, r4
 800082a:	f001 fb01 	bl	8001e30 <HAL_I2CEx_ConfigAnalogFilter>
 800082e:	1e01      	subs	r1, r0, #0
 8000830:	d000      	beq.n	8000834 <main+0xa0>
 8000832:	e7fe      	b.n	8000832 <main+0x9e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000834:	0020      	movs	r0, r4
 8000836:	f001 fb21 	bl	8001e7c <HAL_I2CEx_ConfigDigitalFilter>
 800083a:	1e07      	subs	r7, r0, #0
 800083c:	d000      	beq.n	8000840 <main+0xac>
 800083e:	e7fe      	b.n	800083e <main+0xaa>
  MX_LoRaWAN_Init();
 8000840:	f7ff ff2a 	bl	8000698 <MX_LoRaWAN_Init>
  HAL_Delay(1000);
 8000844:	20fa      	movs	r0, #250	; 0xfa
 8000846:	0080      	lsls	r0, r0, #2
 8000848:	f000 fb1e 	bl	8000e88 <HAL_Delay>
  APP_LOG(TS_OFF, VLEVEL_M, "I2C Bus Scanning Start! \r\n");
 800084c:	4b18      	ldr	r3, [pc, #96]	; (80008b0 <main+0x11c>)
 800084e:	003a      	movs	r2, r7
 8000850:	0039      	movs	r1, r7
 8000852:	0030      	movs	r0, r6
 8000854:	f003 f9c4 	bl	8003be0 <UTIL_ADV_TRACE_COND_FSend>
    ret = HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5);
 8000858:	0069      	lsls	r1, r5, #1
 800085a:	b289      	uxth	r1, r1
 800085c:	2305      	movs	r3, #5
 800085e:	2203      	movs	r2, #3
 8000860:	0020      	movs	r0, r4
 8000862:	f001 fa53 	bl	8001d0c <HAL_I2C_IsDeviceReady>
 8000866:	1e06      	subs	r6, r0, #0
    if (ret != HAL_OK) /* No ACK Received At That Address */
 8000868:	d00f      	beq.n	800088a <main+0xf6>
    	APP_LOG(TS_OFF, VLEVEL_M, Space);
 800086a:	2200      	movs	r2, #0
 800086c:	0011      	movs	r1, r2
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <main+0x120>)
        APP_LOG(TS_OFF, VLEVEL_M, Buffer);
 8000870:	2002      	movs	r0, #2
 8000872:	3501      	adds	r5, #1
 8000874:	f003 f9b4 	bl	8003be0 <UTIL_ADV_TRACE_COND_FSend>
  for(i=1; i<128; i++)
 8000878:	2d80      	cmp	r5, #128	; 0x80
 800087a:	d1ed      	bne.n	8000858 <main+0xc4>
  APP_LOG(TS_OFF, VLEVEL_M, "I2C Bus Scanning Done! \r\n");
 800087c:	2200      	movs	r2, #0
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <main+0x124>)
 8000880:	0011      	movs	r1, r2
 8000882:	2002      	movs	r0, #2
 8000884:	f003 f9ac 	bl	8003be0 <UTIL_ADV_TRACE_COND_FSend>
 8000888:	e7fe      	b.n	8000888 <main+0xf4>
        sprintf(Buffer, "0x%X", (char)i);
 800088a:	4f0c      	ldr	r7, [pc, #48]	; (80008bc <main+0x128>)
 800088c:	002a      	movs	r2, r5
 800088e:	490c      	ldr	r1, [pc, #48]	; (80008c0 <main+0x12c>)
 8000890:	0038      	movs	r0, r7
 8000892:	f003 fd07 	bl	80042a4 <siprintf>
        APP_LOG(TS_OFF, VLEVEL_M, Buffer);
 8000896:	003b      	movs	r3, r7
 8000898:	0032      	movs	r2, r6
 800089a:	0031      	movs	r1, r6
 800089c:	e7e8      	b.n	8000870 <main+0xdc>
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	40021000 	.word	0x40021000
 80008a4:	10110000 	.word	0x10110000
 80008a8:	20000430 	.word	0x20000430
 80008ac:	40005400 	.word	0x40005400
 80008b0:	08004b7a 	.word	0x08004b7a
 80008b4:	20000000 	.word	0x20000000
 80008b8:	08004b9a 	.word	0x08004b9a
 80008bc:	20000090 	.word	0x20000090
 80008c0:	08004b95 	.word	0x08004b95

080008c4 <EXTI0_1_IRQHandler>:

}

void EXTI0_1_IRQHandler(void) {
	int8_t var = 0;
}
 80008c4:	4770      	bx	lr

080008c6 <EXTI4_15_IRQHandler>:
 80008c6:	4770      	bx	lr

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	e7fe      	b.n	80008c8 <Error_Handler>
	...

080008cc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80008cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 80008ce:	2400      	movs	r4, #0
{
 80008d0:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 80008d2:	af01      	add	r7, sp, #4
 80008d4:	2214      	movs	r2, #20
 80008d6:	2100      	movs	r1, #0
 80008d8:	0038      	movs	r0, r7
  RTC_AlarmTypeDef sAlarm = {0};
 80008da:	ae06      	add	r6, sp, #24
  RTC_TimeTypeDef sTime = {0};
 80008dc:	f003 fcd9 	bl	8004292 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 80008e0:	2228      	movs	r2, #40	; 0x28
 80008e2:	0021      	movs	r1, r4
 80008e4:	0030      	movs	r0, r6
  RTC_DateTypeDef sDate = {0};
 80008e6:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80008e8:	f003 fcd3 	bl	8004292 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008ec:	4d23      	ldr	r5, [pc, #140]	; (800097c <MX_RTC_Init+0xb0>)
 80008ee:	4b24      	ldr	r3, [pc, #144]	; (8000980 <MX_RTC_Init+0xb4>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80008f0:	0028      	movs	r0, r5
  hrtc.Instance = RTC;
 80008f2:	602b      	str	r3, [r5, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80008f4:	231f      	movs	r3, #31
 80008f6:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80008f8:	4b22      	ldr	r3, [pc, #136]	; (8000984 <MX_RTC_Init+0xb8>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008fa:	606c      	str	r4, [r5, #4]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80008fc:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80008fe:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000900:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000902:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000904:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000906:	f002 f863 	bl	80029d0 <HAL_RTC_Init>
 800090a:	42a0      	cmp	r0, r4
 800090c:	d001      	beq.n	8000912 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 800090e:	f7ff ffdb 	bl	80008c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8000912:	803c      	strh	r4, [r7, #0]
  sTime.Minutes = 0;
 8000914:	70bc      	strb	r4, [r7, #2]
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000916:	2200      	movs	r2, #0
 8000918:	0039      	movs	r1, r7
 800091a:	0028      	movs	r0, r5
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800091c:	60fc      	str	r4, [r7, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800091e:	613c      	str	r4, [r7, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8000920:	f002 f8be 	bl	8002aa0 <HAL_RTC_SetTime>
 8000924:	2800      	cmp	r0, #0
 8000926:	d001      	beq.n	800092c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000928:	f7ff ffce 	bl	80008c8 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800092c:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_RTC_Init+0xbc>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800092e:	2200      	movs	r2, #0
 8000930:	4669      	mov	r1, sp
 8000932:	0028      	movs	r0, r5
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000934:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000936:	f002 f933 	bl	8002ba0 <HAL_RTC_SetDate>
 800093a:	2800      	cmp	r0, #0
 800093c:	d001      	beq.n	8000942 <MX_RTC_Init+0x76>
  {
    Error_Handler();
 800093e:	f7ff ffc3 	bl	80008c8 <Error_Handler>
  sAlarm.AlarmTime.Seconds = 0;
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8000942:	23a0      	movs	r3, #160	; 0xa0
 8000944:	051b      	lsls	r3, r3, #20
 8000946:	61b3      	str	r3, [r6, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 30;
 8000948:	2319      	movs	r3, #25
 800094a:	211e      	movs	r1, #30
 800094c:	446b      	add	r3, sp
 800094e:	77d9      	strb	r1, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8000950:	2380      	movs	r3, #128	; 0x80
  sAlarm.AlarmTime.Hours = 0;
 8000952:	2200      	movs	r2, #0
  sAlarm.Alarm = RTC_ALARM_A;
 8000954:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8000956:	0031      	movs	r1, r6
 8000958:	0028      	movs	r0, r5
  sAlarm.AlarmTime.Hours = 0;
 800095a:	8032      	strh	r2, [r6, #0]
  sAlarm.AlarmTime.Minutes = 0;
 800095c:	70b2      	strb	r2, [r6, #2]
  sAlarm.AlarmTime.SubSeconds = 0;
 800095e:	6072      	str	r2, [r6, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000960:	60f2      	str	r2, [r6, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000962:	6132      	str	r2, [r6, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000964:	6172      	str	r2, [r6, #20]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000966:	61f2      	str	r2, [r6, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8000968:	6273      	str	r3, [r6, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800096a:	f002 f985 	bl	8002c78 <HAL_RTC_SetAlarm_IT>
 800096e:	2800      	cmp	r0, #0
 8000970:	d001      	beq.n	8000976 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8000972:	f7ff ffa9 	bl	80008c8 <Error_Handler>
  }

}
 8000976:	b011      	add	sp, #68	; 0x44
 8000978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	2000047c 	.word	0x2000047c
 8000980:	40002800 	.word	0x40002800
 8000984:	000003ff 	.word	0x000003ff
 8000988:	00010101 	.word	0x00010101

0800098c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 800098c:	b510      	push	{r4, lr}
 800098e:	0004      	movs	r4, r0
 8000990:	b08e      	sub	sp, #56	; 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	2238      	movs	r2, #56	; 0x38
 8000994:	2100      	movs	r1, #0
 8000996:	4668      	mov	r0, sp
 8000998:	f003 fc7b 	bl	8004292 <memset>
  if (rtcHandle->Instance == RTC)
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_RTC_MspInit+0x50>)
 800099e:	6822      	ldr	r2, [r4, #0]
 80009a0:	429a      	cmp	r2, r3
 80009a2:	d118      	bne.n	80009d6 <HAL_RTC_MspInit+0x4a>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80009a4:	2304      	movs	r3, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a6:	4668      	mov	r0, sp
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 80009a8:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009aa:	33fc      	adds	r3, #252	; 0xfc
 80009ac:	9302      	str	r3, [sp, #8]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ae:	f001 faef 	bl	8001f90 <HAL_RCC_OscConfig>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	d001      	beq.n	80009ba <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 80009b6:	f7ff ff87 	bl	80008c8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009ba:	2380      	movs	r3, #128	; 0x80
 80009bc:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_RTC_MspInit+0x54>)
 80009be:	02db      	lsls	r3, r3, #11
 80009c0:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80009c2:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 80009c4:	430b      	orrs	r3, r1
 80009c6:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	0011      	movs	r1, r2
 80009cc:	f000 fe50 	bl	8001670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80009d0:	2002      	movs	r0, #2
 80009d2:	f000 fe77 	bl	80016c4 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 80009d6:	b00e      	add	sp, #56	; 0x38
 80009d8:	bd10      	pop	{r4, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40002800 	.word	0x40002800
 80009e0:	40021000 	.word	0x40021000

080009e4 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 80009e4:	4b01      	ldr	r3, [pc, #4]	; (80009ec <RTC_IF_GetTimerContext+0x8>)
 80009e6:	6818      	ldr	r0, [r3, #0]
}
 80009e8:	4770      	bx	lr
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	200000ac 	.word	0x200000ac

080009f0 <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 80009f0:	2003      	movs	r0, #3
 80009f2:	4770      	bx	lr

080009f4 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80009f4:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80009f6:	0e41      	lsrs	r1, r0, #25
 80009f8:	227d      	movs	r2, #125	; 0x7d
 80009fa:	01c0      	lsls	r0, r0, #7
 80009fc:	2300      	movs	r3, #0
 80009fe:	f7ff fd15 	bl	800042c <__aeabi_uldivmod>
}
 8000a02:	bd10      	pop	{r4, pc}

08000a04 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8000a04:	b510      	push	{r4, lr}
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8000a06:	227d      	movs	r2, #125	; 0x7d
 8000a08:	2300      	movs	r3, #0
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	f7ff fd2e 	bl	800046c <__aeabi_lmul>
 8000a10:	0649      	lsls	r1, r1, #25
 8000a12:	09c0      	lsrs	r0, r0, #7
 8000a14:	4308      	orrs	r0, r1
}
 8000a16:	bd10      	pop	{r4, pc}

08000a18 <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000a18:	4806      	ldr	r0, [pc, #24]	; (8000a34 <RTC_IF_StopTimer+0x1c>)
 8000a1a:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <RTC_IF_StopTimer+0x20>)
 8000a1c:	6801      	ldr	r1, [r0, #0]
{
 8000a1e:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000a20:	68ca      	ldr	r2, [r1, #12]
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	4313      	orrs	r3, r2
 8000a26:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000a28:	2180      	movs	r1, #128	; 0x80
 8000a2a:	0049      	lsls	r1, r1, #1
 8000a2c:	f001 ff0a 	bl	8002844 <HAL_RTC_DeactivateAlarm>
}
 8000a30:	2000      	movs	r0, #0
 8000a32:	bd10      	pop	{r4, pc}
 8000a34:	2000047c 	.word	0x2000047c
 8000a38:	fffffe7f 	.word	0xfffffe7f

08000a3c <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8000a3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8000a3e:	4e25      	ldr	r6, [pc, #148]	; (8000ad4 <RTC_GetCalendarValue+0x98>)
{
 8000a40:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8000a42:	2200      	movs	r2, #0
 8000a44:	0030      	movs	r0, r6
{
 8000a46:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8000a48:	f002 f9e6 	bl	8002e18 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000a4c:	4f22      	ldr	r7, [pc, #136]	; (8000ad8 <RTC_GetCalendarValue+0x9c>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a52:	0029      	movs	r1, r5
 8000a54:	0030      	movs	r0, r6
 8000a56:	9301      	str	r3, [sp, #4]
 8000a58:	f002 fa08 	bl	8002e6c <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	0021      	movs	r1, r4
 8000a60:	0030      	movs	r0, r6
 8000a62:	f002 f9d9 	bl	8002e18 <HAL_RTC_GetTime>
 8000a66:	466b      	mov	r3, sp
 8000a68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a6a:	889b      	ldrh	r3, [r3, #4]
 8000a6c:	b292      	uxth	r2, r2

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d1ec      	bne.n	8000a4c <RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8000a72:	2103      	movs	r1, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8000a74:	78ea      	ldrb	r2, [r5, #3]
 8000a76:	4e19      	ldr	r6, [pc, #100]	; (8000adc <RTC_GetCalendarValue+0xa0>)

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8000a78:	786f      	ldrb	r7, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8000a7a:	4356      	muls	r6, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8000a7c:	400a      	ands	r2, r1
 8000a7e:	4253      	negs	r3, r2
 8000a80:	4153      	adcs	r3, r2
 8000a82:	4a17      	ldr	r2, [pc, #92]	; (8000ae0 <RTC_GetCalendarValue+0xa4>)
 8000a84:	425b      	negs	r3, r3
 8000a86:	4013      	ands	r3, r2
 8000a88:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <RTC_GetCalendarValue+0xa8>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8000a8a:	3f01      	subs	r7, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8000a8c:	189b      	adds	r3, r3, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8000a8e:	223d      	movs	r2, #61	; 0x3d
 8000a90:	437a      	muls	r2, r7
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8000a92:	007f      	lsls	r7, r7, #1
 8000a94:	40fb      	lsrs	r3, r7
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8000a96:	3201      	adds	r2, #1
 8000a98:	0fd0      	lsrs	r0, r2, #31
 8000a9a:	1882      	adds	r2, r0, r2

  calendarValue += (RTC_DateStruct->Date - 1);
 8000a9c:	78a8      	ldrb	r0, [r5, #2]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8000a9e:	3603      	adds	r6, #3
 8000aa0:	3801      	subs	r0, #1
 8000aa2:	08b6      	lsrs	r6, r6, #2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8000aa4:	1052      	asrs	r2, r2, #1
 8000aa6:	1986      	adds	r6, r0, r6
 8000aa8:	1996      	adds	r6, r2, r6
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8000aaa:	400b      	ands	r3, r1

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 8000aac:	480e      	ldr	r0, [pc, #56]	; (8000ae8 <RTC_GetCalendarValue+0xac>)
  calendarValue += (RTC_DateStruct->Date - 1);
 8000aae:	1af3      	subs	r3, r6, r3
  calendarValue *= SECONDS_IN_1DAY;
 8000ab0:	4343      	muls	r3, r0

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8000ab2:	20e1      	movs	r0, #225	; 0xe1
 8000ab4:	7822      	ldrb	r2, [r4, #0]
 8000ab6:	0100      	lsls	r0, r0, #4
 8000ab8:	4350      	muls	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8000aba:	223c      	movs	r2, #60	; 0x3c
 8000abc:	7861      	ldrb	r1, [r4, #1]
 8000abe:	434a      	muls	r2, r1
 8000ac0:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8000ac2:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8000ac4:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8000ac6:	18c0      	adds	r0, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8000ac8:	6863      	ldr	r3, [r4, #4]
 8000aca:	0280      	lsls	r0, r0, #10
 8000acc:	1ac0      	subs	r0, r0, r3
 8000ace:	4b07      	ldr	r3, [pc, #28]	; (8000aec <RTC_GetCalendarValue+0xb0>)
 8000ad0:	18c0      	adds	r0, r0, r3

  return (calendarValue);
}
 8000ad2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000ad4:	2000047c 	.word	0x2000047c
 8000ad8:	40002800 	.word	0x40002800
 8000adc:	000005b5 	.word	0x000005b5
 8000ae0:	ffaaaab0 	.word	0xffaaaab0
 8000ae4:	0099aaa0 	.word	0x0099aaa0
 8000ae8:	00015180 	.word	0x00015180
 8000aec:	000003ff 	.word	0x000003ff

08000af0 <RTC_IF_SetTimerContext>:
{
 8000af0:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8000af2:	4c04      	ldr	r4, [pc, #16]	; (8000b04 <RTC_IF_SetTimerContext+0x14>)
 8000af4:	0020      	movs	r0, r4
 8000af6:	1d21      	adds	r1, r4, #4
 8000af8:	3018      	adds	r0, #24
 8000afa:	f7ff ff9f 	bl	8000a3c <RTC_GetCalendarValue>
 8000afe:	6020      	str	r0, [r4, #0]
}
 8000b00:	bd10      	pop	{r4, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	200000ac 	.word	0x200000ac

08000b08 <RTC_IF_GetTimerElapsedTime>:
{
 8000b08:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8000b0a:	a901      	add	r1, sp, #4
 8000b0c:	4668      	mov	r0, sp
 8000b0e:	f7ff ff95 	bl	8000a3c <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8000b12:	4b02      	ldr	r3, [pc, #8]	; (8000b1c <RTC_IF_GetTimerElapsedTime+0x14>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	1ac0      	subs	r0, r0, r3
}
 8000b18:	b007      	add	sp, #28
 8000b1a:	bd00      	pop	{pc}
 8000b1c:	200000ac 	.word	0x200000ac

08000b20 <RTC_IF_StartTimer>:
{
 8000b20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b22:	b087      	sub	sp, #28
 8000b24:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8000b26:	f7ff ffef 	bl	8000b08 <RTC_IF_GetTimerElapsedTime>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8000b2a:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8000b2c:	1a30      	subs	r0, r6, r0
 8000b2e:	2803      	cmp	r0, #3
 8000b30:	d800      	bhi.n	8000b34 <RTC_IF_StartTimer+0x14>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8000b32:	2101      	movs	r1, #1
 8000b34:	2002      	movs	r0, #2
 8000b36:	f003 f90b 	bl	8003d50 <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 8000b3a:	f003 f935 	bl	8003da8 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8000b3e:	4c40      	ldr	r4, [pc, #256]	; (8000c40 <RTC_IF_StartTimer+0x120>)
 8000b40:	7963      	ldrb	r3, [r4, #5]
 8000b42:	68a7      	ldr	r7, [r4, #8]
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	79a3      	ldrb	r3, [r4, #6]
 8000b48:	7925      	ldrb	r5, [r4, #4]
 8000b4a:	9301      	str	r3, [sp, #4]
 8000b4c:	79e3      	ldrb	r3, [r4, #7]
 8000b4e:	9302      	str	r3, [sp, #8]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8000b50:	7e63      	ldrb	r3, [r4, #25]
 8000b52:	9303      	str	r3, [sp, #12]
 8000b54:	7ea3      	ldrb	r3, [r4, #26]
 8000b56:	9304      	str	r3, [sp, #16]
 8000b58:	7ee3      	ldrb	r3, [r4, #27]
 8000b5a:	9305      	str	r3, [sp, #20]
  RTC_IF_StopTimer();
 8000b5c:	f7ff ff5c 	bl	8000a18 <RTC_IF_StopTimer>
  rtcAlarmDays =  RTC_DateStruct.Date;
 8000b60:	4669      	mov	r1, sp
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8000b62:	4a38      	ldr	r2, [pc, #224]	; (8000c44 <RTC_IF_StartTimer+0x124>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8000b64:	05b3      	lsls	r3, r6, #22
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8000b66:	1bd7      	subs	r7, r2, r7
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8000b68:	0d9b      	lsrs	r3, r3, #22
 8000b6a:	18fb      	adds	r3, r7, r3
  rtcAlarmDays =  RTC_DateStruct.Date;
 8000b6c:	8a08      	ldrh	r0, [r1, #16]
 8000b6e:	9204      	str	r2, [sp, #16]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8000b70:	4a35      	ldr	r2, [pc, #212]	; (8000c48 <RTC_IF_StartTimer+0x128>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8000b72:	b29b      	uxth	r3, r3
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8000b74:	0ab6      	lsrs	r6, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 8000b76:	4296      	cmp	r6, r2
 8000b78:	d842      	bhi.n	8000c00 <RTC_IF_StartTimer+0xe0>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8000b7a:	4a34      	ldr	r2, [pc, #208]	; (8000c4c <RTC_IF_StartTimer+0x12c>)
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8000b7c:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8000b7e:	4296      	cmp	r6, r2
 8000b80:	d843      	bhi.n	8000c0a <RTC_IF_StartTimer+0xea>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8000b82:	466a      	mov	r2, sp
 8000b84:	8817      	ldrh	r7, [r2, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8000b86:	2e3b      	cmp	r6, #59	; 0x3b
 8000b88:	d844      	bhi.n	8000c14 <RTC_IF_StartTimer+0xf4>
 8000b8a:	0a9a      	lsrs	r2, r3, #10
 8000b8c:	0291      	lsls	r1, r2, #10
 8000b8e:	1a5b      	subs	r3, r3, r1
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	9300      	str	r3, [sp, #0]
 8000b94:	9b01      	ldr	r3, [sp, #4]
 8000b96:	18d2      	adds	r2, r2, r3
 8000b98:	1996      	adds	r6, r2, r6
 8000b9a:	b2b6      	uxth	r6, r6
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8000b9c:	2e3b      	cmp	r6, #59	; 0x3b
 8000b9e:	d83d      	bhi.n	8000c1c <RTC_IF_StartTimer+0xfc>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8000ba0:	2f3b      	cmp	r7, #59	; 0x3b
 8000ba2:	d840      	bhi.n	8000c26 <RTC_IF_StartTimer+0x106>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8000ba4:	2d17      	cmp	r5, #23
 8000ba6:	d843      	bhi.n	8000c30 <RTC_IF_StartTimer+0x110>
 8000ba8:	9a03      	ldr	r2, [sp, #12]
  if (RTC_DateStruct.Year % 4 == 0)
 8000baa:	9905      	ldr	r1, [sp, #20]
 8000bac:	3a01      	subs	r2, #1
 8000bae:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <RTC_IF_StartTimer+0x130>)
 8000bb0:	0789      	lsls	r1, r1, #30
 8000bb2:	d142      	bne.n	8000c3a <RTC_IF_StartTimer+0x11a>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8000bb4:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8000bb6:	4288      	cmp	r0, r1
 8000bb8:	d902      	bls.n	8000bc0 <RTC_IF_StartTimer+0xa0>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8000bba:	f7ff fc31 	bl	8000420 <__aeabi_idivmod>
 8000bbe:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8000bc0:	9a00      	ldr	r2, [sp, #0]
 8000bc2:	9b04      	ldr	r3, [sp, #16]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8000bc4:	7725      	strb	r5, [r4, #28]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8000bc6:	1a9b      	subs	r3, r3, r2
 8000bc8:	6223      	str	r3, [r4, #32]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 8000bca:	23a0      	movs	r3, #160	; 0xa0
 8000bcc:	051b      	lsls	r3, r3, #20
 8000bce:	6363      	str	r3, [r4, #52]	; 0x34
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8000bd0:	0023      	movs	r3, r4
 8000bd2:	333c      	adds	r3, #60	; 0x3c
 8000bd4:	7018      	strb	r0, [r3, #0]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8000bd6:	9b02      	ldr	r3, [sp, #8]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000bd8:	2500      	movs	r5, #0
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8000bda:	77e3      	strb	r3, [r4, #31]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8000bdc:	0021      	movs	r1, r4
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8000bde:	2380      	movs	r3, #128	; 0x80
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8000be0:	311c      	adds	r1, #28
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8000be2:	005b      	lsls	r3, r3, #1
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8000be4:	002a      	movs	r2, r5
 8000be6:	481b      	ldr	r0, [pc, #108]	; (8000c54 <RTC_IF_StartTimer+0x134>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8000be8:	77a6      	strb	r6, [r4, #30]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8000bea:	7767      	strb	r7, [r4, #29]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000bec:	63a5      	str	r5, [r4, #56]	; 0x38
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8000bee:	6325      	str	r5, [r4, #48]	; 0x30
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8000bf0:	6423      	str	r3, [r4, #64]	; 0x40
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000bf2:	62a5      	str	r5, [r4, #40]	; 0x28
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000bf4:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8000bf6:	f002 f83f 	bl	8002c78 <HAL_RTC_SetAlarm_IT>
}
 8000bfa:	0028      	movs	r0, r5
 8000bfc:	b007      	add	sp, #28
 8000bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 8000c00:	4915      	ldr	r1, [pc, #84]	; (8000c58 <RTC_IF_StartTimer+0x138>)
    rtcAlarmDays++;
 8000c02:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 8000c04:	1876      	adds	r6, r6, r1
    rtcAlarmDays++;
 8000c06:	b280      	uxth	r0, r0
 8000c08:	e7b5      	b.n	8000b76 <RTC_IF_StartTimer+0x56>
    timeoutValue -= SECONDS_IN_1HOUR;
 8000c0a:	4914      	ldr	r1, [pc, #80]	; (8000c5c <RTC_IF_StartTimer+0x13c>)
    rtcAlarmHours++;
 8000c0c:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 8000c0e:	1876      	adds	r6, r6, r1
    rtcAlarmHours++;
 8000c10:	b2ad      	uxth	r5, r5
 8000c12:	e7b4      	b.n	8000b7e <RTC_IF_StartTimer+0x5e>
    rtcAlarmMinutes++;
 8000c14:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 8000c16:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 8000c18:	b2bf      	uxth	r7, r7
 8000c1a:	e7b4      	b.n	8000b86 <RTC_IF_StartTimer+0x66>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8000c1c:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 8000c1e:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8000c20:	b2b6      	uxth	r6, r6
    rtcAlarmMinutes++;
 8000c22:	b2bf      	uxth	r7, r7
 8000c24:	e7ba      	b.n	8000b9c <RTC_IF_StartTimer+0x7c>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8000c26:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 8000c28:	3501      	adds	r5, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8000c2a:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 8000c2c:	b2ad      	uxth	r5, r5
 8000c2e:	e7b7      	b.n	8000ba0 <RTC_IF_StartTimer+0x80>
    rtcAlarmHours -= HOURS_IN_1DAY;
 8000c30:	3d18      	subs	r5, #24
    rtcAlarmDays++;
 8000c32:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 8000c34:	b2ad      	uxth	r5, r5
    rtcAlarmDays++;
 8000c36:	b280      	uxth	r0, r0
 8000c38:	e7b4      	b.n	8000ba4 <RTC_IF_StartTimer+0x84>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8000c3a:	189b      	adds	r3, r3, r2
 8000c3c:	7b19      	ldrb	r1, [r3, #12]
 8000c3e:	e7ba      	b.n	8000bb6 <RTC_IF_StartTimer+0x96>
 8000c40:	200000ac 	.word	0x200000ac
 8000c44:	000003ff 	.word	0x000003ff
 8000c48:	0001517f 	.word	0x0001517f
 8000c4c:	00000e0f 	.word	0x00000e0f
 8000c50:	08004ab8 	.word	0x08004ab8
 8000c54:	2000047c 	.word	0x2000047c
 8000c58:	fffeae80 	.word	0xfffeae80
 8000c5c:	fffff1f0 	.word	0xfffff1f0

08000c60 <RTC_IF_GetTime>:
{
 8000c60:	b530      	push	{r4, r5, lr}
 8000c62:	b087      	sub	sp, #28
 8000c64:	0005      	movs	r5, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8000c66:	a901      	add	r1, sp, #4
 8000c68:	4668      	mov	r0, sp
 8000c6a:	f7ff fee7 	bl	8000a3c <RTC_GetCalendarValue>
 8000c6e:	0004      	movs	r4, r0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8000c70:	0580      	lsls	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8000c72:	227d      	movs	r2, #125	; 0x7d
 8000c74:	2300      	movs	r3, #0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8000c76:	0d80      	lsrs	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8000c78:	2100      	movs	r1, #0
 8000c7a:	f7ff fbf7 	bl	800046c <__aeabi_lmul>
 8000c7e:	09c0      	lsrs	r0, r0, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8000c80:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 8000c82:	0aa0      	lsrs	r0, r4, #10
}
 8000c84:	b007      	add	sp, #28
 8000c86:	bd30      	pop	{r4, r5, pc}

08000c88 <RTC_IF_BkUp_Write_Seconds>:
{
 8000c88:	b510      	push	{r4, lr}
 8000c8a:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4802      	ldr	r0, [pc, #8]	; (8000c98 <RTC_IF_BkUp_Write_Seconds+0x10>)
 8000c90:	f002 f90e 	bl	8002eb0 <HAL_RTCEx_BKUPWrite>
}
 8000c94:	bd10      	pop	{r4, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	2000047c 	.word	0x2000047c

08000c9c <RTC_IF_BkUp_Write_SubSeconds>:
{
 8000c9c:	b510      	push	{r4, lr}
 8000c9e:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4802      	ldr	r0, [pc, #8]	; (8000cac <RTC_IF_BkUp_Write_SubSeconds+0x10>)
 8000ca4:	f002 f904 	bl	8002eb0 <HAL_RTCEx_BKUPWrite>
}
 8000ca8:	bd10      	pop	{r4, pc}
 8000caa:	46c0      	nop			; (mov r8, r8)
 8000cac:	2000047c 	.word	0x2000047c

08000cb0 <RTC_IF_BkUp_Read_Seconds>:
{
 8000cb0:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4801      	ldr	r0, [pc, #4]	; (8000cbc <RTC_IF_BkUp_Read_Seconds+0xc>)
 8000cb6:	f002 f901 	bl	8002ebc <HAL_RTCEx_BKUPRead>
}
 8000cba:	bd10      	pop	{r4, pc}
 8000cbc:	2000047c 	.word	0x2000047c

08000cc0 <RTC_IF_BkUp_Read_SubSeconds>:
{
 8000cc0:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8000cc2:	2101      	movs	r1, #1
 8000cc4:	4801      	ldr	r0, [pc, #4]	; (8000ccc <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 8000cc6:	f002 f8f9 	bl	8002ebc <HAL_RTCEx_BKUPRead>
}
 8000cca:	bd10      	pop	{r4, pc}
 8000ccc:	2000047c 	.word	0x2000047c

08000cd0 <RTC_IF_Init>:
{
 8000cd0:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 8000cd2:	4c11      	ldr	r4, [pc, #68]	; (8000d18 <RTC_IF_Init+0x48>)
{
 8000cd4:	b08b      	sub	sp, #44	; 0x2c
  if (RTC_Initalized == false)
 8000cd6:	3444      	adds	r4, #68	; 0x44
 8000cd8:	7823      	ldrb	r3, [r4, #0]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d119      	bne.n	8000d12 <RTC_IF_Init+0x42>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000cde:	3320      	adds	r3, #32
 8000ce0:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ce2:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce4:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000ce6:	025b      	lsls	r3, r3, #9
 8000ce8:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cea:	f001 fccf 	bl	800268c <HAL_RCCEx_PeriphCLKConfig>
 8000cee:	2800      	cmp	r0, #0
 8000cf0:	d000      	beq.n	8000cf4 <RTC_IF_Init+0x24>
 8000cf2:	e7fe      	b.n	8000cf2 <RTC_IF_Init+0x22>
    MX_RTC_Init();
 8000cf4:	f7ff fdea 	bl	80008cc <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	4d08      	ldr	r5, [pc, #32]	; (8000d1c <RTC_IF_Init+0x4c>)
 8000cfc:	0049      	lsls	r1, r1, #1
 8000cfe:	0028      	movs	r0, r5
 8000d00:	f001 fda0 	bl	8002844 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000d04:	0028      	movs	r0, r5
 8000d06:	f002 f8df 	bl	8002ec8 <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 8000d0a:	f7ff fef1 	bl	8000af0 <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	7023      	strb	r3, [r4, #0]
}
 8000d12:	2000      	movs	r0, #0
 8000d14:	b00b      	add	sp, #44	; 0x2c
 8000d16:	bd30      	pop	{r4, r5, pc}
 8000d18:	200000ac 	.word	0x200000ac
 8000d1c:	2000047c 	.word	0x2000047c

08000d20 <RTC_IF_GetTimerValue>:
{
 8000d20:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = 0;
 8000d22:	2000      	movs	r0, #0
  if (RTC_Initalized == true)
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <RTC_IF_GetTimerValue+0x1c>)
 8000d26:	3344      	adds	r3, #68	; 0x44
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4283      	cmp	r3, r0
 8000d2c:	d003      	beq.n	8000d36 <RTC_IF_GetTimerValue+0x16>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8000d2e:	a901      	add	r1, sp, #4
 8000d30:	4668      	mov	r0, sp
 8000d32:	f7ff fe83 	bl	8000a3c <RTC_GetCalendarValue>
}
 8000d36:	b007      	add	sp, #28
 8000d38:	bd00      	pop	{pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	200000ac 	.word	0x200000ac

08000d40 <RTC_IF_DelayMs>:
{
 8000d40:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8000d42:	0e41      	lsrs	r1, r0, #25
 8000d44:	227d      	movs	r2, #125	; 0x7d
 8000d46:	2300      	movs	r3, #0
 8000d48:	01c0      	lsls	r0, r0, #7
 8000d4a:	f7ff fb6f 	bl	800042c <__aeabi_uldivmod>
 8000d4e:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 8000d50:	f7ff ffe6 	bl	8000d20 <RTC_IF_GetTimerValue>
 8000d54:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8000d56:	f7ff ffe3 	bl	8000d20 <RTC_IF_GetTimerValue>
 8000d5a:	1b40      	subs	r0, r0, r5
 8000d5c:	42a0      	cmp	r0, r4
 8000d5e:	d300      	bcc.n	8000d62 <RTC_IF_DelayMs+0x22>
}
 8000d60:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	e7f7      	b.n	8000d56 <RTC_IF_DelayMs+0x16>

08000d66 <HAL_RTC_AlarmAEventCallback>:
{
 8000d66:	b510      	push	{r4, lr}
  UTIL_TIMER_IRQ_Handler();
 8000d68:	f003 f900 	bl	8003f6c <UTIL_TIMER_IRQ_Handler>
}
 8000d6c:	bd10      	pop	{r4, pc}
	...

08000d70 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <HAL_MspInit+0x28>)
 8000d74:	055b      	lsls	r3, r3, #21
 8000d76:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 8000d78:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	430b      	orrs	r3, r1
 8000d7c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8000d7e:	f001 f8a1 	bl	8001ec4 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8000d82:	f001 f8b1 	bl	8001ee8 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8000d86:	2308      	movs	r3, #8
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <HAL_MspInit+0x2c>)
 8000d8a:	6811      	ldr	r1, [r2, #0]
 8000d8c:	430b      	orrs	r3, r1
 8000d8e:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8000d90:	f001 f8a0 	bl	8001ed4 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	bd10      	pop	{r4, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40022000 	.word	0x40022000

08000da0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000da0:	4770      	bx	lr

08000da2 <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 8000da2:	46c0      	nop			; (mov r8, r8)
 8000da4:	e7fd      	b.n	8000da2 <HardFault_Handler>

08000da6 <SVC_Handler>:
 8000da6:	4770      	bx	lr

08000da8 <PendSV_Handler>:
 8000da8:	4770      	bx	lr

08000daa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000daa:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dac:	f000 fc3c 	bl	8001628 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db0:	bd10      	pop	{r4, pc}

08000db2 <EXTI2_3_IRQHandler>:
 8000db2:	4770      	bx	lr

08000db4 <DMA1_Channel4_5_6_7_IRQHandler>:

  /* USER CODE END DMA1_Channel2_3_IRQHandler 1 */
}
#else
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000db4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(husart2.hdmatx);
 8000db6:	4b02      	ldr	r3, [pc, #8]	; (8000dc0 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8000db8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8000dba:	f000 fd98 	bl	80018ee <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000dbe:	bd10      	pop	{r4, pc}
 8000dc0:	200004e8 	.word	0x200004e8

08000dc4 <USART2_IRQHandler>:
#else
  /**
    * @brief This function handles USART2 Interrupt.
    */
  void USART2_IRQHandler(void)
  {
 8000dc4:	b510      	push	{r4, lr}
    /* USER CODE BEGIN USART2_IRQn 0 */
  
    /* USER CODE END USART2_IRQn 0 */
    HAL_UART_IRQHandler(&husart2);
 8000dc6:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <USART2_IRQHandler+0xc>)
 8000dc8:	f002 f9c0 	bl	800314c <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART2_IRQn 1 */
  
    /* USER CODE END USART2_IRQn 1 */
  }
 8000dcc:	bd10      	pop	{r4, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	200004e8 	.word	0x200004e8

08000dd4 <RTC_IRQHandler>:
#endif


void RTC_IRQHandler(void)
{
 8000dd4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000dd6:	4802      	ldr	r0, [pc, #8]	; (8000de0 <RTC_IRQHandler+0xc>)
 8000dd8:	f001 fd94 	bl	8002904 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000ddc:	bd10      	pop	{r4, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	2000047c 	.word	0x2000047c

08000de4 <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 8000de4:	b40c      	push	{r2, r3}
 8000de6:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <tiny_snprintf_like.constprop.0+0x18>)
  va_start(vaArgs, strFormat);
 8000dea:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000dec:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 8000dee:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000df0:	f003 f904 	bl	8003ffc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000df4:	b003      	add	sp, #12
 8000df6:	bc08      	pop	{r3}
 8000df8:	b002      	add	sp, #8
 8000dfa:	4718      	bx	r3
 8000dfc:	08004bb4 	.word	0x08004bb4

08000e00 <TimestampNow>:
{
 8000e00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8000e02:	0004      	movs	r4, r0
  SysTime_t curtime = SysTimeGet();
 8000e04:	ad02      	add	r5, sp, #8
 8000e06:	0028      	movs	r0, r5
{
 8000e08:	000e      	movs	r6, r1
  SysTime_t curtime = SysTimeGet();
 8000e0a:	f002 ffeb 	bl	8003de4 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000e0e:	2204      	movs	r2, #4
 8000e10:	5eab      	ldrsh	r3, [r5, r2]
 8000e12:	2110      	movs	r1, #16
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	4a05      	ldr	r2, [pc, #20]	; (8000e2c <TimestampNow+0x2c>)
 8000e18:	9b02      	ldr	r3, [sp, #8]
 8000e1a:	0020      	movs	r0, r4
 8000e1c:	f7ff ffe2 	bl	8000de4 <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 8000e20:	0020      	movs	r0, r4
 8000e22:	f7ff f971 	bl	8000108 <strlen>
 8000e26:	8030      	strh	r0, [r6, #0]
}
 8000e28:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	08004bb4 	.word	0x08004bb4

08000e30 <SystemApp_Init>:
{
 8000e30:	b510      	push	{r4, lr}
  UTIL_TIMER_Init();
 8000e32:	f003 f803 	bl	8003e3c <UTIL_TIMER_Init>
  DBG_Init();
 8000e36:	f000 f82d 	bl	8000e94 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8000e3a:	f002 fe69 	bl	8003b10 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000e3e:	4808      	ldr	r0, [pc, #32]	; (8000e60 <SystemApp_Init+0x30>)
 8000e40:	f002 fe80 	bl	8003b44 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000e44:	2002      	movs	r0, #2
 8000e46:	f002 fe83 	bl	8003b50 <UTIL_ADV_TRACE_SetVerboseLevel>
  Sx_Board_Bus_Init();
 8000e4a:	f000 fba7 	bl	800159c <SX126x_RADIO_Bus_Init>
  Sx_Board_IoInit();
 8000e4e:	f000 fb0b 	bl	8001468 <SX126x_RADIO_IoInit>
  UTIL_LPM_Init();
 8000e52:	f002 ff75 	bl	8003d40 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000e56:	2101      	movs	r1, #1
 8000e58:	0008      	movs	r0, r1
 8000e5a:	f002 ff8f 	bl	8003d7c <UTIL_LPM_SetOffMode>
}
 8000e5e:	bd10      	pop	{r4, pc}
 8000e60:	08000e01 	.word	0x08000e01

08000e64 <UTIL_ADV_TRACE_PreSendHook>:
{
 8000e64:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000e66:	2101      	movs	r1, #1
 8000e68:	2004      	movs	r0, #4
 8000e6a:	f002 ff71 	bl	8003d50 <UTIL_LPM_SetStopMode>
}
 8000e6e:	bd10      	pop	{r4, pc}

08000e70 <UTIL_ADV_TRACE_PostSendHook>:
{
 8000e70:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000e72:	2100      	movs	r1, #0
 8000e74:	2004      	movs	r0, #4
 8000e76:	f002 ff6b 	bl	8003d50 <UTIL_LPM_SetStopMode>
}
 8000e7a:	bd10      	pop	{r4, pc}

08000e7c <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	4770      	bx	lr

08000e80 <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 8000e80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8000e82:	f7ff ff4d 	bl	8000d20 <RTC_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8000e86:	bd10      	pop	{r4, pc}

08000e88 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000e88:	b507      	push	{r0, r1, r2, lr}
 8000e8a:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8000e8c:	9801      	ldr	r0, [sp, #4]
 8000e8e:	f7ff ff57 	bl	8000d40 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000e92:	bd07      	pop	{r0, r1, r2, pc}

08000e94 <DBG_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void DBG_Init(void)
{
 8000e94:	b530      	push	{r4, r5, lr}
 8000e96:	b087      	sub	sp, #28
  HAL_DBGMCU_EnableDBGStandbyMode();

#elif defined (DEBUGGER_ON) && (DEBUGGER_ON == 0) /* DEBUGGER_OFF */
  /* Put the debugger pin PA13 and P14 in analog for LowPower*/
  /* The 4 debug lines above are simply not set in this case */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	220c      	movs	r2, #12
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	a803      	add	r0, sp, #12
 8000e9e:	f003 f9f8 	bl	8004292 <memset>
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8000ea6:	23c0      	movs	r3, #192	; 0xc0
  /* make sure clock is enabled before setting the pins with HAL_GPIO_Init() */
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8000ea8:	2501      	movs	r5, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eaa:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8000eac:	4c10      	ldr	r4, [pc, #64]	; (8000ef0 <DBG_Init+0x5c>)
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8000eae:	01db      	lsls	r3, r3, #7
 8000eb0:	9301      	str	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8000eb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	a901      	add	r1, sp, #4
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8000eb6:	432b      	orrs	r3, r5
 8000eb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000eba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebc:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8000ebe:	402b      	ands	r3, r5
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec4:	f000 fd5e 	bl	8001984 <HAL_GPIO_Init>
  __HAL_RCC_GPIOA_CLK_DISABLE() ;
 8000ec8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000eca:	43ab      	bics	r3, r5
 8000ecc:	62e3      	str	r3, [r4, #44]	; 0x2c

  __HAL_RCC_DBGMCU_CLK_ENABLE();
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000ed2:	03db      	lsls	r3, r3, #15
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	6363      	str	r3, [r4, #52]	; 0x34
  HAL_DBGMCU_DisableDBGSleepMode();
 8000ed8:	f000 fbb2 	bl	8001640 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8000edc:	f000 fbb8 	bl	8001650 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8000ee0:	f000 fbbe 	bl	8001660 <HAL_DBGMCU_DisableDBGStandbyMode>
  __HAL_RCC_DBGMCU_CLK_DISABLE();
 8000ee4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ee6:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <DBG_Init+0x60>)
 8000ee8:	4013      	ands	r3, r2
 8000eea:	6363      	str	r3, [r4, #52]	; 0x34
#error "DEBUGGER_ON not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */
  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8000eec:	b007      	add	sp, #28
 8000eee:	bd30      	pop	{r4, r5, pc}
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	ffbfffff 	.word	0xffbfffff

08000ef8 <MX_USART2_Init>:
/* USART2 init function */

void MX_USART2_Init(void)
{

  husart2.Instance        = USART2;
 8000ef8:	480a      	ldr	r0, [pc, #40]	; (8000f24 <MX_USART2_Init+0x2c>)
 8000efa:	4b0b      	ldr	r3, [pc, #44]	; (8000f28 <MX_USART2_Init+0x30>)
{
 8000efc:	b510      	push	{r4, lr}
  husart2.Instance        = USART2;
 8000efe:	6003      	str	r3, [r0, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8000f00:	23e1      	movs	r3, #225	; 0xe1
 8000f02:	025b      	lsls	r3, r3, #9
 8000f04:	6043      	str	r3, [r0, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
  husart2.Init.StopBits   = UART_STOPBITS_1;
  husart2.Init.Parity     = UART_PARITY_NONE;
  husart2.Init.Mode       = UART_MODE_TX_RX;
 8000f06:	220c      	movs	r2, #12
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f08:	2300      	movs	r3, #0
  husart2.Init.Mode       = UART_MODE_TX_RX;
 8000f0a:	6142      	str	r2, [r0, #20]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0c:	6083      	str	r3, [r0, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 8000f0e:	60c3      	str	r3, [r0, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 8000f10:	6103      	str	r3, [r0, #16]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8000f12:	6183      	str	r3, [r0, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 8000f14:	f002 fc9a 	bl	800384c <HAL_UART_Init>
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_USART2_Init+0x28>
  {
    Error_Handler();
 8000f1c:	f7ff fcd4 	bl	80008c8 <Error_Handler>
  }
}
 8000f20:	bd10      	pop	{r4, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	200004e8 	.word	0x200004e8
 8000f28:	40004400 	.word	0x40004400

08000f2c <HAL_UART_MspInit>:

#endif

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8000f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2e:	0006      	movs	r6, r0
 8000f30:	b095      	sub	sp, #84	; 0x54

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	2214      	movs	r2, #20
 8000f34:	2100      	movs	r1, #0
 8000f36:	a806      	add	r0, sp, #24
 8000f38:	f003 f9ab 	bl	8004292 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f3c:	2224      	movs	r2, #36	; 0x24
 8000f3e:	2100      	movs	r1, #0
 8000f40:	a80b      	add	r0, sp, #44	; 0x2c
 8000f42:	f003 f9a6 	bl	8004292 <memset>
  if (uartHandle->Instance == USART1)
 8000f46:	6833      	ldr	r3, [r6, #0]
 8000f48:	4a4d      	ldr	r2, [pc, #308]	; (8001080 <HAL_UART_MspInit+0x154>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d169      	bne.n	8001022 <HAL_UART_MspInit+0xf6>

    /* USER CODE END USART1_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8000f4e:	2201      	movs	r2, #1
 8000f50:	4b4c      	ldr	r3, [pc, #304]	; (8001084 <HAL_UART_MspInit+0x158>)
 8000f52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f54:	4311      	orrs	r1, r2
 8000f56:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000f58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f5a:	4011      	ands	r1, r2
 8000f5c:	9100      	str	r1, [sp, #0]
 8000f5e:	9900      	ldr	r1, [sp, #0]
    USARTx_RX_GPIO_CLK_ENABLE();
 8000f60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f62:	4311      	orrs	r1, r2
 8000f64:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000f66:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f68:	4011      	ands	r1, r2
 8000f6a:	9101      	str	r1, [sp, #4]
 8000f6c:	9901      	ldr	r1, [sp, #4]

    /* Enable USARTx clock */
    __USART1_CLK_ENABLE();
 8000f6e:	2180      	movs	r1, #128	; 0x80
 8000f70:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000f72:	01c9      	lsls	r1, r1, #7
 8000f74:	4308      	orrs	r0, r1
 8000f76:	6358      	str	r0, [r3, #52]	; 0x34

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 8000f78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000f7a:	4310      	orrs	r0, r2
 8000f7c:	6318      	str	r0, [r3, #48]	; 0x30
 8000f7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000f80:	4010      	ands	r0, r2
 8000f82:	9002      	str	r0, [sp, #8]
 8000f84:	9802      	ldr	r0, [sp, #8]

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f86:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000f88:	4301      	orrs	r1, r0
 8000f8a:	6359      	str	r1, [r3, #52]	; 0x34

    /* Select SYSTEM clock for USART1 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f8c:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f8e:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8000f90:	920d      	str	r2, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f92:	f001 fb7b 	bl	800268c <HAL_RCCEx_PeriphCLKConfig>
 8000f96:	2800      	cmp	r0, #0
 8000f98:	d001      	beq.n	8000f9e <HAL_UART_MspInit+0x72>
    {
      Error_Handler();
 8000f9a:	f7ff fc95 	bl	80008c8 <Error_Handler>

    /**USART2 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
      */
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8000f9e:	2504      	movs	r5, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8000fa0:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000fa4:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2702      	movs	r7, #2
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	a906      	add	r1, sp, #24
 8000faa:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000fac:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8000fae:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb0:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8000fb4:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8000fb6:	f000 fce5 	bl	8001984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8000fba:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8000fbe:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000fc2:	3b05      	subs	r3, #5
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8000fc6:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8000fcc:	950a      	str	r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8000fce:	f000 fcd9 	bl	8001984 <HAL_GPIO_Init>


    /* USART1 DMA Init */
    /* USART1_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8000fd2:	482d      	ldr	r0, [pc, #180]	; (8001088 <HAL_UART_MspInit+0x15c>)
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	; (800108c <HAL_UART_MspInit+0x160>)
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8000fd6:	6045      	str	r5, [r0, #4]
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8000fd8:	6003      	str	r3, [r0, #0]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000fda:	2310      	movs	r3, #16
 8000fdc:	6083      	str	r3, [r0, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000fde:	3370      	adds	r3, #112	; 0x70
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000fe0:	60c4      	str	r4, [r0, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000fe2:	6103      	str	r3, [r0, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fe4:	6144      	str	r4, [r0, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8000fe6:	6184      	str	r4, [r0, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8000fe8:	61c4      	str	r4, [r0, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8000fea:	6204      	str	r4, [r0, #32]

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8000fec:	f000 fb86 	bl	80016fc <HAL_DMA_Init>
 8000ff0:	42a0      	cmp	r0, r4
 8000ff2:	d001      	beq.n	8000ff8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000ff4:	f7ff fc68 	bl	80008c8 <Error_Handler>
    }


    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <HAL_UART_MspInit+0x15c>)

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8000ffa:	2201      	movs	r2, #1
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8000ffc:	66f3      	str	r3, [r6, #108]	; 0x6c
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8000ffe:	2100      	movs	r1, #0
 8001000:	200b      	movs	r0, #11
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8001002:	629e      	str	r6, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8001004:	f000 fb34 	bl	8001670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8001008:	200b      	movs	r0, #11
 800100a:	f000 fb5b 	bl	80016c4 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 800100e:	201c      	movs	r0, #28
 8001010:	2201      	movs	r2, #1
 8001012:	2100      	movs	r1, #0
 8001014:	f000 fb2c 	bl	8001670 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8001018:	201c      	movs	r0, #28
 800101a:	f000 fb53 	bl	80016c4 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 800101e:	b015      	add	sp, #84	; 0x54
 8001020:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (uartHandle->Instance == USART2)
 8001022:	4a1b      	ldr	r2, [pc, #108]	; (8001090 <HAL_UART_MspInit+0x164>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d1fa      	bne.n	800101e <HAL_UART_MspInit+0xf2>
    USARTx_TX_GPIO_CLK_ENABLE();
 8001028:	2201      	movs	r2, #1
 800102a:	4b16      	ldr	r3, [pc, #88]	; (8001084 <HAL_UART_MspInit+0x158>)
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800102c:	2504      	movs	r5, #4
    USARTx_TX_GPIO_CLK_ENABLE();
 800102e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001030:	4311      	orrs	r1, r2
 8001032:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001036:	4011      	ands	r1, r2
 8001038:	9103      	str	r1, [sp, #12]
 800103a:	9903      	ldr	r1, [sp, #12]
    USARTx_RX_GPIO_CLK_ENABLE();
 800103c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800103e:	4311      	orrs	r1, r2
 8001040:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001042:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001044:	4011      	ands	r1, r2
 8001046:	9104      	str	r1, [sp, #16]
 8001048:	9904      	ldr	r1, [sp, #16]
    __USART2_CLK_ENABLE();
 800104a:	2180      	movs	r1, #128	; 0x80
 800104c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800104e:	0289      	lsls	r1, r1, #10
 8001050:	4308      	orrs	r0, r1
 8001052:	6398      	str	r0, [r3, #56]	; 0x38
    DMAx_CLK_ENABLE();
 8001054:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001056:	4310      	orrs	r0, r2
 8001058:	6318      	str	r0, [r3, #48]	; 0x30
 800105a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800105c:	4002      	ands	r2, r0
 800105e:	9205      	str	r2, [sp, #20]
 8001060:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_USART2_CLK_ENABLE();
 8001062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001064:	a80b      	add	r0, sp, #44	; 0x2c
    __HAL_RCC_USART2_CLK_ENABLE();
 8001066:	4311      	orrs	r1, r2
 8001068:	6399      	str	r1, [r3, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800106a:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800106c:	950e      	str	r5, [sp, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800106e:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001070:	f001 fb0c 	bl	800268c <HAL_RCCEx_PeriphCLKConfig>
 8001074:	2800      	cmp	r0, #0
 8001076:	d100      	bne.n	800107a <HAL_UART_MspInit+0x14e>
 8001078:	e792      	b.n	8000fa0 <HAL_UART_MspInit+0x74>
      Error_Handler();
 800107a:	f7ff fc25 	bl	80008c8 <Error_Handler>
 800107e:	e78f      	b.n	8000fa0 <HAL_UART_MspInit+0x74>
 8001080:	40013800 	.word	0x40013800
 8001084:	40021000 	.word	0x40021000
 8001088:	200004a0 	.word	0x200004a0
 800108c:	40020080 	.word	0x40020080
 8001090:	40004400 	.word	0x40004400

08001094 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
  if (uartHandle->Instance == USART1)
 8001094:	6803      	ldr	r3, [r0, #0]
 8001096:	4a14      	ldr	r2, [pc, #80]	; (80010e8 <HAL_UART_MspDeInit+0x54>)
{
 8001098:	b510      	push	{r4, lr}
 800109a:	0004      	movs	r4, r0
  if (uartHandle->Instance == USART1)
 800109c:	4293      	cmp	r3, r2
 800109e:	d110      	bne.n	80010c2 <HAL_UART_MspDeInit+0x2e>

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 80010a0:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_DISABLE();
 80010a2:	4a12      	ldr	r2, [pc, #72]	; (80010ec <HAL_UART_MspDeInit+0x58>)
 80010a4:	4912      	ldr	r1, [pc, #72]	; (80010f0 <HAL_UART_MspDeInit+0x5c>)
 80010a6:	6b53      	ldr	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 80010a8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_DISABLE();
 80010aa:	400b      	ands	r3, r1
 80010ac:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 80010ae:	210c      	movs	r1, #12
 80010b0:	f000 fd28 	bl	8001b04 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80010b4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80010b6:	f000 fb65 	bl	8001784 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80010ba:	201b      	movs	r0, #27

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80010bc:	f000 fb0e 	bl	80016dc <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80010c0:	bd10      	pop	{r4, pc}
  else if (uartHandle->Instance == USART2)
 80010c2:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <HAL_UART_MspDeInit+0x60>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d1fb      	bne.n	80010c0 <HAL_UART_MspDeInit+0x2c>
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 80010c8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 80010ca:	4a08      	ldr	r2, [pc, #32]	; (80010ec <HAL_UART_MspDeInit+0x58>)
 80010cc:	490a      	ldr	r1, [pc, #40]	; (80010f8 <HAL_UART_MspDeInit+0x64>)
 80010ce:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 80010d0:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 80010d2:	400b      	ands	r3, r1
 80010d4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 80010d6:	210c      	movs	r1, #12
 80010d8:	f000 fd14 	bl	8001b04 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 80010dc:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80010de:	f000 fb51 	bl	8001784 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80010e2:	201c      	movs	r0, #28
 80010e4:	e7ea      	b.n	80010bc <HAL_UART_MspDeInit+0x28>
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	40013800 	.word	0x40013800
 80010ec:	40021000 	.word	0x40021000
 80010f0:	ffffbfff 	.word	0xffffbfff
 80010f4:	40004400 	.word	0x40004400
 80010f8:	fffdffff 	.word	0xfffdffff

080010fc <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80010fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80010fe:	4b03      	ldr	r3, [pc, #12]	; (800110c <vcom_Init+0x10>)
 8001100:	6018      	str	r0, [r3, #0]
#ifdef USE_USART1
    MX_USART1_Init();
#else
    MX_USART2_Init();
 8001102:	f7ff fef9 	bl	8000ef8 <MX_USART2_Init>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001106:	2000      	movs	r0, #0
 8001108:	bd10      	pop	{r4, pc}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	200000f4 	.word	0x200000f4

08001110 <vcom_DeInit>:

#ifdef USE_USART1
  __HAL_RCC_USART1_FORCE_RESET();
  __HAL_RCC_USART1_RELEASE_RESET();
#else
  __HAL_RCC_USART2_FORCE_RESET();
 8001110:	2280      	movs	r2, #128	; 0x80
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <vcom_DeInit+0x28>)
 8001114:	0292      	lsls	r2, r2, #10
 8001116:	6a99      	ldr	r1, [r3, #40]	; 0x28
{
 8001118:	b510      	push	{r4, lr}
  __HAL_RCC_USART2_FORCE_RESET();
 800111a:	430a      	orrs	r2, r1
 800111c:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 800111e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001120:	4906      	ldr	r1, [pc, #24]	; (800113c <vcom_DeInit+0x2c>)
#endif

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 8001122:	4807      	ldr	r0, [pc, #28]	; (8001140 <vcom_DeInit+0x30>)
  __HAL_RCC_USART2_RELEASE_RESET();
 8001124:	400a      	ands	r2, r1
 8001126:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_UART_MspDeInit(&UartHandle);
 8001128:	f7ff ffb4 	bl	8001094 <HAL_UART_MspDeInit>
  /* USER CODE BEGIN 1 */
#ifdef USE_USART1
    HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);

#else
    HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800112c:	200b      	movs	r0, #11
 800112e:	f000 fad5 	bl	80016dc <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001132:	2000      	movs	r0, #0
 8001134:	bd10      	pop	{r4, pc}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	40021000 	.word	0x40021000
 800113c:	fffdffff 	.word	0xfffdffff
 8001140:	200004e8 	.word	0x200004e8

08001144 <vcom_IoInit>:
UTIL_ADV_TRACE_Status_t vcom_IoInit(void)
{
 8001144:	b530      	push	{r4, r5, lr}
    /* at that point, MCU has been awoken. Wake Up based on RXNE flag successful */
    HAL_UARTEx_DisableStopMode(&UartHandle);
 8001146:	4c1b      	ldr	r4, [pc, #108]	; (80011b4 <vcom_IoInit+0x70>)
{
 8001148:	b089      	sub	sp, #36	; 0x24
    HAL_UARTEx_DisableStopMode(&UartHandle);
 800114a:	0020      	movs	r0, r4
 800114c:	f002 fc82 	bl	8003a54 <HAL_UARTEx_DisableStopMode>

    /* Disable the UART Wake UP from stop mode Interrupt */
    __HAL_UART_DISABLE_IT(&UartHandle, UART_IT_WUF);
 8001150:	6822      	ldr	r2, [r4, #0]
 8001152:	4919      	ldr	r1, [pc, #100]	; (80011b8 <vcom_IoInit+0x74>)
 8001154:	6893      	ldr	r3, [r2, #8]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
    GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;

    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8001156:	25a0      	movs	r5, #160	; 0xa0
    __HAL_UART_DISABLE_IT(&UartHandle, UART_IT_WUF);
 8001158:	400b      	ands	r3, r1
 800115a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_ENABLE(UartHandle.hdmatx);
 800115c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    GPIO_InitStruct.Pin       = USARTx_TX_Pin;
 800115e:	2404      	movs	r4, #4
    __HAL_DMA_ENABLE(UartHandle.hdmatx);
 8001160:	6819      	ldr	r1, [r3, #0]
 8001162:	2301      	movs	r3, #1
 8001164:	680a      	ldr	r2, [r1, #0]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8001166:	05ed      	lsls	r5, r5, #23
    __HAL_DMA_ENABLE(UartHandle.hdmatx);
 8001168:	431a      	orrs	r2, r3
 800116a:	600a      	str	r2, [r1, #0]
    USARTx_TX_GPIO_CLK_ENABLE();
 800116c:	4a13      	ldr	r2, [pc, #76]	; (80011bc <vcom_IoInit+0x78>)
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 800116e:	0028      	movs	r0, r5
    USARTx_TX_GPIO_CLK_ENABLE();
 8001170:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001172:	4319      	orrs	r1, r3
 8001174:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001176:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001178:	4019      	ands	r1, r3
 800117a:	9101      	str	r1, [sp, #4]
 800117c:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 800117e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001180:	4319      	orrs	r1, r3
 8001182:	62d1      	str	r1, [r2, #44]	; 0x2c
 8001184:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8001186:	a903      	add	r1, sp, #12
    USARTx_RX_GPIO_CLK_ENABLE();
 8001188:	401a      	ands	r2, r3
 800118a:	9202      	str	r2, [sp, #8]
 800118c:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800118e:	2202      	movs	r2, #2
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8001190:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8001192:	189b      	adds	r3, r3, r2
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8001194:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8001196:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin       = USARTx_TX_Pin;
 8001198:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800119a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 800119c:	f000 fbf2 	bl	8001984 <HAL_GPIO_Init>

    /* UART RX GPIO pin configuration  */
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 80011a0:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = USARTx_RX_AF;

    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80011a2:	0028      	movs	r0, r5
 80011a4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 80011a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80011a8:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f000 fbeb 	bl	8001984 <HAL_GPIO_Init>
		
    return UTIL_ADV_TRACE_OK;
}
 80011ae:	2000      	movs	r0, #0
 80011b0:	b009      	add	sp, #36	; 0x24
 80011b2:	bd30      	pop	{r4, r5, pc}
 80011b4:	200004e8 	.word	0x200004e8
 80011b8:	ffbfffff 	.word	0xffbfffff
 80011bc:	40021000 	.word	0x40021000

080011c0 <vcom_IoDeInit>:
 *****************************************************************************/

UTIL_ADV_TRACE_Status_t vcom_IoDeInit(void)
{
    /* make sure that no UART transfer is on-going */
    while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 80011c0:	2280      	movs	r2, #128	; 0x80
{
 80011c2:	b510      	push	{r4, lr}
    while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 80011c4:	4c23      	ldr	r4, [pc, #140]	; (8001254 <vcom_IoDeInit+0x94>)
{
 80011c6:	b08a      	sub	sp, #40	; 0x28
    while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 80011c8:	6823      	ldr	r3, [r4, #0]
 80011ca:	0252      	lsls	r2, r2, #9
 80011cc:	69d9      	ldr	r1, [r3, #28]
 80011ce:	4211      	tst	r1, r2
 80011d0:	d1fc      	bne.n	80011cc <vcom_IoDeInit+0xc>

    /* make sure that UART is ready to receive
    * (test carried out again later in HAL_UARTEx_StopModeWakeUpSourceConfig) */
    while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 80011d2:	2280      	movs	r2, #128	; 0x80
 80011d4:	03d2      	lsls	r2, r2, #15
 80011d6:	69d9      	ldr	r1, [r3, #28]
 80011d8:	4211      	tst	r1, r2
 80011da:	d0fc      	beq.n	80011d6 <vcom_IoDeInit+0x16>

    /* disable dma */
    __HAL_DMA_DISABLE(UartHandle.hdmatx);
 80011dc:	2101      	movs	r1, #1
 80011de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    UART_WakeUpTypeDef wakeup =
    {
        .WakeUpEvent = UART_WAKEUP_ON_STARTBIT
    };

    if (HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, wakeup) != HAL_OK)
 80011e0:	0020      	movs	r0, r4
    __HAL_DMA_DISABLE(UartHandle.hdmatx);
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	6813      	ldr	r3, [r2, #0]
 80011e6:	438b      	bics	r3, r1
    UART_WakeUpTypeDef wakeup =
 80011e8:	2180      	movs	r1, #128	; 0x80
    __HAL_DMA_DISABLE(UartHandle.hdmatx);
 80011ea:	6013      	str	r3, [r2, #0]
    UART_WakeUpTypeDef wakeup =
 80011ec:	2200      	movs	r2, #0
 80011ee:	0389      	lsls	r1, r1, #14
 80011f0:	9204      	str	r2, [sp, #16]
 80011f2:	9103      	str	r1, [sp, #12]
    if (HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, wakeup) != HAL_OK)
 80011f4:	f002 fbda 	bl	80039ac <HAL_UARTEx_StopModeWakeUpSourceConfig>
 80011f8:	2800      	cmp	r0, #0
 80011fa:	d001      	beq.n	8001200 <vcom_IoDeInit+0x40>
    {
        Error_Handler();
 80011fc:	f7ff fb64 	bl	80008c8 <Error_Handler>
    }

    /* Enable the UART Wake UP from stop mode Interrupt */
    __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	6822      	ldr	r2, [r4, #0]
 8001204:	03db      	lsls	r3, r3, #15
 8001206:	6891      	ldr	r1, [r2, #8]

    /* enable MCU wake-up by UART */
    HAL_UARTEx_EnableStopMode(&UartHandle);
 8001208:	0020      	movs	r0, r4
    __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 800120a:	430b      	orrs	r3, r1
 800120c:	6093      	str	r3, [r2, #8]
    HAL_UARTEx_EnableStopMode(&UartHandle);
 800120e:	f002 fc11 	bl	8003a34 <HAL_UARTEx_EnableStopMode>

    /* Disable USARTx */
    GPIO_InitTypeDef GPIO_InitStructure = {0};
 8001212:	220c      	movs	r2, #12
 8001214:	2100      	movs	r1, #0
 8001216:	a807      	add	r0, sp, #28
 8001218:	f003 f83b 	bl	8004292 <memset>

    USARTx_TX_GPIO_CLK_ENABLE();
 800121c:	2201      	movs	r2, #1
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <vcom_IoDeInit+0x98>)

    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStructure.Pull = GPIO_NOPULL;
  
    GPIO_InitStructure.Pin =  USARTx_TX_Pin ;
    HAL_GPIO_Init(  USARTx_TX_GPIO_Port, &GPIO_InitStructure );
 8001220:	20a0      	movs	r0, #160	; 0xa0
    USARTx_TX_GPIO_CLK_ENABLE();
 8001222:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(  USARTx_TX_GPIO_Port, &GPIO_InitStructure );
 8001224:	05c0      	lsls	r0, r0, #23
    USARTx_TX_GPIO_CLK_ENABLE();
 8001226:	4311      	orrs	r1, r2
 8001228:	62d9      	str	r1, [r3, #44]	; 0x2c
 800122a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800122c:	4011      	ands	r1, r2
 800122e:	9101      	str	r1, [sp, #4]
 8001230:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 8001232:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001234:	4311      	orrs	r1, r2
 8001236:	62d9      	str	r1, [r3, #44]	; 0x2c
 8001238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(  USARTx_TX_GPIO_Port, &GPIO_InitStructure );
 800123a:	a905      	add	r1, sp, #20
    USARTx_RX_GPIO_CLK_ENABLE();
 800123c:	401a      	ands	r2, r3
 800123e:	9202      	str	r2, [sp, #8]
 8001240:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8001242:	2303      	movs	r3, #3
 8001244:	9306      	str	r3, [sp, #24]
    GPIO_InitStructure.Pin =  USARTx_TX_Pin ;
 8001246:	3301      	adds	r3, #1
 8001248:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(  USARTx_TX_GPIO_Port, &GPIO_InitStructure );
 800124a:	f000 fb9b 	bl	8001984 <HAL_GPIO_Init>

    return UTIL_ADV_TRACE_OK;
}
 800124e:	2000      	movs	r0, #0
 8001250:	b00a      	add	sp, #40	; 0x28
 8001252:	bd10      	pop	{r4, pc}
 8001254:	200004e8 	.word	0x200004e8
 8001258:	40021000 	.word	0x40021000

0800125c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 800125c:	b510      	push	{r4, lr}
 800125e:	000a      	movs	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8001260:	0001      	movs	r1, r0
 8001262:	4802      	ldr	r0, [pc, #8]	; (800126c <vcom_Trace_DMA+0x10>)
 8001264:	f001 fecc 	bl	8003000 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001268:	2000      	movs	r0, #0
 800126a:	bd10      	pop	{r4, pc}
 800126c:	200004e8 	.word	0x200004e8

08001270 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001270:	b513      	push	{r0, r1, r4, lr}

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001272:	2180      	movs	r1, #128	; 0x80
  RxCpltCallback = RxCb;
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <vcom_ReceiveInit+0x48>)

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8001276:	4c11      	ldr	r4, [pc, #68]	; (80012bc <vcom_ReceiveInit+0x4c>)
  RxCpltCallback = RxCb;
 8001278:	6058      	str	r0, [r3, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800127a:	0389      	lsls	r1, r1, #14
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 800127c:	9a01      	ldr	r2, [sp, #4]
 800127e:	0020      	movs	r0, r4
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001280:	9100      	str	r1, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8001282:	f002 fb93 	bl	80039ac <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8001286:	2280      	movs	r2, #128	; 0x80
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	0252      	lsls	r2, r2, #9
 800128c:	69d9      	ldr	r1, [r3, #28]
 800128e:	4211      	tst	r1, r2
 8001290:	d1fc      	bne.n	800128c <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	03d2      	lsls	r2, r2, #15
 8001296:	69d9      	ldr	r1, [r3, #28]
 8001298:	4211      	tst	r1, r2
 800129a:	d0fc      	beq.n	8001296 <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 800129c:	6899      	ldr	r1, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 800129e:	0020      	movs	r0, r4
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 80012a0:	430a      	orrs	r2, r1
 80012a2:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&UartHandle);
 80012a4:	f002 fbc6 	bl	8003a34 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 80012a8:	2201      	movs	r2, #1
 80012aa:	4905      	ldr	r1, [pc, #20]	; (80012c0 <vcom_ReceiveInit+0x50>)
 80012ac:	0020      	movs	r0, r4
 80012ae:	f002 fb49 	bl	8003944 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80012b2:	2000      	movs	r0, #0
 80012b4:	bd16      	pop	{r1, r2, r4, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	200000f4 	.word	0x200000f4
 80012bc:	200004e8 	.word	0x200004e8
 80012c0:	2000056c 	.word	0x2000056c

080012c4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80012c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 80012c6:	4b02      	ldr	r3, [pc, #8]	; (80012d0 <HAL_UART_TxCpltCallback+0xc>)
 80012c8:	2000      	movs	r0, #0
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 80012ce:	bd10      	pop	{r4, pc}
 80012d0:	200000f4 	.word	0x200000f4

080012d4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_UART_RxCpltCallback+0x28>)
{
 80012d6:	b570      	push	{r4, r5, r6, lr}
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 80012d8:	685b      	ldr	r3, [r3, #4]
{
 80012da:	0004      	movs	r4, r0
 80012dc:	4d08      	ldr	r5, [pc, #32]	; (8001300 <HAL_UART_RxCpltCallback+0x2c>)
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d006      	beq.n	80012f0 <HAL_UART_RxCpltCallback+0x1c>
 80012e2:	1d02      	adds	r2, r0, #4
 80012e4:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80012e6:	2a00      	cmp	r2, #0
 80012e8:	d102      	bne.n	80012f0 <HAL_UART_RxCpltCallback+0x1c>
  {
    RxCpltCallback(&charRx, 1, 0);
 80012ea:	2101      	movs	r1, #1
 80012ec:	0028      	movs	r0, r5
 80012ee:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 80012f0:	0029      	movs	r1, r5
 80012f2:	2201      	movs	r2, #1
 80012f4:	0020      	movs	r0, r4
 80012f6:	f002 fb25 	bl	8003944 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80012fa:	bd70      	pop	{r4, r5, r6, pc}
 80012fc:	200000f4 	.word	0x200000f4
 8001300:	2000056c 	.word	0x2000056c

08001304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001304:	480d      	ldr	r0, [pc, #52]	; (800133c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001306:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <LoopForever+0x6>)
  ldr r1, =_edata
 800130a:	490e      	ldr	r1, [pc, #56]	; (8001344 <LoopForever+0xa>)
  ldr r2, =_sidata
 800130c:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <LoopForever+0xe>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001320:	4c0b      	ldr	r4, [pc, #44]	; (8001350 <LoopForever+0x16>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800132e:	f000 f939 	bl	80015a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001332:	f002 ff81 	bl	8004238 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001336:	f7ff fa2d 	bl	8000794 <main>

0800133a <LoopForever>:

LoopForever:
    b LoopForever
 800133a:	e7fe      	b.n	800133a <LoopForever>
   ldr   r0, =_estack
 800133c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001344:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001348:	08004c5c 	.word	0x08004c5c
  ldr r2, =_sbss
 800134c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001350:	200005d0 	.word	0x200005d0

08001354 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001354:	e7fe      	b.n	8001354 <ADC1_COMP_IRQHandler>
	...

08001358 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001358:	4b0a      	ldr	r3, [pc, #40]	; (8001384 <_sbrk+0x2c>)
{
 800135a:	b510      	push	{r4, lr}
	if (heap_end == 0)
 800135c:	6819      	ldr	r1, [r3, #0]
{
 800135e:	0002      	movs	r2, r0
	if (heap_end == 0)
 8001360:	2900      	cmp	r1, #0
 8001362:	d101      	bne.n	8001368 <_sbrk+0x10>
		heap_end = &end;
 8001364:	4908      	ldr	r1, [pc, #32]	; (8001388 <_sbrk+0x30>)
 8001366:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8001368:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800136a:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800136c:	1882      	adds	r2, r0, r2
 800136e:	428a      	cmp	r2, r1
 8001370:	d906      	bls.n	8001380 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001372:	f002 ff5b 	bl	800422c <__errno>
 8001376:	230c      	movs	r3, #12
 8001378:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800137a:	2001      	movs	r0, #1
 800137c:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800137e:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8001380:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8001382:	e7fc      	b.n	800137e <_sbrk+0x26>
 8001384:	200000fc 	.word	0x200000fc
 8001388:	200005d0 	.word	0x200005d0

0800138c <MX_SPI2_Init>:
/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI2;
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <MX_SPI2_Init+0x54>)
{
 800138e:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI2;
 8001390:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001392:	2382      	movs	r3, #130	; 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8001394:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8001396:	005b      	lsls	r3, r3, #1
 8001398:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 800139a:	33fc      	adds	r3, #252	; 0xfc
 800139c:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800139e:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80013a0:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80013a2:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80013a4:	6145      	str	r5, [r0, #20]
{
 80013a6:	0004      	movs	r4, r0
  /* SPI2 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 80013a8:	f001 f960 	bl	800266c <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI2_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 80013ac:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 80013ae:	4a0d      	ldr	r2, [pc, #52]	; (80013e4 <MX_SPI2_Init+0x58>)
  {
    presc = baudrate[divisor];
 80013b0:	490d      	ldr	r1, [pc, #52]	; (80013e8 <MX_SPI2_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 80013b2:	4290      	cmp	r0, r2
 80013b4:	d80d      	bhi.n	80013d2 <MX_SPI2_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013b6:	2300      	movs	r3, #0
 80013b8:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80013ba:	6263      	str	r3, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013bc:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 80013be:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 80013c0:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 80013c2:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80013c4:	0020      	movs	r0, r4
 80013c6:	f001 fd9b 	bl	8002f00 <HAL_SPI_Init>
 80013ca:	1e43      	subs	r3, r0, #1
 80013cc:	4198      	sbcs	r0, r3
  return ret;
 80013ce:	b2c0      	uxtb	r0, r0
}
 80013d0:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 80013d2:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 80013d4:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 80013d6:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 80013d8:	2b08      	cmp	r3, #8
 80013da:	d0ec      	beq.n	80013b6 <MX_SPI2_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 80013dc:	0840      	lsrs	r0, r0, #1
 80013de:	e7e8      	b.n	80013b2 <MX_SPI2_Init+0x26>
 80013e0:	40003800 	.word	0x40003800
 80013e4:	00989680 	.word	0x00989680
 80013e8:	08004b28 	.word	0x08004b28

080013ec <BSP_SPI2_Init>:
{
 80013ec:	b570      	push	{r4, r5, r6, lr}
  hspi2.Instance  = SPI2;
 80013ee:	4d1a      	ldr	r5, [pc, #104]	; (8001458 <BSP_SPI2_Init+0x6c>)
 80013f0:	4b1a      	ldr	r3, [pc, #104]	; (800145c <BSP_SPI2_Init+0x70>)
{
 80013f2:	b086      	sub	sp, #24
  if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 80013f4:	0028      	movs	r0, r5
  hspi2.Instance  = SPI2;
 80013f6:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 80013f8:	f001 fde4 	bl	8002fc4 <HAL_SPI_GetState>
 80013fc:	1e04      	subs	r4, r0, #0
 80013fe:	d002      	beq.n	8001406 <BSP_SPI2_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8001400:	2000      	movs	r0, #0
}
 8001402:	b006      	add	sp, #24
 8001404:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_RCC_SPI2_CLK_ENABLE();
 8001406:	2680      	movs	r6, #128	; 0x80
 8001408:	4a15      	ldr	r2, [pc, #84]	; (8001460 <BSP_SPI2_Init+0x74>)
 800140a:	01f6      	lsls	r6, r6, #7
 800140c:	6b93      	ldr	r3, [r2, #56]	; 0x38
  HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800140e:	a901      	add	r1, sp, #4
  __HAL_RCC_SPI2_CLK_ENABLE();
 8001410:	4333      	orrs	r3, r6
 8001412:	6393      	str	r3, [r2, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	2302      	movs	r3, #2
 8001416:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	3301      	adds	r3, #1
 800141a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 800141c:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8001420:	021b      	lsls	r3, r3, #8
  GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 8001422:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001424:	480f      	ldr	r0, [pc, #60]	; (8001464 <BSP_SPI2_Init+0x78>)
  GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8001426:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001428:	f000 faac 	bl	8001984 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 800142c:	a901      	add	r1, sp, #4
 800142e:	480d      	ldr	r0, [pc, #52]	; (8001464 <BSP_SPI2_Init+0x78>)
  GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 8001430:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 8001432:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001434:	f000 faa6 	bl	8001984 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8001438:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 800143a:	480a      	ldr	r0, [pc, #40]	; (8001464 <BSP_SPI2_Init+0x78>)
  GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 800143c:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 800143e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 8001440:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8001442:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001444:	f000 fa9e 	bl	8001984 <HAL_GPIO_Init>
    if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8001448:	0028      	movs	r0, r5
 800144a:	f7ff ff9f 	bl	800138c <MX_SPI2_Init>
 800144e:	2800      	cmp	r0, #0
 8001450:	d0d6      	beq.n	8001400 <BSP_SPI2_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 8001452:	2008      	movs	r0, #8
 8001454:	4240      	negs	r0, r0
  return ret;
 8001456:	e7d4      	b.n	8001402 <BSP_SPI2_Init+0x16>
 8001458:	20000570 	.word	0x20000570
 800145c:	40003800 	.word	0x40003800
 8001460:	40021000 	.word	0x40021000
 8001464:	50000400 	.word	0x50000400

08001468 <SX126x_RADIO_IoInit>:
static void SX126x_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void SX126x_RADIO_SPI_IoDeInit(void);
/* Exported functions --------------------------------------------------------*/

void SX126x_RADIO_IoInit(void)
{
 8001468:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* DIO IO Init */

//   Set DioIrqHandler port in IT_RISING mode
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 800146a:	2602      	movs	r6, #2
{
 800146c:	b093      	sub	sp, #76	; 0x4c
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 800146e:	4c47      	ldr	r4, [pc, #284]	; (800158c <SX126x_RADIO_IoInit+0x124>)
  GPIO_InitTypeDef initStruct = {0};
 8001470:	220c      	movs	r2, #12
 8001472:	2100      	movs	r1, #0
 8001474:	a80a      	add	r0, sp, #40	; 0x28
 8001476:	f002 ff0c 	bl	8004292 <memset>
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 800147a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Mode = GPIO_MODE_IT_RISING;
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Speed = GPIO_SPEED_HIGH;
  initStruct.Pin = RADIO_DIO_1_PIN;
 800147c:	2501      	movs	r5, #1
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 800147e:	4333      	orrs	r3, r6
 8001480:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001482:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8001484:	a908      	add	r1, sp, #32
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8001486:	4033      	ands	r3, r6
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	9b01      	ldr	r3, [sp, #4]
  initStruct.Mode = GPIO_MODE_IT_RISING;
 800148c:	4b40      	ldr	r3, [pc, #256]	; (8001590 <SX126x_RADIO_IoInit+0x128>)
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 800148e:	4841      	ldr	r0, [pc, #260]	; (8001594 <SX126x_RADIO_IoInit+0x12c>)
  initStruct.Mode = GPIO_MODE_IT_RISING;
 8001490:	9309      	str	r3, [sp, #36]	; 0x24
  initStruct.Speed = GPIO_SPEED_HIGH;
 8001492:	2303      	movs	r3, #3
  initStruct.Pin = RADIO_DIO_1_PIN;
 8001494:	9508      	str	r5, [sp, #32]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8001496:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8001498:	f000 fa74 	bl	8001984 <HAL_GPIO_Init>

  /* Radio IO Init */
  RADIO_DEV_SEL_CLK_ENABLE();
 800149c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  RADIO_BUSY_CLK_ENABLE();
  initStruct.Mode = GPIO_MODE_INPUT;
 800149e:	2700      	movs	r7, #0
  RADIO_DEV_SEL_CLK_ENABLE();
 80014a0:	432b      	orrs	r3, r5
 80014a2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Pull = GPIO_NOPULL;
  //initStruct.Pin = DEVICE_SEL_PIN;
  //HAL_GPIO_Init(DEVICE_SEL_PORT, &initStruct);
  initStruct.Pin = RADIO_BUSY_PIN;
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 80014a6:	a908      	add	r1, sp, #32
  RADIO_DEV_SEL_CLK_ENABLE();
 80014a8:	402b      	ands	r3, r5
 80014aa:	9302      	str	r3, [sp, #8]
 80014ac:	9b02      	ldr	r3, [sp, #8]
  RADIO_BUSY_CLK_ENABLE();
 80014ae:	2304      	movs	r3, #4
 80014b0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 80014b2:	4839      	ldr	r0, [pc, #228]	; (8001598 <SX126x_RADIO_IoInit+0x130>)
  RADIO_BUSY_CLK_ENABLE();
 80014b4:	431a      	orrs	r2, r3
 80014b6:	62e2      	str	r2, [r4, #44]	; 0x2c
 80014b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  initStruct.Pin = RADIO_BUSY_PIN;
 80014ba:	9308      	str	r3, [sp, #32]
  RADIO_BUSY_CLK_ENABLE();
 80014bc:	401a      	ands	r2, r3
 80014be:	9203      	str	r2, [sp, #12]
 80014c0:	9a03      	ldr	r2, [sp, #12]
  initStruct.Mode = GPIO_MODE_INPUT;
 80014c2:	9709      	str	r7, [sp, #36]	; 0x24
  initStruct.Pull = GPIO_NOPULL;
 80014c4:	970a      	str	r7, [sp, #40]	; 0x28
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 80014c6:	f000 fa5d 	bl	8001984 <HAL_GPIO_Init>

  /* Antenna IO Init */
  RADIO_ANT_SWITCH_RX_CLK_ENABLE();
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
  initStruct.Pin = RADIO_ANT_SWITCH_RX_PIN;
 80014ca:	2280      	movs	r2, #128	; 0x80
  HAL_GPIO_Init(RADIO_ANT_SWITCH_RX_PORT, &initStruct);
 80014cc:	20a0      	movs	r0, #160	; 0xa0
  RADIO_ANT_SWITCH_RX_CLK_ENABLE();
 80014ce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Pin = RADIO_ANT_SWITCH_RX_PIN;
 80014d0:	0212      	lsls	r2, r2, #8
  RADIO_ANT_SWITCH_RX_CLK_ENABLE();
 80014d2:	432b      	orrs	r3, r5
 80014d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80014d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_ANT_SWITCH_RX_PORT, &initStruct);
 80014d8:	a908      	add	r1, sp, #32
  RADIO_ANT_SWITCH_RX_CLK_ENABLE();
 80014da:	402b      	ands	r3, r5
 80014dc:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_RX_PORT, &initStruct);
 80014de:	05c0      	lsls	r0, r0, #23
  RADIO_ANT_SWITCH_RX_CLK_ENABLE();
 80014e0:	9b04      	ldr	r3, [sp, #16]
  initStruct.Pin = RADIO_ANT_SWITCH_RX_PIN;
 80014e2:	9208      	str	r2, [sp, #32]
  initStruct.Pull = GPIO_NOPULL;
 80014e4:	970a      	str	r7, [sp, #40]	; 0x28
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e6:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(RADIO_ANT_SWITCH_RX_PORT, &initStruct);
 80014e8:	f000 fa4c 	bl	8001984 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_ANT_SWITCH_RX_PORT, RADIO_ANT_SWITCH_RX_PIN, GPIO_PIN_RESET);
 80014ec:	2180      	movs	r1, #128	; 0x80
 80014ee:	20a0      	movs	r0, #160	; 0xa0
 80014f0:	003a      	movs	r2, r7
 80014f2:	0209      	lsls	r1, r1, #8
 80014f4:	05c0      	lsls	r0, r0, #23
 80014f6:	f000 fb85 	bl	8001c04 <HAL_GPIO_WritePin>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 80014fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80014fc:	2280      	movs	r2, #128	; 0x80
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 80014fe:	4333      	orrs	r3, r6
 8001500:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001502:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8001504:	0212      	lsls	r2, r2, #8
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8001506:	4033      	ands	r3, r6
 8001508:	9305      	str	r3, [sp, #20]
 800150a:	9b05      	ldr	r3, [sp, #20]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 800150c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800150e:	a90d      	add	r1, sp, #52	; 0x34
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8001510:	4333      	orrs	r3, r6
 8001512:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001514:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001516:	481f      	ldr	r0, [pc, #124]	; (8001594 <SX126x_RADIO_IoInit+0x12c>)
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8001518:	4033      	ands	r3, r6
 800151a:	9306      	str	r3, [sp, #24]
 800151c:	9b06      	ldr	r3, [sp, #24]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 800151e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001520:	4333      	orrs	r3, r6
 8001522:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001524:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8001526:	920d      	str	r2, [sp, #52]	; 0x34
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8001528:	4033      	ands	r3, r6
 800152a:	9307      	str	r3, [sp, #28]
 800152c:	9b07      	ldr	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	960e      	str	r6, [sp, #56]	; 0x38
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001534:	960f      	str	r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8001536:	9711      	str	r7, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8001538:	f000 fa24 	bl	8001984 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800153c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800153e:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8001540:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001542:	4814      	ldr	r0, [pc, #80]	; (8001594 <SX126x_RADIO_IoInit+0x12c>)
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8001544:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8001546:	9711      	str	r7, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8001548:	f000 fa1c 	bl	8001984 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 800154c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 800154e:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8001550:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001552:	4810      	ldr	r0, [pc, #64]	; (8001594 <SX126x_RADIO_IoInit+0x12c>)
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8001554:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8001556:	9711      	str	r7, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8001558:	f000 fa14 	bl	8001984 <HAL_GPIO_Init>
  RADIO_NSS_CLK_ENABLE();
 800155c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 800155e:	a908      	add	r1, sp, #32
  RADIO_NSS_CLK_ENABLE();
 8001560:	432b      	orrs	r3, r5
 8001562:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001564:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Pin = RADIO_NSS_PIN;
 8001566:	2480      	movs	r4, #128	; 0x80
  RADIO_NSS_CLK_ENABLE();
 8001568:	402b      	ands	r3, r5
 800156a:	930d      	str	r3, [sp, #52]	; 0x34
  initStruct.Pin = RADIO_NSS_PIN;
 800156c:	0164      	lsls	r4, r4, #5
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 800156e:	4809      	ldr	r0, [pc, #36]	; (8001594 <SX126x_RADIO_IoInit+0x12c>)
  RADIO_NSS_CLK_ENABLE();
 8001570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	9509      	str	r5, [sp, #36]	; 0x24
  initStruct.Pull = GPIO_NOPULL;
 8001574:	970a      	str	r7, [sp, #40]	; 0x28
  initStruct.Pin = RADIO_NSS_PIN;
 8001576:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 8001578:	f000 fa04 	bl	8001984 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN,  GPIO_PIN_SET);
 800157c:	002a      	movs	r2, r5
 800157e:	0021      	movs	r1, r4
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <SX126x_RADIO_IoInit+0x12c>)
 8001582:	f000 fb3f 	bl	8001c04 <HAL_GPIO_WritePin>
}
 8001586:	b013      	add	sp, #76	; 0x4c
 8001588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	40021000 	.word	0x40021000
 8001590:	10110000 	.word	0x10110000
 8001594:	50000400 	.word	0x50000400
 8001598:	50000800 	.word	0x50000800

0800159c <SX126x_RADIO_Bus_Init>:
{
 800159c:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 800159e:	f7ff ff25 	bl	80013ec <BSP_SPI2_Init>
}
 80015a2:	bd10      	pop	{r4, pc}

080015a4 <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 80015a4:	2280      	movs	r2, #128	; 0x80
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <SystemInit+0x44>)
 80015a8:	0052      	lsls	r2, r2, #1
 80015aa:	6819      	ldr	r1, [r3, #0]
 80015ac:	430a      	orrs	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	490e      	ldr	r1, [pc, #56]	; (80015ec <SystemInit+0x48>)
 80015b4:	400a      	ands	r2, r1
 80015b6:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	490d      	ldr	r1, [pc, #52]	; (80015f0 <SystemInit+0x4c>)
 80015bc:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80015be:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 80015c0:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80015c2:	689a      	ldr	r2, [r3, #8]
 80015c4:	438a      	bics	r2, r1
 80015c6:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	490a      	ldr	r1, [pc, #40]	; (80015f4 <SystemInit+0x50>)
 80015cc:	400a      	ands	r2, r1
 80015ce:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	4909      	ldr	r1, [pc, #36]	; (80015f8 <SystemInit+0x54>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015d8:	2200      	movs	r2, #0
 80015da:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015dc:	2280      	movs	r2, #128	; 0x80
 80015de:	4b07      	ldr	r3, [pc, #28]	; (80015fc <SystemInit+0x58>)
 80015e0:	0512      	lsls	r2, r2, #20
 80015e2:	609a      	str	r2, [r3, #8]
#endif
}
 80015e4:	4770      	bx	lr
 80015e6:	46c0      	nop			; (mov r8, r8)
 80015e8:	40021000 	.word	0x40021000
 80015ec:	88ff400c 	.word	0x88ff400c
 80015f0:	fef6fff6 	.word	0xfef6fff6
 80015f4:	fffbffff 	.word	0xfffbffff
 80015f8:	ff02ffff 	.word	0xff02ffff
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001600:	2302      	movs	r3, #2
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <HAL_Init+0x24>)
{
 8001604:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001606:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001608:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800160a:	430b      	orrs	r3, r1
 800160c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800160e:	f7ff fc35 	bl	8000e7c <HAL_InitTick>
 8001612:	1e04      	subs	r4, r0, #0
 8001614:	d103      	bne.n	800161e <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001616:	f7ff fbab 	bl	8000d70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 800161a:	0020      	movs	r0, r4
 800161c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800161e:	2401      	movs	r4, #1
 8001620:	e7fb      	b.n	800161a <HAL_Init+0x1a>
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	40022000 	.word	0x40022000

08001628 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001628:	4a03      	ldr	r2, [pc, #12]	; (8001638 <HAL_IncTick+0x10>)
 800162a:	4b04      	ldr	r3, [pc, #16]	; (800163c <HAL_IncTick+0x14>)
 800162c:	6811      	ldr	r1, [r2, #0]
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	185b      	adds	r3, r3, r1
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	4770      	bx	lr
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	200005c8 	.word	0x200005c8
 800163c:	20000008 	.word	0x20000008

08001640 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001640:	2101      	movs	r1, #1
 8001642:	4a02      	ldr	r2, [pc, #8]	; (800164c <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8001644:	6853      	ldr	r3, [r2, #4]
 8001646:	438b      	bics	r3, r1
 8001648:	6053      	str	r3, [r2, #4]
}
 800164a:	4770      	bx	lr
 800164c:	40015800 	.word	0x40015800

08001650 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001650:	2102      	movs	r1, #2
 8001652:	4a02      	ldr	r2, [pc, #8]	; (800165c <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8001654:	6853      	ldr	r3, [r2, #4]
 8001656:	438b      	bics	r3, r1
 8001658:	6053      	str	r3, [r2, #4]
}
 800165a:	4770      	bx	lr
 800165c:	40015800 	.word	0x40015800

08001660 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8001660:	2104      	movs	r1, #4
 8001662:	4a02      	ldr	r2, [pc, #8]	; (800166c <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8001664:	6853      	ldr	r3, [r2, #4]
 8001666:	438b      	bics	r3, r1
 8001668:	6053      	str	r3, [r2, #4]
}
 800166a:	4770      	bx	lr
 800166c:	40015800 	.word	0x40015800

08001670 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001670:	b530      	push	{r4, r5, lr}
 8001672:	25ff      	movs	r5, #255	; 0xff
 8001674:	2403      	movs	r4, #3
 8001676:	002a      	movs	r2, r5
 8001678:	b2c3      	uxtb	r3, r0
 800167a:	401c      	ands	r4, r3
 800167c:	00e4      	lsls	r4, r4, #3
 800167e:	40a2      	lsls	r2, r4
 8001680:	0189      	lsls	r1, r1, #6
 8001682:	4029      	ands	r1, r5
 8001684:	43d2      	mvns	r2, r2
 8001686:	40a1      	lsls	r1, r4
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001688:	2800      	cmp	r0, #0
 800168a:	db0a      	blt.n	80016a2 <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800168c:	24c0      	movs	r4, #192	; 0xc0
 800168e:	4b0b      	ldr	r3, [pc, #44]	; (80016bc <HAL_NVIC_SetPriority+0x4c>)
 8001690:	0880      	lsrs	r0, r0, #2
 8001692:	0080      	lsls	r0, r0, #2
 8001694:	18c0      	adds	r0, r0, r3
 8001696:	00a4      	lsls	r4, r4, #2
 8001698:	5903      	ldr	r3, [r0, r4]
 800169a:	401a      	ands	r2, r3
 800169c:	4311      	orrs	r1, r2
 800169e:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80016a0:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a2:	200f      	movs	r0, #15
 80016a4:	4003      	ands	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_NVIC_SetPriority+0x50>)
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	181b      	adds	r3, r3, r0
 80016b0:	69d8      	ldr	r0, [r3, #28]
 80016b2:	4002      	ands	r2, r0
 80016b4:	4311      	orrs	r1, r2
 80016b6:	61d9      	str	r1, [r3, #28]
 80016b8:	e7f2      	b.n	80016a0 <HAL_NVIC_SetPriority+0x30>
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	e000e100 	.word	0xe000e100
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80016c4:	2800      	cmp	r0, #0
 80016c6:	db05      	blt.n	80016d4 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016c8:	231f      	movs	r3, #31
 80016ca:	4018      	ands	r0, r3
 80016cc:	3b1e      	subs	r3, #30
 80016ce:	4083      	lsls	r3, r0
 80016d0:	4a01      	ldr	r2, [pc, #4]	; (80016d8 <HAL_NVIC_EnableIRQ+0x14>)
 80016d2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80016d4:	4770      	bx	lr
 80016d6:	46c0      	nop			; (mov r8, r8)
 80016d8:	e000e100 	.word	0xe000e100

080016dc <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80016dc:	2800      	cmp	r0, #0
 80016de:	db09      	blt.n	80016f4 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016e0:	231f      	movs	r3, #31
 80016e2:	4018      	ands	r0, r3
 80016e4:	3b1e      	subs	r3, #30
 80016e6:	4083      	lsls	r3, r0
 80016e8:	4a03      	ldr	r2, [pc, #12]	; (80016f8 <HAL_NVIC_DisableIRQ+0x1c>)
 80016ea:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80016f0:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80016f4:	4770      	bx	lr
 80016f6:	46c0      	nop			; (mov r8, r8)
 80016f8:	e000e104 	.word	0xe000e104

080016fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016fe:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8001700:	2001      	movs	r0, #1
  if(hdma == NULL)
 8001702:	2c00      	cmp	r4, #0
 8001704:	d035      	beq.n	8001772 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001706:	6825      	ldr	r5, [r4, #0]
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <HAL_DMA_Init+0x78>)
 800170a:	2114      	movs	r1, #20
 800170c:	18e8      	adds	r0, r5, r3
 800170e:	f7fe fd17 	bl	8000140 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001714:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8001716:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001718:	2302      	movs	r3, #2
 800171a:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800171c:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800171e:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001720:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001722:	4b16      	ldr	r3, [pc, #88]	; (800177c <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001724:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001726:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8001728:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172a:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 800172c:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800172e:	433b      	orrs	r3, r7
 8001730:	6967      	ldr	r7, [r4, #20]
 8001732:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001734:	69a7      	ldr	r7, [r4, #24]
 8001736:	433b      	orrs	r3, r7
 8001738:	69e7      	ldr	r7, [r4, #28]
 800173a:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 800173c:	6a27      	ldr	r7, [r4, #32]
 800173e:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8001740:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001742:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	01db      	lsls	r3, r3, #7
 8001748:	4299      	cmp	r1, r3
 800174a:	d00c      	beq.n	8001766 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800174c:	251c      	movs	r5, #28
 800174e:	4028      	ands	r0, r5
 8001750:	3d0d      	subs	r5, #13
 8001752:	4085      	lsls	r5, r0
 8001754:	490a      	ldr	r1, [pc, #40]	; (8001780 <HAL_DMA_Init+0x84>)
 8001756:	680b      	ldr	r3, [r1, #0]
 8001758:	43ab      	bics	r3, r5
 800175a:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800175c:	6863      	ldr	r3, [r4, #4]
 800175e:	680d      	ldr	r5, [r1, #0]
 8001760:	4083      	lsls	r3, r0
 8001762:	432b      	orrs	r3, r5
 8001764:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001766:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001768:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176a:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800176c:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800176e:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8001770:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8001772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001774:	bffdfff8 	.word	0xbffdfff8
 8001778:	40020000 	.word	0x40020000
 800177c:	ffff800f 	.word	0xffff800f
 8001780:	400200a8 	.word	0x400200a8

08001784 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001784:	b570      	push	{r4, r5, r6, lr}
 8001786:	2501      	movs	r5, #1
 8001788:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 800178a:	0028      	movs	r0, r5
  if (NULL == hdma )
 800178c:	2c00      	cmp	r4, #0
 800178e:	d021      	beq.n	80017d4 <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001790:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001792:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 8001794:	6833      	ldr	r3, [r6, #0]
 8001796:	43ab      	bics	r3, r5
 8001798:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <HAL_DMA_DeInit+0x54>)
 800179c:	18f0      	adds	r0, r6, r3
 800179e:	f7fe fccf 	bl	8000140 <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017a2:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017a4:	0083      	lsls	r3, r0, #2
 80017a6:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017a8:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 80017aa:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017ac:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017ae:	390d      	subs	r1, #13
 80017b0:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 80017b2:	4a0a      	ldr	r2, [pc, #40]	; (80017dc <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80017b4:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 80017b6:	6422      	str	r2, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 80017b8:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017ba:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017bc:	4d08      	ldr	r5, [pc, #32]	; (80017e0 <HAL_DMA_DeInit+0x5c>)
 80017be:	682a      	ldr	r2, [r5, #0]
 80017c0:	438a      	bics	r2, r1
 80017c2:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 80017c4:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80017c6:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80017c8:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80017ca:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017cc:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80017ce:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 80017d0:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 80017d2:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 80017d4:	bd70      	pop	{r4, r5, r6, pc}
 80017d6:	46c0      	nop			; (mov r8, r8)
 80017d8:	bffdfff8 	.word	0xbffdfff8
 80017dc:	40020000 	.word	0x40020000
 80017e0:	400200a8 	.word	0x400200a8

080017e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017e6:	1d44      	adds	r4, r0, #5
 80017e8:	7fe6      	ldrb	r6, [r4, #31]
{
 80017ea:	0005      	movs	r5, r0
  __HAL_LOCK(hdma);
 80017ec:	2002      	movs	r0, #2
 80017ee:	2e01      	cmp	r6, #1
 80017f0:	d02b      	beq.n	800184a <HAL_DMA_Start_IT+0x66>
 80017f2:	3801      	subs	r0, #1
 80017f4:	77e0      	strb	r0, [r4, #31]

  if(HAL_DMA_STATE_READY == hdma->State)
 80017f6:	1da8      	adds	r0, r5, #6
 80017f8:	7fc6      	ldrb	r6, [r0, #31]
 80017fa:	4684      	mov	ip, r0
 80017fc:	b2f6      	uxtb	r6, r6
 80017fe:	2002      	movs	r0, #2
 8001800:	2700      	movs	r7, #0
 8001802:	2e01      	cmp	r6, #1
 8001804:	d12c      	bne.n	8001860 <HAL_DMA_Start_IT+0x7c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001806:	4664      	mov	r4, ip
 8001808:	77e0      	strb	r0, [r4, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800180a:	682c      	ldr	r4, [r5, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800180c:	63ef      	str	r7, [r5, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 800180e:	6820      	ldr	r0, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001810:	371c      	adds	r7, #28
    __HAL_DMA_DISABLE(hdma);
 8001812:	43b0      	bics	r0, r6
 8001814:	6020      	str	r0, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001816:	6c28      	ldr	r0, [r5, #64]	; 0x40
 8001818:	9001      	str	r0, [sp, #4]
 800181a:	6c68      	ldr	r0, [r5, #68]	; 0x44
 800181c:	4007      	ands	r7, r0
 800181e:	40be      	lsls	r6, r7
 8001820:	9801      	ldr	r0, [sp, #4]
 8001822:	6046      	str	r6, [r0, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001824:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001826:	68ab      	ldr	r3, [r5, #8]
 8001828:	6828      	ldr	r0, [r5, #0]
 800182a:	2b10      	cmp	r3, #16
 800182c:	d10e      	bne.n	800184c <HAL_DMA_Start_IT+0x68>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800182e:	60a2      	str	r2, [r4, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001830:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001832:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00c      	beq.n	8001852 <HAL_DMA_Start_IT+0x6e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001838:	230e      	movs	r3, #14
 800183a:	6822      	ldr	r2, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800183c:	4313      	orrs	r3, r2
 800183e:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001840:	2301      	movs	r3, #1
 8001842:	6802      	ldr	r2, [r0, #0]
 8001844:	4313      	orrs	r3, r2
 8001846:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001848:	2000      	movs	r0, #0
}
 800184a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800184c:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 800184e:	60e2      	str	r2, [r4, #12]
 8001850:	e7ef      	b.n	8001832 <HAL_DMA_Start_IT+0x4e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001852:	2204      	movs	r2, #4
 8001854:	6823      	ldr	r3, [r4, #0]
 8001856:	4393      	bics	r3, r2
 8001858:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800185a:	6822      	ldr	r2, [r4, #0]
 800185c:	230a      	movs	r3, #10
 800185e:	e7ed      	b.n	800183c <HAL_DMA_Start_IT+0x58>
    __HAL_UNLOCK(hdma);
 8001860:	77e7      	strb	r7, [r4, #31]
 8001862:	e7f2      	b.n	800184a <HAL_DMA_Start_IT+0x66>

08001864 <HAL_DMA_Abort>:
{
 8001864:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001866:	1d85      	adds	r5, r0, #6
 8001868:	7feb      	ldrb	r3, [r5, #31]
 800186a:	1d44      	adds	r4, r0, #5
 800186c:	2b02      	cmp	r3, #2
 800186e:	d005      	beq.n	800187c <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001870:	2304      	movs	r3, #4
 8001872:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8001874:	2300      	movs	r3, #0
    return HAL_ERROR;
 8001876:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001878:	77e3      	strb	r3, [r4, #31]
}
 800187a:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800187c:	210e      	movs	r1, #14
 800187e:	6803      	ldr	r3, [r0, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	438a      	bics	r2, r1
 8001884:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8001886:	2201      	movs	r2, #1
 8001888:	6819      	ldr	r1, [r3, #0]
 800188a:	4391      	bics	r1, r2
 800188c:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800188e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001890:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001892:	201c      	movs	r0, #28
 8001894:	4003      	ands	r3, r0
 8001896:	0010      	movs	r0, r2
 8001898:	4098      	lsls	r0, r3
 800189a:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 800189c:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 800189e:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 80018a0:	77e0      	strb	r0, [r4, #31]
    return status;
 80018a2:	e7ea      	b.n	800187a <HAL_DMA_Abort+0x16>

080018a4 <HAL_DMA_Abort_IT>:
{
 80018a4:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018a6:	1d84      	adds	r4, r0, #6
 80018a8:	7fe3      	ldrb	r3, [r4, #31]
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d004      	beq.n	80018b8 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ae:	2304      	movs	r3, #4
 80018b0:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80018b2:	3b03      	subs	r3, #3
}
 80018b4:	0018      	movs	r0, r3
 80018b6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018b8:	210e      	movs	r1, #14
 80018ba:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018bc:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	438a      	bics	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80018c4:	2201      	movs	r2, #1
 80018c6:	6819      	ldr	r1, [r3, #0]
 80018c8:	4391      	bics	r1, r2
 80018ca:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018cc:	231c      	movs	r3, #28
 80018ce:	402b      	ands	r3, r5
 80018d0:	0015      	movs	r5, r2
 80018d2:	409d      	lsls	r5, r3
 80018d4:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 80018d6:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80018d8:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80018da:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80018dc:	2400      	movs	r4, #0
    if(hdma->XferAbortCallback != NULL)
 80018de:	6b82      	ldr	r2, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 80018e0:	77dc      	strb	r4, [r3, #31]
  HAL_StatusTypeDef status = HAL_OK;
 80018e2:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80018e4:	42a2      	cmp	r2, r4
 80018e6:	d0e5      	beq.n	80018b4 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80018e8:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80018ea:	0023      	movs	r3, r4
 80018ec:	e7e2      	b.n	80018b4 <HAL_DMA_Abort_IT+0x10>

080018ee <HAL_DMA_IRQHandler>:
{
 80018ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80018f0:	221c      	movs	r2, #28
 80018f2:	2704      	movs	r7, #4
 80018f4:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018f6:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80018f8:	4032      	ands	r2, r6
 80018fa:	003e      	movs	r6, r7
 80018fc:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80018fe:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001900:	6803      	ldr	r3, [r0, #0]
 8001902:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8001904:	4235      	tst	r5, r6
 8001906:	d00d      	beq.n	8001924 <HAL_DMA_IRQHandler+0x36>
 8001908:	423c      	tst	r4, r7
 800190a:	d00b      	beq.n	8001924 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	0692      	lsls	r2, r2, #26
 8001910:	d402      	bmi.n	8001918 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	43ba      	bics	r2, r7
 8001916:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8001918:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800191a:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 800191c:	2b00      	cmp	r3, #0
 800191e:	d019      	beq.n	8001954 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8001920:	4798      	blx	r3
  return;
 8001922:	e017      	b.n	8001954 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001924:	2702      	movs	r7, #2
 8001926:	003e      	movs	r6, r7
 8001928:	4096      	lsls	r6, r2
 800192a:	4235      	tst	r5, r6
 800192c:	d013      	beq.n	8001956 <HAL_DMA_IRQHandler+0x68>
 800192e:	423c      	tst	r4, r7
 8001930:	d011      	beq.n	8001956 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	0692      	lsls	r2, r2, #26
 8001936:	d406      	bmi.n	8001946 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001938:	240a      	movs	r4, #10
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	43a2      	bics	r2, r4
 800193e:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001940:	2201      	movs	r2, #1
 8001942:	1d83      	adds	r3, r0, #6
 8001944:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8001946:	2200      	movs	r2, #0
 8001948:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800194a:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 800194c:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 800194e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8001950:	4293      	cmp	r3, r2
 8001952:	d1e5      	bne.n	8001920 <HAL_DMA_IRQHandler+0x32>
}
 8001954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8001956:	2608      	movs	r6, #8
 8001958:	0037      	movs	r7, r6
 800195a:	4097      	lsls	r7, r2
 800195c:	423d      	tst	r5, r7
 800195e:	d0f9      	beq.n	8001954 <HAL_DMA_IRQHandler+0x66>
 8001960:	4234      	tst	r4, r6
 8001962:	d0f7      	beq.n	8001954 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001964:	250e      	movs	r5, #14
 8001966:	681c      	ldr	r4, [r3, #0]
 8001968:	43ac      	bics	r4, r5
 800196a:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800196c:	2301      	movs	r3, #1
 800196e:	001c      	movs	r4, r3
 8001970:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8001972:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001974:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001976:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8001978:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 800197a:	2200      	movs	r2, #0
 800197c:	1d43      	adds	r3, r0, #5
 800197e:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8001980:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001982:	e7e5      	b.n	8001950 <HAL_DMA_IRQHandler+0x62>

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b5f0      	push	{r4, r5, r6, r7, lr}
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001986:	4a57      	ldr	r2, [pc, #348]	; (8001ae4 <HAL_GPIO_Init+0x160>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8001988:	680b      	ldr	r3, [r1, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800198a:	1882      	adds	r2, r0, r2
 800198c:	1e54      	subs	r4, r2, #1
 800198e:	41a2      	sbcs	r2, r4
{
 8001990:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != 0)
 8001992:	9304      	str	r3, [sp, #16]
  uint32_t position = 0x00U;
 8001994:	2300      	movs	r3, #0
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001996:	3205      	adds	r2, #5
 8001998:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800199a:	9a04      	ldr	r2, [sp, #16]
 800199c:	40da      	lsrs	r2, r3
 800199e:	d101      	bne.n	80019a4 <HAL_GPIO_Init+0x20>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80019a0:	b007      	add	sp, #28
 80019a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80019a4:	2701      	movs	r7, #1
 80019a6:	003a      	movs	r2, r7
 80019a8:	409a      	lsls	r2, r3
 80019aa:	9203      	str	r2, [sp, #12]
 80019ac:	9c03      	ldr	r4, [sp, #12]
 80019ae:	9a04      	ldr	r2, [sp, #16]
 80019b0:	4022      	ands	r2, r4
 80019b2:	9201      	str	r2, [sp, #4]
    if (iocurrent)
 80019b4:	d100      	bne.n	80019b8 <HAL_GPIO_Init+0x34>
 80019b6:	e092      	b.n	8001ade <HAL_GPIO_Init+0x15a>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b8:	684a      	ldr	r2, [r1, #4]
 80019ba:	005c      	lsls	r4, r3, #1
 80019bc:	4694      	mov	ip, r2
 80019be:	2210      	movs	r2, #16
 80019c0:	4666      	mov	r6, ip
 80019c2:	4396      	bics	r6, r2
 80019c4:	3a0d      	subs	r2, #13
 80019c6:	40a2      	lsls	r2, r4
 80019c8:	43d2      	mvns	r2, r2
 80019ca:	9202      	str	r2, [sp, #8]
 80019cc:	1e72      	subs	r2, r6, #1
 80019ce:	42ba      	cmp	r2, r7
 80019d0:	d80f      	bhi.n	80019f2 <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 80019d2:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80019d4:	9a02      	ldr	r2, [sp, #8]
 80019d6:	4015      	ands	r5, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019d8:	68ca      	ldr	r2, [r1, #12]
 80019da:	40a2      	lsls	r2, r4
 80019dc:	432a      	orrs	r2, r5
        GPIOx->OSPEEDR = temp;
 80019de:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 80019e0:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e2:	9a03      	ldr	r2, [sp, #12]
 80019e4:	4395      	bics	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019e6:	4662      	mov	r2, ip
 80019e8:	0912      	lsrs	r2, r2, #4
 80019ea:	403a      	ands	r2, r7
 80019ec:	409a      	lsls	r2, r3
 80019ee:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 80019f0:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80019f2:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019f4:	9a02      	ldr	r2, [sp, #8]
 80019f6:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019f8:	688a      	ldr	r2, [r1, #8]
 80019fa:	40a2      	lsls	r2, r4
 80019fc:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 80019fe:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a00:	2e02      	cmp	r6, #2
 8001a02:	d10d      	bne.n	8001a20 <HAL_GPIO_Init+0x9c>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001a04:	2507      	movs	r5, #7
 8001a06:	270f      	movs	r7, #15
 8001a08:	401d      	ands	r5, r3
 8001a0a:	00ad      	lsls	r5, r5, #2
 8001a0c:	40af      	lsls	r7, r5
        temp = GPIOx->AFR[position >> 3U];
 8001a0e:	08da      	lsrs	r2, r3, #3
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	1882      	adds	r2, r0, r2
 8001a14:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001a16:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001a18:	690f      	ldr	r7, [r1, #16]
 8001a1a:	40af      	lsls	r7, r5
 8001a1c:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 8001a1e:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8001a20:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a22:	9a02      	ldr	r2, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a24:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a26:	402a      	ands	r2, r5
 8001a28:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a2a:	4662      	mov	r2, ip
 8001a2c:	4032      	ands	r2, r6
 8001a2e:	40a2      	lsls	r2, r4
 8001a30:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 8001a32:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a34:	4662      	mov	r2, ip
 8001a36:	00d2      	lsls	r2, r2, #3
 8001a38:	d551      	bpl.n	8001ade <HAL_GPIO_Init+0x15a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3a:	2501      	movs	r5, #1
 8001a3c:	4c2a      	ldr	r4, [pc, #168]	; (8001ae8 <HAL_GPIO_Init+0x164>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001a3e:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a40:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001a42:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001a44:	001d      	movs	r5, r3
 8001a46:	4035      	ands	r5, r6
 8001a48:	00ad      	lsls	r5, r5, #2
 8001a4a:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4c:	6362      	str	r2, [r4, #52]	; 0x34
 8001a4e:	4a27      	ldr	r2, [pc, #156]	; (8001aec <HAL_GPIO_Init+0x168>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8001a50:	089c      	lsrs	r4, r3, #2
 8001a52:	00a4      	lsls	r4, r4, #2
 8001a54:	18a4      	adds	r4, r4, r2
 8001a56:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001a58:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a5a:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001a5c:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a5e:	05ff      	lsls	r7, r7, #23
 8001a60:	2200      	movs	r2, #0
 8001a62:	42b8      	cmp	r0, r7
 8001a64:	d010      	beq.n	8001a88 <HAL_GPIO_Init+0x104>
 8001a66:	4f22      	ldr	r7, [pc, #136]	; (8001af0 <HAL_GPIO_Init+0x16c>)
 8001a68:	3201      	adds	r2, #1
 8001a6a:	42b8      	cmp	r0, r7
 8001a6c:	d00c      	beq.n	8001a88 <HAL_GPIO_Init+0x104>
 8001a6e:	4f21      	ldr	r7, [pc, #132]	; (8001af4 <HAL_GPIO_Init+0x170>)
 8001a70:	3201      	adds	r2, #1
 8001a72:	42b8      	cmp	r0, r7
 8001a74:	d008      	beq.n	8001a88 <HAL_GPIO_Init+0x104>
 8001a76:	4f20      	ldr	r7, [pc, #128]	; (8001af8 <HAL_GPIO_Init+0x174>)
 8001a78:	0032      	movs	r2, r6
 8001a7a:	42b8      	cmp	r0, r7
 8001a7c:	d004      	beq.n	8001a88 <HAL_GPIO_Init+0x104>
 8001a7e:	4e1f      	ldr	r6, [pc, #124]	; (8001afc <HAL_GPIO_Init+0x178>)
 8001a80:	3201      	adds	r2, #1
 8001a82:	42b0      	cmp	r0, r6
 8001a84:	d000      	beq.n	8001a88 <HAL_GPIO_Init+0x104>
 8001a86:	9a05      	ldr	r2, [sp, #20]
 8001a88:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a8a:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001a8c:	9d02      	ldr	r5, [sp, #8]
 8001a8e:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a90:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8001a92:	4a1b      	ldr	r2, [pc, #108]	; (8001b00 <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 8001a94:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 8001a96:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8001a98:	9d01      	ldr	r5, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 8001a9a:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8001a9c:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001a9e:	03ff      	lsls	r7, r7, #15
 8001aa0:	d401      	bmi.n	8001aa6 <HAL_GPIO_Init+0x122>
        temp &= ~((uint32_t)iocurrent);
 8001aa2:	0035      	movs	r5, r6
 8001aa4:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001aa6:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8001aa8:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8001aaa:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8001aac:	9d01      	ldr	r5, [sp, #4]
 8001aae:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ab0:	03bf      	lsls	r7, r7, #14
 8001ab2:	d401      	bmi.n	8001ab8 <HAL_GPIO_Init+0x134>
        temp &= ~((uint32_t)iocurrent);
 8001ab4:	0035      	movs	r5, r6
 8001ab6:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ab8:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8001aba:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8001abc:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8001abe:	9d01      	ldr	r5, [sp, #4]
 8001ac0:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac2:	02ff      	lsls	r7, r7, #11
 8001ac4:	d401      	bmi.n	8001aca <HAL_GPIO_Init+0x146>
        temp &= ~((uint32_t)iocurrent);
 8001ac6:	0035      	movs	r5, r6
 8001ac8:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001aca:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8001acc:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8001ace:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8001ad0:	9e01      	ldr	r6, [sp, #4]
 8001ad2:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ad4:	02bf      	lsls	r7, r7, #10
 8001ad6:	d401      	bmi.n	8001adc <HAL_GPIO_Init+0x158>
        temp &= ~((uint32_t)iocurrent);
 8001ad8:	4025      	ands	r5, r4
 8001ada:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8001adc:	60d6      	str	r6, [r2, #12]
    position++;
 8001ade:	3301      	adds	r3, #1
 8001ae0:	e75b      	b.n	800199a <HAL_GPIO_Init+0x16>
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	afffe400 	.word	0xafffe400
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40010000 	.word	0x40010000
 8001af0:	50000400 	.word	0x50000400
 8001af4:	50000800 	.word	0x50000800
 8001af8:	50000c00 	.word	0x50000c00
 8001afc:	50001000 	.word	0x50001000
 8001b00:	40010400 	.word	0x40010400

08001b04 <HAL_GPIO_DeInit>:
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001b04:	4a38      	ldr	r2, [pc, #224]	; (8001be8 <HAL_GPIO_DeInit+0xe4>)
{
 8001b06:	b5f0      	push	{r4, r5, r6, r7, lr}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001b08:	1882      	adds	r2, r0, r2
 8001b0a:	1e54      	subs	r4, r2, #1
 8001b0c:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8001b0e:	2300      	movs	r3, #0
{
 8001b10:	b087      	sub	sp, #28
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001b12:	3205      	adds	r2, #5
 8001b14:	9205      	str	r2, [sp, #20]
  while ((GPIO_Pin >> position) != 0)
 8001b16:	000a      	movs	r2, r1
 8001b18:	40da      	lsrs	r2, r3
 8001b1a:	d101      	bne.n	8001b20 <HAL_GPIO_DeInit+0x1c>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 8001b1c:	b007      	add	sp, #28
 8001b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8001b20:	2701      	movs	r7, #1
 8001b22:	003a      	movs	r2, r7
 8001b24:	409a      	lsls	r2, r3
 8001b26:	9201      	str	r2, [sp, #4]
 8001b28:	400a      	ands	r2, r1
 8001b2a:	9203      	str	r2, [sp, #12]
    if (iocurrent)
 8001b2c:	d059      	beq.n	8001be2 <HAL_GPIO_DeInit+0xde>
 8001b2e:	4a2f      	ldr	r2, [pc, #188]	; (8001bec <HAL_GPIO_DeInit+0xe8>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001b30:	089c      	lsrs	r4, r3, #2
 8001b32:	00a4      	lsls	r4, r4, #2
 8001b34:	18a4      	adds	r4, r4, r2
 8001b36:	68a2      	ldr	r2, [r4, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8001b38:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8001b3a:	0016      	movs	r6, r2
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	4015      	ands	r5, r2
 8001b40:	00ad      	lsls	r5, r5, #2
 8001b42:	320c      	adds	r2, #12
 8001b44:	40aa      	lsls	r2, r5
 8001b46:	9202      	str	r2, [sp, #8]
 8001b48:	4032      	ands	r2, r6
 8001b4a:	9204      	str	r2, [sp, #16]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8001b4c:	22a0      	movs	r2, #160	; 0xa0
 8001b4e:	05d2      	lsls	r2, r2, #23
 8001b50:	4694      	mov	ip, r2
 8001b52:	2200      	movs	r2, #0
 8001b54:	4560      	cmp	r0, ip
 8001b56:	d011      	beq.n	8001b7c <HAL_GPIO_DeInit+0x78>
 8001b58:	4a25      	ldr	r2, [pc, #148]	; (8001bf0 <HAL_GPIO_DeInit+0xec>)
 8001b5a:	4694      	mov	ip, r2
 8001b5c:	003a      	movs	r2, r7
 8001b5e:	4560      	cmp	r0, ip
 8001b60:	d00c      	beq.n	8001b7c <HAL_GPIO_DeInit+0x78>
 8001b62:	4f24      	ldr	r7, [pc, #144]	; (8001bf4 <HAL_GPIO_DeInit+0xf0>)
 8001b64:	1892      	adds	r2, r2, r2
 8001b66:	42b8      	cmp	r0, r7
 8001b68:	d008      	beq.n	8001b7c <HAL_GPIO_DeInit+0x78>
 8001b6a:	4f23      	ldr	r7, [pc, #140]	; (8001bf8 <HAL_GPIO_DeInit+0xf4>)
 8001b6c:	3201      	adds	r2, #1
 8001b6e:	42b8      	cmp	r0, r7
 8001b70:	d004      	beq.n	8001b7c <HAL_GPIO_DeInit+0x78>
 8001b72:	4e22      	ldr	r6, [pc, #136]	; (8001bfc <HAL_GPIO_DeInit+0xf8>)
 8001b74:	3201      	adds	r2, #1
 8001b76:	42b0      	cmp	r0, r6
 8001b78:	d000      	beq.n	8001b7c <HAL_GPIO_DeInit+0x78>
 8001b7a:	9a05      	ldr	r2, [sp, #20]
 8001b7c:	40aa      	lsls	r2, r5
 8001b7e:	9d04      	ldr	r5, [sp, #16]
 8001b80:	42aa      	cmp	r2, r5
 8001b82:	d112      	bne.n	8001baa <HAL_GPIO_DeInit+0xa6>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001b84:	9e03      	ldr	r6, [sp, #12]
 8001b86:	4a1e      	ldr	r2, [pc, #120]	; (8001c00 <HAL_GPIO_DeInit+0xfc>)
 8001b88:	43f6      	mvns	r6, r6
 8001b8a:	6815      	ldr	r5, [r2, #0]
 8001b8c:	4035      	ands	r5, r6
 8001b8e:	6015      	str	r5, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001b90:	6855      	ldr	r5, [r2, #4]
 8001b92:	4035      	ands	r5, r6
 8001b94:	6055      	str	r5, [r2, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001b96:	6895      	ldr	r5, [r2, #8]
 8001b98:	4035      	ands	r5, r6
 8001b9a:	6095      	str	r5, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001b9c:	68d5      	ldr	r5, [r2, #12]
 8001b9e:	402e      	ands	r6, r5
 8001ba0:	60d6      	str	r6, [r2, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8001ba2:	68a2      	ldr	r2, [r4, #8]
 8001ba4:	9d02      	ldr	r5, [sp, #8]
 8001ba6:	43aa      	bics	r2, r5
 8001ba8:	60a2      	str	r2, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001baa:	2203      	movs	r2, #3
 8001bac:	005d      	lsls	r5, r3, #1
 8001bae:	40aa      	lsls	r2, r5
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001bb0:	2507      	movs	r5, #7
 8001bb2:	270f      	movs	r7, #15
 8001bb4:	401d      	ands	r5, r3
 8001bb6:	00ad      	lsls	r5, r5, #2
 8001bb8:	40af      	lsls	r7, r5
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bba:	43d5      	mvns	r5, r2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8001bbc:	6804      	ldr	r4, [r0, #0]
 8001bbe:	4314      	orrs	r4, r2
 8001bc0:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001bc2:	08dc      	lsrs	r4, r3, #3
 8001bc4:	00a4      	lsls	r4, r4, #2
 8001bc6:	1904      	adds	r4, r0, r4
 8001bc8:	6a26      	ldr	r6, [r4, #32]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8001bca:	9a01      	ldr	r2, [sp, #4]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001bcc:	43be      	bics	r6, r7
 8001bce:	6226      	str	r6, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bd0:	68c4      	ldr	r4, [r0, #12]
 8001bd2:	402c      	ands	r4, r5
 8001bd4:	60c4      	str	r4, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8001bd6:	6844      	ldr	r4, [r0, #4]
 8001bd8:	4394      	bics	r4, r2
 8001bda:	6044      	str	r4, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001bdc:	6882      	ldr	r2, [r0, #8]
 8001bde:	402a      	ands	r2, r5
 8001be0:	6082      	str	r2, [r0, #8]
    position++;
 8001be2:	3301      	adds	r3, #1
 8001be4:	e797      	b.n	8001b16 <HAL_GPIO_DeInit+0x12>
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	afffe400 	.word	0xafffe400
 8001bec:	40010000 	.word	0x40010000
 8001bf0:	50000400 	.word	0x50000400
 8001bf4:	50000800 	.word	0x50000800
 8001bf8:	50000c00 	.word	0x50000c00
 8001bfc:	50001000 	.word	0x50001000
 8001c00:	40010400 	.word	0x40010400

08001c04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c04:	2a00      	cmp	r2, #0
 8001c06:	d001      	beq.n	8001c0c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c08:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001c0a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001c0c:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001c0e:	e7fc      	b.n	8001c0a <HAL_GPIO_WritePin+0x6>

08001c10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c12:	0004      	movs	r4, r0
 8001c14:	000e      	movs	r6, r1
 8001c16:	0017      	movs	r7, r2
 8001c18:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c1a:	6822      	ldr	r2, [r4, #0]
 8001c1c:	6993      	ldr	r3, [r2, #24]
 8001c1e:	4033      	ands	r3, r6
 8001c20:	1b9b      	subs	r3, r3, r6
 8001c22:	4259      	negs	r1, r3
 8001c24:	414b      	adcs	r3, r1
 8001c26:	42bb      	cmp	r3, r7
 8001c28:	d001      	beq.n	8001c2e <I2C_WaitOnFlagUntilTimeout+0x1e>
        __HAL_UNLOCK(hi2c);
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	e017      	b.n	8001c5e <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8001c2e:	1c6b      	adds	r3, r5, #1
 8001c30:	d0f4      	beq.n	8001c1c <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c32:	f7ff f925 	bl	8000e80 <HAL_GetTick>
 8001c36:	9b06      	ldr	r3, [sp, #24]
 8001c38:	1ac0      	subs	r0, r0, r3
 8001c3a:	42a8      	cmp	r0, r5
 8001c3c:	d801      	bhi.n	8001c42 <I2C_WaitOnFlagUntilTimeout+0x32>
 8001c3e:	2d00      	cmp	r5, #0
 8001c40:	d1eb      	bne.n	8001c1a <I2C_WaitOnFlagUntilTimeout+0xa>
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c42:	2220      	movs	r2, #32
 8001c44:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
          hi2c->Mode = HAL_I2C_MODE_NONE;

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c46:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001c4c:	0023      	movs	r3, r4
 8001c4e:	3341      	adds	r3, #65	; 0x41
 8001c50:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c52:	0022      	movs	r2, r4
 8001c54:	2300      	movs	r3, #0
 8001c56:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8001c58:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5a:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8001c5c:	7023      	strb	r3, [r4, #0]
}
 8001c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001c60 <HAL_I2C_Init>:
{
 8001c60:	b570      	push	{r4, r5, r6, lr}
 8001c62:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001c64:	2001      	movs	r0, #1
  if (hi2c == NULL)
 8001c66:	2c00      	cmp	r4, #0
 8001c68:	d03f      	beq.n	8001cea <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c6a:	0025      	movs	r5, r4
 8001c6c:	3541      	adds	r5, #65	; 0x41
 8001c6e:	782b      	ldrb	r3, [r5, #0]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d105      	bne.n	8001c82 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 8001c76:	0022      	movs	r2, r4
 8001c78:	3240      	adds	r2, #64	; 0x40
 8001c7a:	7013      	strb	r3, [r2, #0]
    HAL_I2C_MspInit(hi2c);
 8001c7c:	0020      	movs	r0, r4
 8001c7e:	f7fe fd0f 	bl	80006a0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c82:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8001c84:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c86:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 8001c88:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c8a:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	68a6      	ldr	r6, [r4, #8]
 8001c90:	438a      	bics	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c94:	6861      	ldr	r1, [r4, #4]
 8001c96:	4a1a      	ldr	r2, [pc, #104]	; (8001d00 <HAL_I2C_Init+0xa0>)
 8001c98:	400a      	ands	r2, r1
 8001c9a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c9c:	6899      	ldr	r1, [r3, #8]
 8001c9e:	4a19      	ldr	r2, [pc, #100]	; (8001d04 <HAL_I2C_Init+0xa4>)
 8001ca0:	4011      	ands	r1, r2
 8001ca2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ca4:	2801      	cmp	r0, #1
 8001ca6:	d121      	bne.n	8001cec <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ca8:	2180      	movs	r1, #128	; 0x80
 8001caa:	0209      	lsls	r1, r1, #8
 8001cac:	4331      	orrs	r1, r6
 8001cae:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cb0:	6858      	ldr	r0, [r3, #4]
 8001cb2:	4915      	ldr	r1, [pc, #84]	; (8001d08 <HAL_I2C_Init+0xa8>)
 8001cb4:	4301      	orrs	r1, r0
 8001cb6:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cb8:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cba:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001cc0:	6961      	ldr	r1, [r4, #20]
 8001cc2:	6922      	ldr	r2, [r4, #16]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	69a1      	ldr	r1, [r4, #24]
 8001cc8:	0209      	lsls	r1, r1, #8
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cce:	6a21      	ldr	r1, [r4, #32]
 8001cd0:	69e2      	ldr	r2, [r4, #28]
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	6819      	ldr	r1, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001cde:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce0:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ce2:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ce4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ce6:	3442      	adds	r4, #66	; 0x42
 8001ce8:	7020      	strb	r0, [r4, #0]
}
 8001cea:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cec:	2184      	movs	r1, #132	; 0x84
 8001cee:	0209      	lsls	r1, r1, #8
 8001cf0:	4331      	orrs	r1, r6
 8001cf2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cf4:	2802      	cmp	r0, #2
 8001cf6:	d1db      	bne.n	8001cb0 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001cf8:	2180      	movs	r1, #128	; 0x80
 8001cfa:	0109      	lsls	r1, r1, #4
 8001cfc:	6059      	str	r1, [r3, #4]
 8001cfe:	e7d7      	b.n	8001cb0 <HAL_I2C_Init+0x50>
 8001d00:	f0ffffff 	.word	0xf0ffffff
 8001d04:	ffff7fff 	.word	0xffff7fff
 8001d08:	02008000 	.word	0x02008000

08001d0c <HAL_I2C_IsDeviceReady>:
{
 8001d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d0e:	001d      	movs	r5, r3
  __IO uint32_t I2C_Trials = 0UL;
 8001d10:	2300      	movs	r3, #0
{
 8001d12:	b089      	sub	sp, #36	; 0x24
  __IO uint32_t I2C_Trials = 0UL;
 8001d14:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d16:	0003      	movs	r3, r0
 8001d18:	3341      	adds	r3, #65	; 0x41
{
 8001d1a:	9205      	str	r2, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d1c:	9302      	str	r3, [sp, #8]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
{
 8001d20:	0004      	movs	r4, r0
    return HAL_BUSY;
 8001d22:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d157      	bne.n	8001dd8 <HAL_I2C_IsDeviceReady+0xcc>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001d28:	6823      	ldr	r3, [r4, #0]
 8001d2a:	699a      	ldr	r2, [r3, #24]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	4013      	ands	r3, r2
 8001d32:	d151      	bne.n	8001dd8 <HAL_I2C_IsDeviceReady+0xcc>
    __HAL_LOCK(hi2c);
 8001d34:	0026      	movs	r6, r4
 8001d36:	3640      	adds	r6, #64	; 0x40
 8001d38:	7832      	ldrb	r2, [r6, #0]
 8001d3a:	2a01      	cmp	r2, #1
 8001d3c:	d04c      	beq.n	8001dd8 <HAL_I2C_IsDeviceReady+0xcc>
 8001d3e:	2201      	movs	r2, #1
 8001d40:	7032      	strb	r2, [r6, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d42:	9e02      	ldr	r6, [sp, #8]
 8001d44:	3022      	adds	r0, #34	; 0x22
 8001d46:	0589      	lsls	r1, r1, #22
 8001d48:	7030      	strb	r0, [r6, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d4a:	6463      	str	r3, [r4, #68]	; 0x44
 8001d4c:	0d8b      	lsrs	r3, r1, #22
 8001d4e:	9304      	str	r3, [sp, #16]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d50:	9203      	str	r2, [sp, #12]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001d52:	68e3      	ldr	r3, [r4, #12]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d121      	bne.n	8001d9c <HAL_I2C_IsDeviceReady+0x90>
 8001d58:	4b34      	ldr	r3, [pc, #208]	; (8001e2c <HAL_I2C_IsDeviceReady+0x120>)
 8001d5a:	9a04      	ldr	r2, [sp, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	6822      	ldr	r2, [r4, #0]
 8001d60:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8001d62:	f7ff f88d 	bl	8000e80 <HAL_GetTick>
 8001d66:	0006      	movs	r6, r0
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d68:	6822      	ldr	r2, [r4, #0]
 8001d6a:	9903      	ldr	r1, [sp, #12]
 8001d6c:	6993      	ldr	r3, [r2, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d6e:	6992      	ldr	r2, [r2, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d70:	095b      	lsrs	r3, r3, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d72:	0912      	lsrs	r2, r2, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d74:	400b      	ands	r3, r1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d76:	400a      	ands	r2, r1
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	d012      	beq.n	8001da2 <HAL_I2C_IsDeviceReady+0x96>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001d7c:	2710      	movs	r7, #16
 8001d7e:	6823      	ldr	r3, [r4, #0]
 8001d80:	699a      	ldr	r2, [r3, #24]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d82:	9600      	str	r6, [sp, #0]
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001d84:	403a      	ands	r2, r7
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d86:	002b      	movs	r3, r5
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001d88:	2a00      	cmp	r2, #0
 8001d8a:	d127      	bne.n	8001ddc <HAL_I2C_IsDeviceReady+0xd0>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001d8c:	2120      	movs	r1, #32
 8001d8e:	0020      	movs	r0, r4
 8001d90:	f7ff ff3e 	bl	8001c10 <I2C_WaitOnFlagUntilTimeout>
 8001d94:	2800      	cmp	r0, #0
 8001d96:	d017      	beq.n	8001dc8 <HAL_I2C_IsDeviceReady+0xbc>
    return HAL_ERROR;
 8001d98:	2001      	movs	r0, #1
 8001d9a:	e01d      	b.n	8001dd8 <HAL_I2C_IsDeviceReady+0xcc>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001d9c:	23a0      	movs	r3, #160	; 0xa0
 8001d9e:	019b      	lsls	r3, r3, #6
 8001da0:	e7db      	b.n	8001d5a <HAL_I2C_IsDeviceReady+0x4e>
        if (Timeout != HAL_MAX_DELAY)
 8001da2:	1c6b      	adds	r3, r5, #1
 8001da4:	d0e0      	beq.n	8001d68 <HAL_I2C_IsDeviceReady+0x5c>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001da6:	f7ff f86b 	bl	8000e80 <HAL_GetTick>
 8001daa:	1b80      	subs	r0, r0, r6
 8001dac:	42a8      	cmp	r0, r5
 8001dae:	d801      	bhi.n	8001db4 <HAL_I2C_IsDeviceReady+0xa8>
 8001db0:	2d00      	cmp	r5, #0
 8001db2:	d1d9      	bne.n	8001d68 <HAL_I2C_IsDeviceReady+0x5c>
    hi2c->State = HAL_I2C_STATE_READY;
 8001db4:	2320      	movs	r3, #32
 8001db6:	9a02      	ldr	r2, [sp, #8]
    __HAL_UNLOCK(hi2c);
 8001db8:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8001dba:	7013      	strb	r3, [r2, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dbc:	6862      	ldr	r2, [r4, #4]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	7023      	strb	r3, [r4, #0]
 8001dc6:	e7e7      	b.n	8001d98 <HAL_I2C_IsDeviceReady+0x8c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc8:	2320      	movs	r3, #32
 8001dca:	6822      	ldr	r2, [r4, #0]
 8001dcc:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8001dce:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 8001dd0:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8001dd2:	3241      	adds	r2, #65	; 0x41
 8001dd4:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8001dd6:	7020      	strb	r0, [r4, #0]
}
 8001dd8:	b009      	add	sp, #36	; 0x24
 8001dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2120      	movs	r1, #32
 8001de0:	0020      	movs	r0, r4
 8001de2:	f7ff ff15 	bl	8001c10 <I2C_WaitOnFlagUntilTimeout>
 8001de6:	1e02      	subs	r2, r0, #0
 8001de8:	d1d6      	bne.n	8001d98 <HAL_I2C_IsDeviceReady+0x8c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dea:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 8001dec:	9805      	ldr	r0, [sp, #20]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dee:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001df0:	2720      	movs	r7, #32
 8001df2:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 8001df4:	9907      	ldr	r1, [sp, #28]
 8001df6:	4281      	cmp	r1, r0
 8001df8:	d10e      	bne.n	8001e18 <HAL_I2C_IsDeviceReady+0x10c>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001dfa:	2180      	movs	r1, #128	; 0x80
 8001dfc:	6858      	ldr	r0, [r3, #4]
 8001dfe:	01c9      	lsls	r1, r1, #7
 8001e00:	4301      	orrs	r1, r0
 8001e02:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001e04:	0020      	movs	r0, r4
 8001e06:	9600      	str	r6, [sp, #0]
 8001e08:	002b      	movs	r3, r5
 8001e0a:	0039      	movs	r1, r7
 8001e0c:	f7ff ff00 	bl	8001c10 <I2C_WaitOnFlagUntilTimeout>
 8001e10:	2800      	cmp	r0, #0
 8001e12:	d1c1      	bne.n	8001d98 <HAL_I2C_IsDeviceReady+0x8c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 8001e18:	9b07      	ldr	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8001e1a:	9a05      	ldr	r2, [sp, #20]
      I2C_Trials++;
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	9307      	str	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8001e20:	9b07      	ldr	r3, [sp, #28]
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d200      	bcs.n	8001e28 <HAL_I2C_IsDeviceReady+0x11c>
 8001e26:	e794      	b.n	8001d52 <HAL_I2C_IsDeviceReady+0x46>
 8001e28:	e7c4      	b.n	8001db4 <HAL_I2C_IsDeviceReady+0xa8>
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	02002000 	.word	0x02002000

08001e30 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e30:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e32:	0004      	movs	r4, r0
 8001e34:	3441      	adds	r4, #65	; 0x41
 8001e36:	7822      	ldrb	r2, [r4, #0]
{
 8001e38:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3a:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001e3c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e3e:	2a20      	cmp	r2, #32
 8001e40:	d118      	bne.n	8001e74 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_LOCK(hi2c);
 8001e42:	001d      	movs	r5, r3
 8001e44:	3540      	adds	r5, #64	; 0x40
 8001e46:	782e      	ldrb	r6, [r5, #0]
 8001e48:	2e01      	cmp	r6, #1
 8001e4a:	d013      	beq.n	8001e74 <HAL_I2CEx_ConfigAnalogFilter+0x44>
    __HAL_I2C_DISABLE(hi2c);
 8001e4c:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e4e:	3022      	adds	r0, #34	; 0x22
 8001e50:	7020      	strb	r0, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001e52:	681e      	ldr	r6, [r3, #0]
 8001e54:	3823      	subs	r0, #35	; 0x23
 8001e56:	4386      	bics	r6, r0
 8001e58:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e5a:	681e      	ldr	r6, [r3, #0]
 8001e5c:	4f06      	ldr	r7, [pc, #24]	; (8001e78 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
 8001e5e:	403e      	ands	r6, r7
 8001e60:	601e      	str	r6, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e62:	681e      	ldr	r6, [r3, #0]
 8001e64:	4331      	orrs	r1, r6
 8001e66:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001e68:	6819      	ldr	r1, [r3, #0]
 8001e6a:	4308      	orrs	r0, r1
 8001e6c:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001e6e:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001e70:	7022      	strb	r2, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8001e72:	7028      	strb	r0, [r5, #0]
  }
}
 8001e74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	ffffefff 	.word	0xffffefff

08001e7c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e7c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7e:	0005      	movs	r5, r0
 8001e80:	3541      	adds	r5, #65	; 0x41
 8001e82:	782a      	ldrb	r2, [r5, #0]
{
 8001e84:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e86:	b2d2      	uxtb	r2, r2

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8001e88:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e8a:	2a20      	cmp	r2, #32
 8001e8c:	d117      	bne.n	8001ebe <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8001e8e:	001c      	movs	r4, r3
 8001e90:	3440      	adds	r4, #64	; 0x40
 8001e92:	7826      	ldrb	r6, [r4, #0]
 8001e94:	2e01      	cmp	r6, #1
 8001e96:	d012      	beq.n	8001ebe <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_I2C_DISABLE(hi2c);
 8001e98:	681b      	ldr	r3, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e9a:	3022      	adds	r0, #34	; 0x22
 8001e9c:	7028      	strb	r0, [r5, #0]
    __HAL_I2C_DISABLE(hi2c);
 8001e9e:	681e      	ldr	r6, [r3, #0]
 8001ea0:	3823      	subs	r0, #35	; 0x23
 8001ea2:	4386      	bics	r6, r0
 8001ea4:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8001ea6:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8001ea8:	4f05      	ldr	r7, [pc, #20]	; (8001ec0 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    tmpreg |= DigitalFilter << 8U;
 8001eaa:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8001eac:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8001eae:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8001eb0:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8001eb2:	6819      	ldr	r1, [r3, #0]
 8001eb4:	4308      	orrs	r0, r1
 8001eb6:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001eb8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001eba:	702a      	strb	r2, [r5, #0]
    __HAL_UNLOCK(hi2c);
 8001ebc:	7020      	strb	r0, [r4, #0]
  }
}
 8001ebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ec0:	fffff0ff 	.word	0xfffff0ff

08001ec4 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8001ec4:	2110      	movs	r1, #16
 8001ec6:	4a02      	ldr	r2, [pc, #8]	; (8001ed0 <HAL_PWR_DisablePVD+0xc>)
 8001ec8:	6813      	ldr	r3, [r2, #0]
 8001eca:	438b      	bics	r3, r1
 8001ecc:	6013      	str	r3, [r2, #0]
}
 8001ece:	4770      	bx	lr
 8001ed0:	40007000 	.word	0x40007000

08001ed4 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	4a03      	ldr	r2, [pc, #12]	; (8001ee4 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	6811      	ldr	r1, [r2, #0]
 8001edc:	430b      	orrs	r3, r1
 8001ede:	6013      	str	r3, [r2, #0]
}
 8001ee0:	4770      	bx	lr
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	40007000 	.word	0x40007000

08001ee8 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8001ee8:	2380      	movs	r3, #128	; 0x80
 8001eea:	4a03      	ldr	r2, [pc, #12]	; (8001ef8 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	6811      	ldr	r1, [r2, #0]
 8001ef0:	430b      	orrs	r3, r1
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	4770      	bx	lr
 8001ef6:	46c0      	nop			; (mov r8, r8)
 8001ef8:	40007000 	.word	0x40007000

08001efc <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001efc:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8001efe:	4a1e      	ldr	r2, [pc, #120]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8001f00:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8001f02:	68d4      	ldr	r4, [r2, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8001f04:	4023      	ands	r3, r4
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d034      	beq.n	8001f74 <HAL_RCC_GetSysClockFreq+0x78>
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d00c      	beq.n	8001f28 <HAL_RCC_GetSysClockFreq+0x2c>
 8001f0e:	2b04      	cmp	r3, #4
 8001f10:	d128      	bne.n	8001f64 <HAL_RCC_GetSysClockFreq+0x68>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f12:	6810      	ldr	r0, [r2, #0]
 8001f14:	330c      	adds	r3, #12
 8001f16:	4018      	ands	r0, r3
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001f18:	4243      	negs	r3, r0
 8001f1a:	4158      	adcs	r0, r3
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <HAL_RCC_GetSysClockFreq+0x80>)
 8001f1e:	4240      	negs	r0, r0
 8001f20:	4018      	ands	r0, r3
 8001f22:	4b17      	ldr	r3, [pc, #92]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x84>)
 8001f24:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8001f26:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001f28:	02a3      	lsls	r3, r4, #10
 8001f2a:	4916      	ldr	r1, [pc, #88]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x88>)
 8001f2c:	0f1b      	lsrs	r3, r3, #28
 8001f2e:	5cc8      	ldrb	r0, [r1, r3]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f30:	2380      	movs	r3, #128	; 0x80
 8001f32:	68d5      	ldr	r5, [r2, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001f34:	0224      	lsls	r4, r4, #8
 8001f36:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f38:	025b      	lsls	r3, r3, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001f3a:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f3c:	401d      	ands	r5, r3
 8001f3e:	d009      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x58>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f40:	4a11      	ldr	r2, [pc, #68]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001f42:	2300      	movs	r3, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	f7fe fa91 	bl	800046c <__aeabi_lmul>
 8001f4a:	0022      	movs	r2, r4
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f7fe fa6d 	bl	800042c <__aeabi_uldivmod>
 8001f52:	e7e8      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x2a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f54:	2310      	movs	r3, #16
 8001f56:	6816      	ldr	r6, [r2, #0]
 8001f58:	401e      	ands	r6, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0x64>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001f5c:	4a08      	ldr	r2, [pc, #32]	; (8001f80 <HAL_RCC_GetSysClockFreq+0x84>)
 8001f5e:	e7f0      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x46>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f60:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x90>)
 8001f62:	e7ee      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f64:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f66:	6853      	ldr	r3, [r2, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f68:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f6a:	041b      	lsls	r3, r3, #16
 8001f6c:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f6e:	3301      	adds	r3, #1
 8001f70:	4098      	lsls	r0, r3
 8001f72:	e7d8      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x2a>
      sysclockfreq = HSE_VALUE;
 8001f74:	4804      	ldr	r0, [pc, #16]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001f76:	e7d6      	b.n	8001f26 <HAL_RCC_GetSysClockFreq+0x2a>
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	00b71b00 	.word	0x00b71b00
 8001f80:	003d0900 	.word	0x003d0900
 8001f84:	08004b48 	.word	0x08004b48
 8001f88:	007a1200 	.word	0x007a1200
 8001f8c:	00f42400 	.word	0x00f42400

08001f90 <HAL_RCC_OscConfig>:
{
 8001f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f92:	0005      	movs	r5, r0
 8001f94:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8001f96:	2800      	cmp	r0, #0
 8001f98:	d102      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001f9a:	2001      	movs	r0, #1
}
 8001f9c:	b007      	add	sp, #28
 8001f9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa0:	230c      	movs	r3, #12
 8001fa2:	4cc3      	ldr	r4, [pc, #780]	; (80022b0 <HAL_RCC_OscConfig+0x320>)
 8001fa4:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fa6:	68e2      	ldr	r2, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fa8:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001faa:	2380      	movs	r3, #128	; 0x80
 8001fac:	025b      	lsls	r3, r3, #9
 8001fae:	401a      	ands	r2, r3
 8001fb0:	9201      	str	r2, [sp, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fb2:	6802      	ldr	r2, [r0, #0]
 8001fb4:	07d2      	lsls	r2, r2, #31
 8001fb6:	d442      	bmi.n	800203e <HAL_RCC_OscConfig+0xae>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fb8:	682b      	ldr	r3, [r5, #0]
 8001fba:	079b      	lsls	r3, r3, #30
 8001fbc:	d500      	bpl.n	8001fc0 <HAL_RCC_OscConfig+0x30>
 8001fbe:	e088      	b.n	80020d2 <HAL_RCC_OscConfig+0x142>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001fc0:	682b      	ldr	r3, [r5, #0]
 8001fc2:	06db      	lsls	r3, r3, #27
 8001fc4:	d529      	bpl.n	800201a <HAL_RCC_OscConfig+0x8a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc6:	2e00      	cmp	r6, #0
 8001fc8:	d000      	beq.n	8001fcc <HAL_RCC_OscConfig+0x3c>
 8001fca:	e0e3      	b.n	8002194 <HAL_RCC_OscConfig+0x204>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fcc:	6823      	ldr	r3, [r4, #0]
 8001fce:	059b      	lsls	r3, r3, #22
 8001fd0:	d502      	bpl.n	8001fd8 <HAL_RCC_OscConfig+0x48>
 8001fd2:	69eb      	ldr	r3, [r5, #28]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0e0      	beq.n	8001f9a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fd8:	6862      	ldr	r2, [r4, #4]
 8001fda:	49b6      	ldr	r1, [pc, #728]	; (80022b4 <HAL_RCC_OscConfig+0x324>)
 8001fdc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001fde:	400a      	ands	r2, r1
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fe4:	6861      	ldr	r1, [r4, #4]
 8001fe6:	6a2a      	ldr	r2, [r5, #32]
 8001fe8:	0209      	lsls	r1, r1, #8
 8001fea:	0a09      	lsrs	r1, r1, #8
 8001fec:	0612      	lsls	r2, r2, #24
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ff2:	2280      	movs	r2, #128	; 0x80
 8001ff4:	0b5b      	lsrs	r3, r3, #13
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	0212      	lsls	r2, r2, #8
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001ffe:	68e1      	ldr	r1, [r4, #12]
 8002000:	060a      	lsls	r2, r1, #24
 8002002:	49ad      	ldr	r1, [pc, #692]	; (80022b8 <HAL_RCC_OscConfig+0x328>)
 8002004:	0f12      	lsrs	r2, r2, #28
 8002006:	5c8a      	ldrb	r2, [r1, r2]
 8002008:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800200a:	4aac      	ldr	r2, [pc, #688]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 800200c:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 800200e:	4bac      	ldr	r3, [pc, #688]	; (80022c0 <HAL_RCC_OscConfig+0x330>)
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	f7fe ff33 	bl	8000e7c <HAL_InitTick>
        if(status != HAL_OK)
 8002016:	2800      	cmp	r0, #0
 8002018:	d1c0      	bne.n	8001f9c <HAL_RCC_OscConfig+0xc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800201a:	682b      	ldr	r3, [r5, #0]
 800201c:	071b      	lsls	r3, r3, #28
 800201e:	d500      	bpl.n	8002022 <HAL_RCC_OscConfig+0x92>
 8002020:	e0ef      	b.n	8002202 <HAL_RCC_OscConfig+0x272>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002022:	682b      	ldr	r3, [r5, #0]
 8002024:	075b      	lsls	r3, r3, #29
 8002026:	d500      	bpl.n	800202a <HAL_RCC_OscConfig+0x9a>
 8002028:	e111      	b.n	800224e <HAL_RCC_OscConfig+0x2be>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800202a:	682b      	ldr	r3, [r5, #0]
 800202c:	069b      	lsls	r3, r3, #26
 800202e:	d500      	bpl.n	8002032 <HAL_RCC_OscConfig+0xa2>
 8002030:	e198      	b.n	8002364 <HAL_RCC_OscConfig+0x3d4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002032:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002034:	2b00      	cmp	r3, #0
 8002036:	d000      	beq.n	800203a <HAL_RCC_OscConfig+0xaa>
 8002038:	e1c7      	b.n	80023ca <HAL_RCC_OscConfig+0x43a>
  return HAL_OK;
 800203a:	2000      	movs	r0, #0
 800203c:	e7ae      	b.n	8001f9c <HAL_RCC_OscConfig+0xc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800203e:	2e08      	cmp	r6, #8
 8002040:	d004      	beq.n	800204c <HAL_RCC_OscConfig+0xbc>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002042:	2e0c      	cmp	r6, #12
 8002044:	d109      	bne.n	800205a <HAL_RCC_OscConfig+0xca>
 8002046:	9a01      	ldr	r2, [sp, #4]
 8002048:	2a00      	cmp	r2, #0
 800204a:	d006      	beq.n	800205a <HAL_RCC_OscConfig+0xca>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800204c:	6823      	ldr	r3, [r4, #0]
 800204e:	039b      	lsls	r3, r3, #14
 8002050:	d5b2      	bpl.n	8001fb8 <HAL_RCC_OscConfig+0x28>
 8002052:	686b      	ldr	r3, [r5, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1af      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x28>
 8002058:	e79f      	b.n	8001f9a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800205a:	686a      	ldr	r2, [r5, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	d111      	bne.n	8002084 <HAL_RCC_OscConfig+0xf4>
 8002060:	6822      	ldr	r2, [r4, #0]
 8002062:	4313      	orrs	r3, r2
 8002064:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002066:	f7fe ff0b 	bl	8000e80 <HAL_GetTick>
 800206a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800206c:	2280      	movs	r2, #128	; 0x80
 800206e:	6823      	ldr	r3, [r4, #0]
 8002070:	0292      	lsls	r2, r2, #10
 8002072:	4213      	tst	r3, r2
 8002074:	d1a0      	bne.n	8001fb8 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002076:	f7fe ff03 	bl	8000e80 <HAL_GetTick>
 800207a:	1bc0      	subs	r0, r0, r7
 800207c:	2864      	cmp	r0, #100	; 0x64
 800207e:	d9f5      	bls.n	800206c <HAL_RCC_OscConfig+0xdc>
            return HAL_TIMEOUT;
 8002080:	2003      	movs	r0, #3
 8002082:	e78b      	b.n	8001f9c <HAL_RCC_OscConfig+0xc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002084:	21a0      	movs	r1, #160	; 0xa0
 8002086:	02c9      	lsls	r1, r1, #11
 8002088:	428a      	cmp	r2, r1
 800208a:	d105      	bne.n	8002098 <HAL_RCC_OscConfig+0x108>
 800208c:	2280      	movs	r2, #128	; 0x80
 800208e:	6821      	ldr	r1, [r4, #0]
 8002090:	02d2      	lsls	r2, r2, #11
 8002092:	430a      	orrs	r2, r1
 8002094:	6022      	str	r2, [r4, #0]
 8002096:	e7e3      	b.n	8002060 <HAL_RCC_OscConfig+0xd0>
 8002098:	6821      	ldr	r1, [r4, #0]
 800209a:	488a      	ldr	r0, [pc, #552]	; (80022c4 <HAL_RCC_OscConfig+0x334>)
 800209c:	4001      	ands	r1, r0
 800209e:	6021      	str	r1, [r4, #0]
 80020a0:	6821      	ldr	r1, [r4, #0]
 80020a2:	400b      	ands	r3, r1
 80020a4:	9305      	str	r3, [sp, #20]
 80020a6:	9b05      	ldr	r3, [sp, #20]
 80020a8:	4987      	ldr	r1, [pc, #540]	; (80022c8 <HAL_RCC_OscConfig+0x338>)
 80020aa:	6823      	ldr	r3, [r4, #0]
 80020ac:	400b      	ands	r3, r1
 80020ae:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b0:	2a00      	cmp	r2, #0
 80020b2:	d1d8      	bne.n	8002066 <HAL_RCC_OscConfig+0xd6>
        tickstart = HAL_GetTick();
 80020b4:	f7fe fee4 	bl	8000e80 <HAL_GetTick>
 80020b8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80020ba:	2280      	movs	r2, #128	; 0x80
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	0292      	lsls	r2, r2, #10
 80020c0:	4213      	tst	r3, r2
 80020c2:	d100      	bne.n	80020c6 <HAL_RCC_OscConfig+0x136>
 80020c4:	e778      	b.n	8001fb8 <HAL_RCC_OscConfig+0x28>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80020c6:	f7fe fedb 	bl	8000e80 <HAL_GetTick>
 80020ca:	1bc0      	subs	r0, r0, r7
 80020cc:	2864      	cmp	r0, #100	; 0x64
 80020ce:	d9f4      	bls.n	80020ba <HAL_RCC_OscConfig+0x12a>
 80020d0:	e7d6      	b.n	8002080 <HAL_RCC_OscConfig+0xf0>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80020d2:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 80020d4:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80020d6:	4213      	tst	r3, r2
 80020d8:	d003      	beq.n	80020e2 <HAL_RCC_OscConfig+0x152>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80020da:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 80020dc:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80020de:	4311      	orrs	r1, r2
 80020e0:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020e2:	2e04      	cmp	r6, #4
 80020e4:	d004      	beq.n	80020f0 <HAL_RCC_OscConfig+0x160>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80020e6:	2e0c      	cmp	r6, #12
 80020e8:	d126      	bne.n	8002138 <HAL_RCC_OscConfig+0x1a8>
 80020ea:	9a01      	ldr	r2, [sp, #4]
 80020ec:	2a00      	cmp	r2, #0
 80020ee:	d123      	bne.n	8002138 <HAL_RCC_OscConfig+0x1a8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80020f0:	6822      	ldr	r2, [r4, #0]
 80020f2:	0752      	lsls	r2, r2, #29
 80020f4:	d502      	bpl.n	80020fc <HAL_RCC_OscConfig+0x16c>
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d100      	bne.n	80020fc <HAL_RCC_OscConfig+0x16c>
 80020fa:	e74e      	b.n	8001f9a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fc:	6861      	ldr	r1, [r4, #4]
 80020fe:	692a      	ldr	r2, [r5, #16]
 8002100:	4872      	ldr	r0, [pc, #456]	; (80022cc <HAL_RCC_OscConfig+0x33c>)
 8002102:	0212      	lsls	r2, r2, #8
 8002104:	4001      	ands	r1, r0
 8002106:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002108:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210a:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800210c:	6822      	ldr	r2, [r4, #0]
 800210e:	438a      	bics	r2, r1
 8002110:	4313      	orrs	r3, r2
 8002112:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002114:	f7ff fef2 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8002118:	68e3      	ldr	r3, [r4, #12]
 800211a:	4a67      	ldr	r2, [pc, #412]	; (80022b8 <HAL_RCC_OscConfig+0x328>)
 800211c:	061b      	lsls	r3, r3, #24
 800211e:	0f1b      	lsrs	r3, r3, #28
 8002120:	5cd3      	ldrb	r3, [r2, r3]
 8002122:	40d8      	lsrs	r0, r3
 8002124:	4b65      	ldr	r3, [pc, #404]	; (80022bc <HAL_RCC_OscConfig+0x32c>)
 8002126:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8002128:	4b65      	ldr	r3, [pc, #404]	; (80022c0 <HAL_RCC_OscConfig+0x330>)
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	f7fe fea6 	bl	8000e7c <HAL_InitTick>
      if(status != HAL_OK)
 8002130:	2800      	cmp	r0, #0
 8002132:	d100      	bne.n	8002136 <HAL_RCC_OscConfig+0x1a6>
 8002134:	e744      	b.n	8001fc0 <HAL_RCC_OscConfig+0x30>
 8002136:	e731      	b.n	8001f9c <HAL_RCC_OscConfig+0xc>
      if(hsi_state != RCC_HSI_OFF)
 8002138:	2b00      	cmp	r3, #0
 800213a:	d019      	beq.n	8002170 <HAL_RCC_OscConfig+0x1e0>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800213c:	2109      	movs	r1, #9
 800213e:	6822      	ldr	r2, [r4, #0]
 8002140:	438a      	bics	r2, r1
 8002142:	4313      	orrs	r3, r2
 8002144:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002146:	f7fe fe9b 	bl	8000e80 <HAL_GetTick>
 800214a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800214c:	2204      	movs	r2, #4
 800214e:	6823      	ldr	r3, [r4, #0]
 8002150:	4213      	tst	r3, r2
 8002152:	d007      	beq.n	8002164 <HAL_RCC_OscConfig+0x1d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002154:	6862      	ldr	r2, [r4, #4]
 8002156:	692b      	ldr	r3, [r5, #16]
 8002158:	495c      	ldr	r1, [pc, #368]	; (80022cc <HAL_RCC_OscConfig+0x33c>)
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	400a      	ands	r2, r1
 800215e:	4313      	orrs	r3, r2
 8002160:	6063      	str	r3, [r4, #4]
 8002162:	e72d      	b.n	8001fc0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002164:	f7fe fe8c 	bl	8000e80 <HAL_GetTick>
 8002168:	1bc0      	subs	r0, r0, r7
 800216a:	2802      	cmp	r0, #2
 800216c:	d9ee      	bls.n	800214c <HAL_RCC_OscConfig+0x1bc>
 800216e:	e787      	b.n	8002080 <HAL_RCC_OscConfig+0xf0>
        __HAL_RCC_HSI_DISABLE();
 8002170:	2201      	movs	r2, #1
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	4393      	bics	r3, r2
 8002176:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002178:	f7fe fe82 	bl	8000e80 <HAL_GetTick>
 800217c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800217e:	2204      	movs	r2, #4
 8002180:	6823      	ldr	r3, [r4, #0]
 8002182:	4213      	tst	r3, r2
 8002184:	d100      	bne.n	8002188 <HAL_RCC_OscConfig+0x1f8>
 8002186:	e71b      	b.n	8001fc0 <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002188:	f7fe fe7a 	bl	8000e80 <HAL_GetTick>
 800218c:	1bc0      	subs	r0, r0, r7
 800218e:	2802      	cmp	r0, #2
 8002190:	d9f5      	bls.n	800217e <HAL_RCC_OscConfig+0x1ee>
 8002192:	e775      	b.n	8002080 <HAL_RCC_OscConfig+0xf0>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002194:	69eb      	ldr	r3, [r5, #28]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d020      	beq.n	80021dc <HAL_RCC_OscConfig+0x24c>
        __HAL_RCC_MSI_ENABLE();
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	6822      	ldr	r2, [r4, #0]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	4313      	orrs	r3, r2
 80021a2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80021a4:	f7fe fe6c 	bl	8000e80 <HAL_GetTick>
 80021a8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80021aa:	2280      	movs	r2, #128	; 0x80
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	0092      	lsls	r2, r2, #2
 80021b0:	4213      	tst	r3, r2
 80021b2:	d00d      	beq.n	80021d0 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b4:	6863      	ldr	r3, [r4, #4]
 80021b6:	4a3f      	ldr	r2, [pc, #252]	; (80022b4 <HAL_RCC_OscConfig+0x324>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80021bc:	4313      	orrs	r3, r2
 80021be:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021c0:	6862      	ldr	r2, [r4, #4]
 80021c2:	6a2b      	ldr	r3, [r5, #32]
 80021c4:	0212      	lsls	r2, r2, #8
 80021c6:	061b      	lsls	r3, r3, #24
 80021c8:	0a12      	lsrs	r2, r2, #8
 80021ca:	4313      	orrs	r3, r2
 80021cc:	6063      	str	r3, [r4, #4]
 80021ce:	e724      	b.n	800201a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021d0:	f7fe fe56 	bl	8000e80 <HAL_GetTick>
 80021d4:	1bc0      	subs	r0, r0, r7
 80021d6:	2802      	cmp	r0, #2
 80021d8:	d9e7      	bls.n	80021aa <HAL_RCC_OscConfig+0x21a>
 80021da:	e751      	b.n	8002080 <HAL_RCC_OscConfig+0xf0>
        __HAL_RCC_MSI_DISABLE();
 80021dc:	6823      	ldr	r3, [r4, #0]
 80021de:	4a3c      	ldr	r2, [pc, #240]	; (80022d0 <HAL_RCC_OscConfig+0x340>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80021e4:	f7fe fe4c 	bl	8000e80 <HAL_GetTick>
 80021e8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80021ea:	2280      	movs	r2, #128	; 0x80
 80021ec:	6823      	ldr	r3, [r4, #0]
 80021ee:	0092      	lsls	r2, r2, #2
 80021f0:	4213      	tst	r3, r2
 80021f2:	d100      	bne.n	80021f6 <HAL_RCC_OscConfig+0x266>
 80021f4:	e711      	b.n	800201a <HAL_RCC_OscConfig+0x8a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021f6:	f7fe fe43 	bl	8000e80 <HAL_GetTick>
 80021fa:	1bc0      	subs	r0, r0, r7
 80021fc:	2802      	cmp	r0, #2
 80021fe:	d9f4      	bls.n	80021ea <HAL_RCC_OscConfig+0x25a>
 8002200:	e73e      	b.n	8002080 <HAL_RCC_OscConfig+0xf0>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002202:	696a      	ldr	r2, [r5, #20]
 8002204:	2301      	movs	r3, #1
 8002206:	2a00      	cmp	r2, #0
 8002208:	d010      	beq.n	800222c <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 800220a:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800220c:	4313      	orrs	r3, r2
 800220e:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002210:	f7fe fe36 	bl	8000e80 <HAL_GetTick>
 8002214:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002216:	2202      	movs	r2, #2
 8002218:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800221a:	4213      	tst	r3, r2
 800221c:	d000      	beq.n	8002220 <HAL_RCC_OscConfig+0x290>
 800221e:	e700      	b.n	8002022 <HAL_RCC_OscConfig+0x92>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002220:	f7fe fe2e 	bl	8000e80 <HAL_GetTick>
 8002224:	1bc0      	subs	r0, r0, r7
 8002226:	2802      	cmp	r0, #2
 8002228:	d9f5      	bls.n	8002216 <HAL_RCC_OscConfig+0x286>
 800222a:	e729      	b.n	8002080 <HAL_RCC_OscConfig+0xf0>
      __HAL_RCC_LSI_DISABLE();
 800222c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800222e:	439a      	bics	r2, r3
 8002230:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002232:	f7fe fe25 	bl	8000e80 <HAL_GetTick>
 8002236:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002238:	2202      	movs	r2, #2
 800223a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800223c:	4213      	tst	r3, r2
 800223e:	d100      	bne.n	8002242 <HAL_RCC_OscConfig+0x2b2>
 8002240:	e6ef      	b.n	8002022 <HAL_RCC_OscConfig+0x92>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002242:	f7fe fe1d 	bl	8000e80 <HAL_GetTick>
 8002246:	1bc0      	subs	r0, r0, r7
 8002248:	2802      	cmp	r0, #2
 800224a:	d9f5      	bls.n	8002238 <HAL_RCC_OscConfig+0x2a8>
 800224c:	e718      	b.n	8002080 <HAL_RCC_OscConfig+0xf0>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800224e:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8002250:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002252:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002254:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8002256:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002258:	421a      	tst	r2, r3
 800225a:	d104      	bne.n	8002266 <HAL_RCC_OscConfig+0x2d6>
      __HAL_RCC_PWR_CLK_ENABLE();
 800225c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800225e:	4313      	orrs	r3, r2
 8002260:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8002262:	2301      	movs	r3, #1
 8002264:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002266:	2280      	movs	r2, #128	; 0x80
 8002268:	4f1a      	ldr	r7, [pc, #104]	; (80022d4 <HAL_RCC_OscConfig+0x344>)
 800226a:	0052      	lsls	r2, r2, #1
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	4213      	tst	r3, r2
 8002270:	d008      	beq.n	8002284 <HAL_RCC_OscConfig+0x2f4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002272:	2280      	movs	r2, #128	; 0x80
 8002274:	68ab      	ldr	r3, [r5, #8]
 8002276:	0052      	lsls	r2, r2, #1
 8002278:	4293      	cmp	r3, r2
 800227a:	d12d      	bne.n	80022d8 <HAL_RCC_OscConfig+0x348>
 800227c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800227e:	4313      	orrs	r3, r2
 8002280:	6523      	str	r3, [r4, #80]	; 0x50
 8002282:	e04e      	b.n	8002322 <HAL_RCC_OscConfig+0x392>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002284:	2280      	movs	r2, #128	; 0x80
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	0052      	lsls	r2, r2, #1
 800228a:	4313      	orrs	r3, r2
 800228c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800228e:	f7fe fdf7 	bl	8000e80 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8002296:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002298:	9303      	str	r3, [sp, #12]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	9a03      	ldr	r2, [sp, #12]
 800229e:	4213      	tst	r3, r2
 80022a0:	d1e7      	bne.n	8002272 <HAL_RCC_OscConfig+0x2e2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a2:	f7fe fded 	bl	8000e80 <HAL_GetTick>
 80022a6:	9b02      	ldr	r3, [sp, #8]
 80022a8:	1ac0      	subs	r0, r0, r3
 80022aa:	2864      	cmp	r0, #100	; 0x64
 80022ac:	d9f5      	bls.n	800229a <HAL_RCC_OscConfig+0x30a>
 80022ae:	e6e7      	b.n	8002080 <HAL_RCC_OscConfig+0xf0>
 80022b0:	40021000 	.word	0x40021000
 80022b4:	ffff1fff 	.word	0xffff1fff
 80022b8:	08004b51 	.word	0x08004b51
 80022bc:	20000004 	.word	0x20000004
 80022c0:	2000000c 	.word	0x2000000c
 80022c4:	fffeffff 	.word	0xfffeffff
 80022c8:	fffbffff 	.word	0xfffbffff
 80022cc:	ffffe0ff 	.word	0xffffe0ff
 80022d0:	fffffeff 	.word	0xfffffeff
 80022d4:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d116      	bne.n	800230a <HAL_RCC_OscConfig+0x37a>
 80022dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80022de:	4a6c      	ldr	r2, [pc, #432]	; (8002490 <HAL_RCC_OscConfig+0x500>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	6523      	str	r3, [r4, #80]	; 0x50
 80022e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80022e6:	4a6b      	ldr	r2, [pc, #428]	; (8002494 <HAL_RCC_OscConfig+0x504>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80022ec:	f7fe fdc8 	bl	8000e80 <HAL_GetTick>
 80022f0:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022f2:	2280      	movs	r2, #128	; 0x80
 80022f4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	4213      	tst	r3, r2
 80022fa:	d02a      	beq.n	8002352 <HAL_RCC_OscConfig+0x3c2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022fc:	f7fe fdc0 	bl	8000e80 <HAL_GetTick>
 8002300:	4b65      	ldr	r3, [pc, #404]	; (8002498 <HAL_RCC_OscConfig+0x508>)
 8002302:	1bc0      	subs	r0, r0, r7
 8002304:	4298      	cmp	r0, r3
 8002306:	d9f4      	bls.n	80022f2 <HAL_RCC_OscConfig+0x362>
 8002308:	e6ba      	b.n	8002080 <HAL_RCC_OscConfig+0xf0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800230a:	21a0      	movs	r1, #160	; 0xa0
 800230c:	00c9      	lsls	r1, r1, #3
 800230e:	428b      	cmp	r3, r1
 8002310:	d10b      	bne.n	800232a <HAL_RCC_OscConfig+0x39a>
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8002316:	00db      	lsls	r3, r3, #3
 8002318:	430b      	orrs	r3, r1
 800231a:	6523      	str	r3, [r4, #80]	; 0x50
 800231c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800231e:	431a      	orrs	r2, r3
 8002320:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002322:	f7fe fdad 	bl	8000e80 <HAL_GetTick>
 8002326:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002328:	e00e      	b.n	8002348 <HAL_RCC_OscConfig+0x3b8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800232a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800232c:	4a58      	ldr	r2, [pc, #352]	; (8002490 <HAL_RCC_OscConfig+0x500>)
 800232e:	4013      	ands	r3, r2
 8002330:	6523      	str	r3, [r4, #80]	; 0x50
 8002332:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002334:	4a57      	ldr	r2, [pc, #348]	; (8002494 <HAL_RCC_OscConfig+0x504>)
 8002336:	4013      	ands	r3, r2
 8002338:	e7a2      	b.n	8002280 <HAL_RCC_OscConfig+0x2f0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7fe fda1 	bl	8000e80 <HAL_GetTick>
 800233e:	4b56      	ldr	r3, [pc, #344]	; (8002498 <HAL_RCC_OscConfig+0x508>)
 8002340:	1bc0      	subs	r0, r0, r7
 8002342:	4298      	cmp	r0, r3
 8002344:	d900      	bls.n	8002348 <HAL_RCC_OscConfig+0x3b8>
 8002346:	e69b      	b.n	8002080 <HAL_RCC_OscConfig+0xf0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002348:	2280      	movs	r2, #128	; 0x80
 800234a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800234c:	0092      	lsls	r2, r2, #2
 800234e:	4213      	tst	r3, r2
 8002350:	d0f3      	beq.n	800233a <HAL_RCC_OscConfig+0x3aa>
    if(pwrclkchanged == SET)
 8002352:	9b01      	ldr	r3, [sp, #4]
 8002354:	2b01      	cmp	r3, #1
 8002356:	d000      	beq.n	800235a <HAL_RCC_OscConfig+0x3ca>
 8002358:	e667      	b.n	800202a <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800235a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800235c:	4a4f      	ldr	r2, [pc, #316]	; (800249c <HAL_RCC_OscConfig+0x50c>)
 800235e:	4013      	ands	r3, r2
 8002360:	63a3      	str	r3, [r4, #56]	; 0x38
 8002362:	e662      	b.n	800202a <HAL_RCC_OscConfig+0x9a>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002364:	69a9      	ldr	r1, [r5, #24]
 8002366:	2301      	movs	r3, #1
 8002368:	4a4d      	ldr	r2, [pc, #308]	; (80024a0 <HAL_RCC_OscConfig+0x510>)
 800236a:	2900      	cmp	r1, #0
 800236c:	d018      	beq.n	80023a0 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI48_ENABLE();
 800236e:	68a1      	ldr	r1, [r4, #8]
 8002370:	4319      	orrs	r1, r3
 8002372:	60a1      	str	r1, [r4, #8]
 8002374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002376:	430b      	orrs	r3, r1
 8002378:	6363      	str	r3, [r4, #52]	; 0x34
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	6a11      	ldr	r1, [r2, #32]
 800237e:	019b      	lsls	r3, r3, #6
 8002380:	430b      	orrs	r3, r1
 8002382:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8002384:	f7fe fd7c 	bl	8000e80 <HAL_GetTick>
 8002388:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800238a:	2202      	movs	r2, #2
 800238c:	68a3      	ldr	r3, [r4, #8]
 800238e:	4213      	tst	r3, r2
 8002390:	d000      	beq.n	8002394 <HAL_RCC_OscConfig+0x404>
 8002392:	e64e      	b.n	8002032 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002394:	f7fe fd74 	bl	8000e80 <HAL_GetTick>
 8002398:	1bc0      	subs	r0, r0, r7
 800239a:	2802      	cmp	r0, #2
 800239c:	d9f5      	bls.n	800238a <HAL_RCC_OscConfig+0x3fa>
 800239e:	e66f      	b.n	8002080 <HAL_RCC_OscConfig+0xf0>
        __HAL_RCC_HSI48_DISABLE();
 80023a0:	68a1      	ldr	r1, [r4, #8]
 80023a2:	4399      	bics	r1, r3
 80023a4:	60a1      	str	r1, [r4, #8]
 80023a6:	6a13      	ldr	r3, [r2, #32]
 80023a8:	493e      	ldr	r1, [pc, #248]	; (80024a4 <HAL_RCC_OscConfig+0x514>)
 80023aa:	400b      	ands	r3, r1
 80023ac:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80023ae:	f7fe fd67 	bl	8000e80 <HAL_GetTick>
 80023b2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80023b4:	2202      	movs	r2, #2
 80023b6:	68a3      	ldr	r3, [r4, #8]
 80023b8:	4213      	tst	r3, r2
 80023ba:	d100      	bne.n	80023be <HAL_RCC_OscConfig+0x42e>
 80023bc:	e639      	b.n	8002032 <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023be:	f7fe fd5f 	bl	8000e80 <HAL_GetTick>
 80023c2:	1bc0      	subs	r0, r0, r7
 80023c4:	2802      	cmp	r0, #2
 80023c6:	d9f5      	bls.n	80023b4 <HAL_RCC_OscConfig+0x424>
 80023c8:	e65a      	b.n	8002080 <HAL_RCC_OscConfig+0xf0>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ca:	2e0c      	cmp	r6, #12
 80023cc:	d043      	beq.n	8002456 <HAL_RCC_OscConfig+0x4c6>
 80023ce:	4a36      	ldr	r2, [pc, #216]	; (80024a8 <HAL_RCC_OscConfig+0x518>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d12e      	bne.n	8002432 <HAL_RCC_OscConfig+0x4a2>
        __HAL_RCC_PLL_DISABLE();
 80023d4:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023d6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80023d8:	4013      	ands	r3, r2
 80023da:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80023dc:	f7fe fd50 	bl	8000e80 <HAL_GetTick>
 80023e0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80023e2:	04b6      	lsls	r6, r6, #18
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	4233      	tst	r3, r6
 80023e8:	d11d      	bne.n	8002426 <HAL_RCC_OscConfig+0x496>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ea:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80023ec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80023ee:	68e2      	ldr	r2, [r4, #12]
 80023f0:	430b      	orrs	r3, r1
 80023f2:	492e      	ldr	r1, [pc, #184]	; (80024ac <HAL_RCC_OscConfig+0x51c>)
 80023f4:	400a      	ands	r2, r1
 80023f6:	4313      	orrs	r3, r2
 80023f8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80023fa:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023fc:	4313      	orrs	r3, r2
 80023fe:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	6822      	ldr	r2, [r4, #0]
 8002404:	045b      	lsls	r3, r3, #17
 8002406:	4313      	orrs	r3, r2
 8002408:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800240a:	f7fe fd39 	bl	8000e80 <HAL_GetTick>
 800240e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002410:	04ad      	lsls	r5, r5, #18
 8002412:	6823      	ldr	r3, [r4, #0]
 8002414:	422b      	tst	r3, r5
 8002416:	d000      	beq.n	800241a <HAL_RCC_OscConfig+0x48a>
 8002418:	e60f      	b.n	800203a <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800241a:	f7fe fd31 	bl	8000e80 <HAL_GetTick>
 800241e:	1b80      	subs	r0, r0, r6
 8002420:	2802      	cmp	r0, #2
 8002422:	d9f6      	bls.n	8002412 <HAL_RCC_OscConfig+0x482>
 8002424:	e62c      	b.n	8002080 <HAL_RCC_OscConfig+0xf0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002426:	f7fe fd2b 	bl	8000e80 <HAL_GetTick>
 800242a:	1bc0      	subs	r0, r0, r7
 800242c:	2802      	cmp	r0, #2
 800242e:	d9d9      	bls.n	80023e4 <HAL_RCC_OscConfig+0x454>
 8002430:	e626      	b.n	8002080 <HAL_RCC_OscConfig+0xf0>
        __HAL_RCC_PLL_DISABLE();
 8002432:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002434:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002436:	4013      	ands	r3, r2
 8002438:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800243a:	f7fe fd21 	bl	8000e80 <HAL_GetTick>
 800243e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002440:	04ad      	lsls	r5, r5, #18
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	422b      	tst	r3, r5
 8002446:	d100      	bne.n	800244a <HAL_RCC_OscConfig+0x4ba>
 8002448:	e5f7      	b.n	800203a <HAL_RCC_OscConfig+0xaa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800244a:	f7fe fd19 	bl	8000e80 <HAL_GetTick>
 800244e:	1b80      	subs	r0, r0, r6
 8002450:	2802      	cmp	r0, #2
 8002452:	d9f6      	bls.n	8002442 <HAL_RCC_OscConfig+0x4b2>
 8002454:	e614      	b.n	8002080 <HAL_RCC_OscConfig+0xf0>
        return HAL_ERROR;
 8002456:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002458:	2b01      	cmp	r3, #1
 800245a:	d100      	bne.n	800245e <HAL_RCC_OscConfig+0x4ce>
 800245c:	e59e      	b.n	8001f9c <HAL_RCC_OscConfig+0xc>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800245e:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8002460:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002462:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8002464:	0252      	lsls	r2, r2, #9
 8002466:	401a      	ands	r2, r3
        return HAL_ERROR;
 8002468:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800246a:	428a      	cmp	r2, r1
 800246c:	d000      	beq.n	8002470 <HAL_RCC_OscConfig+0x4e0>
 800246e:	e595      	b.n	8001f9c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002470:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002472:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002474:	0392      	lsls	r2, r2, #14
 8002476:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002478:	428a      	cmp	r2, r1
 800247a:	d000      	beq.n	800247e <HAL_RCC_OscConfig+0x4ee>
 800247c:	e58e      	b.n	8001f9c <HAL_RCC_OscConfig+0xc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800247e:	20c0      	movs	r0, #192	; 0xc0
 8002480:	0400      	lsls	r0, r0, #16
 8002482:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002484:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8002486:	1a18      	subs	r0, r3, r0
 8002488:	1e43      	subs	r3, r0, #1
 800248a:	4198      	sbcs	r0, r3
    return HAL_ERROR;
 800248c:	b2c0      	uxtb	r0, r0
 800248e:	e585      	b.n	8001f9c <HAL_RCC_OscConfig+0xc>
 8002490:	fffffeff 	.word	0xfffffeff
 8002494:	fffffbff 	.word	0xfffffbff
 8002498:	00001388 	.word	0x00001388
 800249c:	efffffff 	.word	0xefffffff
 80024a0:	40010000 	.word	0x40010000
 80024a4:	ffffdfff 	.word	0xffffdfff
 80024a8:	feffffff 	.word	0xfeffffff
 80024ac:	ff02ffff 	.word	0xff02ffff

080024b0 <HAL_RCC_ClockConfig>:
{
 80024b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024b2:	1e06      	subs	r6, r0, #0
 80024b4:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 80024b8:	2001      	movs	r0, #1
}
 80024ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024bc:	2501      	movs	r5, #1
 80024be:	4c5b      	ldr	r4, [pc, #364]	; (800262c <HAL_RCC_ClockConfig+0x17c>)
 80024c0:	9a01      	ldr	r2, [sp, #4]
 80024c2:	6823      	ldr	r3, [r4, #0]
 80024c4:	402b      	ands	r3, r5
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d331      	bcc.n	800252e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ca:	6832      	ldr	r2, [r6, #0]
 80024cc:	0793      	lsls	r3, r2, #30
 80024ce:	d443      	bmi.n	8002558 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d0:	07d3      	lsls	r3, r2, #31
 80024d2:	d449      	bmi.n	8002568 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d4:	2501      	movs	r5, #1
 80024d6:	6823      	ldr	r3, [r4, #0]
 80024d8:	9a01      	ldr	r2, [sp, #4]
 80024da:	402b      	ands	r3, r5
 80024dc:	4293      	cmp	r3, r2
 80024de:	d909      	bls.n	80024f4 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e0:	6823      	ldr	r3, [r4, #0]
 80024e2:	43ab      	bics	r3, r5
 80024e4:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80024e6:	f7fe fccb 	bl	8000e80 <HAL_GetTick>
 80024ea:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ec:	6823      	ldr	r3, [r4, #0]
 80024ee:	422b      	tst	r3, r5
 80024f0:	d000      	beq.n	80024f4 <HAL_RCC_ClockConfig+0x44>
 80024f2:	e08c      	b.n	800260e <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024f4:	6832      	ldr	r2, [r6, #0]
 80024f6:	4c4e      	ldr	r4, [pc, #312]	; (8002630 <HAL_RCC_ClockConfig+0x180>)
 80024f8:	0753      	lsls	r3, r2, #29
 80024fa:	d500      	bpl.n	80024fe <HAL_RCC_ClockConfig+0x4e>
 80024fc:	e08f      	b.n	800261e <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024fe:	0713      	lsls	r3, r2, #28
 8002500:	d506      	bpl.n	8002510 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002502:	68e2      	ldr	r2, [r4, #12]
 8002504:	6933      	ldr	r3, [r6, #16]
 8002506:	494b      	ldr	r1, [pc, #300]	; (8002634 <HAL_RCC_ClockConfig+0x184>)
 8002508:	00db      	lsls	r3, r3, #3
 800250a:	400a      	ands	r2, r1
 800250c:	4313      	orrs	r3, r2
 800250e:	60e3      	str	r3, [r4, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002510:	f7ff fcf4 	bl	8001efc <HAL_RCC_GetSysClockFreq>
 8002514:	68e3      	ldr	r3, [r4, #12]
 8002516:	4a48      	ldr	r2, [pc, #288]	; (8002638 <HAL_RCC_ClockConfig+0x188>)
 8002518:	061b      	lsls	r3, r3, #24
 800251a:	0f1b      	lsrs	r3, r3, #28
 800251c:	5cd3      	ldrb	r3, [r2, r3]
 800251e:	40d8      	lsrs	r0, r3
 8002520:	4b46      	ldr	r3, [pc, #280]	; (800263c <HAL_RCC_ClockConfig+0x18c>)
 8002522:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002524:	4b46      	ldr	r3, [pc, #280]	; (8002640 <HAL_RCC_ClockConfig+0x190>)
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	f7fe fca8 	bl	8000e7c <HAL_InitTick>
 800252c:	e7c5      	b.n	80024ba <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252e:	6823      	ldr	r3, [r4, #0]
 8002530:	9a01      	ldr	r2, [sp, #4]
 8002532:	43ab      	bics	r3, r5
 8002534:	4313      	orrs	r3, r2
 8002536:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002538:	f7fe fca2 	bl	8000e80 <HAL_GetTick>
 800253c:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253e:	6823      	ldr	r3, [r4, #0]
 8002540:	9a01      	ldr	r2, [sp, #4]
 8002542:	402b      	ands	r3, r5
 8002544:	4293      	cmp	r3, r2
 8002546:	d0c0      	beq.n	80024ca <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002548:	f7fe fc9a 	bl	8000e80 <HAL_GetTick>
 800254c:	4b3d      	ldr	r3, [pc, #244]	; (8002644 <HAL_RCC_ClockConfig+0x194>)
 800254e:	1bc0      	subs	r0, r0, r7
 8002550:	4298      	cmp	r0, r3
 8002552:	d9f4      	bls.n	800253e <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 8002554:	2003      	movs	r0, #3
 8002556:	e7b0      	b.n	80024ba <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002558:	20f0      	movs	r0, #240	; 0xf0
 800255a:	4935      	ldr	r1, [pc, #212]	; (8002630 <HAL_RCC_ClockConfig+0x180>)
 800255c:	68cb      	ldr	r3, [r1, #12]
 800255e:	4383      	bics	r3, r0
 8002560:	68b0      	ldr	r0, [r6, #8]
 8002562:	4303      	orrs	r3, r0
 8002564:	60cb      	str	r3, [r1, #12]
 8002566:	e7b3      	b.n	80024d0 <HAL_RCC_ClockConfig+0x20>
 8002568:	4d31      	ldr	r5, [pc, #196]	; (8002630 <HAL_RCC_ClockConfig+0x180>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256a:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800256c:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256e:	2a02      	cmp	r2, #2
 8002570:	d118      	bne.n	80025a4 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002572:	039b      	lsls	r3, r3, #14
 8002574:	d5a0      	bpl.n	80024b8 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002576:	2103      	movs	r1, #3
 8002578:	68eb      	ldr	r3, [r5, #12]
 800257a:	438b      	bics	r3, r1
 800257c:	4313      	orrs	r3, r2
 800257e:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 8002580:	f7fe fc7e 	bl	8000e80 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002584:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002586:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002588:	2b02      	cmp	r3, #2
 800258a:	d118      	bne.n	80025be <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800258c:	220c      	movs	r2, #12
 800258e:	68eb      	ldr	r3, [r5, #12]
 8002590:	4013      	ands	r3, r2
 8002592:	2b08      	cmp	r3, #8
 8002594:	d09e      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002596:	f7fe fc73 	bl	8000e80 <HAL_GetTick>
 800259a:	4b2a      	ldr	r3, [pc, #168]	; (8002644 <HAL_RCC_ClockConfig+0x194>)
 800259c:	1bc0      	subs	r0, r0, r7
 800259e:	4298      	cmp	r0, r3
 80025a0:	d9f4      	bls.n	800258c <HAL_RCC_ClockConfig+0xdc>
 80025a2:	e7d7      	b.n	8002554 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025a4:	2a03      	cmp	r2, #3
 80025a6:	d102      	bne.n	80025ae <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025a8:	019b      	lsls	r3, r3, #6
 80025aa:	d4e4      	bmi.n	8002576 <HAL_RCC_ClockConfig+0xc6>
 80025ac:	e784      	b.n	80024b8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025ae:	2a01      	cmp	r2, #1
 80025b0:	d102      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025b2:	075b      	lsls	r3, r3, #29
 80025b4:	d4df      	bmi.n	8002576 <HAL_RCC_ClockConfig+0xc6>
 80025b6:	e77f      	b.n	80024b8 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80025b8:	059b      	lsls	r3, r3, #22
 80025ba:	d4dc      	bmi.n	8002576 <HAL_RCC_ClockConfig+0xc6>
 80025bc:	e77c      	b.n	80024b8 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d10b      	bne.n	80025da <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c2:	220c      	movs	r2, #12
 80025c4:	68eb      	ldr	r3, [r5, #12]
 80025c6:	4013      	ands	r3, r2
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d083      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025cc:	f7fe fc58 	bl	8000e80 <HAL_GetTick>
 80025d0:	4b1c      	ldr	r3, [pc, #112]	; (8002644 <HAL_RCC_ClockConfig+0x194>)
 80025d2:	1bc0      	subs	r0, r0, r7
 80025d4:	4298      	cmp	r0, r3
 80025d6:	d9f4      	bls.n	80025c2 <HAL_RCC_ClockConfig+0x112>
 80025d8:	e7bc      	b.n	8002554 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d011      	beq.n	8002602 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80025de:	220c      	movs	r2, #12
 80025e0:	68eb      	ldr	r3, [r5, #12]
 80025e2:	4213      	tst	r3, r2
 80025e4:	d100      	bne.n	80025e8 <HAL_RCC_ClockConfig+0x138>
 80025e6:	e775      	b.n	80024d4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e8:	f7fe fc4a 	bl	8000e80 <HAL_GetTick>
 80025ec:	4b15      	ldr	r3, [pc, #84]	; (8002644 <HAL_RCC_ClockConfig+0x194>)
 80025ee:	1bc0      	subs	r0, r0, r7
 80025f0:	4298      	cmp	r0, r3
 80025f2:	d9f4      	bls.n	80025de <HAL_RCC_ClockConfig+0x12e>
 80025f4:	e7ae      	b.n	8002554 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f6:	f7fe fc43 	bl	8000e80 <HAL_GetTick>
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_RCC_ClockConfig+0x194>)
 80025fc:	1bc0      	subs	r0, r0, r7
 80025fe:	4298      	cmp	r0, r3
 8002600:	d8a8      	bhi.n	8002554 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002602:	220c      	movs	r2, #12
 8002604:	68eb      	ldr	r3, [r5, #12]
 8002606:	4013      	ands	r3, r2
 8002608:	2b04      	cmp	r3, #4
 800260a:	d1f4      	bne.n	80025f6 <HAL_RCC_ClockConfig+0x146>
 800260c:	e762      	b.n	80024d4 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800260e:	f7fe fc37 	bl	8000e80 <HAL_GetTick>
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <HAL_RCC_ClockConfig+0x194>)
 8002614:	1bc0      	subs	r0, r0, r7
 8002616:	4298      	cmp	r0, r3
 8002618:	d800      	bhi.n	800261c <HAL_RCC_ClockConfig+0x16c>
 800261a:	e767      	b.n	80024ec <HAL_RCC_ClockConfig+0x3c>
 800261c:	e79a      	b.n	8002554 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800261e:	68e3      	ldr	r3, [r4, #12]
 8002620:	4909      	ldr	r1, [pc, #36]	; (8002648 <HAL_RCC_ClockConfig+0x198>)
 8002622:	400b      	ands	r3, r1
 8002624:	68f1      	ldr	r1, [r6, #12]
 8002626:	430b      	orrs	r3, r1
 8002628:	60e3      	str	r3, [r4, #12]
 800262a:	e768      	b.n	80024fe <HAL_RCC_ClockConfig+0x4e>
 800262c:	40022000 	.word	0x40022000
 8002630:	40021000 	.word	0x40021000
 8002634:	ffffc7ff 	.word	0xffffc7ff
 8002638:	08004b51 	.word	0x08004b51
 800263c:	20000004 	.word	0x20000004
 8002640:	2000000c 	.word	0x2000000c
 8002644:	00001388 	.word	0x00001388
 8002648:	fffff8ff 	.word	0xfffff8ff

0800264c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800264c:	4b04      	ldr	r3, [pc, #16]	; (8002660 <HAL_RCC_GetPCLK1Freq+0x14>)
 800264e:	4a05      	ldr	r2, [pc, #20]	; (8002664 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	055b      	lsls	r3, r3, #21
 8002654:	0f5b      	lsrs	r3, r3, #29
 8002656:	5cd3      	ldrb	r3, [r2, r3]
 8002658:	4a03      	ldr	r2, [pc, #12]	; (8002668 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800265a:	6810      	ldr	r0, [r2, #0]
 800265c:	40d8      	lsrs	r0, r3
}
 800265e:	4770      	bx	lr
 8002660:	40021000 	.word	0x40021000
 8002664:	08004b61 	.word	0x08004b61
 8002668:	20000004 	.word	0x20000004

0800266c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800266c:	4b04      	ldr	r3, [pc, #16]	; (8002680 <HAL_RCC_GetPCLK2Freq+0x14>)
 800266e:	4a05      	ldr	r2, [pc, #20]	; (8002684 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	049b      	lsls	r3, r3, #18
 8002674:	0f5b      	lsrs	r3, r3, #29
 8002676:	5cd3      	ldrb	r3, [r2, r3]
 8002678:	4a03      	ldr	r2, [pc, #12]	; (8002688 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800267a:	6810      	ldr	r0, [r2, #0]
 800267c:	40d8      	lsrs	r0, r3
}
 800267e:	4770      	bx	lr
 8002680:	40021000 	.word	0x40021000
 8002684:	08004b61 	.word	0x08004b61
 8002688:	20000004 	.word	0x20000004

0800268c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800268c:	6803      	ldr	r3, [r0, #0]
{
 800268e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002690:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002692:	069b      	lsls	r3, r3, #26
 8002694:	d53d      	bpl.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x86>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002696:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8002698:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800269a:	4c5f      	ldr	r4, [pc, #380]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800269c:	055b      	lsls	r3, r3, #21
 800269e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 80026a0:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a2:	421a      	tst	r2, r3
 80026a4:	d104      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80026a8:	4313      	orrs	r3, r2
 80026aa:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80026ac:	2301      	movs	r3, #1
 80026ae:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	2780      	movs	r7, #128	; 0x80
 80026b2:	4e5a      	ldr	r6, [pc, #360]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80026b4:	007f      	lsls	r7, r7, #1
 80026b6:	6833      	ldr	r3, [r6, #0]
 80026b8:	423b      	tst	r3, r7
 80026ba:	d06c      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x10a>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80026bc:	6868      	ldr	r0, [r5, #4]
 80026be:	23c0      	movs	r3, #192	; 0xc0
 80026c0:	26c0      	movs	r6, #192	; 0xc0
 80026c2:	0001      	movs	r1, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80026c4:	6822      	ldr	r2, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80026c6:	03b6      	lsls	r6, r6, #14
 80026c8:	029b      	lsls	r3, r3, #10
 80026ca:	4030      	ands	r0, r6
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80026cc:	4032      	ands	r2, r6
 80026ce:	4019      	ands	r1, r3
 80026d0:	001e      	movs	r6, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80026d2:	4290      	cmp	r0, r2
 80026d4:	d000      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80026d6:	e06f      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80026d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80026da:	4033      	ands	r3, r6

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80026dc:	d000      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
 80026de:	e074      	b.n	80027ca <HAL_RCCEx_PeriphCLKConfig+0x13e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026e0:	6869      	ldr	r1, [r5, #4]
 80026e2:	23c0      	movs	r3, #192	; 0xc0
 80026e4:	000a      	movs	r2, r1
 80026e6:	029b      	lsls	r3, r3, #10
 80026e8:	401a      	ands	r2, r3
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d107      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0x72>
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	484b      	ldr	r0, [pc, #300]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80026f2:	4003      	ands	r3, r0
 80026f4:	20c0      	movs	r0, #192	; 0xc0
 80026f6:	0380      	lsls	r0, r0, #14
 80026f8:	4001      	ands	r1, r0
 80026fa:	430b      	orrs	r3, r1
 80026fc:	6023      	str	r3, [r4, #0]
 80026fe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002700:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002702:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002704:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8002706:	2b01      	cmp	r3, #1
 8002708:	d103      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800270a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800270c:	4a45      	ldr	r2, [pc, #276]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800270e:	4013      	ands	r3, r2
 8002710:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002712:	682b      	ldr	r3, [r5, #0]
 8002714:	07da      	lsls	r2, r3, #31
 8002716:	d506      	bpl.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002718:	2003      	movs	r0, #3
 800271a:	493f      	ldr	r1, [pc, #252]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800271c:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800271e:	4382      	bics	r2, r0
 8002720:	68a8      	ldr	r0, [r5, #8]
 8002722:	4302      	orrs	r2, r0
 8002724:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002726:	079a      	lsls	r2, r3, #30
 8002728:	d506      	bpl.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800272a:	200c      	movs	r0, #12
 800272c:	493a      	ldr	r1, [pc, #232]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800272e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002730:	4382      	bics	r2, r0
 8002732:	68e8      	ldr	r0, [r5, #12]
 8002734:	4302      	orrs	r2, r0
 8002736:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002738:	075a      	lsls	r2, r3, #29
 800273a:	d506      	bpl.n	800274a <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800273c:	4936      	ldr	r1, [pc, #216]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800273e:	483a      	ldr	r0, [pc, #232]	; (8002828 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002740:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002742:	4002      	ands	r2, r0
 8002744:	6928      	ldr	r0, [r5, #16]
 8002746:	4302      	orrs	r2, r0
 8002748:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800274a:	071a      	lsls	r2, r3, #28
 800274c:	d506      	bpl.n	800275c <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800274e:	4932      	ldr	r1, [pc, #200]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002750:	4836      	ldr	r0, [pc, #216]	; (800282c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002752:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002754:	4002      	ands	r2, r0
 8002756:	6968      	ldr	r0, [r5, #20]
 8002758:	4302      	orrs	r2, r0
 800275a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800275c:	05da      	lsls	r2, r3, #23
 800275e:	d506      	bpl.n	800276e <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002760:	492d      	ldr	r1, [pc, #180]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002762:	4833      	ldr	r0, [pc, #204]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002764:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002766:	4002      	ands	r2, r0
 8002768:	69a8      	ldr	r0, [r5, #24]
 800276a:	4302      	orrs	r2, r0
 800276c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800276e:	065a      	lsls	r2, r3, #25
 8002770:	d506      	bpl.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002772:	4929      	ldr	r1, [pc, #164]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002774:	482f      	ldr	r0, [pc, #188]	; (8002834 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002776:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002778:	4002      	ands	r2, r0
 800277a:	6a28      	ldr	r0, [r5, #32]
 800277c:	4302      	orrs	r2, r0
 800277e:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8002780:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002782:	061b      	lsls	r3, r3, #24
 8002784:	d517      	bpl.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002786:	4a24      	ldr	r2, [pc, #144]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002788:	492b      	ldr	r1, [pc, #172]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800278a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800278c:	400b      	ands	r3, r1
 800278e:	69e9      	ldr	r1, [r5, #28]
 8002790:	430b      	orrs	r3, r1
 8002792:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002794:	e00f      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002796:	6833      	ldr	r3, [r6, #0]
 8002798:	433b      	orrs	r3, r7
 800279a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800279c:	f7fe fb70 	bl	8000e80 <HAL_GetTick>
 80027a0:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a2:	6833      	ldr	r3, [r6, #0]
 80027a4:	423b      	tst	r3, r7
 80027a6:	d189      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a8:	f7fe fb6a 	bl	8000e80 <HAL_GetTick>
 80027ac:	9b01      	ldr	r3, [sp, #4]
 80027ae:	1ac0      	subs	r0, r0, r3
 80027b0:	2864      	cmp	r0, #100	; 0x64
 80027b2:	d9f6      	bls.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          return HAL_TIMEOUT;
 80027b4:	2003      	movs	r0, #3
}
 80027b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80027b8:	4299      	cmp	r1, r3
 80027ba:	d000      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x132>
 80027bc:	e78c      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80027be:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 80027c0:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80027c2:	039b      	lsls	r3, r3, #14
 80027c4:	d400      	bmi.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80027c6:	e787      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
 80027c8:	e7f5      	b.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80027ca:	428b      	cmp	r3, r1
 80027cc:	d100      	bne.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x144>
 80027ce:	e787      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027d0:	682b      	ldr	r3, [r5, #0]
 80027d2:	069b      	lsls	r3, r3, #26
 80027d4:	d400      	bmi.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80027d6:	e783      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 80027d8:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80027da:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 80027dc:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80027de:	0312      	lsls	r2, r2, #12
 80027e0:	4302      	orrs	r2, r0
 80027e2:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027e4:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80027e6:	4b12      	ldr	r3, [pc, #72]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027e8:	4814      	ldr	r0, [pc, #80]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80027ea:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027ec:	4002      	ands	r2, r0
 80027ee:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 80027f0:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80027f2:	05cb      	lsls	r3, r1, #23
 80027f4:	d400      	bmi.n	80027f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80027f6:	e773      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 80027f8:	f7fe fb42 	bl	8000e80 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027fc:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80027fe:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002800:	00bf      	lsls	r7, r7, #2
 8002802:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8002804:	423b      	tst	r3, r7
 8002806:	d000      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8002808:	e76a      	b.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x54>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800280a:	f7fe fb39 	bl	8000e80 <HAL_GetTick>
 800280e:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002810:	1b80      	subs	r0, r0, r6
 8002812:	4298      	cmp	r0, r3
 8002814:	d9f5      	bls.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x176>
 8002816:	e7cd      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8002818:	40021000 	.word	0x40021000
 800281c:	40007000 	.word	0x40007000
 8002820:	ffcfffff 	.word	0xffcfffff
 8002824:	efffffff 	.word	0xefffffff
 8002828:	fffff3ff 	.word	0xfffff3ff
 800282c:	ffffcfff 	.word	0xffffcfff
 8002830:	fffcffff 	.word	0xfffcffff
 8002834:	fbffffff 	.word	0xfbffffff
 8002838:	fff3ffff 	.word	0xfff3ffff
 800283c:	fff7ffff 	.word	0xfff7ffff
 8002840:	00001388 	.word	0x00001388

08002844 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002844:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002846:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002848:	1c45      	adds	r5, r0, #1
 800284a:	7feb      	ldrb	r3, [r5, #31]
{
 800284c:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 800284e:	0038      	movs	r0, r7
 8002850:	2b01      	cmp	r3, #1
 8002852:	d024      	beq.n	800289e <HAL_RTC_DeactivateAlarm+0x5a>
 8002854:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002856:	22ca      	movs	r2, #202	; 0xca
  __HAL_LOCK(hrtc);
 8002858:	77eb      	strb	r3, [r5, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800285a:	6823      	ldr	r3, [r4, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800285c:	19e6      	adds	r6, r4, r7
 800285e:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002860:	625a      	str	r2, [r3, #36]	; 0x24
 8002862:	3a77      	subs	r2, #119	; 0x77
 8002864:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8002866:	32ad      	adds	r2, #173	; 0xad
 8002868:	4291      	cmp	r1, r2
 800286a:	d128      	bne.n	80028be <HAL_RTC_DeactivateAlarm+0x7a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800286c:	689a      	ldr	r2, [r3, #8]
 800286e:	4921      	ldr	r1, [pc, #132]	; (80028f4 <HAL_RTC_DeactivateAlarm+0xb0>)
 8002870:	400a      	ands	r2, r1
 8002872:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	4920      	ldr	r1, [pc, #128]	; (80028f8 <HAL_RTC_DeactivateAlarm+0xb4>)
 8002878:	400a      	ands	r2, r1
 800287a:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800287c:	f7fe fb00 	bl	8000e80 <HAL_GetTick>

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002880:	2301      	movs	r3, #1
    tickstart = HAL_GetTick();
 8002882:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	6823      	ldr	r3, [r4, #0]
 8002888:	68df      	ldr	r7, [r3, #12]
 800288a:	9b01      	ldr	r3, [sp, #4]
 800288c:	401f      	ands	r7, r3
 800288e:	d007      	beq.n	80028a0 <HAL_RTC_DeactivateAlarm+0x5c>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002890:	22ff      	movs	r2, #255	; 0xff
 8002892:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002894:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002896:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8002898:	2301      	movs	r3, #1
 800289a:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 800289c:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 800289e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80028a0:	f7fe faee 	bl	8000e80 <HAL_GetTick>
 80028a4:	9b00      	ldr	r3, [sp, #0]
 80028a6:	1ac0      	subs	r0, r0, r3
 80028a8:	23fa      	movs	r3, #250	; 0xfa
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4298      	cmp	r0, r3
 80028ae:	d9ea      	bls.n	8002886 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028b0:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028b2:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028b4:	6823      	ldr	r3, [r4, #0]
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028b8:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80028ba:	77ef      	strb	r7, [r5, #31]
        return HAL_TIMEOUT;
 80028bc:	e7ef      	b.n	800289e <HAL_RTC_DeactivateAlarm+0x5a>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80028be:	689a      	ldr	r2, [r3, #8]
 80028c0:	490e      	ldr	r1, [pc, #56]	; (80028fc <HAL_RTC_DeactivateAlarm+0xb8>)
 80028c2:	400a      	ands	r2, r1
 80028c4:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	490d      	ldr	r1, [pc, #52]	; (8002900 <HAL_RTC_DeactivateAlarm+0xbc>)
 80028ca:	400a      	ands	r2, r1
 80028cc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80028ce:	f7fe fad7 	bl	8000e80 <HAL_GetTick>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80028d2:	9701      	str	r7, [sp, #4]
    tickstart = HAL_GetTick();
 80028d4:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	68df      	ldr	r7, [r3, #12]
 80028da:	9b01      	ldr	r3, [sp, #4]
 80028dc:	401f      	ands	r7, r3
 80028de:	d1d7      	bne.n	8002890 <HAL_RTC_DeactivateAlarm+0x4c>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80028e0:	f7fe face 	bl	8000e80 <HAL_GetTick>
 80028e4:	9b00      	ldr	r3, [sp, #0]
 80028e6:	1ac0      	subs	r0, r0, r3
 80028e8:	23fa      	movs	r3, #250	; 0xfa
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4298      	cmp	r0, r3
 80028ee:	d9f2      	bls.n	80028d6 <HAL_RTC_DeactivateAlarm+0x92>
 80028f0:	e7de      	b.n	80028b0 <HAL_RTC_DeactivateAlarm+0x6c>
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	fffffeff 	.word	0xfffffeff
 80028f8:	ffffefff 	.word	0xffffefff
 80028fc:	fffffdff 	.word	0xfffffdff
 8002900:	ffffdfff 	.word	0xffffdfff

08002904 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002904:	6803      	ldr	r3, [r0, #0]
{
 8002906:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002908:	689a      	ldr	r2, [r3, #8]
{
 800290a:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800290c:	04d2      	lsls	r2, r2, #19
 800290e:	d50a      	bpl.n	8002926 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	05db      	lsls	r3, r3, #23
 8002914:	d507      	bpl.n	8002926 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002916:	f7fe fa26 	bl	8000d66 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800291a:	6821      	ldr	r1, [r4, #0]
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <HAL_RTC_AlarmIRQHandler+0x54>)
 800291e:	68ca      	ldr	r2, [r1, #12]
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	4313      	orrs	r3, r2
 8002924:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	0492      	lsls	r2, r2, #18
 800292c:	d50b      	bpl.n	8002946 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	059b      	lsls	r3, r3, #22
 8002932:	d508      	bpl.n	8002946 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002934:	0020      	movs	r0, r4
 8002936:	f000 fae1 	bl	8002efc <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800293a:	6821      	ldr	r1, [r4, #0]
 800293c:	4b07      	ldr	r3, [pc, #28]	; (800295c <HAL_RTC_AlarmIRQHandler+0x58>)
 800293e:	68ca      	ldr	r2, [r1, #12]
 8002940:	b2d2      	uxtb	r2, r2
 8002942:	4313      	orrs	r3, r2
 8002944:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002946:	2280      	movs	r2, #128	; 0x80
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <HAL_RTC_AlarmIRQHandler+0x5c>)
 800294a:	0292      	lsls	r2, r2, #10
 800294c:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800294e:	2301      	movs	r3, #1
 8002950:	3402      	adds	r4, #2
 8002952:	77e3      	strb	r3, [r4, #31]
}
 8002954:	bd10      	pop	{r4, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	fffffe7f 	.word	0xfffffe7f
 800295c:	fffffd7f 	.word	0xfffffd7f
 8002960:	40010400 	.word	0x40010400

08002964 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002964:	21a0      	movs	r1, #160	; 0xa0
 8002966:	6802      	ldr	r2, [r0, #0]
{
 8002968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800296a:	68d3      	ldr	r3, [r2, #12]
{
 800296c:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800296e:	438b      	bics	r3, r1
 8002970:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8002972:	f7fe fa85 	bl	8000e80 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002976:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8002978:	0006      	movs	r6, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800297a:	2520      	movs	r5, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800297c:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800297e:	6823      	ldr	r3, [r4, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	422b      	tst	r3, r5
 8002984:	d001      	beq.n	800298a <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8002986:	2000      	movs	r0, #0
}
 8002988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800298a:	f7fe fa79 	bl	8000e80 <HAL_GetTick>
 800298e:	1b80      	subs	r0, r0, r6
 8002990:	42b8      	cmp	r0, r7
 8002992:	d9f4      	bls.n	800297e <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8002994:	2003      	movs	r0, #3
 8002996:	e7f7      	b.n	8002988 <HAL_RTC_WaitForSynchro+0x24>

08002998 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800299a:	2440      	movs	r4, #64	; 0x40
 800299c:	6803      	ldr	r3, [r0, #0]
{
 800299e:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	4222      	tst	r2, r4
 80029a4:	d001      	beq.n	80029aa <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80029a6:	2000      	movs	r0, #0
}
 80029a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80029aa:	2201      	movs	r2, #1
 80029ac:	4252      	negs	r2, r2
 80029ae:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 80029b0:	f7fe fa66 	bl	8000e80 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80029b4:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 80029b6:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80029b8:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80029ba:	682b      	ldr	r3, [r5, #0]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	4223      	tst	r3, r4
 80029c0:	d1f1      	bne.n	80029a6 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80029c2:	f7fe fa5d 	bl	8000e80 <HAL_GetTick>
 80029c6:	1b80      	subs	r0, r0, r6
 80029c8:	42b8      	cmp	r0, r7
 80029ca:	d9f6      	bls.n	80029ba <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 80029cc:	2003      	movs	r0, #3
 80029ce:	e7eb      	b.n	80029a8 <RTC_EnterInitMode+0x10>

080029d0 <HAL_RTC_Init>:
{
 80029d0:	b570      	push	{r4, r5, r6, lr}
 80029d2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80029d4:	2501      	movs	r5, #1
  if (hrtc == NULL)
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d01a      	beq.n	8002a10 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80029da:	1c86      	adds	r6, r0, #2
 80029dc:	7ff3      	ldrb	r3, [r6, #31]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d103      	bne.n	80029ec <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 80029e4:	1942      	adds	r2, r0, r5
 80029e6:	77d3      	strb	r3, [r2, #31]
    HAL_RTC_MspInit(hrtc);
 80029e8:	f7fd ffd0 	bl	800098c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029ec:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029ee:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 80029f0:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029f2:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029f4:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24
 80029f8:	3a77      	subs	r2, #119	; 0x77
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029fc:	f7ff ffcc 	bl	8002998 <RTC_EnterInitMode>
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	1e05      	subs	r5, r0, #0
 8002a04:	d006      	beq.n	8002a14 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a06:	22ff      	movs	r2, #255	; 0xff
 8002a08:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8002a0e:	2501      	movs	r5, #1
}
 8002a10:	0028      	movs	r0, r5
 8002a12:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	491b      	ldr	r1, [pc, #108]	; (8002a84 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a18:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002a1a:	400a      	ands	r2, r1
 8002a1c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002a1e:	6862      	ldr	r2, [r4, #4]
 8002a20:	6899      	ldr	r1, [r3, #8]
 8002a22:	4302      	orrs	r2, r0
 8002a24:	69a0      	ldr	r0, [r4, #24]
 8002a26:	4302      	orrs	r2, r0
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a2c:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002a2e:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002a30:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002a32:	68a2      	ldr	r2, [r4, #8]
 8002a34:	6919      	ldr	r1, [r3, #16]
 8002a36:	0412      	lsls	r2, r2, #16
 8002a38:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002a3a:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002a3c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	438a      	bics	r2, r1
 8002a42:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002a44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a46:	397d      	subs	r1, #125	; 0x7d
 8002a48:	438a      	bics	r2, r1
 8002a4a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002a4c:	69e2      	ldr	r2, [r4, #28]
 8002a4e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002a50:	4302      	orrs	r2, r0
 8002a52:	430a      	orrs	r2, r1
 8002a54:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	069b      	lsls	r3, r3, #26
 8002a5a:	d40c      	bmi.n	8002a76 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002a5c:	0020      	movs	r0, r4
 8002a5e:	f7ff ff81 	bl	8002964 <HAL_RTC_WaitForSynchro>
 8002a62:	2800      	cmp	r0, #0
 8002a64:	d007      	beq.n	8002a76 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a66:	22ff      	movs	r2, #255	; 0xff
 8002a68:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8002a6a:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a6c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a6e:	2304      	movs	r3, #4
 8002a70:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8002a72:	77e5      	strb	r5, [r4, #31]
 8002a74:	e7cb      	b.n	8002a0e <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a76:	22ff      	movs	r2, #255	; 0xff
 8002a78:	6823      	ldr	r3, [r4, #0]
 8002a7a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8002a80:	e7c6      	b.n	8002a10 <HAL_RTC_Init+0x40>
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	ff8fffbf 	.word	0xff8fffbf

08002a88 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8002a88:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8002a8a:	2809      	cmp	r0, #9
 8002a8c:	d803      	bhi.n	8002a96 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	4318      	orrs	r0, r3
 8002a92:	b2c0      	uxtb	r0, r0
}
 8002a94:	4770      	bx	lr
    Param -= 10U;
 8002a96:	380a      	subs	r0, #10
    bcdhigh++;
 8002a98:	3301      	adds	r3, #1
    Param -= 10U;
 8002a9a:	b2c0      	uxtb	r0, r0
 8002a9c:	e7f5      	b.n	8002a8a <RTC_ByteToBcd2+0x2>
	...

08002aa0 <HAL_RTC_SetTime>:
{
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002aa4:	1c47      	adds	r7, r0, #1
{
 8002aa6:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8002aa8:	7ff9      	ldrb	r1, [r7, #31]
{
 8002aaa:	b085      	sub	sp, #20
 8002aac:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8002aae:	001e      	movs	r6, r3
 8002ab0:	2901      	cmp	r1, #1
 8002ab2:	d037      	beq.n	8002b24 <HAL_RTC_SetTime+0x84>
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ab8:	18c1      	adds	r1, r0, r3
 8002aba:	77cb      	strb	r3, [r1, #31]
 8002abc:	9101      	str	r1, [sp, #4]
 8002abe:	2140      	movs	r1, #64	; 0x40
 8002ac0:	6806      	ldr	r6, [r0, #0]
 8002ac2:	7863      	ldrb	r3, [r4, #1]
 8002ac4:	7820      	ldrb	r0, [r4, #0]
 8002ac6:	9302      	str	r3, [sp, #8]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ac8:	68b3      	ldr	r3, [r6, #8]
 8002aca:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8002acc:	2a00      	cmp	r2, #0
 8002ace:	d12c      	bne.n	8002b2a <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d100      	bne.n	8002ad6 <HAL_RTC_SetTime+0x36>
      sTime->TimeFormat = 0x00U;
 8002ad4:	70e3      	strb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ad6:	f7ff ffd7 	bl	8002a88 <RTC_ByteToBcd2>
 8002ada:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002adc:	9802      	ldr	r0, [sp, #8]
 8002ade:	f7ff ffd3 	bl	8002a88 <RTC_ByteToBcd2>
 8002ae2:	9002      	str	r0, [sp, #8]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002ae4:	78a0      	ldrb	r0, [r4, #2]
 8002ae6:	f7ff ffcf 	bl	8002a88 <RTC_ByteToBcd2>
 8002aea:	0003      	movs	r3, r0
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002aec:	78e0      	ldrb	r0, [r4, #3]
 8002aee:	0400      	lsls	r0, r0, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002af0:	4318      	orrs	r0, r3
 8002af2:	9b03      	ldr	r3, [sp, #12]
 8002af4:	041b      	lsls	r3, r3, #16
 8002af6:	4318      	orrs	r0, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002af8:	9b02      	ldr	r3, [sp, #8]
 8002afa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002afc:	4318      	orrs	r0, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002afe:	23ca      	movs	r3, #202	; 0xca
 8002b00:	6273      	str	r3, [r6, #36]	; 0x24
 8002b02:	3b77      	subs	r3, #119	; 0x77
 8002b04:	6273      	str	r3, [r6, #36]	; 0x24
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b06:	9002      	str	r0, [sp, #8]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002b08:	0028      	movs	r0, r5
 8002b0a:	f7ff ff45 	bl	8002998 <RTC_EnterInitMode>
 8002b0e:	682b      	ldr	r3, [r5, #0]
 8002b10:	1e06      	subs	r6, r0, #0
 8002b12:	d016      	beq.n	8002b42 <HAL_RTC_SetTime+0xa2>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b14:	22ff      	movs	r2, #255	; 0xff
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b18:	2304      	movs	r3, #4
 8002b1a:	9a01      	ldr	r2, [sp, #4]
 8002b1c:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8002b1e:	2300      	movs	r3, #0
 8002b20:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8002b22:	2601      	movs	r6, #1
}
 8002b24:	0030      	movs	r0, r6
 8002b26:	b005      	add	sp, #20
 8002b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d100      	bne.n	8002b30 <HAL_RTC_SetTime+0x90>
      sTime->TimeFormat = 0x00U;
 8002b2e:	70e3      	strb	r3, [r4, #3]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b30:	9b02      	ldr	r3, [sp, #8]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b32:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b34:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002b36:	4318      	orrs	r0, r3
              ((uint32_t)sTime->Seconds) | \
 8002b38:	78a3      	ldrb	r3, [r4, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002b3a:	4318      	orrs	r0, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002b3c:	78e3      	ldrb	r3, [r4, #3]
 8002b3e:	041b      	lsls	r3, r3, #16
 8002b40:	e7dc      	b.n	8002afc <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b42:	4815      	ldr	r0, [pc, #84]	; (8002b98 <HAL_RTC_SetTime+0xf8>)
 8002b44:	9a02      	ldr	r2, [sp, #8]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002b46:	4915      	ldr	r1, [pc, #84]	; (8002b9c <HAL_RTC_SetTime+0xfc>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b48:	4002      	ands	r2, r0
 8002b4a:	601a      	str	r2, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002b4c:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b4e:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002b50:	400a      	ands	r2, r1
 8002b52:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b54:	68e2      	ldr	r2, [r4, #12]
 8002b56:	6899      	ldr	r1, [r3, #8]
 8002b58:	4302      	orrs	r2, r0
 8002b5a:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002b5c:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b5e:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002b60:	68da      	ldr	r2, [r3, #12]
 8002b62:	438a      	bics	r2, r1
 8002b64:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	069b      	lsls	r3, r3, #26
 8002b6a:	d40c      	bmi.n	8002b86 <HAL_RTC_SetTime+0xe6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002b6c:	0028      	movs	r0, r5
 8002b6e:	f7ff fef9 	bl	8002964 <HAL_RTC_WaitForSynchro>
 8002b72:	2800      	cmp	r0, #0
 8002b74:	d007      	beq.n	8002b86 <HAL_RTC_SetTime+0xe6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b76:	22ff      	movs	r2, #255	; 0xff
 8002b78:	682b      	ldr	r3, [r5, #0]
 8002b7a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	9a01      	ldr	r2, [sp, #4]
 8002b80:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8002b82:	77fe      	strb	r6, [r7, #31]
 8002b84:	e7cd      	b.n	8002b22 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b86:	22ff      	movs	r2, #255	; 0xff
 8002b88:	682b      	ldr	r3, [r5, #0]
 8002b8a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	9a01      	ldr	r2, [sp, #4]
 8002b90:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8002b92:	2300      	movs	r3, #0
 8002b94:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8002b96:	e7c5      	b.n	8002b24 <HAL_RTC_SetTime+0x84>
 8002b98:	007f7f7f 	.word	0x007f7f7f
 8002b9c:	fffbffff 	.word	0xfffbffff

08002ba0 <HAL_RTC_SetDate>:
{
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8002ba4:	1c47      	adds	r7, r0, #1
{
 8002ba6:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8002ba8:	7ff9      	ldrb	r1, [r7, #31]
{
 8002baa:	b085      	sub	sp, #20
 8002bac:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8002bae:	001d      	movs	r5, r3
 8002bb0:	2901      	cmp	r1, #1
 8002bb2:	d036      	beq.n	8002c22 <HAL_RTC_SetDate+0x82>
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bb8:	18c1      	adds	r1, r0, r3
 8002bba:	9101      	str	r1, [sp, #4]
 8002bbc:	77cb      	strb	r3, [r1, #31]
 8002bbe:	7831      	ldrb	r1, [r6, #0]
 8002bc0:	78f0      	ldrb	r0, [r6, #3]
 8002bc2:	0349      	lsls	r1, r1, #13
 8002bc4:	7873      	ldrb	r3, [r6, #1]
 8002bc6:	78b5      	ldrb	r5, [r6, #2]
 8002bc8:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002bca:	2a00      	cmp	r2, #0
 8002bcc:	d14c      	bne.n	8002c68 <HAL_RTC_SetDate+0xc8>
 8002bce:	3210      	adds	r2, #16
 8002bd0:	4213      	tst	r3, r2
 8002bd2:	d002      	beq.n	8002bda <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002bd4:	4393      	bics	r3, r2
 8002bd6:	330a      	adds	r3, #10
 8002bd8:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002bda:	f7ff ff55 	bl	8002a88 <RTC_ByteToBcd2>
 8002bde:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002be0:	7870      	ldrb	r0, [r6, #1]
 8002be2:	f7ff ff51 	bl	8002a88 <RTC_ByteToBcd2>
 8002be6:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002be8:	0028      	movs	r0, r5
 8002bea:	f7ff ff4d 	bl	8002a88 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002bee:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002bf0:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002bf2:	041d      	lsls	r5, r3, #16
 8002bf4:	9b02      	ldr	r3, [sp, #8]
 8002bf6:	4318      	orrs	r0, r3
 8002bf8:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bfa:	22ca      	movs	r2, #202	; 0xca
 8002bfc:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002bfe:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24
 8002c02:	3a77      	subs	r2, #119	; 0x77
 8002c04:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c06:	f7ff fec7 	bl	8002998 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c0a:	432e      	orrs	r6, r5
 8002c0c:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002c0e:	1e05      	subs	r5, r0, #0
 8002c10:	d00a      	beq.n	8002c28 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c12:	22ff      	movs	r2, #255	; 0xff
 8002c14:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002c16:	2304      	movs	r3, #4
 8002c18:	9a01      	ldr	r2, [sp, #4]
 8002c1a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8002c20:	2501      	movs	r5, #1
}
 8002c22:	0028      	movs	r0, r5
 8002c24:	b005      	add	sp, #20
 8002c26:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002c28:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002c2a:	4812      	ldr	r0, [pc, #72]	; (8002c74 <HAL_RTC_SetDate+0xd4>)
 8002c2c:	4006      	ands	r6, r0
 8002c2e:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	438a      	bics	r2, r1
 8002c34:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	069b      	lsls	r3, r3, #26
 8002c3a:	d40c      	bmi.n	8002c56 <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c3c:	0020      	movs	r0, r4
 8002c3e:	f7ff fe91 	bl	8002964 <HAL_RTC_WaitForSynchro>
 8002c42:	2800      	cmp	r0, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c46:	22ff      	movs	r2, #255	; 0xff
 8002c48:	6823      	ldr	r3, [r4, #0]
 8002c4a:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	9a01      	ldr	r2, [sp, #4]
 8002c50:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8002c52:	77fd      	strb	r5, [r7, #31]
 8002c54:	e7e4      	b.n	8002c20 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c56:	22ff      	movs	r2, #255	; 0xff
 8002c58:	6823      	ldr	r3, [r4, #0]
 8002c5a:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	9a01      	ldr	r2, [sp, #4]
 8002c60:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8002c62:	2300      	movs	r3, #0
 8002c64:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8002c66:	e7dc      	b.n	8002c22 <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002c68:	9a02      	ldr	r2, [sp, #8]
 8002c6a:	0400      	lsls	r0, r0, #16
 8002c6c:	4310      	orrs	r0, r2
 8002c6e:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8002c70:	021e      	lsls	r6, r3, #8
 8002c72:	e7c2      	b.n	8002bfa <HAL_RTC_SetDate+0x5a>
 8002c74:	00ffff3f 	.word	0x00ffff3f

08002c78 <HAL_RTC_SetAlarm_IT>:
{
 8002c78:	2302      	movs	r3, #2
 8002c7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002c7c:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8002c7e:	1c41      	adds	r1, r0, #1
 8002c80:	7fce      	ldrb	r6, [r1, #31]
{
 8002c82:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8002c84:	0018      	movs	r0, r3
 8002c86:	2e01      	cmp	r6, #1
 8002c88:	d100      	bne.n	8002c8c <HAL_RTC_SetAlarm_IT+0x14>
 8002c8a:	e08c      	b.n	8002da6 <HAL_RTC_SetAlarm_IT+0x12e>
 8002c8c:	3801      	subs	r0, #1
 8002c8e:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c90:	18e1      	adds	r1, r4, r3
 8002c92:	77cb      	strb	r3, [r1, #31]
 8002c94:	2140      	movs	r1, #64	; 0x40
 8002c96:	786b      	ldrb	r3, [r5, #1]
 8002c98:	6826      	ldr	r6, [r4, #0]
 8002c9a:	9300      	str	r3, [sp, #0]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002c9c:	68b3      	ldr	r3, [r6, #8]
 8002c9e:	7828      	ldrb	r0, [r5, #0]
 8002ca0:	78af      	ldrb	r7, [r5, #2]
 8002ca2:	400b      	ands	r3, r1
  if (Format == RTC_FORMAT_BIN)
 8002ca4:	2a00      	cmp	r2, #0
 8002ca6:	d15d      	bne.n	8002d64 <HAL_RTC_SetAlarm_IT+0xec>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d100      	bne.n	8002cae <HAL_RTC_SetAlarm_IT+0x36>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002cac:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002cae:	f7ff feeb 	bl	8002a88 <RTC_ByteToBcd2>
 8002cb2:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002cb4:	9800      	ldr	r0, [sp, #0]
 8002cb6:	f7ff fee7 	bl	8002a88 <RTC_ByteToBcd2>
 8002cba:	9000      	str	r0, [sp, #0]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002cbc:	0038      	movs	r0, r7
 8002cbe:	f7ff fee3 	bl	8002a88 <RTC_ByteToBcd2>
 8002cc2:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002cc4:	1c6b      	adds	r3, r5, #1
 8002cc6:	7fd8      	ldrb	r0, [r3, #31]
 8002cc8:	f7ff fede 	bl	8002a88 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ccc:	696a      	ldr	r2, [r5, #20]
 8002cce:	69eb      	ldr	r3, [r5, #28]
 8002cd0:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002cd2:	78ea      	ldrb	r2, [r5, #3]
 8002cd4:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	431f      	orrs	r7, r3
 8002cda:	9b01      	ldr	r3, [sp, #4]
 8002cdc:	041b      	lsls	r3, r3, #16
 8002cde:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002ce0:	9b00      	ldr	r3, [sp, #0]
 8002ce2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002ce4:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002ce6:	69aa      	ldr	r2, [r5, #24]
 8002ce8:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002cea:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002cec:	4313      	orrs	r3, r2
 8002cee:	9300      	str	r3, [sp, #0]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cf0:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002cf2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002cf4:	6273      	str	r3, [r6, #36]	; 0x24
 8002cf6:	3b77      	subs	r3, #119	; 0x77
 8002cf8:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002cfa:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002cfc:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d152      	bne.n	8002da8 <HAL_RTC_SetAlarm_IT+0x130>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002d02:	68b3      	ldr	r3, [r6, #8]
 8002d04:	4a3b      	ldr	r2, [pc, #236]	; (8002df4 <HAL_RTC_SetAlarm_IT+0x17c>)
 8002d06:	4013      	ands	r3, r2
 8002d08:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002d0a:	68f2      	ldr	r2, [r6, #12]
 8002d0c:	4b3a      	ldr	r3, [pc, #232]	; (8002df8 <HAL_RTC_SetAlarm_IT+0x180>)
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	4313      	orrs	r3, r2
 8002d12:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002d14:	f7fe f8b4 	bl	8000e80 <HAL_GetTick>
 8002d18:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	68dd      	ldr	r5, [r3, #12]
 8002d20:	4015      	ands	r5, r2
 8002d22:	d031      	beq.n	8002d88 <HAL_RTC_SetAlarm_IT+0x110>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002d24:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002d26:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002d28:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	6899      	ldr	r1, [r3, #8]
 8002d2e:	0052      	lsls	r2, r2, #1
 8002d30:	430a      	orrs	r2, r1
 8002d32:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002d34:	2280      	movs	r2, #128	; 0x80
 8002d36:	6899      	ldr	r1, [r3, #8]
 8002d38:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002d3e:	2280      	movs	r2, #128	; 0x80
 8002d40:	4b2e      	ldr	r3, [pc, #184]	; (8002dfc <HAL_RTC_SetAlarm_IT+0x184>)
 8002d42:	0292      	lsls	r2, r2, #10
 8002d44:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8002d46:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002d48:	4311      	orrs	r1, r2
 8002d4a:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002d4c:	6899      	ldr	r1, [r3, #8]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d52:	22ff      	movs	r2, #255	; 0xff
 8002d54:	6823      	ldr	r3, [r4, #0]
 8002d56:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8002d58:	3afe      	subs	r2, #254	; 0xfe
 8002d5a:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 8002d5c:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 8002d5e:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8002d60:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8002d62:	e020      	b.n	8002da6 <HAL_RTC_SetAlarm_IT+0x12e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d100      	bne.n	8002d6a <HAL_RTC_SetAlarm_IT+0xf2>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002d68:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002d6a:	69eb      	ldr	r3, [r5, #28]
 8002d6c:	696a      	ldr	r2, [r5, #20]
 8002d6e:	0400      	lsls	r0, r0, #16
 8002d70:	4313      	orrs	r3, r2
 8002d72:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002d74:	9b00      	ldr	r3, [sp, #0]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002d76:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002d78:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002d7a:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002d7c:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002d7e:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002d80:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002d82:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002d84:	7fd8      	ldrb	r0, [r3, #31]
 8002d86:	e7ae      	b.n	8002ce6 <HAL_RTC_SetAlarm_IT+0x6e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d88:	f7fe f87a 	bl	8000e80 <HAL_GetTick>
 8002d8c:	23fa      	movs	r3, #250	; 0xfa
 8002d8e:	1b80      	subs	r0, r0, r6
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4298      	cmp	r0, r3
 8002d94:	d9c1      	bls.n	8002d1a <HAL_RTC_SetAlarm_IT+0xa2>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d96:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d98:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d9a:	6823      	ldr	r3, [r4, #0]
 8002d9c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d9e:	1ca3      	adds	r3, r4, #2
        __HAL_UNLOCK(hrtc);
 8002da0:	3401      	adds	r4, #1
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002da2:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 8002da4:	77e5      	strb	r5, [r4, #31]
}
 8002da6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002da8:	68b3      	ldr	r3, [r6, #8]
 8002daa:	4a15      	ldr	r2, [pc, #84]	; (8002e00 <HAL_RTC_SetAlarm_IT+0x188>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002db0:	68f2      	ldr	r2, [r6, #12]
 8002db2:	4b14      	ldr	r3, [pc, #80]	; (8002e04 <HAL_RTC_SetAlarm_IT+0x18c>)
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	4313      	orrs	r3, r2
 8002db8:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002dba:	f7fe f861 	bl	8000e80 <HAL_GetTick>
 8002dbe:	0006      	movs	r6, r0
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	68dd      	ldr	r5, [r3, #12]
 8002dc6:	4015      	ands	r5, r2
 8002dc8:	d00b      	beq.n	8002de2 <HAL_RTC_SetAlarm_IT+0x16a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002dca:	9a00      	ldr	r2, [sp, #0]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002dcc:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8002dce:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002dd0:	2280      	movs	r2, #128	; 0x80
 8002dd2:	6899      	ldr	r1, [r3, #8]
 8002dd4:	0092      	lsls	r2, r2, #2
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	6899      	ldr	r1, [r3, #8]
 8002dde:	0192      	lsls	r2, r2, #6
 8002de0:	e7ab      	b.n	8002d3a <HAL_RTC_SetAlarm_IT+0xc2>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002de2:	f7fe f84d 	bl	8000e80 <HAL_GetTick>
 8002de6:	23fa      	movs	r3, #250	; 0xfa
 8002de8:	1b80      	subs	r0, r0, r6
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4298      	cmp	r0, r3
 8002dee:	d9e7      	bls.n	8002dc0 <HAL_RTC_SetAlarm_IT+0x148>
 8002df0:	e7d1      	b.n	8002d96 <HAL_RTC_SetAlarm_IT+0x11e>
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	fffffeff 	.word	0xfffffeff
 8002df8:	fffffe7f 	.word	0xfffffe7f
 8002dfc:	40010400 	.word	0x40010400
 8002e00:	fffffdff 	.word	0xfffffdff
 8002e04:	fffffd7f 	.word	0xfffffd7f

08002e08 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002e08:	230a      	movs	r3, #10
 8002e0a:	0902      	lsrs	r2, r0, #4
 8002e0c:	4353      	muls	r3, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002e0e:	220f      	movs	r2, #15
 8002e10:	4010      	ands	r0, r2
 8002e12:	1818      	adds	r0, r3, r0
 8002e14:	b2c0      	uxtb	r0, r0
}
 8002e16:	4770      	bx	lr

08002e18 <HAL_RTC_GetTime>:
{
 8002e18:	b570      	push	{r4, r5, r6, lr}
 8002e1a:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002e1c:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002e1e:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002e20:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002e22:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002e24:	690b      	ldr	r3, [r1, #16]
 8002e26:	045b      	lsls	r3, r3, #17
 8002e28:	0c5b      	lsrs	r3, r3, #17
 8002e2a:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002e2c:	680b      	ldr	r3, [r1, #0]
 8002e2e:	490e      	ldr	r1, [pc, #56]	; (8002e68 <HAL_RTC_GetTime+0x50>)
 8002e30:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002e32:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002e34:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002e36:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002e38:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002e3a:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002e3c:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002e3e:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002e40:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002e42:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002e44:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8002e46:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8002e48:	2a00      	cmp	r2, #0
 8002e4a:	d10a      	bne.n	8002e62 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002e4c:	f7ff ffdc 	bl	8002e08 <RTC_Bcd2ToByte>
 8002e50:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002e52:	0030      	movs	r0, r6
 8002e54:	f7ff ffd8 	bl	8002e08 <RTC_Bcd2ToByte>
 8002e58:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002e5a:	0028      	movs	r0, r5
 8002e5c:	f7ff ffd4 	bl	8002e08 <RTC_Bcd2ToByte>
 8002e60:	70a0      	strb	r0, [r4, #2]
}
 8002e62:	2000      	movs	r0, #0
 8002e64:	bd70      	pop	{r4, r5, r6, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	007f7f7f 	.word	0x007f7f7f

08002e6c <HAL_RTC_GetDate>:
{
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002e70:	6803      	ldr	r3, [r0, #0]
 8002e72:	490e      	ldr	r1, [pc, #56]	; (8002eac <HAL_RTC_GetDate+0x40>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002e78:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002e7a:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002e7c:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002e7e:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002e80:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002e82:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002e84:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002e86:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002e88:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002e8a:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8002e8c:	2a00      	cmp	r2, #0
 8002e8e:	d10a      	bne.n	8002ea6 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002e90:	f7ff ffba 	bl	8002e08 <RTC_Bcd2ToByte>
 8002e94:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002e96:	0028      	movs	r0, r5
 8002e98:	f7ff ffb6 	bl	8002e08 <RTC_Bcd2ToByte>
 8002e9c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002e9e:	0030      	movs	r0, r6
 8002ea0:	f7ff ffb2 	bl	8002e08 <RTC_Bcd2ToByte>
 8002ea4:	70a0      	strb	r0, [r4, #2]
}
 8002ea6:	2000      	movs	r0, #0
 8002ea8:	bd70      	pop	{r4, r5, r6, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	00ffff3f 	.word	0x00ffff3f

08002eb0 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002eb0:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8002eb2:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002eb4:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8002eb6:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8002eb8:	600a      	str	r2, [r1, #0]
}
 8002eba:	4770      	bx	lr

08002ebc <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002ebc:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8002ebe:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8002ec0:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8002ec2:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8002ec4:	6808      	ldr	r0, [r1, #0]
}
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8002ec8:	2202      	movs	r2, #2
 8002eca:	b510      	push	{r4, lr}
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002ecc:	1c41      	adds	r1, r0, #1
 8002ece:	7fcc      	ldrb	r4, [r1, #31]
{
 8002ed0:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8002ed2:	0010      	movs	r0, r2
 8002ed4:	2c01      	cmp	r4, #1
 8002ed6:	d010      	beq.n	8002efa <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ed8:	1898      	adds	r0, r3, r2

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002eda:	681b      	ldr	r3, [r3, #0]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002edc:	77c2      	strb	r2, [r0, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ede:	32c8      	adds	r2, #200	; 0xc8
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24
 8002ee2:	3a77      	subs	r2, #119	; 0x77
 8002ee4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8002ee6:	689c      	ldr	r4, [r3, #8]
 8002ee8:	3a33      	subs	r2, #51	; 0x33
 8002eea:	4322      	orrs	r2, r4
 8002eec:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002eee:	22ff      	movs	r2, #255	; 0xff
 8002ef0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 8002efa:	bd10      	pop	{r4, pc}

08002efc <HAL_RTCEx_AlarmBEventCallback>:
 8002efc:	4770      	bx	lr

08002efe <HAL_SPI_MspInit>:
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8002efe:	4770      	bx	lr

08002f00 <HAL_SPI_Init>:
{
 8002f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f02:	0004      	movs	r4, r0
    return HAL_ERROR;
 8002f04:	2001      	movs	r0, #1
  if (hspi == NULL)
 8002f06:	2c00      	cmp	r4, #0
 8002f08:	d054      	beq.n	8002fb4 <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d152      	bne.n	8002fb6 <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f10:	2282      	movs	r2, #130	; 0x82
 8002f12:	6861      	ldr	r1, [r4, #4]
 8002f14:	0052      	lsls	r2, r2, #1
 8002f16:	4291      	cmp	r1, r2
 8002f18:	d000      	beq.n	8002f1c <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f1a:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f1c:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f1e:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f20:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f22:	3551      	adds	r5, #81	; 0x51
 8002f24:	782b      	ldrb	r3, [r5, #0]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d105      	bne.n	8002f38 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8002f2c:	0022      	movs	r2, r4
 8002f2e:	3250      	adds	r2, #80	; 0x50
 8002f30:	7013      	strb	r3, [r2, #0]
    HAL_SPI_MspInit(hspi);
 8002f32:	0020      	movs	r0, r4
 8002f34:	f7ff ffe3 	bl	8002efe <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002f38:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 8002f3a:	2240      	movs	r2, #64	; 0x40
 8002f3c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002f3e:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8002f40:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f42:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 8002f44:	4393      	bics	r3, r2
 8002f46:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f48:	2382      	movs	r3, #130	; 0x82
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4033      	ands	r3, r6
 8002f4e:	2684      	movs	r6, #132	; 0x84
 8002f50:	68a7      	ldr	r7, [r4, #8]
 8002f52:	0236      	lsls	r6, r6, #8
 8002f54:	403e      	ands	r6, r7
 8002f56:	4333      	orrs	r3, r6
 8002f58:	2680      	movs	r6, #128	; 0x80
 8002f5a:	68e7      	ldr	r7, [r4, #12]
 8002f5c:	0136      	lsls	r6, r6, #4
 8002f5e:	403e      	ands	r6, r7
 8002f60:	4333      	orrs	r3, r6
 8002f62:	6926      	ldr	r6, [r4, #16]
 8002f64:	69a2      	ldr	r2, [r4, #24]
 8002f66:	4030      	ands	r0, r6
 8002f68:	2601      	movs	r6, #1
 8002f6a:	4303      	orrs	r3, r0
 8002f6c:	6960      	ldr	r0, [r4, #20]
 8002f6e:	69e7      	ldr	r7, [r4, #28]
 8002f70:	4030      	ands	r0, r6
 8002f72:	4303      	orrs	r3, r0
 8002f74:	2080      	movs	r0, #128	; 0x80
 8002f76:	0080      	lsls	r0, r0, #2
 8002f78:	4010      	ands	r0, r2
 8002f7a:	4303      	orrs	r3, r0
 8002f7c:	2038      	movs	r0, #56	; 0x38
 8002f7e:	4038      	ands	r0, r7
 8002f80:	4303      	orrs	r3, r0
 8002f82:	2080      	movs	r0, #128	; 0x80
 8002f84:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f86:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f88:	4038      	ands	r0, r7
 8002f8a:	4303      	orrs	r3, r0
 8002f8c:	2080      	movs	r0, #128	; 0x80
 8002f8e:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8002f90:	0180      	lsls	r0, r0, #6
 8002f92:	4038      	ands	r0, r7
 8002f94:	4303      	orrs	r3, r0
 8002f96:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f98:	2304      	movs	r3, #4
 8002f9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002f9c:	401a      	ands	r2, r3
 8002f9e:	330c      	adds	r3, #12
 8002fa0:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fa2:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002fa8:	69cb      	ldr	r3, [r1, #28]
 8002faa:	4a05      	ldr	r2, [pc, #20]	; (8002fc0 <HAL_SPI_Init+0xc0>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fb0:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fb2:	702e      	strb	r6, [r5, #0]
}
 8002fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002fba:	6163      	str	r3, [r4, #20]
 8002fbc:	e7ae      	b.n	8002f1c <HAL_SPI_Init+0x1c>
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	fffff7ff 	.word	0xfffff7ff

08002fc4 <HAL_SPI_GetState>:
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  /* Return SPI handle state */
  return hspi->State;
 8002fc4:	3051      	adds	r0, #81	; 0x51
 8002fc6:	7800      	ldrb	r0, [r0, #0]
 8002fc8:	b2c0      	uxtb	r0, r0
}
 8002fca:	4770      	bx	lr

08002fcc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fcc:	6803      	ldr	r3, [r0, #0]
 8002fce:	490b      	ldr	r1, [pc, #44]	; (8002ffc <UART_EndRxTransfer+0x30>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	400a      	ands	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd6:	689a      	ldr	r2, [r3, #8]
 8002fd8:	3123      	adds	r1, #35	; 0x23
 8002fda:	31ff      	adds	r1, #255	; 0xff
 8002fdc:	438a      	bics	r2, r1
 8002fde:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fe0:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8002fe2:	428a      	cmp	r2, r1
 8002fe4:	d103      	bne.n	8002fee <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	310f      	adds	r1, #15
 8002fea:	438a      	bics	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fee:	2320      	movs	r3, #32
 8002ff0:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ff6:	6643      	str	r3, [r0, #100]	; 0x64
}
 8002ff8:	4770      	bx	lr
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	fffffedf 	.word	0xfffffedf

08003000 <HAL_UART_Transmit_DMA>:
{
 8003000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003002:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003004:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8003006:	0004      	movs	r4, r0
    return HAL_BUSY;
 8003008:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 800300a:	2a20      	cmp	r2, #32
 800300c:	d138      	bne.n	8003080 <HAL_UART_Transmit_DMA+0x80>
      return HAL_ERROR;
 800300e:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003010:	2900      	cmp	r1, #0
 8003012:	d035      	beq.n	8003080 <HAL_UART_Transmit_DMA+0x80>
 8003014:	2b00      	cmp	r3, #0
 8003016:	d033      	beq.n	8003080 <HAL_UART_Transmit_DMA+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	2280      	movs	r2, #128	; 0x80
 800301a:	68a5      	ldr	r5, [r4, #8]
 800301c:	0152      	lsls	r2, r2, #5
 800301e:	4295      	cmp	r5, r2
 8003020:	d104      	bne.n	800302c <HAL_UART_Transmit_DMA+0x2c>
 8003022:	6922      	ldr	r2, [r4, #16]
 8003024:	2a00      	cmp	r2, #0
 8003026:	d101      	bne.n	800302c <HAL_UART_Transmit_DMA+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003028:	4201      	tst	r1, r0
 800302a:	d129      	bne.n	8003080 <HAL_UART_Transmit_DMA+0x80>
    __HAL_LOCK(huart);
 800302c:	0025      	movs	r5, r4
 800302e:	3574      	adds	r5, #116	; 0x74
 8003030:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 8003032:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8003034:	2a01      	cmp	r2, #1
 8003036:	d023      	beq.n	8003080 <HAL_UART_Transmit_DMA+0x80>
 8003038:	2201      	movs	r2, #1
 800303a:	702a      	strb	r2, [r5, #0]
    huart->TxXferSize  = Size;
 800303c:	0022      	movs	r2, r4
 800303e:	3250      	adds	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 8003040:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003042:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 8003044:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 8003046:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003048:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 800304a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304c:	1d27      	adds	r7, r4, #4
 800304e:	67fe      	str	r6, [r7, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003050:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8003052:	42b0      	cmp	r0, r6
 8003054:	d015      	beq.n	8003082 <HAL_UART_Transmit_DMA+0x82>
 8003056:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 8003058:	6386      	str	r6, [r0, #56]	; 0x38
 800305a:	9201      	str	r2, [sp, #4]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800305c:	4a0e      	ldr	r2, [pc, #56]	; (8003098 <HAL_UART_Transmit_DMA+0x98>)
 800305e:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8003060:	4a0e      	ldr	r2, [pc, #56]	; (800309c <HAL_UART_Transmit_DMA+0x9c>)
 8003062:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003064:	4a0e      	ldr	r2, [pc, #56]	; (80030a0 <HAL_UART_Transmit_DMA+0xa0>)
 8003066:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8003068:	9a01      	ldr	r2, [sp, #4]
 800306a:	3228      	adds	r2, #40	; 0x28
 800306c:	f7fe fbba 	bl	80017e4 <HAL_DMA_Start_IT>
 8003070:	42b0      	cmp	r0, r6
 8003072:	d006      	beq.n	8003082 <HAL_UART_Transmit_DMA+0x82>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003074:	2310      	movs	r3, #16
        return HAL_ERROR;
 8003076:	2001      	movs	r0, #1
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003078:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800307a:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 800307c:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 800307e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8003080:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003082:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8003084:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003086:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8003088:	3474      	adds	r4, #116	; 0x74
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800308a:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800308c:	6899      	ldr	r1, [r3, #8]
 800308e:	1892      	adds	r2, r2, r2
 8003090:	430a      	orrs	r2, r1
    __HAL_UNLOCK(huart);
 8003092:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003094:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8003096:	e7f3      	b.n	8003080 <HAL_UART_Transmit_DMA+0x80>
 8003098:	080030a5 	.word	0x080030a5
 800309c:	080030d7 	.word	0x080030d7
 80030a0:	080030e3 	.word	0x080030e3

080030a4 <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80030a4:	2120      	movs	r1, #32
 80030a6:	6803      	ldr	r3, [r0, #0]
{
 80030a8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80030aa:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80030ac:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80030ae:	400b      	ands	r3, r1
 80030b0:	d10c      	bne.n	80030cc <UART_DMATransmitCplt+0x28>
  {
    huart->TxXferCount = 0U;
 80030b2:	0011      	movs	r1, r2
 80030b4:	3152      	adds	r1, #82	; 0x52
 80030b6:	800b      	strh	r3, [r1, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80030b8:	2180      	movs	r1, #128	; 0x80
 80030ba:	6813      	ldr	r3, [r2, #0]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	438a      	bics	r2, r1
 80030c0:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80030c2:	2240      	movs	r2, #64	; 0x40
 80030c4:	6819      	ldr	r1, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80030ca:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80030cc:	0010      	movs	r0, r2
 80030ce:	f7fe f8f9 	bl	80012c4 <HAL_UART_TxCpltCallback>
}
 80030d2:	e7fa      	b.n	80030ca <UART_DMATransmitCplt+0x26>

080030d4 <HAL_UART_TxHalfCpltCallback>:
 80030d4:	4770      	bx	lr

080030d6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80030d6:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80030d8:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80030da:	f7ff fffb 	bl	80030d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030de:	bd10      	pop	{r4, pc}

080030e0 <HAL_UART_ErrorCallback>:
 80030e0:	4770      	bx	lr

080030e2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80030e2:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80030e4:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80030e6:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80030e8:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80030ea:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80030ec:	6898      	ldr	r0, [r3, #8]
 80030ee:	0600      	lsls	r0, r0, #24
 80030f0:	d50b      	bpl.n	800310a <UART_DMAError+0x28>
 80030f2:	2a21      	cmp	r2, #33	; 0x21
 80030f4:	d109      	bne.n	800310a <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80030f6:	0022      	movs	r2, r4
 80030f8:	2000      	movs	r0, #0
 80030fa:	3252      	adds	r2, #82	; 0x52
 80030fc:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	30c0      	adds	r0, #192	; 0xc0
 8003102:	4382      	bics	r2, r0
 8003104:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003106:	2220      	movs	r2, #32
 8003108:	67a2      	str	r2, [r4, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	065b      	lsls	r3, r3, #25
 800310e:	d508      	bpl.n	8003122 <UART_DMAError+0x40>
 8003110:	2922      	cmp	r1, #34	; 0x22
 8003112:	d106      	bne.n	8003122 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003114:	0023      	movs	r3, r4
 8003116:	2200      	movs	r2, #0
 8003118:	335a      	adds	r3, #90	; 0x5a
 800311a:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 800311c:	0020      	movs	r0, r4
 800311e:	f7ff ff55 	bl	8002fcc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003122:	2310      	movs	r3, #16
 8003124:	1d22      	adds	r2, r4, #4
 8003126:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003128:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800312a:	430b      	orrs	r3, r1
 800312c:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800312e:	f7ff ffd7 	bl	80030e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003132:	bd10      	pop	{r4, pc}

08003134 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003134:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	0002      	movs	r2, r0
{
 800313a:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 800313c:	325a      	adds	r2, #90	; 0x5a
 800313e:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8003140:	3a08      	subs	r2, #8
 8003142:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003144:	f7ff ffcc 	bl	80030e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003148:	bd10      	pop	{r4, pc}

0800314a <HAL_UARTEx_RxEventCallback>:
}
 800314a:	4770      	bx	lr

0800314c <HAL_UART_IRQHandler>:
{
 800314c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800314e:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003150:	4a82      	ldr	r2, [pc, #520]	; (800335c <HAL_UART_IRQHandler+0x210>)
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003152:	69d9      	ldr	r1, [r3, #28]
{
 8003154:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003156:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003158:	689f      	ldr	r7, [r3, #8]
  if (errorflags == 0U)
 800315a:	4211      	tst	r1, r2
 800315c:	d10b      	bne.n	8003176 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800315e:	2220      	movs	r2, #32
 8003160:	4211      	tst	r1, r2
 8003162:	d100      	bne.n	8003166 <HAL_UART_IRQHandler+0x1a>
 8003164:	e076      	b.n	8003254 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003166:	4210      	tst	r0, r2
 8003168:	d100      	bne.n	800316c <HAL_UART_IRQHandler+0x20>
 800316a:	e073      	b.n	8003254 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 800316c:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 800316e:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8003170:	2b00      	cmp	r3, #0
 8003172:	d165      	bne.n	8003240 <HAL_UART_IRQHandler+0xf4>
 8003174:	e065      	b.n	8003242 <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003176:	2201      	movs	r2, #1
 8003178:	003e      	movs	r6, r7
 800317a:	4016      	ands	r6, r2
 800317c:	d102      	bne.n	8003184 <HAL_UART_IRQHandler+0x38>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800317e:	4d78      	ldr	r5, [pc, #480]	; (8003360 <HAL_UART_IRQHandler+0x214>)
 8003180:	4228      	tst	r0, r5
 8003182:	d067      	beq.n	8003254 <HAL_UART_IRQHandler+0x108>
 8003184:	1d25      	adds	r5, r4, #4
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003186:	4211      	tst	r1, r2
 8003188:	d005      	beq.n	8003196 <HAL_UART_IRQHandler+0x4a>
 800318a:	05c7      	lsls	r7, r0, #23
 800318c:	d503      	bpl.n	8003196 <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800318e:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003190:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 8003192:	433a      	orrs	r2, r7
 8003194:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003196:	2202      	movs	r2, #2
 8003198:	4211      	tst	r1, r2
 800319a:	d006      	beq.n	80031aa <HAL_UART_IRQHandler+0x5e>
 800319c:	2e00      	cmp	r6, #0
 800319e:	d004      	beq.n	80031aa <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031a0:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031a2:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 80031a4:	1892      	adds	r2, r2, r2
 80031a6:	433a      	orrs	r2, r7
 80031a8:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031aa:	2204      	movs	r2, #4
 80031ac:	4211      	tst	r1, r2
 80031ae:	d006      	beq.n	80031be <HAL_UART_IRQHandler+0x72>
 80031b0:	2e00      	cmp	r6, #0
 80031b2:	d004      	beq.n	80031be <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031b4:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031b6:	6fef      	ldr	r7, [r5, #124]	; 0x7c
 80031b8:	3a02      	subs	r2, #2
 80031ba:	433a      	orrs	r2, r7
 80031bc:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031be:	070a      	lsls	r2, r1, #28
 80031c0:	d508      	bpl.n	80031d4 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031c2:	0682      	lsls	r2, r0, #26
 80031c4:	d401      	bmi.n	80031ca <HAL_UART_IRQHandler+0x7e>
 80031c6:	2e00      	cmp	r6, #0
 80031c8:	d004      	beq.n	80031d4 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031ca:	2208      	movs	r2, #8
 80031cc:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031ce:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80031d0:	4332      	orrs	r2, r6
 80031d2:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031d4:	2280      	movs	r2, #128	; 0x80
 80031d6:	0112      	lsls	r2, r2, #4
 80031d8:	4211      	tst	r1, r2
 80031da:	d006      	beq.n	80031ea <HAL_UART_IRQHandler+0x9e>
 80031dc:	0146      	lsls	r6, r0, #5
 80031de:	d504      	bpl.n	80031ea <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031e0:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031e2:	2320      	movs	r3, #32
 80031e4:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80031e6:	4313      	orrs	r3, r2
 80031e8:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ea:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d028      	beq.n	8003242 <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031f0:	2320      	movs	r3, #32
 80031f2:	4219      	tst	r1, r3
 80031f4:	d006      	beq.n	8003204 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031f6:	4218      	tst	r0, r3
 80031f8:	d004      	beq.n	8003204 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 80031fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8003200:	0020      	movs	r0, r4
 8003202:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003204:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
 8003206:	6fee      	ldr	r6, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003208:	689b      	ldr	r3, [r3, #8]
        UART_EndRxTransfer(huart);
 800320a:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800320c:	065b      	lsls	r3, r3, #25
 800320e:	d402      	bmi.n	8003216 <HAL_UART_IRQHandler+0xca>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003210:	2328      	movs	r3, #40	; 0x28
 8003212:	401e      	ands	r6, r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003214:	d01a      	beq.n	800324c <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8003216:	f7ff fed9 	bl	8002fcc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800321a:	2140      	movs	r1, #64	; 0x40
 800321c:	6823      	ldr	r3, [r4, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	420a      	tst	r2, r1
 8003222:	d00f      	beq.n	8003244 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003224:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003226:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003228:	438a      	bics	r2, r1
 800322a:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800322c:	2800      	cmp	r0, #0
 800322e:	d009      	beq.n	8003244 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003230:	4b4c      	ldr	r3, [pc, #304]	; (8003364 <HAL_UART_IRQHandler+0x218>)
 8003232:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003234:	f7fe fb36 	bl	80018a4 <HAL_DMA_Abort_IT>
 8003238:	2800      	cmp	r0, #0
 800323a:	d002      	beq.n	8003242 <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800323c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800323e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003240:	4798      	blx	r3
}
 8003242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8003244:	0020      	movs	r0, r4
 8003246:	f7ff ff4b 	bl	80030e0 <HAL_UART_ErrorCallback>
 800324a:	e7fa      	b.n	8003242 <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 800324c:	f7ff ff48 	bl	80030e0 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003250:	67ee      	str	r6, [r5, #124]	; 0x7c
 8003252:	e7f6      	b.n	8003242 <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003254:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8003256:	2d01      	cmp	r5, #1
 8003258:	d15c      	bne.n	8003314 <HAL_UART_IRQHandler+0x1c8>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800325a:	2210      	movs	r2, #16
 800325c:	4211      	tst	r1, r2
 800325e:	d059      	beq.n	8003314 <HAL_UART_IRQHandler+0x1c8>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8003260:	4210      	tst	r0, r2
 8003262:	d057      	beq.n	8003314 <HAL_UART_IRQHandler+0x1c8>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	2140      	movs	r1, #64	; 0x40
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003266:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003268:	6898      	ldr	r0, [r3, #8]
 800326a:	4008      	ands	r0, r1
 800326c:	d035      	beq.n	80032da <HAL_UART_IRQHandler+0x18e>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800326e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8003270:	6806      	ldr	r6, [r0, #0]
 8003272:	6871      	ldr	r1, [r6, #4]
 8003274:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 8003276:	2900      	cmp	r1, #0
 8003278:	d0e3      	beq.n	8003242 <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800327a:	2758      	movs	r7, #88	; 0x58
 800327c:	46bc      	mov	ip, r7
 800327e:	44a4      	add	ip, r4
 8003280:	4667      	mov	r7, ip
 8003282:	883f      	ldrh	r7, [r7, #0]
 8003284:	428f      	cmp	r7, r1
 8003286:	d9dc      	bls.n	8003242 <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 8003288:	275a      	movs	r7, #90	; 0x5a
 800328a:	46bc      	mov	ip, r7
 800328c:	44a4      	add	ip, r4
 800328e:	4667      	mov	r7, ip
 8003290:	8039      	strh	r1, [r7, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003292:	6831      	ldr	r1, [r6, #0]
 8003294:	2620      	movs	r6, #32
 8003296:	4031      	ands	r1, r6
 8003298:	468c      	mov	ip, r1
 800329a:	d112      	bne.n	80032c2 <HAL_UART_IRQHandler+0x176>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800329c:	6819      	ldr	r1, [r3, #0]
 800329e:	4f32      	ldr	r7, [pc, #200]	; (8003368 <HAL_UART_IRQHandler+0x21c>)
 80032a0:	4039      	ands	r1, r7
 80032a2:	6019      	str	r1, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a4:	6899      	ldr	r1, [r3, #8]
 80032a6:	43a9      	bics	r1, r5
 80032a8:	6099      	str	r1, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032aa:	6899      	ldr	r1, [r3, #8]
 80032ac:	353f      	adds	r5, #63	; 0x3f
 80032ae:	43a9      	bics	r1, r5
 80032b0:	6099      	str	r1, [r3, #8]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b2:	4661      	mov	r1, ip
          huart->RxState = HAL_UART_STATE_READY;
 80032b4:	67e6      	str	r6, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b6:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b8:	6819      	ldr	r1, [r3, #0]
 80032ba:	4391      	bics	r1, r2
 80032bc:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032be:	f7fe fad1 	bl	8001864 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032c2:	0023      	movs	r3, r4
 80032c4:	0022      	movs	r2, r4
 80032c6:	335a      	adds	r3, #90	; 0x5a
 80032c8:	3258      	adds	r2, #88	; 0x58
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	8811      	ldrh	r1, [r2, #0]
 80032ce:	1ac9      	subs	r1, r1, r3
 80032d0:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032d2:	0020      	movs	r0, r4
 80032d4:	f7ff ff39 	bl	800314a <HAL_UARTEx_RxEventCallback>
 80032d8:	e7b3      	b.n	8003242 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032da:	0026      	movs	r6, r4
 80032dc:	365a      	adds	r6, #90	; 0x5a
 80032de:	8837      	ldrh	r7, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 80032e0:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032e2:	b2bf      	uxth	r7, r7
      if (  (huart->RxXferCount > 0U)
 80032e4:	2900      	cmp	r1, #0
 80032e6:	d0ac      	beq.n	8003242 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032e8:	0021      	movs	r1, r4
 80032ea:	3158      	adds	r1, #88	; 0x58
 80032ec:	8809      	ldrh	r1, [r1, #0]
 80032ee:	1bc9      	subs	r1, r1, r7
 80032f0:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 80032f2:	2900      	cmp	r1, #0
 80032f4:	d0a5      	beq.n	8003242 <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032f6:	681e      	ldr	r6, [r3, #0]
 80032f8:	4f1c      	ldr	r7, [pc, #112]	; (800336c <HAL_UART_IRQHandler+0x220>)
 80032fa:	403e      	ands	r6, r7
 80032fc:	601e      	str	r6, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032fe:	689e      	ldr	r6, [r3, #8]
 8003300:	43ae      	bics	r6, r5
        huart->RxState = HAL_UART_STATE_READY;
 8003302:	2520      	movs	r5, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003304:	609e      	str	r6, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8003306:	67e5      	str	r5, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003308:	6620      	str	r0, [r4, #96]	; 0x60
        huart->RxISR = NULL;
 800330a:	6660      	str	r0, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	4390      	bics	r0, r2
 8003310:	6018      	str	r0, [r3, #0]
 8003312:	e7de      	b.n	80032d2 <HAL_UART_IRQHandler+0x186>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003314:	2280      	movs	r2, #128	; 0x80
 8003316:	0352      	lsls	r2, r2, #13
 8003318:	4211      	tst	r1, r2
 800331a:	d006      	beq.n	800332a <HAL_UART_IRQHandler+0x1de>
 800331c:	027d      	lsls	r5, r7, #9
 800331e:	d504      	bpl.n	800332a <HAL_UART_IRQHandler+0x1de>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003320:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003322:	0020      	movs	r0, r4
 8003324:	f000 fb40 	bl	80039a8 <HAL_UARTEx_WakeupCallback>
    return;
 8003328:	e78b      	b.n	8003242 <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800332a:	2280      	movs	r2, #128	; 0x80
 800332c:	4211      	tst	r1, r2
 800332e:	d003      	beq.n	8003338 <HAL_UART_IRQHandler+0x1ec>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003330:	4210      	tst	r0, r2
 8003332:	d001      	beq.n	8003338 <HAL_UART_IRQHandler+0x1ec>
    if (huart->TxISR != NULL)
 8003334:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003336:	e71a      	b.n	800316e <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003338:	2540      	movs	r5, #64	; 0x40
 800333a:	4229      	tst	r1, r5
 800333c:	d100      	bne.n	8003340 <HAL_UART_IRQHandler+0x1f4>
 800333e:	e780      	b.n	8003242 <HAL_UART_IRQHandler+0xf6>
 8003340:	4228      	tst	r0, r5
 8003342:	d100      	bne.n	8003346 <HAL_UART_IRQHandler+0x1fa>
 8003344:	e77d      	b.n	8003242 <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003346:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003348:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800334a:	43aa      	bics	r2, r5
 800334c:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800334e:	2320      	movs	r3, #32
 8003350:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8003352:	2300      	movs	r3, #0
 8003354:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8003356:	f7fd ffb5 	bl	80012c4 <HAL_UART_TxCpltCallback>
 800335a:	e772      	b.n	8003242 <HAL_UART_IRQHandler+0xf6>
 800335c:	0000080f 	.word	0x0000080f
 8003360:	04000120 	.word	0x04000120
 8003364:	08003135 	.word	0x08003135
 8003368:	fffffeff 	.word	0xfffffeff
 800336c:	fffffedf 	.word	0xfffffedf

08003370 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003370:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 8003372:	b510      	push	{r4, lr}
 8003374:	6803      	ldr	r3, [r0, #0]
 8003376:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003378:	2a22      	cmp	r2, #34	; 0x22
 800337a:	d134      	bne.n	80033e6 <UART_RxISR_8BIT+0x76>
  uint16_t uhMask = huart->Mask;
 800337c:	0002      	movs	r2, r0
 800337e:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003382:	8812      	ldrh	r2, [r2, #0]
 8003384:	4013      	ands	r3, r2
 8003386:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8003388:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 800338a:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 800338c:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800338e:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8003390:	3301      	adds	r3, #1
 8003392:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8003394:	8813      	ldrh	r3, [r2, #0]
 8003396:	3b01      	subs	r3, #1
 8003398:	b29b      	uxth	r3, r3
 800339a:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 800339c:	8812      	ldrh	r2, [r2, #0]
 800339e:	b292      	uxth	r2, r2
 80033a0:	2a00      	cmp	r2, #0
 80033a2:	d11b      	bne.n	80033dc <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a4:	6803      	ldr	r3, [r0, #0]
 80033a6:	4812      	ldr	r0, [pc, #72]	; (80033f0 <UART_RxISR_8BIT+0x80>)
 80033a8:	6819      	ldr	r1, [r3, #0]
 80033aa:	4001      	ands	r1, r0
 80033ac:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ae:	6899      	ldr	r1, [r3, #8]
 80033b0:	3023      	adds	r0, #35	; 0x23
 80033b2:	30ff      	adds	r0, #255	; 0xff
 80033b4:	4381      	bics	r1, r0
 80033b6:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033b8:	2120      	movs	r1, #32
 80033ba:	67e1      	str	r1, [r4, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80033bc:	6662      	str	r2, [r4, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033be:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80033c0:	4282      	cmp	r2, r0
 80033c2:	d10c      	bne.n	80033de <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	3910      	subs	r1, #16
 80033c8:	438a      	bics	r2, r1
 80033ca:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033cc:	0023      	movs	r3, r4
 80033ce:	3358      	adds	r3, #88	; 0x58
 80033d0:	8819      	ldrh	r1, [r3, #0]
 80033d2:	0020      	movs	r0, r4
 80033d4:	f7ff feb9 	bl	800314a <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d8:	2300      	movs	r3, #0
 80033da:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80033dc:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 80033de:	0020      	movs	r0, r4
 80033e0:	f7fd ff78 	bl	80012d4 <HAL_UART_RxCpltCallback>
 80033e4:	e7f8      	b.n	80033d8 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80033e6:	2208      	movs	r2, #8
 80033e8:	6999      	ldr	r1, [r3, #24]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	619a      	str	r2, [r3, #24]
}
 80033ee:	e7f5      	b.n	80033dc <UART_RxISR_8BIT+0x6c>
 80033f0:	fffffedf 	.word	0xfffffedf

080033f4 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033f4:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 80033f6:	b510      	push	{r4, lr}
 80033f8:	6803      	ldr	r3, [r0, #0]
 80033fa:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033fc:	2a22      	cmp	r2, #34	; 0x22
 80033fe:	d131      	bne.n	8003464 <UART_RxISR_16BIT+0x70>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003400:	6d42      	ldr	r2, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 8003402:	305c      	adds	r0, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003404:	6a59      	ldr	r1, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8003406:	8800      	ldrh	r0, [r0, #0]
 8003408:	4001      	ands	r1, r0
 800340a:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 800340c:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 800340e:	3202      	adds	r2, #2
 8003410:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 8003412:	315a      	adds	r1, #90	; 0x5a
 8003414:	880a      	ldrh	r2, [r1, #0]
 8003416:	3a01      	subs	r2, #1
 8003418:	b292      	uxth	r2, r2
 800341a:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 800341c:	880a      	ldrh	r2, [r1, #0]
 800341e:	b292      	uxth	r2, r2
 8003420:	2a00      	cmp	r2, #0
 8003422:	d11a      	bne.n	800345a <UART_RxISR_16BIT+0x66>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003424:	6819      	ldr	r1, [r3, #0]
 8003426:	4812      	ldr	r0, [pc, #72]	; (8003470 <UART_RxISR_16BIT+0x7c>)
 8003428:	4001      	ands	r1, r0
 800342a:	6019      	str	r1, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800342c:	6899      	ldr	r1, [r3, #8]
 800342e:	3023      	adds	r0, #35	; 0x23
 8003430:	30ff      	adds	r0, #255	; 0xff
 8003432:	4381      	bics	r1, r0
 8003434:	6099      	str	r1, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003436:	2120      	movs	r1, #32
 8003438:	67e1      	str	r1, [r4, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800343a:	6662      	str	r2, [r4, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800343c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800343e:	4282      	cmp	r2, r0
 8003440:	d10c      	bne.n	800345c <UART_RxISR_16BIT+0x68>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	3910      	subs	r1, #16
 8003446:	438a      	bics	r2, r1
 8003448:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800344a:	0023      	movs	r3, r4
 800344c:	3358      	adds	r3, #88	; 0x58
 800344e:	8819      	ldrh	r1, [r3, #0]
 8003450:	0020      	movs	r0, r4
 8003452:	f7ff fe7a 	bl	800314a <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003456:	2300      	movs	r3, #0
 8003458:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800345a:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 800345c:	0020      	movs	r0, r4
 800345e:	f7fd ff39 	bl	80012d4 <HAL_UART_RxCpltCallback>
 8003462:	e7f8      	b.n	8003456 <UART_RxISR_16BIT+0x62>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003464:	2208      	movs	r2, #8
 8003466:	6999      	ldr	r1, [r3, #24]
 8003468:	430a      	orrs	r2, r1
 800346a:	619a      	str	r2, [r3, #24]
}
 800346c:	e7f5      	b.n	800345a <UART_RxISR_16BIT+0x66>
 800346e:	46c0      	nop			; (mov r8, r8)
 8003470:	fffffedf 	.word	0xfffffedf

08003474 <UART_SetConfig>:
{
 8003474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003476:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003478:	6925      	ldr	r5, [r4, #16]
 800347a:	68a2      	ldr	r2, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 800347c:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800347e:	432a      	orrs	r2, r5
 8003480:	6965      	ldr	r5, [r4, #20]
 8003482:	69c1      	ldr	r1, [r0, #28]
 8003484:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003486:	6818      	ldr	r0, [r3, #0]
 8003488:	4d70      	ldr	r5, [pc, #448]	; (800364c <UART_SetConfig+0x1d8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800348a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800348c:	4028      	ands	r0, r5
 800348e:	4302      	orrs	r2, r0
 8003490:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	486e      	ldr	r0, [pc, #440]	; (8003650 <UART_SetConfig+0x1dc>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003496:	4d6f      	ldr	r5, [pc, #444]	; (8003654 <UART_SetConfig+0x1e0>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003498:	4002      	ands	r2, r0
 800349a:	68e0      	ldr	r0, [r4, #12]
 800349c:	4302      	orrs	r2, r0
 800349e:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034a0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034a2:	42ab      	cmp	r3, r5
 80034a4:	d001      	beq.n	80034aa <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 80034a6:	6a22      	ldr	r2, [r4, #32]
 80034a8:	4310      	orrs	r0, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	4e6a      	ldr	r6, [pc, #424]	; (8003658 <UART_SetConfig+0x1e4>)
 80034ae:	4032      	ands	r2, r6
 80034b0:	4302      	orrs	r2, r0
 80034b2:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034b4:	4a69      	ldr	r2, [pc, #420]	; (800365c <UART_SetConfig+0x1e8>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d113      	bne.n	80034e2 <UART_SetConfig+0x6e>
 80034ba:	2203      	movs	r2, #3
 80034bc:	4b68      	ldr	r3, [pc, #416]	; (8003660 <UART_SetConfig+0x1ec>)
 80034be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034c0:	4013      	ands	r3, r2
 80034c2:	4a68      	ldr	r2, [pc, #416]	; (8003664 <UART_SetConfig+0x1f0>)
 80034c4:	5cd0      	ldrb	r0, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034c6:	2380      	movs	r3, #128	; 0x80
 80034c8:	021b      	lsls	r3, r3, #8
 80034ca:	4299      	cmp	r1, r3
 80034cc:	d000      	beq.n	80034d0 <UART_SetConfig+0x5c>
 80034ce:	e08f      	b.n	80035f0 <UART_SetConfig+0x17c>
    switch (clocksource)
 80034d0:	2808      	cmp	r0, #8
 80034d2:	d827      	bhi.n	8003524 <UART_SetConfig+0xb0>
 80034d4:	f7fc fe2a 	bl	800012c <__gnu_thumb1_case_uqi>
 80034d8:	26686560 	.word	0x26686560
 80034dc:	26262686 	.word	0x26262686
 80034e0:	89          	.byte	0x89
 80034e1:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034e2:	4a61      	ldr	r2, [pc, #388]	; (8003668 <UART_SetConfig+0x1f4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d107      	bne.n	80034f8 <UART_SetConfig+0x84>
 80034e8:	220c      	movs	r2, #12
 80034ea:	4b5d      	ldr	r3, [pc, #372]	; (8003660 <UART_SetConfig+0x1ec>)
 80034ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034ee:	401a      	ands	r2, r3
 80034f0:	4b5c      	ldr	r3, [pc, #368]	; (8003664 <UART_SetConfig+0x1f0>)
 80034f2:	189b      	adds	r3, r3, r2
 80034f4:	7918      	ldrb	r0, [r3, #4]
 80034f6:	e7e6      	b.n	80034c6 <UART_SetConfig+0x52>
 80034f8:	4a5c      	ldr	r2, [pc, #368]	; (800366c <UART_SetConfig+0x1f8>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d100      	bne.n	8003500 <UART_SetConfig+0x8c>
 80034fe:	e09c      	b.n	800363a <UART_SetConfig+0x1c6>
 8003500:	4a5b      	ldr	r2, [pc, #364]	; (8003670 <UART_SetConfig+0x1fc>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d100      	bne.n	8003508 <UART_SetConfig+0x94>
 8003506:	e098      	b.n	800363a <UART_SetConfig+0x1c6>
 8003508:	42ab      	cmp	r3, r5
 800350a:	d10b      	bne.n	8003524 <UART_SetConfig+0xb0>
 800350c:	21c0      	movs	r1, #192	; 0xc0
 800350e:	2080      	movs	r0, #128	; 0x80
 8003510:	4a53      	ldr	r2, [pc, #332]	; (8003660 <UART_SetConfig+0x1ec>)
 8003512:	0109      	lsls	r1, r1, #4
 8003514:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003516:	00c0      	lsls	r0, r0, #3
 8003518:	400b      	ands	r3, r1
 800351a:	4283      	cmp	r3, r0
 800351c:	d039      	beq.n	8003592 <UART_SetConfig+0x11e>
 800351e:	d803      	bhi.n	8003528 <UART_SetConfig+0xb4>
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 8003524:	2001      	movs	r0, #1
 8003526:	e00d      	b.n	8003544 <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003528:	2080      	movs	r0, #128	; 0x80
 800352a:	0100      	lsls	r0, r0, #4
 800352c:	4283      	cmp	r3, r0
 800352e:	d00d      	beq.n	800354c <UART_SetConfig+0xd8>
 8003530:	428b      	cmp	r3, r1
 8003532:	d1f7      	bne.n	8003524 <UART_SetConfig+0xb0>
        pclk = (uint32_t) LSE_VALUE;
 8003534:	2080      	movs	r0, #128	; 0x80
 8003536:	0200      	lsls	r0, r0, #8
 8003538:	e00f      	b.n	800355a <UART_SetConfig+0xe6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800353a:	f7ff f887 	bl	800264c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800353e:	2800      	cmp	r0, #0
 8003540:	d10b      	bne.n	800355a <UART_SetConfig+0xe6>
 8003542:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8003544:	2300      	movs	r3, #0
 8003546:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8003548:	66a3      	str	r3, [r4, #104]	; 0x68
}
 800354a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800354c:	6810      	ldr	r0, [r2, #0]
          pclk = (uint32_t) HSI_VALUE;
 800354e:	4b49      	ldr	r3, [pc, #292]	; (8003674 <UART_SetConfig+0x200>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003550:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 8003552:	17c0      	asrs	r0, r0, #31
 8003554:	4018      	ands	r0, r3
 8003556:	4b48      	ldr	r3, [pc, #288]	; (8003678 <UART_SetConfig+0x204>)
 8003558:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800355a:	2203      	movs	r2, #3
 800355c:	6863      	ldr	r3, [r4, #4]
 800355e:	435a      	muls	r2, r3
 8003560:	4282      	cmp	r2, r0
 8003562:	d8df      	bhi.n	8003524 <UART_SetConfig+0xb0>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003564:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003566:	4282      	cmp	r2, r0
 8003568:	d3dc      	bcc.n	8003524 <UART_SetConfig+0xb0>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800356a:	2700      	movs	r7, #0
 800356c:	0e02      	lsrs	r2, r0, #24
 800356e:	0201      	lsls	r1, r0, #8
 8003570:	085e      	lsrs	r6, r3, #1
 8003572:	1989      	adds	r1, r1, r6
 8003574:	417a      	adcs	r2, r7
 8003576:	0008      	movs	r0, r1
 8003578:	0011      	movs	r1, r2
 800357a:	001a      	movs	r2, r3
 800357c:	003b      	movs	r3, r7
 800357e:	f7fc ff55 	bl	800042c <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003582:	4b3e      	ldr	r3, [pc, #248]	; (800367c <UART_SetConfig+0x208>)
 8003584:	18c2      	adds	r2, r0, r3
 8003586:	4b3e      	ldr	r3, [pc, #248]	; (8003680 <UART_SetConfig+0x20c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003588:	429a      	cmp	r2, r3
 800358a:	d8cb      	bhi.n	8003524 <UART_SetConfig+0xb0>
        huart->Instance->BRR = usartdiv;
 800358c:	6823      	ldr	r3, [r4, #0]
 800358e:	60d8      	str	r0, [r3, #12]
 8003590:	e7d7      	b.n	8003542 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8003592:	f7fe fcb3 	bl	8001efc <HAL_RCC_GetSysClockFreq>
        break;
 8003596:	e7d2      	b.n	800353e <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003598:	f7ff f858 	bl	800264c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800359c:	2800      	cmp	r0, #0
 800359e:	d10b      	bne.n	80035b8 <UART_SetConfig+0x144>
 80035a0:	e7cf      	b.n	8003542 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetPCLK2Freq();
 80035a2:	f7ff f863 	bl	800266c <HAL_RCC_GetPCLK2Freq>
        break;
 80035a6:	e7f9      	b.n	800359c <UART_SetConfig+0x128>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035a8:	4b2d      	ldr	r3, [pc, #180]	; (8003660 <UART_SetConfig+0x1ec>)
 80035aa:	6818      	ldr	r0, [r3, #0]
          pclk = (uint32_t) HSI_VALUE;
 80035ac:	4b31      	ldr	r3, [pc, #196]	; (8003674 <UART_SetConfig+0x200>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035ae:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 80035b0:	17c0      	asrs	r0, r0, #31
 80035b2:	4018      	ands	r0, r3
 80035b4:	4b30      	ldr	r3, [pc, #192]	; (8003678 <UART_SetConfig+0x204>)
 80035b6:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035b8:	6863      	ldr	r3, [r4, #4]
 80035ba:	0040      	lsls	r0, r0, #1
 80035bc:	085b      	lsrs	r3, r3, #1
 80035be:	18c0      	adds	r0, r0, r3
 80035c0:	6861      	ldr	r1, [r4, #4]
 80035c2:	f7fc fdbd 	bl	8000140 <__udivsi3>
 80035c6:	0403      	lsls	r3, r0, #16
 80035c8:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ca:	492e      	ldr	r1, [pc, #184]	; (8003684 <UART_SetConfig+0x210>)
 80035cc:	3a10      	subs	r2, #16
 80035ce:	428a      	cmp	r2, r1
 80035d0:	d8a8      	bhi.n	8003524 <UART_SetConfig+0xb0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035d2:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035d4:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035d6:	4390      	bics	r0, r2
 80035d8:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 80035da:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80035dc:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80035de:	4318      	orrs	r0, r3
 80035e0:	60d0      	str	r0, [r2, #12]
 80035e2:	e7ae      	b.n	8003542 <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 80035e4:	f7fe fc8a 	bl	8001efc <HAL_RCC_GetSysClockFreq>
        break;
 80035e8:	e7d8      	b.n	800359c <UART_SetConfig+0x128>
        pclk = (uint32_t) LSE_VALUE;
 80035ea:	2080      	movs	r0, #128	; 0x80
 80035ec:	0200      	lsls	r0, r0, #8
 80035ee:	e7e3      	b.n	80035b8 <UART_SetConfig+0x144>
    switch (clocksource)
 80035f0:	2808      	cmp	r0, #8
 80035f2:	d897      	bhi.n	8003524 <UART_SetConfig+0xb0>
 80035f4:	f7fc fd90 	bl	8000118 <__gnu_thumb1_case_sqi>
 80035f8:	96080525 	.word	0x96080525
 80035fc:	9696961b 	.word	0x9696961b
 8003600:	1e          	.byte	0x1e
 8003601:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK2Freq();
 8003602:	f7ff f833 	bl	800266c <HAL_RCC_GetPCLK2Freq>
        break;
 8003606:	e01e      	b.n	8003646 <UART_SetConfig+0x1d2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003608:	4b15      	ldr	r3, [pc, #84]	; (8003660 <UART_SetConfig+0x1ec>)
 800360a:	6818      	ldr	r0, [r3, #0]
          pclk = (uint32_t) HSI_VALUE;
 800360c:	4b19      	ldr	r3, [pc, #100]	; (8003674 <UART_SetConfig+0x200>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800360e:	06c0      	lsls	r0, r0, #27
          pclk = (uint32_t) HSI_VALUE;
 8003610:	17c0      	asrs	r0, r0, #31
 8003612:	4018      	ands	r0, r3
 8003614:	4b18      	ldr	r3, [pc, #96]	; (8003678 <UART_SetConfig+0x204>)
 8003616:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003618:	6863      	ldr	r3, [r4, #4]
 800361a:	6861      	ldr	r1, [r4, #4]
 800361c:	085b      	lsrs	r3, r3, #1
 800361e:	1818      	adds	r0, r3, r0
 8003620:	f7fc fd8e 	bl	8000140 <__udivsi3>
 8003624:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003626:	0002      	movs	r2, r0
 8003628:	4b16      	ldr	r3, [pc, #88]	; (8003684 <UART_SetConfig+0x210>)
 800362a:	3a10      	subs	r2, #16
 800362c:	e7ac      	b.n	8003588 <UART_SetConfig+0x114>
        pclk = HAL_RCC_GetSysClockFreq();
 800362e:	f7fe fc65 	bl	8001efc <HAL_RCC_GetSysClockFreq>
        break;
 8003632:	e008      	b.n	8003646 <UART_SetConfig+0x1d2>
        pclk = (uint32_t) LSE_VALUE;
 8003634:	2080      	movs	r0, #128	; 0x80
 8003636:	0200      	lsls	r0, r0, #8
 8003638:	e7ee      	b.n	8003618 <UART_SetConfig+0x1a4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800363a:	2380      	movs	r3, #128	; 0x80
 800363c:	021b      	lsls	r3, r3, #8
 800363e:	4299      	cmp	r1, r3
 8003640:	d0aa      	beq.n	8003598 <UART_SetConfig+0x124>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003642:	f7ff f803 	bl	800264c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003646:	2800      	cmp	r0, #0
 8003648:	d1e6      	bne.n	8003618 <UART_SetConfig+0x1a4>
 800364a:	e77a      	b.n	8003542 <UART_SetConfig+0xce>
 800364c:	efff69f3 	.word	0xefff69f3
 8003650:	ffffcfff 	.word	0xffffcfff
 8003654:	40004800 	.word	0x40004800
 8003658:	fffff4ff 	.word	0xfffff4ff
 800365c:	40013800 	.word	0x40013800
 8003660:	40021000 	.word	0x40021000
 8003664:	08004b69 	.word	0x08004b69
 8003668:	40004400 	.word	0x40004400
 800366c:	40004c00 	.word	0x40004c00
 8003670:	40005000 	.word	0x40005000
 8003674:	ff48e500 	.word	0xff48e500
 8003678:	00f42400 	.word	0x00f42400
 800367c:	fffffd00 	.word	0xfffffd00
 8003680:	000ffcff 	.word	0x000ffcff
 8003684:	0000ffef 	.word	0x0000ffef

08003688 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003688:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800368a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800368c:	07da      	lsls	r2, r3, #31
 800368e:	d506      	bpl.n	800369e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003690:	6801      	ldr	r1, [r0, #0]
 8003692:	4c28      	ldr	r4, [pc, #160]	; (8003734 <UART_AdvFeatureConfig+0xac>)
 8003694:	684a      	ldr	r2, [r1, #4]
 8003696:	4022      	ands	r2, r4
 8003698:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800369a:	4322      	orrs	r2, r4
 800369c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800369e:	079a      	lsls	r2, r3, #30
 80036a0:	d506      	bpl.n	80036b0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036a2:	6801      	ldr	r1, [r0, #0]
 80036a4:	4c24      	ldr	r4, [pc, #144]	; (8003738 <UART_AdvFeatureConfig+0xb0>)
 80036a6:	684a      	ldr	r2, [r1, #4]
 80036a8:	4022      	ands	r2, r4
 80036aa:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80036ac:	4322      	orrs	r2, r4
 80036ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036b0:	075a      	lsls	r2, r3, #29
 80036b2:	d506      	bpl.n	80036c2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036b4:	6801      	ldr	r1, [r0, #0]
 80036b6:	4c21      	ldr	r4, [pc, #132]	; (800373c <UART_AdvFeatureConfig+0xb4>)
 80036b8:	684a      	ldr	r2, [r1, #4]
 80036ba:	4022      	ands	r2, r4
 80036bc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80036be:	4322      	orrs	r2, r4
 80036c0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036c2:	071a      	lsls	r2, r3, #28
 80036c4:	d506      	bpl.n	80036d4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036c6:	6801      	ldr	r1, [r0, #0]
 80036c8:	4c1d      	ldr	r4, [pc, #116]	; (8003740 <UART_AdvFeatureConfig+0xb8>)
 80036ca:	684a      	ldr	r2, [r1, #4]
 80036cc:	4022      	ands	r2, r4
 80036ce:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80036d0:	4322      	orrs	r2, r4
 80036d2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80036d4:	06da      	lsls	r2, r3, #27
 80036d6:	d506      	bpl.n	80036e6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80036d8:	6801      	ldr	r1, [r0, #0]
 80036da:	4c1a      	ldr	r4, [pc, #104]	; (8003744 <UART_AdvFeatureConfig+0xbc>)
 80036dc:	688a      	ldr	r2, [r1, #8]
 80036de:	4022      	ands	r2, r4
 80036e0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80036e2:	4322      	orrs	r2, r4
 80036e4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80036e6:	069a      	lsls	r2, r3, #26
 80036e8:	d506      	bpl.n	80036f8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80036ea:	6801      	ldr	r1, [r0, #0]
 80036ec:	4c16      	ldr	r4, [pc, #88]	; (8003748 <UART_AdvFeatureConfig+0xc0>)
 80036ee:	688a      	ldr	r2, [r1, #8]
 80036f0:	4022      	ands	r2, r4
 80036f2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80036f4:	4322      	orrs	r2, r4
 80036f6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036f8:	065a      	lsls	r2, r3, #25
 80036fa:	d510      	bpl.n	800371e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036fc:	6801      	ldr	r1, [r0, #0]
 80036fe:	4d13      	ldr	r5, [pc, #76]	; (800374c <UART_AdvFeatureConfig+0xc4>)
 8003700:	684a      	ldr	r2, [r1, #4]
 8003702:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003704:	402a      	ands	r2, r5
 8003706:	4322      	orrs	r2, r4
 8003708:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800370a:	2280      	movs	r2, #128	; 0x80
 800370c:	0352      	lsls	r2, r2, #13
 800370e:	4294      	cmp	r4, r2
 8003710:	d105      	bne.n	800371e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003712:	684a      	ldr	r2, [r1, #4]
 8003714:	4c0e      	ldr	r4, [pc, #56]	; (8003750 <UART_AdvFeatureConfig+0xc8>)
 8003716:	4022      	ands	r2, r4
 8003718:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800371a:	4322      	orrs	r2, r4
 800371c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800371e:	061b      	lsls	r3, r3, #24
 8003720:	d506      	bpl.n	8003730 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003722:	6802      	ldr	r2, [r0, #0]
 8003724:	490b      	ldr	r1, [pc, #44]	; (8003754 <UART_AdvFeatureConfig+0xcc>)
 8003726:	6853      	ldr	r3, [r2, #4]
 8003728:	400b      	ands	r3, r1
 800372a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800372c:	430b      	orrs	r3, r1
 800372e:	6053      	str	r3, [r2, #4]
}
 8003730:	bd30      	pop	{r4, r5, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	fffdffff 	.word	0xfffdffff
 8003738:	fffeffff 	.word	0xfffeffff
 800373c:	fffbffff 	.word	0xfffbffff
 8003740:	ffff7fff 	.word	0xffff7fff
 8003744:	ffffefff 	.word	0xffffefff
 8003748:	ffffdfff 	.word	0xffffdfff
 800374c:	ffefffff 	.word	0xffefffff
 8003750:	ff9fffff 	.word	0xff9fffff
 8003754:	fff7ffff 	.word	0xfff7ffff

08003758 <UART_WaitOnFlagUntilTimeout>:
{
 8003758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800375a:	2780      	movs	r7, #128	; 0x80
{
 800375c:	0004      	movs	r4, r0
 800375e:	000e      	movs	r6, r1
 8003760:	0015      	movs	r5, r2
 8003762:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003764:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003766:	6822      	ldr	r2, [r4, #0]
 8003768:	69d3      	ldr	r3, [r2, #28]
 800376a:	4033      	ands	r3, r6
 800376c:	1b9b      	subs	r3, r3, r6
 800376e:	4259      	negs	r1, r3
 8003770:	414b      	adcs	r3, r1
 8003772:	42ab      	cmp	r3, r5
 8003774:	d001      	beq.n	800377a <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8003776:	2000      	movs	r0, #0
 8003778:	e01c      	b.n	80037b4 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800377a:	9b08      	ldr	r3, [sp, #32]
 800377c:	3301      	adds	r3, #1
 800377e:	d0f3      	beq.n	8003768 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003780:	f7fd fb7e 	bl	8000e80 <HAL_GetTick>
 8003784:	9b01      	ldr	r3, [sp, #4]
 8003786:	9a08      	ldr	r2, [sp, #32]
 8003788:	1ac0      	subs	r0, r0, r3
 800378a:	6823      	ldr	r3, [r4, #0]
 800378c:	4290      	cmp	r0, r2
 800378e:	d801      	bhi.n	8003794 <UART_WaitOnFlagUntilTimeout+0x3c>
 8003790:	2a00      	cmp	r2, #0
 8003792:	d110      	bne.n	80037b6 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	4913      	ldr	r1, [pc, #76]	; (80037e4 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8003798:	400a      	ands	r2, r1
 800379a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	31a3      	adds	r1, #163	; 0xa3
 80037a0:	31ff      	adds	r1, #255	; 0xff
 80037a2:	438a      	bics	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80037a6:	2320      	movs	r3, #32
 80037a8:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037aa:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80037ac:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 80037ae:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80037b0:	3474      	adds	r4, #116	; 0x74
 80037b2:	7023      	strb	r3, [r4, #0]
}
 80037b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037b6:	2104      	movs	r1, #4
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	420a      	tst	r2, r1
 80037bc:	d0d3      	beq.n	8003766 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	423a      	tst	r2, r7
 80037c2:	d0d0      	beq.n	8003766 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037c4:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	4906      	ldr	r1, [pc, #24]	; (80037e4 <UART_WaitOnFlagUntilTimeout+0x8c>)
 80037ca:	400a      	ands	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	31a3      	adds	r1, #163	; 0xa3
 80037d2:	31ff      	adds	r1, #255	; 0xff
 80037d4:	438a      	bics	r2, r1
 80037d6:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80037d8:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037da:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 80037dc:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80037de:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037e0:	67d3      	str	r3, [r2, #124]	; 0x7c
 80037e2:	e7e3      	b.n	80037ac <UART_WaitOnFlagUntilTimeout+0x54>
 80037e4:	fffffe5f 	.word	0xfffffe5f

080037e8 <UART_CheckIdleState>:
{
 80037e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ea:	2600      	movs	r6, #0
{
 80037ec:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037ee:	1d03      	adds	r3, r0, #4
 80037f0:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80037f2:	f7fd fb45 	bl	8000e80 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037f6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80037f8:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	071b      	lsls	r3, r3, #28
 80037fe:	d416      	bmi.n	800382e <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003800:	6823      	ldr	r3, [r4, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	075b      	lsls	r3, r3, #29
 8003806:	d50a      	bpl.n	800381e <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003808:	2180      	movs	r1, #128	; 0x80
 800380a:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <UART_CheckIdleState+0x60>)
 800380c:	2200      	movs	r2, #0
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	03c9      	lsls	r1, r1, #15
 8003812:	002b      	movs	r3, r5
 8003814:	0020      	movs	r0, r4
 8003816:	f7ff ff9f 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 800381a:	2800      	cmp	r0, #0
 800381c:	d112      	bne.n	8003844 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 800381e:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003820:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003822:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003824:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003826:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8003828:	3474      	adds	r4, #116	; 0x74
 800382a:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800382c:	e00b      	b.n	8003846 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800382e:	2180      	movs	r1, #128	; 0x80
 8003830:	4b05      	ldr	r3, [pc, #20]	; (8003848 <UART_CheckIdleState+0x60>)
 8003832:	0032      	movs	r2, r6
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	0389      	lsls	r1, r1, #14
 8003838:	0003      	movs	r3, r0
 800383a:	0020      	movs	r0, r4
 800383c:	f7ff ff8c 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 8003840:	2800      	cmp	r0, #0
 8003842:	d0dd      	beq.n	8003800 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8003844:	2003      	movs	r0, #3
}
 8003846:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8003848:	01ffffff 	.word	0x01ffffff

0800384c <HAL_UART_Init>:
{
 800384c:	b510      	push	{r4, lr}
 800384e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003850:	d101      	bne.n	8003856 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8003852:	2001      	movs	r0, #1
}
 8003854:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8003856:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003858:	2b00      	cmp	r3, #0
 800385a:	d104      	bne.n	8003866 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800385c:	0002      	movs	r2, r0
 800385e:	3274      	adds	r2, #116	; 0x74
 8003860:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8003862:	f7fd fb63 	bl	8000f2c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003866:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003868:	2101      	movs	r1, #1
 800386a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800386c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800386e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003870:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8003872:	438b      	bics	r3, r1
 8003874:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003876:	f7ff fdfd 	bl	8003474 <UART_SetConfig>
 800387a:	2801      	cmp	r0, #1
 800387c:	d0e9      	beq.n	8003852 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800387e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8003884:	0020      	movs	r0, r4
 8003886:	f7ff feff 	bl	8003688 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800388a:	6823      	ldr	r3, [r4, #0]
 800388c:	4907      	ldr	r1, [pc, #28]	; (80038ac <HAL_UART_Init+0x60>)
 800388e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8003890:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003892:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003894:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003896:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003898:	689a      	ldr	r2, [r3, #8]
 800389a:	438a      	bics	r2, r1
 800389c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800389e:	2201      	movs	r2, #1
 80038a0:	6819      	ldr	r1, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80038a6:	f7ff ff9f 	bl	80037e8 <UART_CheckIdleState>
 80038aa:	e7d3      	b.n	8003854 <HAL_UART_Init+0x8>
 80038ac:	ffffb7ff 	.word	0xffffb7ff

080038b0 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 80038b0:	0003      	movs	r3, r0
 80038b2:	3358      	adds	r3, #88	; 0x58
{
 80038b4:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 80038b6:	6541      	str	r1, [r0, #84]	; 0x54
  UART_MASK_COMPUTATION(huart);
 80038b8:	2480      	movs	r4, #128	; 0x80
  huart->RxXferSize  = Size;
 80038ba:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 80038bc:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 80038be:	2200      	movs	r2, #0
  UART_MASK_COMPUTATION(huart);
 80038c0:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 80038c2:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 80038c4:	0164      	lsls	r4, r4, #5
 80038c6:	3304      	adds	r3, #4
 80038c8:	42a1      	cmp	r1, r4
 80038ca:	d123      	bne.n	8003914 <UART_Start_Receive_IT+0x64>
 80038cc:	6902      	ldr	r2, [r0, #16]
 80038ce:	2a00      	cmp	r2, #0
 80038d0:	d11e      	bne.n	8003910 <UART_Start_Receive_IT+0x60>
 80038d2:	4a19      	ldr	r2, [pc, #100]	; (8003938 <UART_Start_Receive_IT+0x88>)
 80038d4:	801a      	strh	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d6:	2200      	movs	r2, #0
 80038d8:	1d03      	adds	r3, r0, #4
 80038da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038dc:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038de:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038e0:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038e2:	6894      	ldr	r4, [r2, #8]
 80038e4:	3b21      	subs	r3, #33	; 0x21
 80038e6:	4323      	orrs	r3, r4
 80038e8:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	015b      	lsls	r3, r3, #5
 80038ee:	4299      	cmp	r1, r3
 80038f0:	d120      	bne.n	8003934 <UART_Start_Receive_IT+0x84>
 80038f2:	6903      	ldr	r3, [r0, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d11d      	bne.n	8003934 <UART_Start_Receive_IT+0x84>
    huart->RxISR = UART_RxISR_16BIT;
 80038f8:	4b10      	ldr	r3, [pc, #64]	; (800393c <UART_Start_Receive_IT+0x8c>)
    huart->RxISR = UART_RxISR_8BIT;
 80038fa:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80038fc:	0003      	movs	r3, r0
 80038fe:	2000      	movs	r0, #0
 8003900:	3374      	adds	r3, #116	; 0x74
 8003902:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003904:	2390      	movs	r3, #144	; 0x90
 8003906:	6811      	ldr	r1, [r2, #0]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	430b      	orrs	r3, r1
 800390c:	6013      	str	r3, [r2, #0]
}
 800390e:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8003910:	22ff      	movs	r2, #255	; 0xff
 8003912:	e7df      	b.n	80038d4 <UART_Start_Receive_IT+0x24>
 8003914:	2900      	cmp	r1, #0
 8003916:	d104      	bne.n	8003922 <UART_Start_Receive_IT+0x72>
 8003918:	6902      	ldr	r2, [r0, #16]
 800391a:	2a00      	cmp	r2, #0
 800391c:	d0f8      	beq.n	8003910 <UART_Start_Receive_IT+0x60>
 800391e:	227f      	movs	r2, #127	; 0x7f
 8003920:	e7d8      	b.n	80038d4 <UART_Start_Receive_IT+0x24>
 8003922:	2480      	movs	r4, #128	; 0x80
 8003924:	0564      	lsls	r4, r4, #21
 8003926:	42a1      	cmp	r1, r4
 8003928:	d1d4      	bne.n	80038d4 <UART_Start_Receive_IT+0x24>
 800392a:	6902      	ldr	r2, [r0, #16]
 800392c:	2a00      	cmp	r2, #0
 800392e:	d0f6      	beq.n	800391e <UART_Start_Receive_IT+0x6e>
 8003930:	223f      	movs	r2, #63	; 0x3f
 8003932:	e7cf      	b.n	80038d4 <UART_Start_Receive_IT+0x24>
    huart->RxISR = UART_RxISR_8BIT;
 8003934:	4b02      	ldr	r3, [pc, #8]	; (8003940 <UART_Start_Receive_IT+0x90>)
 8003936:	e7e0      	b.n	80038fa <UART_Start_Receive_IT+0x4a>
 8003938:	000001ff 	.word	0x000001ff
 800393c:	080033f5 	.word	0x080033f5
 8003940:	08003371 	.word	0x08003371

08003944 <HAL_UART_Receive_IT>:
{
 8003944:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003946:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
{
 8003948:	0003      	movs	r3, r0
    return HAL_BUSY;
 800394a:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 800394c:	2c20      	cmp	r4, #32
 800394e:	d127      	bne.n	80039a0 <HAL_UART_Receive_IT+0x5c>
      return HAL_ERROR;
 8003950:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8003952:	2900      	cmp	r1, #0
 8003954:	d024      	beq.n	80039a0 <HAL_UART_Receive_IT+0x5c>
 8003956:	2a00      	cmp	r2, #0
 8003958:	d022      	beq.n	80039a0 <HAL_UART_Receive_IT+0x5c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800395a:	2480      	movs	r4, #128	; 0x80
 800395c:	689d      	ldr	r5, [r3, #8]
 800395e:	0164      	lsls	r4, r4, #5
 8003960:	42a5      	cmp	r5, r4
 8003962:	d104      	bne.n	800396e <HAL_UART_Receive_IT+0x2a>
 8003964:	691c      	ldr	r4, [r3, #16]
 8003966:	2c00      	cmp	r4, #0
 8003968:	d101      	bne.n	800396e <HAL_UART_Receive_IT+0x2a>
      if ((((uint32_t)pData) & 1U) != 0U)
 800396a:	4201      	tst	r1, r0
 800396c:	d118      	bne.n	80039a0 <HAL_UART_Receive_IT+0x5c>
    __HAL_LOCK(huart);
 800396e:	001c      	movs	r4, r3
 8003970:	3474      	adds	r4, #116	; 0x74
 8003972:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 8003974:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8003976:	2d01      	cmp	r5, #1
 8003978:	d012      	beq.n	80039a0 <HAL_UART_Receive_IT+0x5c>
 800397a:	3801      	subs	r0, #1
 800397c:	7020      	strb	r0, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800397e:	2000      	movs	r0, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003980:	4c08      	ldr	r4, [pc, #32]	; (80039a4 <HAL_UART_Receive_IT+0x60>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003982:	6618      	str	r0, [r3, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003984:	6818      	ldr	r0, [r3, #0]
 8003986:	42a0      	cmp	r0, r4
 8003988:	d007      	beq.n	800399a <HAL_UART_Receive_IT+0x56>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800398a:	6844      	ldr	r4, [r0, #4]
 800398c:	0224      	lsls	r4, r4, #8
 800398e:	d504      	bpl.n	800399a <HAL_UART_Receive_IT+0x56>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003990:	2480      	movs	r4, #128	; 0x80
 8003992:	6805      	ldr	r5, [r0, #0]
 8003994:	04e4      	lsls	r4, r4, #19
 8003996:	432c      	orrs	r4, r5
 8003998:	6004      	str	r4, [r0, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 800399a:	0018      	movs	r0, r3
 800399c:	f7ff ff88 	bl	80038b0 <UART_Start_Receive_IT>
}
 80039a0:	bd70      	pop	{r4, r5, r6, pc}
 80039a2:	46c0      	nop			; (mov r8, r8)
 80039a4:	40004800 	.word	0x40004800

080039a8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80039a8:	4770      	bx	lr
	...

080039ac <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80039ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039ae:	0005      	movs	r5, r0
{
 80039b0:	9102      	str	r1, [sp, #8]
 80039b2:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(huart);
 80039b4:	3574      	adds	r5, #116	; 0x74
 80039b6:	782b      	ldrb	r3, [r5, #0]
{
 80039b8:	0004      	movs	r4, r0
 80039ba:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 80039bc:	2002      	movs	r0, #2
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d030      	beq.n	8003a24 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80039c2:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 80039c4:	3801      	subs	r0, #1
 80039c6:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80039c8:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80039ca:	6823      	ldr	r3, [r4, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4382      	bics	r2, r0
 80039d0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	4815      	ldr	r0, [pc, #84]	; (8003a2c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x80>)
 80039d6:	4002      	ands	r2, r0
 80039d8:	430a      	orrs	r2, r1
 80039da:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80039dc:	2900      	cmp	r1, #0
 80039de:	d10c      	bne.n	80039fa <HAL_UARTEx_StopModeWakeUpSourceConfig+0x4e>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80039e0:	2210      	movs	r2, #16
 80039e2:	6859      	ldr	r1, [r3, #4]
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80039e4:	79b0      	ldrb	r0, [r6, #6]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80039e6:	4391      	bics	r1, r2
 80039e8:	88b2      	ldrh	r2, [r6, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80039ea:	0600      	lsls	r0, r0, #24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80039ec:	4311      	orrs	r1, r2
 80039ee:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	0212      	lsls	r2, r2, #8
 80039f4:	0a12      	lsrs	r2, r2, #8
 80039f6:	4302      	orrs	r2, r0
 80039f8:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 80039fa:	2201      	movs	r2, #1
 80039fc:	6819      	ldr	r1, [r3, #0]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003a02:	f7fd fa3d 	bl	8000e80 <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a06:	2180      	movs	r1, #128	; 0x80
 8003a08:	4a09      	ldr	r2, [pc, #36]	; (8003a30 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x84>)
  tickstart = HAL_GetTick();
 8003a0a:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a0c:	9200      	str	r2, [sp, #0]
 8003a0e:	03c9      	lsls	r1, r1, #15
 8003a10:	2200      	movs	r2, #0
 8003a12:	0020      	movs	r0, r4
 8003a14:	f7ff fea0 	bl	8003758 <UART_WaitOnFlagUntilTimeout>
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	d105      	bne.n	8003a28 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8003a1c:	2320      	movs	r3, #32
 8003a1e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003a20:	2300      	movs	r3, #0
 8003a22:	702b      	strb	r3, [r5, #0]
}
 8003a24:	b004      	add	sp, #16
 8003a26:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIMEOUT;
 8003a28:	2003      	movs	r0, #3
 8003a2a:	e7f9      	b.n	8003a20 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
 8003a2c:	ffcfffff 	.word	0xffcfffff
 8003a30:	01ffffff 	.word	0x01ffffff

08003a34 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8003a34:	0002      	movs	r2, r0
 8003a36:	2302      	movs	r3, #2
{
 8003a38:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 8003a3a:	3274      	adds	r2, #116	; 0x74
 8003a3c:	7814      	ldrb	r4, [r2, #0]
{
 8003a3e:	0001      	movs	r1, r0
  __HAL_LOCK(huart);
 8003a40:	0018      	movs	r0, r3
 8003a42:	2c01      	cmp	r4, #1
 8003a44:	d005      	beq.n	8003a52 <HAL_UARTEx_EnableStopMode+0x1e>
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8003a46:	6809      	ldr	r1, [r1, #0]
 8003a48:	6808      	ldr	r0, [r1, #0]
 8003a4a:	4303      	orrs	r3, r0
  __HAL_UNLOCK(huart);
 8003a4c:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8003a4e:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(huart);
 8003a50:	7010      	strb	r0, [r2, #0]
}
 8003a52:	bd10      	pop	{r4, pc}

08003a54 <HAL_UARTEx_DisableStopMode>:
  __HAL_LOCK(huart);
 8003a54:	0002      	movs	r2, r0
{
 8003a56:	b510      	push	{r4, lr}
 8003a58:	2402      	movs	r4, #2
  __HAL_LOCK(huart);
 8003a5a:	3274      	adds	r2, #116	; 0x74
 8003a5c:	7811      	ldrb	r1, [r2, #0]
{
 8003a5e:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 8003a60:	0020      	movs	r0, r4
 8003a62:	2901      	cmp	r1, #1
 8003a64:	d005      	beq.n	8003a72 <HAL_UARTEx_DisableStopMode+0x1e>
  __HAL_UNLOCK(huart);
 8003a66:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8003a68:	6819      	ldr	r1, [r3, #0]
 8003a6a:	680b      	ldr	r3, [r1, #0]
 8003a6c:	43a3      	bics	r3, r4
 8003a6e:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(huart);
 8003a70:	7010      	strb	r0, [r2, #0]
}
 8003a72:	bd10      	pop	{r4, pc}

08003a74 <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8003a74:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a76:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003a7a:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8003a7c:	4b17      	ldr	r3, [pc, #92]	; (8003adc <TRACE_AllocateBufer+0x68>)
 8003a7e:	8a5d      	ldrh	r5, [r3, #18]
 8003a80:	8a1a      	ldrh	r2, [r3, #16]
 8003a82:	4295      	cmp	r5, r2
 8003a84:	d115      	bne.n	8003ab2 <TRACE_AllocateBufer+0x3e>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8003a86:	2280      	movs	r2, #128	; 0x80
 8003a88:	0092      	lsls	r2, r2, #2
 8003a8a:	1b52      	subs	r2, r2, r5
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8003a8c:	b292      	uxth	r2, r2
 8003a8e:	4290      	cmp	r0, r2
 8003a90:	d306      	bcc.n	8003aa0 <TRACE_AllocateBufer+0x2c>
 8003a92:	4285      	cmp	r5, r0
 8003a94:	d917      	bls.n	8003ac6 <TRACE_AllocateBufer+0x52>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 8003a96:	2201      	movs	r2, #1
 8003a98:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8003a9a:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8003a9c:	801d      	strh	r5, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8003a9e:	825a      	strh	r2, [r3, #18]
#endif
  }
  
  if (freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 8003aa0:	8a5a      	ldrh	r2, [r3, #18]
 8003aa2:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8003aa4:	8a5a      	ldrh	r2, [r3, #18]
 8003aa6:	1880      	adds	r0, r0, r2
 8003aa8:	05c0      	lsls	r0, r0, #23
 8003aaa:	0dc0      	lsrs	r0, r0, #23
 8003aac:	8258      	strh	r0, [r3, #18]
    ret = 0;
 8003aae:	2000      	movs	r0, #0
 8003ab0:	e00b      	b.n	8003aca <TRACE_AllocateBufer+0x56>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8003ab2:	4295      	cmp	r5, r2
 8003ab4:	d90c      	bls.n	8003ad0 <TRACE_AllocateBufer+0x5c>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8003ab6:	2680      	movs	r6, #128	; 0x80
 8003ab8:	00b6      	lsls	r6, r6, #2
 8003aba:	1b76      	subs	r6, r6, r5
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8003abc:	b2b6      	uxth	r6, r6
 8003abe:	4286      	cmp	r6, r0
 8003ac0:	d8ee      	bhi.n	8003aa0 <TRACE_AllocateBufer+0x2c>
 8003ac2:	4282      	cmp	r2, r0
 8003ac4:	d8e7      	bhi.n	8003a96 <TRACE_AllocateBufer+0x22>
  int16_t ret = -1;
 8003ac6:	2001      	movs	r0, #1
 8003ac8:	4240      	negs	r0, r0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aca:	f384 8810 	msr	PRIMASK, r4
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
}
 8003ace:	bd70      	pop	{r4, r5, r6, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8003ad0:	1b52      	subs	r2, r2, r5
  if (freesize > Size)
 8003ad2:	b292      	uxth	r2, r2
 8003ad4:	4282      	cmp	r2, r0
 8003ad6:	d8e3      	bhi.n	8003aa0 <TRACE_AllocateBufer+0x2c>
 8003ad8:	e7f5      	b.n	8003ac6 <TRACE_AllocateBufer+0x52>
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	20000104 	.word	0x20000104

08003ae0 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ae0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003ae4:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8003ae6:	4a03      	ldr	r2, [pc, #12]	; (8003af4 <TRACE_Lock+0x14>)
 8003ae8:	8ad3      	ldrh	r3, [r2, #22]
 8003aea:	3301      	adds	r3, #1
 8003aec:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aee:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8003af2:	4770      	bx	lr
 8003af4:	20000104 	.word	0x20000104

08003af8 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003af8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003afc:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8003afe:	4a03      	ldr	r2, [pc, #12]	; (8003b0c <TRACE_UnLock+0x14>)
 8003b00:	8ad3      	ldrh	r3, [r2, #22]
 8003b02:	3b01      	subs	r3, #1
 8003b04:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b06:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8003b0a:	4770      	bx	lr
 8003b0c:	20000104 	.word	0x20000104

08003b10 <UTIL_ADV_TRACE_Init>:
{
 8003b10:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 8003b12:	2218      	movs	r2, #24
 8003b14:	2100      	movs	r1, #0
 8003b16:	4807      	ldr	r0, [pc, #28]	; (8003b34 <UTIL_ADV_TRACE_Init+0x24>)
 8003b18:	f000 f958 	bl	8003dcc <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8003b1c:	2280      	movs	r2, #128	; 0x80
 8003b1e:	2100      	movs	r1, #0
 8003b20:	0092      	lsls	r2, r2, #2
 8003b22:	4805      	ldr	r0, [pc, #20]	; (8003b38 <UTIL_ADV_TRACE_Init+0x28>)
 8003b24:	f000 f952 	bl	8003dcc <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <UTIL_ADV_TRACE_Init+0x2c>)
 8003b2a:	4805      	ldr	r0, [pc, #20]	; (8003b40 <UTIL_ADV_TRACE_Init+0x30>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4798      	blx	r3
}
 8003b30:	bd10      	pop	{r4, pc}
 8003b32:	46c0      	nop			; (mov r8, r8)
 8003b34:	20000104 	.word	0x20000104
 8003b38:	2000021c 	.word	0x2000021c
 8003b3c:	08004b10 	.word	0x08004b10
 8003b40:	08003cad 	.word	0x08003cad

08003b44 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
	ADV_TRACE_Ctx.timestamp_func = *cb;
 8003b44:	4b01      	ldr	r3, [pc, #4]	; (8003b4c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8003b46:	6058      	str	r0, [r3, #4]
}
 8003b48:	4770      	bx	lr
 8003b4a:	46c0      	nop			; (mov r8, r8)
 8003b4c:	20000104 	.word	0x20000104

08003b50 <UTIL_ADV_TRACE_SetVerboseLevel>:
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8003b50:	4b01      	ldr	r3, [pc, #4]	; (8003b58 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8003b52:	7218      	strb	r0, [r3, #8]
}
 8003b54:	4770      	bx	lr
 8003b56:	46c0      	nop			; (mov r8, r8)
 8003b58:	20000104 	.word	0x20000104

08003b5c <TRACE_Send>:
{
 8003b5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b5e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003b62:	b672      	cpsid	i
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8003b64:	4c1b      	ldr	r4, [pc, #108]	; (8003bd4 <TRACE_Send+0x78>)
  if(TRACE_IsLocked() == 0u)
 8003b66:	8ae7      	ldrh	r7, [r4, #22]
 8003b68:	2f00      	cmp	r7, #0
 8003b6a:	d12e      	bne.n	8003bca <TRACE_Send+0x6e>
    TRACE_Lock();
 8003b6c:	f7ff ffb8 	bl	8003ae0 <TRACE_Lock>
    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8003b70:	8a25      	ldrh	r5, [r4, #16]
 8003b72:	8a62      	ldrh	r2, [r4, #18]
 8003b74:	4295      	cmp	r5, r2
 8003b76:	d026      	beq.n	8003bc6 <TRACE_Send+0x6a>
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8003b78:	78a3      	ldrb	r3, [r4, #2]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d10a      	bne.n	8003b94 <TRACE_Send+0x38>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8003b7e:	2102      	movs	r1, #2
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8003b80:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8003b82:	70a1      	strb	r1, [r4, #2]
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8003b84:	1b5b      	subs	r3, r3, r5
 8003b86:	b29b      	uxth	r3, r3
 8003b88:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8003b8a:	8027      	strh	r7, [r4, #0]
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d109      	bne.n	8003ba4 <TRACE_Send+0x48>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8003b90:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8003b92:	8223      	strh	r3, [r4, #16]
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8003b94:	78a3      	ldrb	r3, [r4, #2]
 8003b96:	8a25      	ldrh	r5, [r4, #16]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d103      	bne.n	8003ba4 <TRACE_Send+0x48>
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8003b9c:	42aa      	cmp	r2, r5
 8003b9e:	d90d      	bls.n	8003bbc <TRACE_Send+0x60>
   	    	ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8003ba0:	1b52      	subs	r2, r2, r5
 8003ba2:	82a2      	strh	r2, [r4, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba4:	f386 8810 	msr	PRIMASK, r6
      UTIL_ADV_TRACE_PreSendHook(); 
 8003ba8:	f7fd f95c 	bl	8000e64 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <TRACE_Send+0x7c>)
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8003bae:	480b      	ldr	r0, [pc, #44]	; (8003bdc <TRACE_Send+0x80>)
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	8aa1      	ldrh	r1, [r4, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 8003bb4:	1828      	adds	r0, r5, r0
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 8003bb6:	9301      	str	r3, [sp, #4]
 8003bb8:	4798      	blx	r3
}
 8003bba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	1b5b      	subs	r3, r3, r5
 8003bc2:	82a3      	strh	r3, [r4, #20]
 8003bc4:	e7ee      	b.n	8003ba4 <TRACE_Send+0x48>
      TRACE_UnLock();
 8003bc6:	f7ff ff97 	bl	8003af8 <TRACE_UnLock>
 8003bca:	f386 8810 	msr	PRIMASK, r6
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 8003bce:	2000      	movs	r0, #0
  return ret;
 8003bd0:	e7f3      	b.n	8003bba <TRACE_Send+0x5e>
 8003bd2:	46c0      	nop			; (mov r8, r8)
 8003bd4:	20000104 	.word	0x20000104
 8003bd8:	08004b10 	.word	0x08004b10
 8003bdc:	2000021c 	.word	0x2000021c

08003be0 <UTIL_ADV_TRACE_COND_FSend>:
{
 8003be0:	b408      	push	{r3}
 8003be2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003be4:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 8003be6:	2300      	movs	r3, #0
 8003be8:	466c      	mov	r4, sp
 8003bea:	8023      	strh	r3, [r4, #0]
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 8003bec:	4b2c      	ldr	r3, [pc, #176]	; (8003ca0 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 8003bee:	7a1c      	ldrb	r4, [r3, #8]
 8003bf0:	4284      	cmp	r4, r0
 8003bf2:	d350      	bcc.n	8003c96 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8003bf4:	68d8      	ldr	r0, [r3, #12]
 8003bf6:	4008      	ands	r0, r1
 8003bf8:	4288      	cmp	r0, r1
 8003bfa:	d14e      	bne.n	8003c9a <UTIL_ADV_TRACE_COND_FSend+0xba>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d004      	beq.n	8003c0c <UTIL_ADV_TRACE_COND_FSend+0x2c>
 8003c02:	2a00      	cmp	r2, #0
 8003c04:	d002      	beq.n	8003c0c <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8003c06:	4669      	mov	r1, sp
 8003c08:	a802      	add	r0, sp, #8
 8003c0a:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8003c0c:	2180      	movs	r1, #128	; 0x80
  va_start( vaArgs, strFormat);
 8003c0e:	ab0c      	add	r3, sp, #48	; 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8003c10:	0049      	lsls	r1, r1, #1
 8003c12:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c14:	4823      	ldr	r0, [pc, #140]	; (8003ca4 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
  va_start( vaArgs, strFormat);
 8003c16:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8003c18:	f000 f9f0 	bl	8003ffc <tiny_vsnprintf_like>
 8003c1c:	0005      	movs	r5, r0
  TRACE_Lock();
 8003c1e:	f7ff ff5f 	bl	8003ae0 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8003c22:	466b      	mov	r3, sp
 8003c24:	8818      	ldrh	r0, [r3, #0]
 8003c26:	1c9c      	adds	r4, r3, #2
 8003c28:	1940      	adds	r0, r0, r5
 8003c2a:	b280      	uxth	r0, r0
 8003c2c:	0021      	movs	r1, r4
 8003c2e:	f7ff ff21 	bl	8003a74 <TRACE_AllocateBufer>
 8003c32:	1c43      	adds	r3, r0, #1
 8003c34:	d02a      	beq.n	8003c8c <UTIL_ADV_TRACE_COND_FSend+0xac>
    for (idx = 0u; idx < timestamp_size; idx++)
 8003c36:	2200      	movs	r2, #0
 8003c38:	2101      	movs	r1, #1
 8003c3a:	466b      	mov	r3, sp
 8003c3c:	0015      	movs	r5, r2
 8003c3e:	468c      	mov	ip, r1
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	8826      	ldrh	r6, [r4, #0]
 8003c44:	4818      	ldr	r0, [pc, #96]	; (8003ca8 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8003c46:	b297      	uxth	r7, r2
 8003c48:	19f1      	adds	r1, r6, r7
 8003c4a:	b289      	uxth	r1, r1
 8003c4c:	42bb      	cmp	r3, r7
 8003c4e:	d815      	bhi.n	8003c7c <UTIL_ADV_TRACE_COND_FSend+0x9c>
 8003c50:	199b      	adds	r3, r3, r6
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	2d00      	cmp	r5, #0
 8003c56:	d000      	beq.n	8003c5a <UTIL_ADV_TRACE_COND_FSend+0x7a>
 8003c58:	8023      	strh	r3, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8003c5a:	2180      	movs	r1, #128	; 0x80
 8003c5c:	8823      	ldrh	r3, [r4, #0]
 8003c5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003c60:	0049      	lsls	r1, r1, #1
 8003c62:	18c0      	adds	r0, r0, r3
 8003c64:	9b01      	ldr	r3, [sp, #4]
 8003c66:	f000 f9c9 	bl	8003ffc <tiny_vsnprintf_like>
    TRACE_UnLock();
 8003c6a:	f7ff ff45 	bl	8003af8 <TRACE_UnLock>
    return TRACE_Send();
 8003c6e:	f7ff ff75 	bl	8003b5c <TRACE_Send>
}
 8003c72:	b006      	add	sp, #24
 8003c74:	bcf0      	pop	{r4, r5, r6, r7}
 8003c76:	bc08      	pop	{r3}
 8003c78:	b001      	add	sp, #4
 8003c7a:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8003c7c:	466d      	mov	r5, sp
 8003c7e:	2708      	movs	r7, #8
 8003c80:	19ed      	adds	r5, r5, r7
 8003c82:	5cad      	ldrb	r5, [r5, r2]
 8003c84:	3201      	adds	r2, #1
 8003c86:	5445      	strb	r5, [r0, r1]
 8003c88:	4665      	mov	r5, ip
 8003c8a:	e7dc      	b.n	8003c46 <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 8003c8c:	f7ff ff34 	bl	8003af8 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8003c90:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 8003c92:	4240      	negs	r0, r0
 8003c94:	e7ed      	b.n	8003c72 <UTIL_ADV_TRACE_COND_FSend+0x92>
    return UTIL_ADV_TRACE_GIVEUP;
 8003c96:	2005      	movs	r0, #5
 8003c98:	e7fb      	b.n	8003c92 <UTIL_ADV_TRACE_COND_FSend+0xb2>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8003c9a:	2006      	movs	r0, #6
 8003c9c:	e7f9      	b.n	8003c92 <UTIL_ADV_TRACE_COND_FSend+0xb2>
 8003c9e:	46c0      	nop			; (mov r8, r8)
 8003ca0:	20000104 	.word	0x20000104
 8003ca4:	2000011c 	.word	0x2000011c
 8003ca8:	2000021c 	.word	0x2000021c

08003cac <TRACE_TxCpltCallback>:
{ 
 8003cac:	b513      	push	{r0, r1, r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cae:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003cb2:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8003cb4:	4b1f      	ldr	r3, [pc, #124]	; (8003d34 <TRACE_TxCpltCallback+0x88>)
 8003cb6:	789a      	ldrb	r2, [r3, #2]
 8003cb8:	2a02      	cmp	r2, #2
 8003cba:	d12b      	bne.n	8003d14 <TRACE_TxCpltCallback+0x68>
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8003cc0:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8003cc2:	8a18      	ldrh	r0, [r3, #16]
 8003cc4:	8a59      	ldrh	r1, [r3, #18]
 8003cc6:	4288      	cmp	r0, r1
 8003cc8:	d02d      	beq.n	8003d26 <TRACE_TxCpltCallback+0x7a>
 8003cca:	8ada      	ldrh	r2, [r3, #22]
 8003ccc:	2a01      	cmp	r2, #1
 8003cce:	d12a      	bne.n	8003d26 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8003cd0:	789a      	ldrb	r2, [r3, #2]
 8003cd2:	2a01      	cmp	r2, #1
 8003cd4:	d10b      	bne.n	8003cee <TRACE_TxCpltCallback+0x42>
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8003cd6:	881a      	ldrh	r2, [r3, #0]
 8003cd8:	1a12      	subs	r2, r2, r0
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8003cda:	2002      	movs	r0, #2
 8003cdc:	7098      	strb	r0, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 8003cde:	2000      	movs	r0, #0
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8003ce0:	b292      	uxth	r2, r2
 8003ce2:	829a      	strh	r2, [r3, #20]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 8003ce4:	8018      	strh	r0, [r3, #0]
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 8003ce6:	4282      	cmp	r2, r0
 8003ce8:	d109      	bne.n	8003cfe <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8003cea:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8003cec:	821a      	strh	r2, [r3, #16]
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8003cee:	789a      	ldrb	r2, [r3, #2]
 8003cf0:	2a00      	cmp	r2, #0
 8003cf2:	d104      	bne.n	8003cfe <TRACE_TxCpltCallback+0x52>
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8003cf4:	8a1a      	ldrh	r2, [r3, #16]
 8003cf6:	4291      	cmp	r1, r2
 8003cf8:	d912      	bls.n	8003d20 <TRACE_TxCpltCallback+0x74>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8003cfa:	1a89      	subs	r1, r1, r2
 8003cfc:	8299      	strh	r1, [r3, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfe:	f384 8810 	msr	PRIMASK, r4
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 8003d02:	8a18      	ldrh	r0, [r3, #16]
 8003d04:	8a99      	ldrh	r1, [r3, #20]
 8003d06:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <TRACE_TxCpltCallback+0x8c>)
 8003d08:	18c0      	adds	r0, r0, r3
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <TRACE_TxCpltCallback+0x90>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	9301      	str	r3, [sp, #4]
 8003d10:	4798      	blx	r3
}
 8003d12:	bd13      	pop	{r0, r1, r4, pc}
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8003d14:	8a1a      	ldrh	r2, [r3, #16]
 8003d16:	8a99      	ldrh	r1, [r3, #20]
 8003d18:	1852      	adds	r2, r2, r1
 8003d1a:	05d2      	lsls	r2, r2, #23
 8003d1c:	0dd2      	lsrs	r2, r2, #23
 8003d1e:	e7cf      	b.n	8003cc0 <TRACE_TxCpltCallback+0x14>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8003d20:	2180      	movs	r1, #128	; 0x80
 8003d22:	0089      	lsls	r1, r1, #2
 8003d24:	e7e9      	b.n	8003cfa <TRACE_TxCpltCallback+0x4e>
    UTIL_ADV_TRACE_PostSendHook();      
 8003d26:	f7fd f8a3 	bl	8000e70 <UTIL_ADV_TRACE_PostSendHook>
 8003d2a:	f384 8810 	msr	PRIMASK, r4
    TRACE_UnLock();
 8003d2e:	f7ff fee3 	bl	8003af8 <TRACE_UnLock>
}
 8003d32:	e7ee      	b.n	8003d12 <TRACE_TxCpltCallback+0x66>
 8003d34:	20000104 	.word	0x20000104
 8003d38:	2000021c 	.word	0x2000021c
 8003d3c:	08004b10 	.word	0x08004b10

08003d40 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8003d40:	2200      	movs	r2, #0
 8003d42:	4b02      	ldr	r3, [pc, #8]	; (8003d4c <UTIL_LPM_Init+0xc>)
 8003d44:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8003d46:	605a      	str	r2, [r3, #4]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8003d48:	4770      	bx	lr
 8003d4a:	46c0      	nop			; (mov r8, r8)
 8003d4c:	2000041c 	.word	0x2000041c

08003d50 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8003d50:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d52:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003d56:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 8003d58:	2900      	cmp	r1, #0
 8003d5a:	d008      	beq.n	8003d6e <UTIL_LPM_SetStopMode+0x1e>
 8003d5c:	2901      	cmp	r1, #1
 8003d5e:	d103      	bne.n	8003d68 <UTIL_LPM_SetStopMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <UTIL_LPM_SetStopMode+0x28>)
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	4310      	orrs	r0, r2
 8003d66:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d68:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8003d6c:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 8003d6e:	4a02      	ldr	r2, [pc, #8]	; (8003d78 <UTIL_LPM_SetStopMode+0x28>)
 8003d70:	6813      	ldr	r3, [r2, #0]
 8003d72:	4383      	bics	r3, r0
 8003d74:	6013      	str	r3, [r2, #0]
      break;
 8003d76:	e7f7      	b.n	8003d68 <UTIL_LPM_SetStopMode+0x18>
 8003d78:	2000041c 	.word	0x2000041c

08003d7c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8003d7c:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d7e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003d82:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8003d84:	2900      	cmp	r1, #0
 8003d86:	d008      	beq.n	8003d9a <UTIL_LPM_SetOffMode+0x1e>
 8003d88:	2901      	cmp	r1, #1
 8003d8a:	d103      	bne.n	8003d94 <UTIL_LPM_SetOffMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <UTIL_LPM_SetOffMode+0x28>)
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	4310      	orrs	r0, r2
 8003d92:	6058      	str	r0, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d94:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8003d98:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 8003d9a:	4a02      	ldr	r2, [pc, #8]	; (8003da4 <UTIL_LPM_SetOffMode+0x28>)
 8003d9c:	6853      	ldr	r3, [r2, #4]
 8003d9e:	4383      	bics	r3, r0
 8003da0:	6053      	str	r3, [r2, #4]
      break;
 8003da2:	e7f7      	b.n	8003d94 <UTIL_LPM_SetOffMode+0x18>
 8003da4:	2000041c 	.word	0x2000041c

08003da8 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003dac:	b672      	cpsid	i
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 8003dae:	2000      	movs	r0, #0
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 8003db0:	4b05      	ldr	r3, [pc, #20]	; (8003dc8 <UTIL_LPM_GetMode+0x20>)
 8003db2:	6819      	ldr	r1, [r3, #0]
 8003db4:	4281      	cmp	r1, r0
 8003db6:	d103      	bne.n	8003dc0 <UTIL_LPM_GetMode+0x18>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8003db8:	6858      	ldr	r0, [r3, #4]
       */
      mode_selected = UTIL_LPM_STOPMODE;
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 8003dba:	4243      	negs	r3, r0
 8003dbc:	4158      	adcs	r0, r3
 8003dbe:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc0:	f382 8810 	msr	PRIMASK, r2
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 8003dc4:	4770      	bx	lr
 8003dc6:	46c0      	nop			; (mov r8, r8)
 8003dc8:	2000041c 	.word	0x2000041c

08003dcc <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8003dcc:	4b04      	ldr	r3, [pc, #16]	; (8003de0 <UTIL_MEM_set_8+0x14>)
 8003dce:	3a01      	subs	r2, #1
 8003dd0:	b292      	uxth	r2, r2
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d100      	bne.n	8003dd8 <UTIL_MEM_set_8+0xc>
  {
    *dst8++ = value;
  }
}
 8003dd6:	4770      	bx	lr
    *dst8++ = value;
 8003dd8:	7001      	strb	r1, [r0, #0]
 8003dda:	3001      	adds	r0, #1
 8003ddc:	e7f7      	b.n	8003dce <UTIL_MEM_set_8+0x2>
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	0000ffff 	.word	0x0000ffff

08003de4 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 8003de4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8003de6:	2300      	movs	r3, #0
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8003de8:	4e11      	ldr	r6, [pc, #68]	; (8003e30 <SysTimeGet+0x4c>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 8003dea:	aa02      	add	r2, sp, #8
 8003dec:	8093      	strh	r3, [r2, #4]
 8003dee:	9302      	str	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8003df0:	6933      	ldr	r3, [r6, #16]
{
 8003df2:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8003df4:	a803      	add	r0, sp, #12
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8003dfa:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8003dfc:	9002      	str	r0, [sp, #8]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8003e02:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 8003e04:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8003e06:	9301      	str	r3, [sp, #4]
 8003e08:	4798      	blx	r3
  c.Seconds = a.Seconds + b.Seconds;
 8003e0a:	9b02      	ldr	r3, [sp, #8]
  if( c.SubSeconds >= 1000 )
 8003e0c:	4909      	ldr	r1, [pc, #36]	; (8003e34 <SysTimeGet+0x50>)
  c.Seconds = a.Seconds + b.Seconds;
 8003e0e:	18c0      	adds	r0, r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8003e10:	ab02      	add	r3, sp, #8
 8003e12:	889b      	ldrh	r3, [r3, #4]
 8003e14:	195b      	adds	r3, r3, r5
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	b21a      	sxth	r2, r3
  if( c.SubSeconds >= 1000 )
 8003e1a:	428a      	cmp	r2, r1
 8003e1c:	dd03      	ble.n	8003e26 <SysTimeGet+0x42>
    c.SubSeconds -= 1000;
 8003e1e:	4a06      	ldr	r2, [pc, #24]	; (8003e38 <SysTimeGet+0x54>)
    c.Seconds++;
 8003e20:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 8003e22:	189b      	adds	r3, r3, r2
 8003e24:	b21a      	sxth	r2, r3

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 8003e26:	6020      	str	r0, [r4, #0]
}
 8003e28:	0020      	movs	r0, r4
  return sysTime;
 8003e2a:	80a2      	strh	r2, [r4, #4]
}
 8003e2c:	b004      	add	sp, #16
 8003e2e:	bd70      	pop	{r4, r5, r6, pc}
 8003e30:	08004ad0 	.word	0x08004ad0
 8003e34:	000003e7 	.word	0x000003e7
 8003e38:	fffffc18 	.word	0xfffffc18

08003e3c <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 8003e3c:	2200      	movs	r2, #0
{
 8003e3e:	b510      	push	{r4, lr}
  TimerListHead = NULL;
 8003e40:	4b02      	ldr	r3, [pc, #8]	; (8003e4c <UTIL_TIMER_Init+0x10>)
 8003e42:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8003e44:	4b02      	ldr	r3, [pc, #8]	; (8003e50 <UTIL_TIMER_Init+0x14>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4798      	blx	r3
}
 8003e4a:	bd10      	pop	{r4, pc}
 8003e4c:	20000424 	.word	0x20000424
 8003e50:	08004ae4 	.word	0x08004ae4

08003e54 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8003e54:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <TimerExists+0x18>)
 8003e56:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <TimerExists+0xc>
    {
      return true;
    }
    cur = cur->Next;
  }
  return false;
 8003e5c:	0018      	movs	r0, r3
}
 8003e5e:	4770      	bx	lr
    if( cur == TimerObject )
 8003e60:	4283      	cmp	r3, r0
 8003e62:	d001      	beq.n	8003e68 <TimerExists+0x14>
    cur = cur->Next;
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	e7f7      	b.n	8003e58 <TimerExists+0x4>
      return true;
 8003e68:	2001      	movs	r0, #1
 8003e6a:	e7f8      	b.n	8003e5e <TimerExists+0xa>
 8003e6c:	20000424 	.word	0x20000424

08003e70 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8003e70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8003e72:	4d0c      	ldr	r5, [pc, #48]	; (8003ea4 <TimerSetTimeout+0x34>)
{
 8003e74:	0004      	movs	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8003e76:	6a2b      	ldr	r3, [r5, #32]
 8003e78:	9301      	str	r3, [sp, #4]
 8003e7a:	4798      	blx	r3
  TimerObject->IsPending = 1;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8003e80:	69ab      	ldr	r3, [r5, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8003e82:	0006      	movs	r6, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8003e84:	6827      	ldr	r7, [r4, #0]
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	4798      	blx	r3
 8003e8a:	1980      	adds	r0, r0, r6
 8003e8c:	4287      	cmp	r7, r0
 8003e8e:	d203      	bcs.n	8003e98 <TimerSetTimeout+0x28>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 8003e90:	9b01      	ldr	r3, [sp, #4]
 8003e92:	4798      	blx	r3
 8003e94:	1986      	adds	r6, r0, r6
 8003e96:	6026      	str	r6, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8003e98:	68ab      	ldr	r3, [r5, #8]
 8003e9a:	6820      	ldr	r0, [r4, #0]
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	4798      	blx	r3
}
 8003ea0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	08004ae4 	.word	0x08004ae4

08003ea8 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8003ea8:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <TimerInsertTimer+0x28>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8003eac:	695a      	ldr	r2, [r3, #20]

  while (cur->Next != NULL )
 8003eae:	6959      	ldr	r1, [r3, #20]
 8003eb0:	2900      	cmp	r1, #0
 8003eb2:	d102      	bne.n	8003eba <TimerInsertTimer+0x12>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 8003eb4:	6158      	str	r0, [r3, #20]
  TimerObject->Next = NULL;
 8003eb6:	6141      	str	r1, [r0, #20]
 8003eb8:	e009      	b.n	8003ece <TimerInsertTimer+0x26>
    if( TimerObject->Timestamp  > next->Timestamp )
 8003eba:	6801      	ldr	r1, [r0, #0]
 8003ebc:	468c      	mov	ip, r1
 8003ebe:	6811      	ldr	r1, [r2, #0]
 8003ec0:	458c      	cmp	ip, r1
 8003ec2:	d902      	bls.n	8003eca <TimerInsertTimer+0x22>
 8003ec4:	0013      	movs	r3, r2
        next = next->Next;
 8003ec6:	6952      	ldr	r2, [r2, #20]
 8003ec8:	e7f1      	b.n	8003eae <TimerInsertTimer+0x6>
        cur->Next = TimerObject;
 8003eca:	6158      	str	r0, [r3, #20]
        TimerObject->Next = next;
 8003ecc:	6142      	str	r2, [r0, #20]
}
 8003ece:	4770      	bx	lr
 8003ed0:	20000424 	.word	0x20000424

08003ed4 <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8003ed4:	4a05      	ldr	r2, [pc, #20]	; (8003eec <TimerInsertNewHeadTimer+0x18>)
{
 8003ed6:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8003ed8:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsPending = 0;
 8003ede:	2100      	movs	r1, #0
 8003ee0:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 8003ee2:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8003ee4:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 8003ee6:	f7ff ffc3 	bl	8003e70 <TimerSetTimeout>
}
 8003eea:	bd10      	pop	{r4, pc}
 8003eec:	20000424 	.word	0x20000424

08003ef0 <UTIL_TIMER_Start>:
{
 8003ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ef2:	0004      	movs	r4, r0
    ret =  UTIL_TIMER_INVALID_PARAM;
 8003ef4:	2501      	movs	r5, #1
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8003ef6:	2800      	cmp	r0, #0
 8003ef8:	d024      	beq.n	8003f44 <UTIL_TIMER_Start+0x54>
 8003efa:	f7ff ffab 	bl	8003e54 <TimerExists>
 8003efe:	2800      	cmp	r0, #0
 8003f00:	d120      	bne.n	8003f44 <UTIL_TIMER_Start+0x54>
 8003f02:	7a63      	ldrb	r3, [r4, #9]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d11d      	bne.n	8003f44 <UTIL_TIMER_Start+0x54>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f08:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003f0c:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8003f0e:	4d15      	ldr	r5, [pc, #84]	; (8003f64 <UTIL_TIMER_Start+0x74>)
    ticks = TimerObject->ReloadValue;
 8003f10:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8003f12:	6a2b      	ldr	r3, [r5, #32]
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 8003f18:	4287      	cmp	r7, r0
 8003f1a:	d200      	bcs.n	8003f1e <UTIL_TIMER_Start+0x2e>
 8003f1c:	0007      	movs	r7, r0
    TimerObject->IsPending = 0U;
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	8123      	strh	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8003f24:	2300      	movs	r3, #0
    TimerObject->Timestamp = ticks;
 8003f26:	6027      	str	r7, [r4, #0]
    if( TimerListHead == NULL )
 8003f28:	4f0f      	ldr	r7, [pc, #60]	; (8003f68 <UTIL_TIMER_Start+0x78>)
    TimerObject->IsRunning = 1U;
 8003f2a:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10a      	bne.n	8003f48 <UTIL_TIMER_Start+0x58>
      UTIL_TimerDriver.SetTimerContext();
 8003f32:	692b      	ldr	r3, [r5, #16]
 8003f34:	9301      	str	r3, [sp, #4]
 8003f36:	4798      	blx	r3
        TimerInsertNewHeadTimer( TimerObject);
 8003f38:	0020      	movs	r0, r4
 8003f3a:	f7ff ffcb 	bl	8003ed4 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3e:	f386 8810 	msr	PRIMASK, r6
 8003f42:	2500      	movs	r5, #0
}
 8003f44:	0028      	movs	r0, r5
 8003f46:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8003f48:	69ab      	ldr	r3, [r5, #24]
 8003f4a:	9301      	str	r3, [sp, #4]
 8003f4c:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8003f4e:	6823      	ldr	r3, [r4, #0]
 8003f50:	18c0      	adds	r0, r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8003f52:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 8003f54:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4298      	cmp	r0, r3
 8003f5a:	d3ed      	bcc.n	8003f38 <UTIL_TIMER_Start+0x48>
        TimerInsertTimer( TimerObject);
 8003f5c:	0020      	movs	r0, r4
 8003f5e:	f7ff ffa3 	bl	8003ea8 <TimerInsertTimer>
 8003f62:	e7ec      	b.n	8003f3e <UTIL_TIMER_Start+0x4e>
 8003f64:	08004ae4 	.word	0x08004ae4
 8003f68:	20000424 	.word	0x20000424

08003f6c <UTIL_TIMER_IRQ_Handler>:
{
 8003f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003f72:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8003f74:	4e1f      	ldr	r6, [pc, #124]	; (8003ff4 <UTIL_TIMER_IRQ_Handler+0x88>)
 8003f76:	6973      	ldr	r3, [r6, #20]
 8003f78:	9301      	str	r3, [sp, #4]
 8003f7a:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8003f7c:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8003f7e:	0004      	movs	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	4798      	blx	r3
        cur->Timestamp = 0;
 8003f84:	2100      	movs	r1, #0
  if ( TimerListHead != NULL )
 8003f86:	4d1c      	ldr	r5, [pc, #112]	; (8003ff8 <UTIL_TIMER_IRQ_Handler+0x8c>)
  DeltaContext = now  - old; /*intentional wrap around */
 8003f88:	1b04      	subs	r4, r0, r4
  if ( TimerListHead != NULL )
 8003f8a:	682b      	ldr	r3, [r5, #0]
 8003f8c:	428b      	cmp	r3, r1
 8003f8e:	d007      	beq.n	8003fa0 <UTIL_TIMER_IRQ_Handler+0x34>
      if (cur->Timestamp > DeltaContext)
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	42a2      	cmp	r2, r4
 8003f94:	d90d      	bls.n	8003fb2 <UTIL_TIMER_IRQ_Handler+0x46>
        cur->Timestamp -= DeltaContext;
 8003f96:	1b12      	subs	r2, r2, r4
 8003f98:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8003f9a:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d1f7      	bne.n	8003f90 <UTIL_TIMER_IRQ_Handler+0x24>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8003fa0:	682b      	ldr	r3, [r5, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d107      	bne.n	8003fb6 <UTIL_TIMER_IRQ_Handler+0x4a>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8003fa6:	6828      	ldr	r0, [r5, #0]
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	d11d      	bne.n	8003fe8 <UTIL_TIMER_IRQ_Handler+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fac:	f387 8810 	msr	PRIMASK, r7
}
 8003fb0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        cur->Timestamp = 0;
 8003fb2:	6019      	str	r1, [r3, #0]
 8003fb4:	e7f1      	b.n	8003f9a <UTIL_TIMER_IRQ_Handler+0x2e>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8003fb6:	681c      	ldr	r4, [r3, #0]
 8003fb8:	2c00      	cmp	r4, #0
 8003fba:	d004      	beq.n	8003fc6 <UTIL_TIMER_IRQ_Handler+0x5a>
 8003fbc:	69b3      	ldr	r3, [r6, #24]
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	4798      	blx	r3
 8003fc2:	4284      	cmp	r4, r0
 8003fc4:	d2ef      	bcs.n	8003fa6 <UTIL_TIMER_IRQ_Handler+0x3a>
      cur = TimerListHead;
 8003fc6:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 8003fc8:	6963      	ldr	r3, [r4, #20]
      cur->Callback(cur->argument);
 8003fca:	6920      	ldr	r0, [r4, #16]
      TimerListHead = TimerListHead->Next;
 8003fcc:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	8123      	strh	r3, [r4, #8]
      cur->Callback(cur->argument);
 8003fd2:	68e3      	ldr	r3, [r4, #12]
 8003fd4:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8003fd6:	2280      	movs	r2, #128	; 0x80
 8003fd8:	8963      	ldrh	r3, [r4, #10]
 8003fda:	0052      	lsls	r2, r2, #1
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d1df      	bne.n	8003fa0 <UTIL_TIMER_IRQ_Handler+0x34>
        (void)UTIL_TIMER_Start(cur);
 8003fe0:	0020      	movs	r0, r4
 8003fe2:	f7ff ff85 	bl	8003ef0 <UTIL_TIMER_Start>
 8003fe6:	e7db      	b.n	8003fa0 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8003fe8:	7a03      	ldrb	r3, [r0, #8]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1de      	bne.n	8003fac <UTIL_TIMER_IRQ_Handler+0x40>
    TimerSetTimeout( TimerListHead );
 8003fee:	f7ff ff3f 	bl	8003e70 <TimerSetTimeout>
 8003ff2:	e7db      	b.n	8003fac <UTIL_TIMER_IRQ_Handler+0x40>
 8003ff4:	08004ae4 	.word	0x08004ae4
 8003ff8:	20000424 	.word	0x20000424

08003ffc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8003ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ffe:	b09d      	sub	sp, #116	; 0x74
 8004000:	9004      	str	r0, [sp, #16]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 8004002:	2000      	movs	r0, #0
{
 8004004:	9109      	str	r1, [sp, #36]	; 0x24
  if (size <= 0)
 8004006:	4281      	cmp	r1, r0
 8004008:	dd0a      	ble.n	8004020 <tiny_vsnprintf_like+0x24>
 800400a:	001e      	movs	r6, r3
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800400c:	9c04      	ldr	r4, [sp, #16]
 800400e:	9904      	ldr	r1, [sp, #16]
 8004010:	7813      	ldrb	r3, [r2, #0]
 8004012:	1a60      	subs	r0, r4, r1
 8004014:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004016:	1e4f      	subs	r7, r1, #1
 8004018:	2b00      	cmp	r3, #0
 800401a:	d103      	bne.n	8004024 <tiny_vsnprintf_like+0x28>
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
 800401c:	2300      	movs	r3, #0
 800401e:	7023      	strb	r3, [r4, #0]
  return str - buf;
}
 8004020:	b01d      	add	sp, #116	; 0x74
 8004022:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 8004024:	4287      	cmp	r7, r0
 8004026:	ddf9      	ble.n	800401c <tiny_vsnprintf_like+0x20>
    if (*fmt != '%')
 8004028:	2b25      	cmp	r3, #37	; 0x25
 800402a:	d005      	beq.n	8004038 <tiny_vsnprintf_like+0x3c>
      *str++ = *fmt;
 800402c:	7023      	strb	r3, [r4, #0]
      continue;
 800402e:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 8004030:	3401      	adds	r4, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8004032:	9a01      	ldr	r2, [sp, #4]
 8004034:	3201      	adds	r2, #1
 8004036:	e7ea      	b.n	800400e <tiny_vsnprintf_like+0x12>
 8004038:	1c53      	adds	r3, r2, #1
    if (*fmt == '0')
 800403a:	7852      	ldrb	r2, [r2, #1]
 800403c:	9301      	str	r3, [sp, #4]
 800403e:	3a30      	subs	r2, #48	; 0x30
 8004040:	4251      	negs	r1, r2
 8004042:	4151      	adcs	r1, r2
    if (is_digit(*fmt))
 8004044:	b2d2      	uxtb	r2, r2
    flags = 0;
 8004046:	000b      	movs	r3, r1
    if (is_digit(*fmt))
 8004048:	2a09      	cmp	r2, #9
 800404a:	d935      	bls.n	80040b8 <tiny_vsnprintf_like+0xbc>
    field_width = -1;
 800404c:	2201      	movs	r2, #1
 800404e:	4252      	negs	r2, r2
 8004050:	9202      	str	r2, [sp, #8]
    switch (*fmt)
 8004052:	9a01      	ldr	r2, [sp, #4]
 8004054:	7812      	ldrb	r2, [r2, #0]
 8004056:	2a69      	cmp	r2, #105	; 0x69
 8004058:	d100      	bne.n	800405c <tiny_vsnprintf_like+0x60>
 800405a:	e094      	b.n	8004186 <tiny_vsnprintf_like+0x18a>
 800405c:	d82e      	bhi.n	80040bc <tiny_vsnprintf_like+0xc0>
 800405e:	2a63      	cmp	r2, #99	; 0x63
 8004060:	d050      	beq.n	8004104 <tiny_vsnprintf_like+0x108>
 8004062:	2a64      	cmp	r2, #100	; 0x64
 8004064:	d100      	bne.n	8004068 <tiny_vsnprintf_like+0x6c>
 8004066:	e08e      	b.n	8004186 <tiny_vsnprintf_like+0x18a>
 8004068:	2a58      	cmp	r2, #88	; 0x58
 800406a:	d057      	beq.n	800411c <tiny_vsnprintf_like+0x120>
        if (*fmt != '%') *str++ = '%';
 800406c:	2a25      	cmp	r2, #37	; 0x25
 800406e:	d002      	beq.n	8004076 <tiny_vsnprintf_like+0x7a>
 8004070:	2225      	movs	r2, #37	; 0x25
 8004072:	7022      	strb	r2, [r4, #0]
 8004074:	3401      	adds	r4, #1
        CHECK_STR_SIZE(buf, str, size);
 8004076:	9a04      	ldr	r2, [sp, #16]
 8004078:	1aa2      	subs	r2, r4, r2
 800407a:	42ba      	cmp	r2, r7
 800407c:	db00      	blt.n	8004080 <tiny_vsnprintf_like+0x84>
 800407e:	e084      	b.n	800418a <tiny_vsnprintf_like+0x18e>
        if (*fmt)
 8004080:	9a01      	ldr	r2, [sp, #4]
 8004082:	7812      	ldrb	r2, [r2, #0]
 8004084:	2a00      	cmp	r2, #0
 8004086:	d100      	bne.n	800408a <tiny_vsnprintf_like+0x8e>
 8004088:	e081      	b.n	800418e <tiny_vsnprintf_like+0x192>
          *str++ = *fmt;
 800408a:	7022      	strb	r2, [r4, #0]
 800408c:	3401      	adds	r4, #1
        CHECK_STR_SIZE(buf, str, size);
 800408e:	9a04      	ldr	r2, [sp, #16]
 8004090:	1aa2      	subs	r2, r4, r2
 8004092:	42ba      	cmp	r2, r7
 8004094:	da79      	bge.n	800418a <tiny_vsnprintf_like+0x18e>
 8004096:	e7cc      	b.n	8004032 <tiny_vsnprintf_like+0x36>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8004098:	250a      	movs	r5, #10
 800409a:	9a01      	ldr	r2, [sp, #4]
 800409c:	3201      	adds	r2, #1
 800409e:	9201      	str	r2, [sp, #4]
 80040a0:	9a02      	ldr	r2, [sp, #8]
 80040a2:	436a      	muls	r2, r5
 80040a4:	1812      	adds	r2, r2, r0
 80040a6:	3a30      	subs	r2, #48	; 0x30
  int i = 0;
 80040a8:	9202      	str	r2, [sp, #8]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 80040aa:	9a01      	ldr	r2, [sp, #4]
 80040ac:	7810      	ldrb	r0, [r2, #0]
 80040ae:	0002      	movs	r2, r0
 80040b0:	3a30      	subs	r2, #48	; 0x30
 80040b2:	2a09      	cmp	r2, #9
 80040b4:	d9f0      	bls.n	8004098 <tiny_vsnprintf_like+0x9c>
 80040b6:	e7cc      	b.n	8004052 <tiny_vsnprintf_like+0x56>
  int i = 0;
 80040b8:	2200      	movs	r2, #0
 80040ba:	e7f5      	b.n	80040a8 <tiny_vsnprintf_like+0xac>
    switch (*fmt)
 80040bc:	2a75      	cmp	r2, #117	; 0x75
 80040be:	d064      	beq.n	800418a <tiny_vsnprintf_like+0x18e>
 80040c0:	2a78      	cmp	r2, #120	; 0x78
 80040c2:	d02d      	beq.n	8004120 <tiny_vsnprintf_like+0x124>
 80040c4:	2a73      	cmp	r2, #115	; 0x73
 80040c6:	d1d1      	bne.n	800406c <tiny_vsnprintf_like+0x70>
        s = va_arg(args, char *);
 80040c8:	1d35      	adds	r5, r6, #4
 80040ca:	6836      	ldr	r6, [r6, #0]
        if (!s) s = "<NULL>";
 80040cc:	2e00      	cmp	r6, #0
 80040ce:	d100      	bne.n	80040d2 <tiny_vsnprintf_like+0xd6>
 80040d0:	4e53      	ldr	r6, [pc, #332]	; (8004220 <tiny_vsnprintf_like+0x224>)
        len = strlen(s);
 80040d2:	0030      	movs	r0, r6
 80040d4:	f7fc f818 	bl	8000108 <strlen>
 80040d8:	9b02      	ldr	r3, [sp, #8]
 80040da:	18e2      	adds	r2, r4, r3
 80040dc:	1b13      	subs	r3, r2, r4
          while (len < field_width--) *str++ = ' ';
 80040de:	4298      	cmp	r0, r3
 80040e0:	db14      	blt.n	800410c <tiny_vsnprintf_like+0x110>
        for (i = 0; i < len; ++i) *str++ = *s++;
 80040e2:	2300      	movs	r3, #0
 80040e4:	4283      	cmp	r3, r0
 80040e6:	db15      	blt.n	8004114 <tiny_vsnprintf_like+0x118>
 80040e8:	1824      	adds	r4, r4, r0
        s = va_arg(args, char *);
 80040ea:	002e      	movs	r6, r5
 80040ec:	e7a1      	b.n	8004032 <tiny_vsnprintf_like+0x36>
          while (--field_width > 0) *str++ = ' ';
 80040ee:	2220      	movs	r2, #32
 80040f0:	701a      	strb	r2, [r3, #0]
 80040f2:	0023      	movs	r3, r4
 80040f4:	1c5c      	adds	r4, r3, #1
 80040f6:	1b0a      	subs	r2, r1, r4
 80040f8:	2a00      	cmp	r2, #0
 80040fa:	dcf8      	bgt.n	80040ee <tiny_vsnprintf_like+0xf2>
        *str++ = (unsigned char) va_arg(args, int);
 80040fc:	6832      	ldr	r2, [r6, #0]
 80040fe:	3604      	adds	r6, #4
 8004100:	701a      	strb	r2, [r3, #0]
        continue;
 8004102:	e796      	b.n	8004032 <tiny_vsnprintf_like+0x36>
 8004104:	9a02      	ldr	r2, [sp, #8]
    switch (*fmt)
 8004106:	0023      	movs	r3, r4
 8004108:	18a1      	adds	r1, r4, r2
 800410a:	e7f3      	b.n	80040f4 <tiny_vsnprintf_like+0xf8>
          while (len < field_width--) *str++ = ' ';
 800410c:	2320      	movs	r3, #32
 800410e:	7023      	strb	r3, [r4, #0]
 8004110:	3401      	adds	r4, #1
 8004112:	e7e3      	b.n	80040dc <tiny_vsnprintf_like+0xe0>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8004114:	5cf2      	ldrb	r2, [r6, r3]
 8004116:	54e2      	strb	r2, [r4, r3]
 8004118:	3301      	adds	r3, #1
 800411a:	e7e3      	b.n	80040e4 <tiny_vsnprintf_like+0xe8>
        flags |= UPPERCASE;
 800411c:	2340      	movs	r3, #64	; 0x40
 800411e:	430b      	orrs	r3, r1
        base = 16;
 8004120:	2210      	movs	r2, #16
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8004122:	9d04      	ldr	r5, [sp, #16]
    else if (flags & SIGN)
 8004124:	2102      	movs	r1, #2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8004126:	1b65      	subs	r5, r4, r5
 8004128:	1b7d      	subs	r5, r7, r5
  if (type & UPPERCASE)  dig = upper_digits;
 800412a:	2740      	movs	r7, #64	; 0x40
 800412c:	46bc      	mov	ip, r7
 800412e:	4f3d      	ldr	r7, [pc, #244]	; (8004224 <tiny_vsnprintf_like+0x228>)
    base = 10;
 8004130:	9203      	str	r2, [sp, #12]
  if (type & UPPERCASE)  dig = upper_digits;
 8004132:	9707      	str	r7, [sp, #28]
 8004134:	4667      	mov	r7, ip
 8004136:	ce04      	ldmia	r6!, {r2}
    else if (flags & SIGN)
 8004138:	4019      	ands	r1, r3
 800413a:	0010      	movs	r0, r2
  if (type & UPPERCASE)  dig = upper_digits;
 800413c:	423b      	tst	r3, r7
 800413e:	d101      	bne.n	8004144 <tiny_vsnprintf_like+0x148>
  char *dig = lower_digits;
 8004140:	4f39      	ldr	r7, [pc, #228]	; (8004228 <tiny_vsnprintf_like+0x22c>)
 8004142:	9707      	str	r7, [sp, #28]
  c = (type & ZEROPAD) ? '0' : ' ';
 8004144:	2701      	movs	r7, #1
 8004146:	403b      	ands	r3, r7
 8004148:	9306      	str	r3, [sp, #24]
 800414a:	2320      	movs	r3, #32
 800414c:	9308      	str	r3, [sp, #32]
 800414e:	9b06      	ldr	r3, [sp, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <tiny_vsnprintf_like+0x15c>
 8004154:	2330      	movs	r3, #48	; 0x30
 8004156:	9308      	str	r3, [sp, #32]
  if (type & SIGN)
 8004158:	2900      	cmp	r1, #0
 800415a:	d01c      	beq.n	8004196 <tiny_vsnprintf_like+0x19a>
    if (num < 0)
 800415c:	2a00      	cmp	r2, #0
 800415e:	da1a      	bge.n	8004196 <tiny_vsnprintf_like+0x19a>
      size--;
 8004160:	9b02      	ldr	r3, [sp, #8]
      num = -num;
 8004162:	4250      	negs	r0, r2
      size--;
 8004164:	3b01      	subs	r3, #1
 8004166:	9302      	str	r3, [sp, #8]
      sign = '-';
 8004168:	232d      	movs	r3, #45	; 0x2d
  if (base < 2 || base > 36) return 0;
 800416a:	2700      	movs	r7, #0
  if (num == 0)
 800416c:	9305      	str	r3, [sp, #20]
 800416e:	9903      	ldr	r1, [sp, #12]
 8004170:	f7fc f86c 	bl	800024c <__aeabi_uidivmod>
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8004174:	9a07      	ldr	r2, [sp, #28]
 8004176:	3701      	adds	r7, #1
 8004178:	5c52      	ldrb	r2, [r2, r1]
 800417a:	1e7b      	subs	r3, r7, #1
 800417c:	a90b      	add	r1, sp, #44	; 0x2c
 800417e:	54ca      	strb	r2, [r1, r3]
    while (num != 0)
 8004180:	2800      	cmp	r0, #0
 8004182:	d1f4      	bne.n	800416e <tiny_vsnprintf_like+0x172>
 8004184:	e00e      	b.n	80041a4 <tiny_vsnprintf_like+0x1a8>
        flags |= SIGN;
 8004186:	2302      	movs	r3, #2
 8004188:	430b      	orrs	r3, r1
    base = 10;
 800418a:	220a      	movs	r2, #10
 800418c:	e7c9      	b.n	8004122 <tiny_vsnprintf_like+0x126>
          --fmt;
 800418e:	9a01      	ldr	r2, [sp, #4]
 8004190:	3a01      	subs	r2, #1
 8004192:	9201      	str	r2, [sp, #4]
 8004194:	e77b      	b.n	800408e <tiny_vsnprintf_like+0x92>
  if (num == 0)
 8004196:	2a00      	cmp	r2, #0
 8004198:	d13f      	bne.n	800421a <tiny_vsnprintf_like+0x21e>
    tmp[i++] = '0';
 800419a:	2130      	movs	r1, #48	; 0x30
 800419c:	2701      	movs	r7, #1
 800419e:	ab0b      	add	r3, sp, #44	; 0x2c
 80041a0:	7019      	strb	r1, [r3, #0]
 80041a2:	9205      	str	r2, [sp, #20]
  size -= precision;
 80041a4:	9b02      	ldr	r3, [sp, #8]
 80041a6:	1bda      	subs	r2, r3, r7
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80041a8:	9b06      	ldr	r3, [sp, #24]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d017      	beq.n	80041de <tiny_vsnprintf_like+0x1e2>
  if (sign) ASSIGN_STR(sign);
 80041ae:	9b05      	ldr	r3, [sp, #20]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d02d      	beq.n	8004210 <tiny_vsnprintf_like+0x214>
 80041b4:	9905      	ldr	r1, [sp, #20]
 80041b6:	3d01      	subs	r5, #1
 80041b8:	1c63      	adds	r3, r4, #1
 80041ba:	7021      	strb	r1, [r4, #0]
 80041bc:	2d00      	cmp	r5, #0
 80041be:	d128      	bne.n	8004212 <tiny_vsnprintf_like+0x216>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 80041c0:	001c      	movs	r4, r3
 80041c2:	e736      	b.n	8004032 <tiny_vsnprintf_like+0x36>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 80041c4:	2020      	movs	r0, #32
 80041c6:	7020      	strb	r0, [r4, #0]
 80041c8:	1850      	adds	r0, r2, r1
 80041ca:	1c63      	adds	r3, r4, #1
 80041cc:	2800      	cmp	r0, #0
 80041ce:	d0f7      	beq.n	80041c0 <tiny_vsnprintf_like+0x1c4>
 80041d0:	001c      	movs	r4, r3
 80041d2:	1855      	adds	r5, r2, r1
 80041d4:	3a01      	subs	r2, #1
 80041d6:	1c53      	adds	r3, r2, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	dcf3      	bgt.n	80041c4 <tiny_vsnprintf_like+0x1c8>
 80041dc:	e7e7      	b.n	80041ae <tiny_vsnprintf_like+0x1b2>
 80041de:	1aa9      	subs	r1, r5, r2
 80041e0:	e7f7      	b.n	80041d2 <tiny_vsnprintf_like+0x1d6>
  while (size-- > 0) ASSIGN_STR(c);
 80041e2:	9808      	ldr	r0, [sp, #32]
 80041e4:	1c59      	adds	r1, r3, #1
 80041e6:	3d01      	subs	r5, #1
 80041e8:	7018      	strb	r0, [r3, #0]
 80041ea:	000b      	movs	r3, r1
 80041ec:	2d00      	cmp	r5, #0
 80041ee:	d0e7      	beq.n	80041c0 <tiny_vsnprintf_like+0x1c4>
 80041f0:	1951      	adds	r1, r2, r5
 80041f2:	2900      	cmp	r1, #0
 80041f4:	dcf5      	bgt.n	80041e2 <tiny_vsnprintf_like+0x1e6>
 80041f6:	003a      	movs	r2, r7
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80041f8:	a80b      	add	r0, sp, #44	; 0x2c
 80041fa:	3a01      	subs	r2, #1
 80041fc:	d3e0      	bcc.n	80041c0 <tiny_vsnprintf_like+0x1c4>
 80041fe:	5c14      	ldrb	r4, [r2, r0]
 8004200:	1c59      	adds	r1, r3, #1
 8004202:	701c      	strb	r4, [r3, #0]
 8004204:	1bd3      	subs	r3, r2, r7
 8004206:	195b      	adds	r3, r3, r5
 8004208:	2b00      	cmp	r3, #0
 800420a:	d004      	beq.n	8004216 <tiny_vsnprintf_like+0x21a>
 800420c:	000b      	movs	r3, r1
 800420e:	e7f4      	b.n	80041fa <tiny_vsnprintf_like+0x1fe>
  if (sign) ASSIGN_STR(sign);
 8004210:	0023      	movs	r3, r4
 8004212:	1b52      	subs	r2, r2, r5
 8004214:	e7ec      	b.n	80041f0 <tiny_vsnprintf_like+0x1f4>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8004216:	000b      	movs	r3, r1
 8004218:	e7d2      	b.n	80041c0 <tiny_vsnprintf_like+0x1c4>
  if (num == 0)
 800421a:	2300      	movs	r3, #0
 800421c:	e7a5      	b.n	800416a <tiny_vsnprintf_like+0x16e>
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	08004bc8 	.word	0x08004bc8
 8004224:	08004bf4 	.word	0x08004bf4
 8004228:	08004bcf 	.word	0x08004bcf

0800422c <__errno>:
 800422c:	4b01      	ldr	r3, [pc, #4]	; (8004234 <__errno+0x8>)
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	4770      	bx	lr
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	20000010 	.word	0x20000010

08004238 <__libc_init_array>:
 8004238:	b570      	push	{r4, r5, r6, lr}
 800423a:	2600      	movs	r6, #0
 800423c:	4d0c      	ldr	r5, [pc, #48]	; (8004270 <__libc_init_array+0x38>)
 800423e:	4c0d      	ldr	r4, [pc, #52]	; (8004274 <__libc_init_array+0x3c>)
 8004240:	1b64      	subs	r4, r4, r5
 8004242:	10a4      	asrs	r4, r4, #2
 8004244:	42a6      	cmp	r6, r4
 8004246:	d109      	bne.n	800425c <__libc_init_array+0x24>
 8004248:	2600      	movs	r6, #0
 800424a:	f000 fc29 	bl	8004aa0 <_init>
 800424e:	4d0a      	ldr	r5, [pc, #40]	; (8004278 <__libc_init_array+0x40>)
 8004250:	4c0a      	ldr	r4, [pc, #40]	; (800427c <__libc_init_array+0x44>)
 8004252:	1b64      	subs	r4, r4, r5
 8004254:	10a4      	asrs	r4, r4, #2
 8004256:	42a6      	cmp	r6, r4
 8004258:	d105      	bne.n	8004266 <__libc_init_array+0x2e>
 800425a:	bd70      	pop	{r4, r5, r6, pc}
 800425c:	00b3      	lsls	r3, r6, #2
 800425e:	58eb      	ldr	r3, [r5, r3]
 8004260:	4798      	blx	r3
 8004262:	3601      	adds	r6, #1
 8004264:	e7ee      	b.n	8004244 <__libc_init_array+0xc>
 8004266:	00b3      	lsls	r3, r6, #2
 8004268:	58eb      	ldr	r3, [r5, r3]
 800426a:	4798      	blx	r3
 800426c:	3601      	adds	r6, #1
 800426e:	e7f2      	b.n	8004256 <__libc_init_array+0x1e>
 8004270:	08004c54 	.word	0x08004c54
 8004274:	08004c54 	.word	0x08004c54
 8004278:	08004c54 	.word	0x08004c54
 800427c:	08004c58 	.word	0x08004c58

08004280 <memcpy>:
 8004280:	2300      	movs	r3, #0
 8004282:	b510      	push	{r4, lr}
 8004284:	429a      	cmp	r2, r3
 8004286:	d100      	bne.n	800428a <memcpy+0xa>
 8004288:	bd10      	pop	{r4, pc}
 800428a:	5ccc      	ldrb	r4, [r1, r3]
 800428c:	54c4      	strb	r4, [r0, r3]
 800428e:	3301      	adds	r3, #1
 8004290:	e7f8      	b.n	8004284 <memcpy+0x4>

08004292 <memset>:
 8004292:	0003      	movs	r3, r0
 8004294:	1812      	adds	r2, r2, r0
 8004296:	4293      	cmp	r3, r2
 8004298:	d100      	bne.n	800429c <memset+0xa>
 800429a:	4770      	bx	lr
 800429c:	7019      	strb	r1, [r3, #0]
 800429e:	3301      	adds	r3, #1
 80042a0:	e7f9      	b.n	8004296 <memset+0x4>
	...

080042a4 <siprintf>:
 80042a4:	b40e      	push	{r1, r2, r3}
 80042a6:	b500      	push	{lr}
 80042a8:	490b      	ldr	r1, [pc, #44]	; (80042d8 <siprintf+0x34>)
 80042aa:	b09c      	sub	sp, #112	; 0x70
 80042ac:	ab1d      	add	r3, sp, #116	; 0x74
 80042ae:	9002      	str	r0, [sp, #8]
 80042b0:	9006      	str	r0, [sp, #24]
 80042b2:	9107      	str	r1, [sp, #28]
 80042b4:	9104      	str	r1, [sp, #16]
 80042b6:	4809      	ldr	r0, [pc, #36]	; (80042dc <siprintf+0x38>)
 80042b8:	4909      	ldr	r1, [pc, #36]	; (80042e0 <siprintf+0x3c>)
 80042ba:	cb04      	ldmia	r3!, {r2}
 80042bc:	9105      	str	r1, [sp, #20]
 80042be:	6800      	ldr	r0, [r0, #0]
 80042c0:	a902      	add	r1, sp, #8
 80042c2:	9301      	str	r3, [sp, #4]
 80042c4:	f000 f870 	bl	80043a8 <_svfiprintf_r>
 80042c8:	2300      	movs	r3, #0
 80042ca:	9a02      	ldr	r2, [sp, #8]
 80042cc:	7013      	strb	r3, [r2, #0]
 80042ce:	b01c      	add	sp, #112	; 0x70
 80042d0:	bc08      	pop	{r3}
 80042d2:	b003      	add	sp, #12
 80042d4:	4718      	bx	r3
 80042d6:	46c0      	nop			; (mov r8, r8)
 80042d8:	7fffffff 	.word	0x7fffffff
 80042dc:	20000010 	.word	0x20000010
 80042e0:	ffff0208 	.word	0xffff0208

080042e4 <__ssputs_r>:
 80042e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042e6:	688e      	ldr	r6, [r1, #8]
 80042e8:	b085      	sub	sp, #20
 80042ea:	0007      	movs	r7, r0
 80042ec:	000c      	movs	r4, r1
 80042ee:	9203      	str	r2, [sp, #12]
 80042f0:	9301      	str	r3, [sp, #4]
 80042f2:	429e      	cmp	r6, r3
 80042f4:	d83c      	bhi.n	8004370 <__ssputs_r+0x8c>
 80042f6:	2390      	movs	r3, #144	; 0x90
 80042f8:	898a      	ldrh	r2, [r1, #12]
 80042fa:	00db      	lsls	r3, r3, #3
 80042fc:	421a      	tst	r2, r3
 80042fe:	d034      	beq.n	800436a <__ssputs_r+0x86>
 8004300:	2503      	movs	r5, #3
 8004302:	6909      	ldr	r1, [r1, #16]
 8004304:	6823      	ldr	r3, [r4, #0]
 8004306:	1a5b      	subs	r3, r3, r1
 8004308:	9302      	str	r3, [sp, #8]
 800430a:	6963      	ldr	r3, [r4, #20]
 800430c:	9802      	ldr	r0, [sp, #8]
 800430e:	435d      	muls	r5, r3
 8004310:	0feb      	lsrs	r3, r5, #31
 8004312:	195d      	adds	r5, r3, r5
 8004314:	9b01      	ldr	r3, [sp, #4]
 8004316:	106d      	asrs	r5, r5, #1
 8004318:	3301      	adds	r3, #1
 800431a:	181b      	adds	r3, r3, r0
 800431c:	42ab      	cmp	r3, r5
 800431e:	d900      	bls.n	8004322 <__ssputs_r+0x3e>
 8004320:	001d      	movs	r5, r3
 8004322:	0553      	lsls	r3, r2, #21
 8004324:	d532      	bpl.n	800438c <__ssputs_r+0xa8>
 8004326:	0029      	movs	r1, r5
 8004328:	0038      	movs	r0, r7
 800432a:	f000 fb19 	bl	8004960 <_malloc_r>
 800432e:	1e06      	subs	r6, r0, #0
 8004330:	d109      	bne.n	8004346 <__ssputs_r+0x62>
 8004332:	230c      	movs	r3, #12
 8004334:	603b      	str	r3, [r7, #0]
 8004336:	2340      	movs	r3, #64	; 0x40
 8004338:	2001      	movs	r0, #1
 800433a:	89a2      	ldrh	r2, [r4, #12]
 800433c:	4240      	negs	r0, r0
 800433e:	4313      	orrs	r3, r2
 8004340:	81a3      	strh	r3, [r4, #12]
 8004342:	b005      	add	sp, #20
 8004344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004346:	9a02      	ldr	r2, [sp, #8]
 8004348:	6921      	ldr	r1, [r4, #16]
 800434a:	f7ff ff99 	bl	8004280 <memcpy>
 800434e:	89a3      	ldrh	r3, [r4, #12]
 8004350:	4a14      	ldr	r2, [pc, #80]	; (80043a4 <__ssputs_r+0xc0>)
 8004352:	401a      	ands	r2, r3
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	4313      	orrs	r3, r2
 8004358:	81a3      	strh	r3, [r4, #12]
 800435a:	9b02      	ldr	r3, [sp, #8]
 800435c:	6126      	str	r6, [r4, #16]
 800435e:	18f6      	adds	r6, r6, r3
 8004360:	6026      	str	r6, [r4, #0]
 8004362:	6165      	str	r5, [r4, #20]
 8004364:	9e01      	ldr	r6, [sp, #4]
 8004366:	1aed      	subs	r5, r5, r3
 8004368:	60a5      	str	r5, [r4, #8]
 800436a:	9b01      	ldr	r3, [sp, #4]
 800436c:	429e      	cmp	r6, r3
 800436e:	d900      	bls.n	8004372 <__ssputs_r+0x8e>
 8004370:	9e01      	ldr	r6, [sp, #4]
 8004372:	0032      	movs	r2, r6
 8004374:	9903      	ldr	r1, [sp, #12]
 8004376:	6820      	ldr	r0, [r4, #0]
 8004378:	f000 fa95 	bl	80048a6 <memmove>
 800437c:	68a3      	ldr	r3, [r4, #8]
 800437e:	2000      	movs	r0, #0
 8004380:	1b9b      	subs	r3, r3, r6
 8004382:	60a3      	str	r3, [r4, #8]
 8004384:	6823      	ldr	r3, [r4, #0]
 8004386:	199e      	adds	r6, r3, r6
 8004388:	6026      	str	r6, [r4, #0]
 800438a:	e7da      	b.n	8004342 <__ssputs_r+0x5e>
 800438c:	002a      	movs	r2, r5
 800438e:	0038      	movs	r0, r7
 8004390:	f000 fb44 	bl	8004a1c <_realloc_r>
 8004394:	1e06      	subs	r6, r0, #0
 8004396:	d1e0      	bne.n	800435a <__ssputs_r+0x76>
 8004398:	6921      	ldr	r1, [r4, #16]
 800439a:	0038      	movs	r0, r7
 800439c:	f000 fa96 	bl	80048cc <_free_r>
 80043a0:	e7c7      	b.n	8004332 <__ssputs_r+0x4e>
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	fffffb7f 	.word	0xfffffb7f

080043a8 <_svfiprintf_r>:
 80043a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043aa:	b0a1      	sub	sp, #132	; 0x84
 80043ac:	9003      	str	r0, [sp, #12]
 80043ae:	001d      	movs	r5, r3
 80043b0:	898b      	ldrh	r3, [r1, #12]
 80043b2:	000f      	movs	r7, r1
 80043b4:	0016      	movs	r6, r2
 80043b6:	061b      	lsls	r3, r3, #24
 80043b8:	d511      	bpl.n	80043de <_svfiprintf_r+0x36>
 80043ba:	690b      	ldr	r3, [r1, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10e      	bne.n	80043de <_svfiprintf_r+0x36>
 80043c0:	2140      	movs	r1, #64	; 0x40
 80043c2:	f000 facd 	bl	8004960 <_malloc_r>
 80043c6:	6038      	str	r0, [r7, #0]
 80043c8:	6138      	str	r0, [r7, #16]
 80043ca:	2800      	cmp	r0, #0
 80043cc:	d105      	bne.n	80043da <_svfiprintf_r+0x32>
 80043ce:	230c      	movs	r3, #12
 80043d0:	9a03      	ldr	r2, [sp, #12]
 80043d2:	3801      	subs	r0, #1
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	b021      	add	sp, #132	; 0x84
 80043d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043da:	2340      	movs	r3, #64	; 0x40
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	2300      	movs	r3, #0
 80043e0:	ac08      	add	r4, sp, #32
 80043e2:	6163      	str	r3, [r4, #20]
 80043e4:	3320      	adds	r3, #32
 80043e6:	7663      	strb	r3, [r4, #25]
 80043e8:	3310      	adds	r3, #16
 80043ea:	76a3      	strb	r3, [r4, #26]
 80043ec:	9507      	str	r5, [sp, #28]
 80043ee:	0035      	movs	r5, r6
 80043f0:	782b      	ldrb	r3, [r5, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d001      	beq.n	80043fa <_svfiprintf_r+0x52>
 80043f6:	2b25      	cmp	r3, #37	; 0x25
 80043f8:	d146      	bne.n	8004488 <_svfiprintf_r+0xe0>
 80043fa:	1bab      	subs	r3, r5, r6
 80043fc:	9305      	str	r3, [sp, #20]
 80043fe:	d00c      	beq.n	800441a <_svfiprintf_r+0x72>
 8004400:	0032      	movs	r2, r6
 8004402:	0039      	movs	r1, r7
 8004404:	9803      	ldr	r0, [sp, #12]
 8004406:	f7ff ff6d 	bl	80042e4 <__ssputs_r>
 800440a:	1c43      	adds	r3, r0, #1
 800440c:	d100      	bne.n	8004410 <_svfiprintf_r+0x68>
 800440e:	e0ae      	b.n	800456e <_svfiprintf_r+0x1c6>
 8004410:	6962      	ldr	r2, [r4, #20]
 8004412:	9b05      	ldr	r3, [sp, #20]
 8004414:	4694      	mov	ip, r2
 8004416:	4463      	add	r3, ip
 8004418:	6163      	str	r3, [r4, #20]
 800441a:	782b      	ldrb	r3, [r5, #0]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d100      	bne.n	8004422 <_svfiprintf_r+0x7a>
 8004420:	e0a5      	b.n	800456e <_svfiprintf_r+0x1c6>
 8004422:	2201      	movs	r2, #1
 8004424:	2300      	movs	r3, #0
 8004426:	4252      	negs	r2, r2
 8004428:	6062      	str	r2, [r4, #4]
 800442a:	a904      	add	r1, sp, #16
 800442c:	3254      	adds	r2, #84	; 0x54
 800442e:	1852      	adds	r2, r2, r1
 8004430:	1c6e      	adds	r6, r5, #1
 8004432:	6023      	str	r3, [r4, #0]
 8004434:	60e3      	str	r3, [r4, #12]
 8004436:	60a3      	str	r3, [r4, #8]
 8004438:	7013      	strb	r3, [r2, #0]
 800443a:	65a3      	str	r3, [r4, #88]	; 0x58
 800443c:	7831      	ldrb	r1, [r6, #0]
 800443e:	2205      	movs	r2, #5
 8004440:	4853      	ldr	r0, [pc, #332]	; (8004590 <_svfiprintf_r+0x1e8>)
 8004442:	f000 fa25 	bl	8004890 <memchr>
 8004446:	1c75      	adds	r5, r6, #1
 8004448:	2800      	cmp	r0, #0
 800444a:	d11f      	bne.n	800448c <_svfiprintf_r+0xe4>
 800444c:	6822      	ldr	r2, [r4, #0]
 800444e:	06d3      	lsls	r3, r2, #27
 8004450:	d504      	bpl.n	800445c <_svfiprintf_r+0xb4>
 8004452:	2353      	movs	r3, #83	; 0x53
 8004454:	a904      	add	r1, sp, #16
 8004456:	185b      	adds	r3, r3, r1
 8004458:	2120      	movs	r1, #32
 800445a:	7019      	strb	r1, [r3, #0]
 800445c:	0713      	lsls	r3, r2, #28
 800445e:	d504      	bpl.n	800446a <_svfiprintf_r+0xc2>
 8004460:	2353      	movs	r3, #83	; 0x53
 8004462:	a904      	add	r1, sp, #16
 8004464:	185b      	adds	r3, r3, r1
 8004466:	212b      	movs	r1, #43	; 0x2b
 8004468:	7019      	strb	r1, [r3, #0]
 800446a:	7833      	ldrb	r3, [r6, #0]
 800446c:	2b2a      	cmp	r3, #42	; 0x2a
 800446e:	d016      	beq.n	800449e <_svfiprintf_r+0xf6>
 8004470:	0035      	movs	r5, r6
 8004472:	2100      	movs	r1, #0
 8004474:	200a      	movs	r0, #10
 8004476:	68e3      	ldr	r3, [r4, #12]
 8004478:	782a      	ldrb	r2, [r5, #0]
 800447a:	1c6e      	adds	r6, r5, #1
 800447c:	3a30      	subs	r2, #48	; 0x30
 800447e:	2a09      	cmp	r2, #9
 8004480:	d94e      	bls.n	8004520 <_svfiprintf_r+0x178>
 8004482:	2900      	cmp	r1, #0
 8004484:	d018      	beq.n	80044b8 <_svfiprintf_r+0x110>
 8004486:	e010      	b.n	80044aa <_svfiprintf_r+0x102>
 8004488:	3501      	adds	r5, #1
 800448a:	e7b1      	b.n	80043f0 <_svfiprintf_r+0x48>
 800448c:	4b40      	ldr	r3, [pc, #256]	; (8004590 <_svfiprintf_r+0x1e8>)
 800448e:	6822      	ldr	r2, [r4, #0]
 8004490:	1ac0      	subs	r0, r0, r3
 8004492:	2301      	movs	r3, #1
 8004494:	4083      	lsls	r3, r0
 8004496:	4313      	orrs	r3, r2
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	002e      	movs	r6, r5
 800449c:	e7ce      	b.n	800443c <_svfiprintf_r+0x94>
 800449e:	9b07      	ldr	r3, [sp, #28]
 80044a0:	1d19      	adds	r1, r3, #4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	9107      	str	r1, [sp, #28]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	db01      	blt.n	80044ae <_svfiprintf_r+0x106>
 80044aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80044ac:	e004      	b.n	80044b8 <_svfiprintf_r+0x110>
 80044ae:	425b      	negs	r3, r3
 80044b0:	60e3      	str	r3, [r4, #12]
 80044b2:	2302      	movs	r3, #2
 80044b4:	4313      	orrs	r3, r2
 80044b6:	6023      	str	r3, [r4, #0]
 80044b8:	782b      	ldrb	r3, [r5, #0]
 80044ba:	2b2e      	cmp	r3, #46	; 0x2e
 80044bc:	d10a      	bne.n	80044d4 <_svfiprintf_r+0x12c>
 80044be:	786b      	ldrb	r3, [r5, #1]
 80044c0:	2b2a      	cmp	r3, #42	; 0x2a
 80044c2:	d135      	bne.n	8004530 <_svfiprintf_r+0x188>
 80044c4:	9b07      	ldr	r3, [sp, #28]
 80044c6:	3502      	adds	r5, #2
 80044c8:	1d1a      	adds	r2, r3, #4
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	9207      	str	r2, [sp, #28]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	db2b      	blt.n	800452a <_svfiprintf_r+0x182>
 80044d2:	9309      	str	r3, [sp, #36]	; 0x24
 80044d4:	4e2f      	ldr	r6, [pc, #188]	; (8004594 <_svfiprintf_r+0x1ec>)
 80044d6:	7829      	ldrb	r1, [r5, #0]
 80044d8:	2203      	movs	r2, #3
 80044da:	0030      	movs	r0, r6
 80044dc:	f000 f9d8 	bl	8004890 <memchr>
 80044e0:	2800      	cmp	r0, #0
 80044e2:	d006      	beq.n	80044f2 <_svfiprintf_r+0x14a>
 80044e4:	2340      	movs	r3, #64	; 0x40
 80044e6:	1b80      	subs	r0, r0, r6
 80044e8:	4083      	lsls	r3, r0
 80044ea:	6822      	ldr	r2, [r4, #0]
 80044ec:	3501      	adds	r5, #1
 80044ee:	4313      	orrs	r3, r2
 80044f0:	6023      	str	r3, [r4, #0]
 80044f2:	7829      	ldrb	r1, [r5, #0]
 80044f4:	2206      	movs	r2, #6
 80044f6:	4828      	ldr	r0, [pc, #160]	; (8004598 <_svfiprintf_r+0x1f0>)
 80044f8:	1c6e      	adds	r6, r5, #1
 80044fa:	7621      	strb	r1, [r4, #24]
 80044fc:	f000 f9c8 	bl	8004890 <memchr>
 8004500:	2800      	cmp	r0, #0
 8004502:	d03c      	beq.n	800457e <_svfiprintf_r+0x1d6>
 8004504:	4b25      	ldr	r3, [pc, #148]	; (800459c <_svfiprintf_r+0x1f4>)
 8004506:	2b00      	cmp	r3, #0
 8004508:	d125      	bne.n	8004556 <_svfiprintf_r+0x1ae>
 800450a:	2207      	movs	r2, #7
 800450c:	9b07      	ldr	r3, [sp, #28]
 800450e:	3307      	adds	r3, #7
 8004510:	4393      	bics	r3, r2
 8004512:	3308      	adds	r3, #8
 8004514:	9307      	str	r3, [sp, #28]
 8004516:	6963      	ldr	r3, [r4, #20]
 8004518:	9a04      	ldr	r2, [sp, #16]
 800451a:	189b      	adds	r3, r3, r2
 800451c:	6163      	str	r3, [r4, #20]
 800451e:	e766      	b.n	80043ee <_svfiprintf_r+0x46>
 8004520:	4343      	muls	r3, r0
 8004522:	2101      	movs	r1, #1
 8004524:	189b      	adds	r3, r3, r2
 8004526:	0035      	movs	r5, r6
 8004528:	e7a6      	b.n	8004478 <_svfiprintf_r+0xd0>
 800452a:	2301      	movs	r3, #1
 800452c:	425b      	negs	r3, r3
 800452e:	e7d0      	b.n	80044d2 <_svfiprintf_r+0x12a>
 8004530:	2300      	movs	r3, #0
 8004532:	200a      	movs	r0, #10
 8004534:	001a      	movs	r2, r3
 8004536:	3501      	adds	r5, #1
 8004538:	6063      	str	r3, [r4, #4]
 800453a:	7829      	ldrb	r1, [r5, #0]
 800453c:	1c6e      	adds	r6, r5, #1
 800453e:	3930      	subs	r1, #48	; 0x30
 8004540:	2909      	cmp	r1, #9
 8004542:	d903      	bls.n	800454c <_svfiprintf_r+0x1a4>
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0c5      	beq.n	80044d4 <_svfiprintf_r+0x12c>
 8004548:	9209      	str	r2, [sp, #36]	; 0x24
 800454a:	e7c3      	b.n	80044d4 <_svfiprintf_r+0x12c>
 800454c:	4342      	muls	r2, r0
 800454e:	2301      	movs	r3, #1
 8004550:	1852      	adds	r2, r2, r1
 8004552:	0035      	movs	r5, r6
 8004554:	e7f1      	b.n	800453a <_svfiprintf_r+0x192>
 8004556:	ab07      	add	r3, sp, #28
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	003a      	movs	r2, r7
 800455c:	4b10      	ldr	r3, [pc, #64]	; (80045a0 <_svfiprintf_r+0x1f8>)
 800455e:	0021      	movs	r1, r4
 8004560:	9803      	ldr	r0, [sp, #12]
 8004562:	e000      	b.n	8004566 <_svfiprintf_r+0x1be>
 8004564:	bf00      	nop
 8004566:	9004      	str	r0, [sp, #16]
 8004568:	9b04      	ldr	r3, [sp, #16]
 800456a:	3301      	adds	r3, #1
 800456c:	d1d3      	bne.n	8004516 <_svfiprintf_r+0x16e>
 800456e:	89bb      	ldrh	r3, [r7, #12]
 8004570:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004572:	065b      	lsls	r3, r3, #25
 8004574:	d400      	bmi.n	8004578 <_svfiprintf_r+0x1d0>
 8004576:	e72e      	b.n	80043d6 <_svfiprintf_r+0x2e>
 8004578:	2001      	movs	r0, #1
 800457a:	4240      	negs	r0, r0
 800457c:	e72b      	b.n	80043d6 <_svfiprintf_r+0x2e>
 800457e:	ab07      	add	r3, sp, #28
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	003a      	movs	r2, r7
 8004584:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <_svfiprintf_r+0x1f8>)
 8004586:	0021      	movs	r1, r4
 8004588:	9803      	ldr	r0, [sp, #12]
 800458a:	f000 f879 	bl	8004680 <_printf_i>
 800458e:	e7ea      	b.n	8004566 <_svfiprintf_r+0x1be>
 8004590:	08004c19 	.word	0x08004c19
 8004594:	08004c1f 	.word	0x08004c1f
 8004598:	08004c23 	.word	0x08004c23
 800459c:	00000000 	.word	0x00000000
 80045a0:	080042e5 	.word	0x080042e5

080045a4 <_printf_common>:
 80045a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045a6:	0015      	movs	r5, r2
 80045a8:	9301      	str	r3, [sp, #4]
 80045aa:	688a      	ldr	r2, [r1, #8]
 80045ac:	690b      	ldr	r3, [r1, #16]
 80045ae:	9000      	str	r0, [sp, #0]
 80045b0:	000c      	movs	r4, r1
 80045b2:	4293      	cmp	r3, r2
 80045b4:	da00      	bge.n	80045b8 <_printf_common+0x14>
 80045b6:	0013      	movs	r3, r2
 80045b8:	0022      	movs	r2, r4
 80045ba:	602b      	str	r3, [r5, #0]
 80045bc:	3243      	adds	r2, #67	; 0x43
 80045be:	7812      	ldrb	r2, [r2, #0]
 80045c0:	2a00      	cmp	r2, #0
 80045c2:	d001      	beq.n	80045c8 <_printf_common+0x24>
 80045c4:	3301      	adds	r3, #1
 80045c6:	602b      	str	r3, [r5, #0]
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	069b      	lsls	r3, r3, #26
 80045cc:	d502      	bpl.n	80045d4 <_printf_common+0x30>
 80045ce:	682b      	ldr	r3, [r5, #0]
 80045d0:	3302      	adds	r3, #2
 80045d2:	602b      	str	r3, [r5, #0]
 80045d4:	2706      	movs	r7, #6
 80045d6:	6823      	ldr	r3, [r4, #0]
 80045d8:	401f      	ands	r7, r3
 80045da:	d027      	beq.n	800462c <_printf_common+0x88>
 80045dc:	0023      	movs	r3, r4
 80045de:	3343      	adds	r3, #67	; 0x43
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	1e5a      	subs	r2, r3, #1
 80045e4:	4193      	sbcs	r3, r2
 80045e6:	6822      	ldr	r2, [r4, #0]
 80045e8:	0692      	lsls	r2, r2, #26
 80045ea:	d430      	bmi.n	800464e <_printf_common+0xaa>
 80045ec:	0022      	movs	r2, r4
 80045ee:	9901      	ldr	r1, [sp, #4]
 80045f0:	3243      	adds	r2, #67	; 0x43
 80045f2:	9800      	ldr	r0, [sp, #0]
 80045f4:	9e08      	ldr	r6, [sp, #32]
 80045f6:	47b0      	blx	r6
 80045f8:	1c43      	adds	r3, r0, #1
 80045fa:	d025      	beq.n	8004648 <_printf_common+0xa4>
 80045fc:	2306      	movs	r3, #6
 80045fe:	6820      	ldr	r0, [r4, #0]
 8004600:	682a      	ldr	r2, [r5, #0]
 8004602:	68e1      	ldr	r1, [r4, #12]
 8004604:	4003      	ands	r3, r0
 8004606:	2500      	movs	r5, #0
 8004608:	2b04      	cmp	r3, #4
 800460a:	d103      	bne.n	8004614 <_printf_common+0x70>
 800460c:	1a8d      	subs	r5, r1, r2
 800460e:	43eb      	mvns	r3, r5
 8004610:	17db      	asrs	r3, r3, #31
 8004612:	401d      	ands	r5, r3
 8004614:	68a3      	ldr	r3, [r4, #8]
 8004616:	6922      	ldr	r2, [r4, #16]
 8004618:	4293      	cmp	r3, r2
 800461a:	dd01      	ble.n	8004620 <_printf_common+0x7c>
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	18ed      	adds	r5, r5, r3
 8004620:	2700      	movs	r7, #0
 8004622:	42bd      	cmp	r5, r7
 8004624:	d120      	bne.n	8004668 <_printf_common+0xc4>
 8004626:	2000      	movs	r0, #0
 8004628:	e010      	b.n	800464c <_printf_common+0xa8>
 800462a:	3701      	adds	r7, #1
 800462c:	68e3      	ldr	r3, [r4, #12]
 800462e:	682a      	ldr	r2, [r5, #0]
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	42bb      	cmp	r3, r7
 8004634:	ddd2      	ble.n	80045dc <_printf_common+0x38>
 8004636:	0022      	movs	r2, r4
 8004638:	2301      	movs	r3, #1
 800463a:	3219      	adds	r2, #25
 800463c:	9901      	ldr	r1, [sp, #4]
 800463e:	9800      	ldr	r0, [sp, #0]
 8004640:	9e08      	ldr	r6, [sp, #32]
 8004642:	47b0      	blx	r6
 8004644:	1c43      	adds	r3, r0, #1
 8004646:	d1f0      	bne.n	800462a <_printf_common+0x86>
 8004648:	2001      	movs	r0, #1
 800464a:	4240      	negs	r0, r0
 800464c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800464e:	2030      	movs	r0, #48	; 0x30
 8004650:	18e1      	adds	r1, r4, r3
 8004652:	3143      	adds	r1, #67	; 0x43
 8004654:	7008      	strb	r0, [r1, #0]
 8004656:	0021      	movs	r1, r4
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	3145      	adds	r1, #69	; 0x45
 800465c:	7809      	ldrb	r1, [r1, #0]
 800465e:	18a2      	adds	r2, r4, r2
 8004660:	3243      	adds	r2, #67	; 0x43
 8004662:	3302      	adds	r3, #2
 8004664:	7011      	strb	r1, [r2, #0]
 8004666:	e7c1      	b.n	80045ec <_printf_common+0x48>
 8004668:	0022      	movs	r2, r4
 800466a:	2301      	movs	r3, #1
 800466c:	321a      	adds	r2, #26
 800466e:	9901      	ldr	r1, [sp, #4]
 8004670:	9800      	ldr	r0, [sp, #0]
 8004672:	9e08      	ldr	r6, [sp, #32]
 8004674:	47b0      	blx	r6
 8004676:	1c43      	adds	r3, r0, #1
 8004678:	d0e6      	beq.n	8004648 <_printf_common+0xa4>
 800467a:	3701      	adds	r7, #1
 800467c:	e7d1      	b.n	8004622 <_printf_common+0x7e>
	...

08004680 <_printf_i>:
 8004680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004682:	b089      	sub	sp, #36	; 0x24
 8004684:	9204      	str	r2, [sp, #16]
 8004686:	000a      	movs	r2, r1
 8004688:	3243      	adds	r2, #67	; 0x43
 800468a:	9305      	str	r3, [sp, #20]
 800468c:	9003      	str	r0, [sp, #12]
 800468e:	9202      	str	r2, [sp, #8]
 8004690:	7e0a      	ldrb	r2, [r1, #24]
 8004692:	000c      	movs	r4, r1
 8004694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004696:	2a6e      	cmp	r2, #110	; 0x6e
 8004698:	d100      	bne.n	800469c <_printf_i+0x1c>
 800469a:	e086      	b.n	80047aa <_printf_i+0x12a>
 800469c:	d81f      	bhi.n	80046de <_printf_i+0x5e>
 800469e:	2a63      	cmp	r2, #99	; 0x63
 80046a0:	d033      	beq.n	800470a <_printf_i+0x8a>
 80046a2:	d808      	bhi.n	80046b6 <_printf_i+0x36>
 80046a4:	2a00      	cmp	r2, #0
 80046a6:	d100      	bne.n	80046aa <_printf_i+0x2a>
 80046a8:	e08c      	b.n	80047c4 <_printf_i+0x144>
 80046aa:	2a58      	cmp	r2, #88	; 0x58
 80046ac:	d04d      	beq.n	800474a <_printf_i+0xca>
 80046ae:	0025      	movs	r5, r4
 80046b0:	3542      	adds	r5, #66	; 0x42
 80046b2:	702a      	strb	r2, [r5, #0]
 80046b4:	e030      	b.n	8004718 <_printf_i+0x98>
 80046b6:	2a64      	cmp	r2, #100	; 0x64
 80046b8:	d001      	beq.n	80046be <_printf_i+0x3e>
 80046ba:	2a69      	cmp	r2, #105	; 0x69
 80046bc:	d1f7      	bne.n	80046ae <_printf_i+0x2e>
 80046be:	6819      	ldr	r1, [r3, #0]
 80046c0:	6825      	ldr	r5, [r4, #0]
 80046c2:	1d0a      	adds	r2, r1, #4
 80046c4:	0628      	lsls	r0, r5, #24
 80046c6:	d529      	bpl.n	800471c <_printf_i+0x9c>
 80046c8:	6808      	ldr	r0, [r1, #0]
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	2800      	cmp	r0, #0
 80046ce:	da03      	bge.n	80046d8 <_printf_i+0x58>
 80046d0:	232d      	movs	r3, #45	; 0x2d
 80046d2:	9a02      	ldr	r2, [sp, #8]
 80046d4:	4240      	negs	r0, r0
 80046d6:	7013      	strb	r3, [r2, #0]
 80046d8:	4e6b      	ldr	r6, [pc, #428]	; (8004888 <_printf_i+0x208>)
 80046da:	270a      	movs	r7, #10
 80046dc:	e04f      	b.n	800477e <_printf_i+0xfe>
 80046de:	2a73      	cmp	r2, #115	; 0x73
 80046e0:	d074      	beq.n	80047cc <_printf_i+0x14c>
 80046e2:	d808      	bhi.n	80046f6 <_printf_i+0x76>
 80046e4:	2a6f      	cmp	r2, #111	; 0x6f
 80046e6:	d01f      	beq.n	8004728 <_printf_i+0xa8>
 80046e8:	2a70      	cmp	r2, #112	; 0x70
 80046ea:	d1e0      	bne.n	80046ae <_printf_i+0x2e>
 80046ec:	2220      	movs	r2, #32
 80046ee:	6809      	ldr	r1, [r1, #0]
 80046f0:	430a      	orrs	r2, r1
 80046f2:	6022      	str	r2, [r4, #0]
 80046f4:	e003      	b.n	80046fe <_printf_i+0x7e>
 80046f6:	2a75      	cmp	r2, #117	; 0x75
 80046f8:	d016      	beq.n	8004728 <_printf_i+0xa8>
 80046fa:	2a78      	cmp	r2, #120	; 0x78
 80046fc:	d1d7      	bne.n	80046ae <_printf_i+0x2e>
 80046fe:	0022      	movs	r2, r4
 8004700:	2178      	movs	r1, #120	; 0x78
 8004702:	3245      	adds	r2, #69	; 0x45
 8004704:	7011      	strb	r1, [r2, #0]
 8004706:	4e61      	ldr	r6, [pc, #388]	; (800488c <_printf_i+0x20c>)
 8004708:	e022      	b.n	8004750 <_printf_i+0xd0>
 800470a:	0025      	movs	r5, r4
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	3542      	adds	r5, #66	; 0x42
 8004710:	1d11      	adds	r1, r2, #4
 8004712:	6019      	str	r1, [r3, #0]
 8004714:	6813      	ldr	r3, [r2, #0]
 8004716:	702b      	strb	r3, [r5, #0]
 8004718:	2301      	movs	r3, #1
 800471a:	e065      	b.n	80047e8 <_printf_i+0x168>
 800471c:	6808      	ldr	r0, [r1, #0]
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	0669      	lsls	r1, r5, #25
 8004722:	d5d3      	bpl.n	80046cc <_printf_i+0x4c>
 8004724:	b200      	sxth	r0, r0
 8004726:	e7d1      	b.n	80046cc <_printf_i+0x4c>
 8004728:	6819      	ldr	r1, [r3, #0]
 800472a:	6825      	ldr	r5, [r4, #0]
 800472c:	1d08      	adds	r0, r1, #4
 800472e:	6018      	str	r0, [r3, #0]
 8004730:	6808      	ldr	r0, [r1, #0]
 8004732:	062e      	lsls	r6, r5, #24
 8004734:	d505      	bpl.n	8004742 <_printf_i+0xc2>
 8004736:	4e54      	ldr	r6, [pc, #336]	; (8004888 <_printf_i+0x208>)
 8004738:	2708      	movs	r7, #8
 800473a:	2a6f      	cmp	r2, #111	; 0x6f
 800473c:	d01b      	beq.n	8004776 <_printf_i+0xf6>
 800473e:	270a      	movs	r7, #10
 8004740:	e019      	b.n	8004776 <_printf_i+0xf6>
 8004742:	066d      	lsls	r5, r5, #25
 8004744:	d5f7      	bpl.n	8004736 <_printf_i+0xb6>
 8004746:	b280      	uxth	r0, r0
 8004748:	e7f5      	b.n	8004736 <_printf_i+0xb6>
 800474a:	3145      	adds	r1, #69	; 0x45
 800474c:	4e4e      	ldr	r6, [pc, #312]	; (8004888 <_printf_i+0x208>)
 800474e:	700a      	strb	r2, [r1, #0]
 8004750:	6818      	ldr	r0, [r3, #0]
 8004752:	6822      	ldr	r2, [r4, #0]
 8004754:	1d01      	adds	r1, r0, #4
 8004756:	6800      	ldr	r0, [r0, #0]
 8004758:	6019      	str	r1, [r3, #0]
 800475a:	0615      	lsls	r5, r2, #24
 800475c:	d521      	bpl.n	80047a2 <_printf_i+0x122>
 800475e:	07d3      	lsls	r3, r2, #31
 8004760:	d502      	bpl.n	8004768 <_printf_i+0xe8>
 8004762:	2320      	movs	r3, #32
 8004764:	431a      	orrs	r2, r3
 8004766:	6022      	str	r2, [r4, #0]
 8004768:	2710      	movs	r7, #16
 800476a:	2800      	cmp	r0, #0
 800476c:	d103      	bne.n	8004776 <_printf_i+0xf6>
 800476e:	2320      	movs	r3, #32
 8004770:	6822      	ldr	r2, [r4, #0]
 8004772:	439a      	bics	r2, r3
 8004774:	6022      	str	r2, [r4, #0]
 8004776:	0023      	movs	r3, r4
 8004778:	2200      	movs	r2, #0
 800477a:	3343      	adds	r3, #67	; 0x43
 800477c:	701a      	strb	r2, [r3, #0]
 800477e:	6863      	ldr	r3, [r4, #4]
 8004780:	60a3      	str	r3, [r4, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	db58      	blt.n	8004838 <_printf_i+0x1b8>
 8004786:	2204      	movs	r2, #4
 8004788:	6821      	ldr	r1, [r4, #0]
 800478a:	4391      	bics	r1, r2
 800478c:	6021      	str	r1, [r4, #0]
 800478e:	2800      	cmp	r0, #0
 8004790:	d154      	bne.n	800483c <_printf_i+0x1bc>
 8004792:	9d02      	ldr	r5, [sp, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d05a      	beq.n	800484e <_printf_i+0x1ce>
 8004798:	0025      	movs	r5, r4
 800479a:	7833      	ldrb	r3, [r6, #0]
 800479c:	3542      	adds	r5, #66	; 0x42
 800479e:	702b      	strb	r3, [r5, #0]
 80047a0:	e055      	b.n	800484e <_printf_i+0x1ce>
 80047a2:	0655      	lsls	r5, r2, #25
 80047a4:	d5db      	bpl.n	800475e <_printf_i+0xde>
 80047a6:	b280      	uxth	r0, r0
 80047a8:	e7d9      	b.n	800475e <_printf_i+0xde>
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	680d      	ldr	r5, [r1, #0]
 80047ae:	1d10      	adds	r0, r2, #4
 80047b0:	6949      	ldr	r1, [r1, #20]
 80047b2:	6018      	str	r0, [r3, #0]
 80047b4:	6813      	ldr	r3, [r2, #0]
 80047b6:	062e      	lsls	r6, r5, #24
 80047b8:	d501      	bpl.n	80047be <_printf_i+0x13e>
 80047ba:	6019      	str	r1, [r3, #0]
 80047bc:	e002      	b.n	80047c4 <_printf_i+0x144>
 80047be:	066d      	lsls	r5, r5, #25
 80047c0:	d5fb      	bpl.n	80047ba <_printf_i+0x13a>
 80047c2:	8019      	strh	r1, [r3, #0]
 80047c4:	2300      	movs	r3, #0
 80047c6:	9d02      	ldr	r5, [sp, #8]
 80047c8:	6123      	str	r3, [r4, #16]
 80047ca:	e04f      	b.n	800486c <_printf_i+0x1ec>
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	1d11      	adds	r1, r2, #4
 80047d0:	6019      	str	r1, [r3, #0]
 80047d2:	6815      	ldr	r5, [r2, #0]
 80047d4:	2100      	movs	r1, #0
 80047d6:	6862      	ldr	r2, [r4, #4]
 80047d8:	0028      	movs	r0, r5
 80047da:	f000 f859 	bl	8004890 <memchr>
 80047de:	2800      	cmp	r0, #0
 80047e0:	d001      	beq.n	80047e6 <_printf_i+0x166>
 80047e2:	1b40      	subs	r0, r0, r5
 80047e4:	6060      	str	r0, [r4, #4]
 80047e6:	6863      	ldr	r3, [r4, #4]
 80047e8:	6123      	str	r3, [r4, #16]
 80047ea:	2300      	movs	r3, #0
 80047ec:	9a02      	ldr	r2, [sp, #8]
 80047ee:	7013      	strb	r3, [r2, #0]
 80047f0:	e03c      	b.n	800486c <_printf_i+0x1ec>
 80047f2:	6923      	ldr	r3, [r4, #16]
 80047f4:	002a      	movs	r2, r5
 80047f6:	9904      	ldr	r1, [sp, #16]
 80047f8:	9803      	ldr	r0, [sp, #12]
 80047fa:	9d05      	ldr	r5, [sp, #20]
 80047fc:	47a8      	blx	r5
 80047fe:	1c43      	adds	r3, r0, #1
 8004800:	d03e      	beq.n	8004880 <_printf_i+0x200>
 8004802:	6823      	ldr	r3, [r4, #0]
 8004804:	079b      	lsls	r3, r3, #30
 8004806:	d415      	bmi.n	8004834 <_printf_i+0x1b4>
 8004808:	9b07      	ldr	r3, [sp, #28]
 800480a:	68e0      	ldr	r0, [r4, #12]
 800480c:	4298      	cmp	r0, r3
 800480e:	da39      	bge.n	8004884 <_printf_i+0x204>
 8004810:	0018      	movs	r0, r3
 8004812:	e037      	b.n	8004884 <_printf_i+0x204>
 8004814:	0022      	movs	r2, r4
 8004816:	2301      	movs	r3, #1
 8004818:	3219      	adds	r2, #25
 800481a:	9904      	ldr	r1, [sp, #16]
 800481c:	9803      	ldr	r0, [sp, #12]
 800481e:	9e05      	ldr	r6, [sp, #20]
 8004820:	47b0      	blx	r6
 8004822:	1c43      	adds	r3, r0, #1
 8004824:	d02c      	beq.n	8004880 <_printf_i+0x200>
 8004826:	3501      	adds	r5, #1
 8004828:	68e3      	ldr	r3, [r4, #12]
 800482a:	9a07      	ldr	r2, [sp, #28]
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	42ab      	cmp	r3, r5
 8004830:	dcf0      	bgt.n	8004814 <_printf_i+0x194>
 8004832:	e7e9      	b.n	8004808 <_printf_i+0x188>
 8004834:	2500      	movs	r5, #0
 8004836:	e7f7      	b.n	8004828 <_printf_i+0x1a8>
 8004838:	2800      	cmp	r0, #0
 800483a:	d0ad      	beq.n	8004798 <_printf_i+0x118>
 800483c:	9d02      	ldr	r5, [sp, #8]
 800483e:	0039      	movs	r1, r7
 8004840:	f7fb fd04 	bl	800024c <__aeabi_uidivmod>
 8004844:	5c73      	ldrb	r3, [r6, r1]
 8004846:	3d01      	subs	r5, #1
 8004848:	702b      	strb	r3, [r5, #0]
 800484a:	2800      	cmp	r0, #0
 800484c:	d1f7      	bne.n	800483e <_printf_i+0x1be>
 800484e:	2f08      	cmp	r7, #8
 8004850:	d109      	bne.n	8004866 <_printf_i+0x1e6>
 8004852:	6823      	ldr	r3, [r4, #0]
 8004854:	07db      	lsls	r3, r3, #31
 8004856:	d506      	bpl.n	8004866 <_printf_i+0x1e6>
 8004858:	6863      	ldr	r3, [r4, #4]
 800485a:	6922      	ldr	r2, [r4, #16]
 800485c:	4293      	cmp	r3, r2
 800485e:	dc02      	bgt.n	8004866 <_printf_i+0x1e6>
 8004860:	2330      	movs	r3, #48	; 0x30
 8004862:	3d01      	subs	r5, #1
 8004864:	702b      	strb	r3, [r5, #0]
 8004866:	9b02      	ldr	r3, [sp, #8]
 8004868:	1b5b      	subs	r3, r3, r5
 800486a:	6123      	str	r3, [r4, #16]
 800486c:	9b05      	ldr	r3, [sp, #20]
 800486e:	aa07      	add	r2, sp, #28
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	0021      	movs	r1, r4
 8004874:	9b04      	ldr	r3, [sp, #16]
 8004876:	9803      	ldr	r0, [sp, #12]
 8004878:	f7ff fe94 	bl	80045a4 <_printf_common>
 800487c:	1c43      	adds	r3, r0, #1
 800487e:	d1b8      	bne.n	80047f2 <_printf_i+0x172>
 8004880:	2001      	movs	r0, #1
 8004882:	4240      	negs	r0, r0
 8004884:	b009      	add	sp, #36	; 0x24
 8004886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004888:	08004c2a 	.word	0x08004c2a
 800488c:	08004c3b 	.word	0x08004c3b

08004890 <memchr>:
 8004890:	b2c9      	uxtb	r1, r1
 8004892:	1882      	adds	r2, r0, r2
 8004894:	4290      	cmp	r0, r2
 8004896:	d101      	bne.n	800489c <memchr+0xc>
 8004898:	2000      	movs	r0, #0
 800489a:	4770      	bx	lr
 800489c:	7803      	ldrb	r3, [r0, #0]
 800489e:	428b      	cmp	r3, r1
 80048a0:	d0fb      	beq.n	800489a <memchr+0xa>
 80048a2:	3001      	adds	r0, #1
 80048a4:	e7f6      	b.n	8004894 <memchr+0x4>

080048a6 <memmove>:
 80048a6:	b510      	push	{r4, lr}
 80048a8:	4288      	cmp	r0, r1
 80048aa:	d902      	bls.n	80048b2 <memmove+0xc>
 80048ac:	188b      	adds	r3, r1, r2
 80048ae:	4298      	cmp	r0, r3
 80048b0:	d303      	bcc.n	80048ba <memmove+0x14>
 80048b2:	2300      	movs	r3, #0
 80048b4:	e007      	b.n	80048c6 <memmove+0x20>
 80048b6:	5c8b      	ldrb	r3, [r1, r2]
 80048b8:	5483      	strb	r3, [r0, r2]
 80048ba:	3a01      	subs	r2, #1
 80048bc:	d2fb      	bcs.n	80048b6 <memmove+0x10>
 80048be:	bd10      	pop	{r4, pc}
 80048c0:	5ccc      	ldrb	r4, [r1, r3]
 80048c2:	54c4      	strb	r4, [r0, r3]
 80048c4:	3301      	adds	r3, #1
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d1fa      	bne.n	80048c0 <memmove+0x1a>
 80048ca:	e7f8      	b.n	80048be <memmove+0x18>

080048cc <_free_r>:
 80048cc:	b570      	push	{r4, r5, r6, lr}
 80048ce:	0005      	movs	r5, r0
 80048d0:	2900      	cmp	r1, #0
 80048d2:	d010      	beq.n	80048f6 <_free_r+0x2a>
 80048d4:	1f0c      	subs	r4, r1, #4
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	da00      	bge.n	80048de <_free_r+0x12>
 80048dc:	18e4      	adds	r4, r4, r3
 80048de:	0028      	movs	r0, r5
 80048e0:	f000 f8d4 	bl	8004a8c <__malloc_lock>
 80048e4:	4a1d      	ldr	r2, [pc, #116]	; (800495c <_free_r+0x90>)
 80048e6:	6813      	ldr	r3, [r2, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d105      	bne.n	80048f8 <_free_r+0x2c>
 80048ec:	6063      	str	r3, [r4, #4]
 80048ee:	6014      	str	r4, [r2, #0]
 80048f0:	0028      	movs	r0, r5
 80048f2:	f000 f8cc 	bl	8004a8e <__malloc_unlock>
 80048f6:	bd70      	pop	{r4, r5, r6, pc}
 80048f8:	42a3      	cmp	r3, r4
 80048fa:	d909      	bls.n	8004910 <_free_r+0x44>
 80048fc:	6821      	ldr	r1, [r4, #0]
 80048fe:	1860      	adds	r0, r4, r1
 8004900:	4283      	cmp	r3, r0
 8004902:	d1f3      	bne.n	80048ec <_free_r+0x20>
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	1841      	adds	r1, r0, r1
 800490a:	6021      	str	r1, [r4, #0]
 800490c:	e7ee      	b.n	80048ec <_free_r+0x20>
 800490e:	0013      	movs	r3, r2
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	2a00      	cmp	r2, #0
 8004914:	d001      	beq.n	800491a <_free_r+0x4e>
 8004916:	42a2      	cmp	r2, r4
 8004918:	d9f9      	bls.n	800490e <_free_r+0x42>
 800491a:	6819      	ldr	r1, [r3, #0]
 800491c:	1858      	adds	r0, r3, r1
 800491e:	42a0      	cmp	r0, r4
 8004920:	d10b      	bne.n	800493a <_free_r+0x6e>
 8004922:	6820      	ldr	r0, [r4, #0]
 8004924:	1809      	adds	r1, r1, r0
 8004926:	1858      	adds	r0, r3, r1
 8004928:	6019      	str	r1, [r3, #0]
 800492a:	4282      	cmp	r2, r0
 800492c:	d1e0      	bne.n	80048f0 <_free_r+0x24>
 800492e:	6810      	ldr	r0, [r2, #0]
 8004930:	6852      	ldr	r2, [r2, #4]
 8004932:	1841      	adds	r1, r0, r1
 8004934:	6019      	str	r1, [r3, #0]
 8004936:	605a      	str	r2, [r3, #4]
 8004938:	e7da      	b.n	80048f0 <_free_r+0x24>
 800493a:	42a0      	cmp	r0, r4
 800493c:	d902      	bls.n	8004944 <_free_r+0x78>
 800493e:	230c      	movs	r3, #12
 8004940:	602b      	str	r3, [r5, #0]
 8004942:	e7d5      	b.n	80048f0 <_free_r+0x24>
 8004944:	6821      	ldr	r1, [r4, #0]
 8004946:	1860      	adds	r0, r4, r1
 8004948:	4282      	cmp	r2, r0
 800494a:	d103      	bne.n	8004954 <_free_r+0x88>
 800494c:	6810      	ldr	r0, [r2, #0]
 800494e:	6852      	ldr	r2, [r2, #4]
 8004950:	1841      	adds	r1, r0, r1
 8004952:	6021      	str	r1, [r4, #0]
 8004954:	6062      	str	r2, [r4, #4]
 8004956:	605c      	str	r4, [r3, #4]
 8004958:	e7ca      	b.n	80048f0 <_free_r+0x24>
 800495a:	46c0      	nop			; (mov r8, r8)
 800495c:	20000428 	.word	0x20000428

08004960 <_malloc_r>:
 8004960:	2303      	movs	r3, #3
 8004962:	b570      	push	{r4, r5, r6, lr}
 8004964:	1ccd      	adds	r5, r1, #3
 8004966:	439d      	bics	r5, r3
 8004968:	3508      	adds	r5, #8
 800496a:	0006      	movs	r6, r0
 800496c:	2d0c      	cmp	r5, #12
 800496e:	d21e      	bcs.n	80049ae <_malloc_r+0x4e>
 8004970:	250c      	movs	r5, #12
 8004972:	42a9      	cmp	r1, r5
 8004974:	d81d      	bhi.n	80049b2 <_malloc_r+0x52>
 8004976:	0030      	movs	r0, r6
 8004978:	f000 f888 	bl	8004a8c <__malloc_lock>
 800497c:	4a25      	ldr	r2, [pc, #148]	; (8004a14 <_malloc_r+0xb4>)
 800497e:	6814      	ldr	r4, [r2, #0]
 8004980:	0021      	movs	r1, r4
 8004982:	2900      	cmp	r1, #0
 8004984:	d119      	bne.n	80049ba <_malloc_r+0x5a>
 8004986:	4c24      	ldr	r4, [pc, #144]	; (8004a18 <_malloc_r+0xb8>)
 8004988:	6823      	ldr	r3, [r4, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d103      	bne.n	8004996 <_malloc_r+0x36>
 800498e:	0030      	movs	r0, r6
 8004990:	f000 f86a 	bl	8004a68 <_sbrk_r>
 8004994:	6020      	str	r0, [r4, #0]
 8004996:	0029      	movs	r1, r5
 8004998:	0030      	movs	r0, r6
 800499a:	f000 f865 	bl	8004a68 <_sbrk_r>
 800499e:	1c43      	adds	r3, r0, #1
 80049a0:	d12b      	bne.n	80049fa <_malloc_r+0x9a>
 80049a2:	230c      	movs	r3, #12
 80049a4:	0030      	movs	r0, r6
 80049a6:	6033      	str	r3, [r6, #0]
 80049a8:	f000 f871 	bl	8004a8e <__malloc_unlock>
 80049ac:	e003      	b.n	80049b6 <_malloc_r+0x56>
 80049ae:	2d00      	cmp	r5, #0
 80049b0:	dadf      	bge.n	8004972 <_malloc_r+0x12>
 80049b2:	230c      	movs	r3, #12
 80049b4:	6033      	str	r3, [r6, #0]
 80049b6:	2000      	movs	r0, #0
 80049b8:	bd70      	pop	{r4, r5, r6, pc}
 80049ba:	680b      	ldr	r3, [r1, #0]
 80049bc:	1b5b      	subs	r3, r3, r5
 80049be:	d419      	bmi.n	80049f4 <_malloc_r+0x94>
 80049c0:	2b0b      	cmp	r3, #11
 80049c2:	d903      	bls.n	80049cc <_malloc_r+0x6c>
 80049c4:	600b      	str	r3, [r1, #0]
 80049c6:	18cc      	adds	r4, r1, r3
 80049c8:	6025      	str	r5, [r4, #0]
 80049ca:	e003      	b.n	80049d4 <_malloc_r+0x74>
 80049cc:	684b      	ldr	r3, [r1, #4]
 80049ce:	428c      	cmp	r4, r1
 80049d0:	d10d      	bne.n	80049ee <_malloc_r+0x8e>
 80049d2:	6013      	str	r3, [r2, #0]
 80049d4:	0030      	movs	r0, r6
 80049d6:	f000 f85a 	bl	8004a8e <__malloc_unlock>
 80049da:	0020      	movs	r0, r4
 80049dc:	2207      	movs	r2, #7
 80049de:	300b      	adds	r0, #11
 80049e0:	1d23      	adds	r3, r4, #4
 80049e2:	4390      	bics	r0, r2
 80049e4:	1ac3      	subs	r3, r0, r3
 80049e6:	d0e7      	beq.n	80049b8 <_malloc_r+0x58>
 80049e8:	425a      	negs	r2, r3
 80049ea:	50e2      	str	r2, [r4, r3]
 80049ec:	e7e4      	b.n	80049b8 <_malloc_r+0x58>
 80049ee:	6063      	str	r3, [r4, #4]
 80049f0:	000c      	movs	r4, r1
 80049f2:	e7ef      	b.n	80049d4 <_malloc_r+0x74>
 80049f4:	000c      	movs	r4, r1
 80049f6:	6849      	ldr	r1, [r1, #4]
 80049f8:	e7c3      	b.n	8004982 <_malloc_r+0x22>
 80049fa:	2303      	movs	r3, #3
 80049fc:	1cc4      	adds	r4, r0, #3
 80049fe:	439c      	bics	r4, r3
 8004a00:	42a0      	cmp	r0, r4
 8004a02:	d0e1      	beq.n	80049c8 <_malloc_r+0x68>
 8004a04:	1a21      	subs	r1, r4, r0
 8004a06:	0030      	movs	r0, r6
 8004a08:	f000 f82e 	bl	8004a68 <_sbrk_r>
 8004a0c:	1c43      	adds	r3, r0, #1
 8004a0e:	d1db      	bne.n	80049c8 <_malloc_r+0x68>
 8004a10:	e7c7      	b.n	80049a2 <_malloc_r+0x42>
 8004a12:	46c0      	nop			; (mov r8, r8)
 8004a14:	20000428 	.word	0x20000428
 8004a18:	2000042c 	.word	0x2000042c

08004a1c <_realloc_r>:
 8004a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a1e:	0007      	movs	r7, r0
 8004a20:	000d      	movs	r5, r1
 8004a22:	0016      	movs	r6, r2
 8004a24:	2900      	cmp	r1, #0
 8004a26:	d105      	bne.n	8004a34 <_realloc_r+0x18>
 8004a28:	0011      	movs	r1, r2
 8004a2a:	f7ff ff99 	bl	8004960 <_malloc_r>
 8004a2e:	0004      	movs	r4, r0
 8004a30:	0020      	movs	r0, r4
 8004a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a34:	2a00      	cmp	r2, #0
 8004a36:	d103      	bne.n	8004a40 <_realloc_r+0x24>
 8004a38:	f7ff ff48 	bl	80048cc <_free_r>
 8004a3c:	0034      	movs	r4, r6
 8004a3e:	e7f7      	b.n	8004a30 <_realloc_r+0x14>
 8004a40:	f000 f826 	bl	8004a90 <_malloc_usable_size_r>
 8004a44:	002c      	movs	r4, r5
 8004a46:	42b0      	cmp	r0, r6
 8004a48:	d2f2      	bcs.n	8004a30 <_realloc_r+0x14>
 8004a4a:	0031      	movs	r1, r6
 8004a4c:	0038      	movs	r0, r7
 8004a4e:	f7ff ff87 	bl	8004960 <_malloc_r>
 8004a52:	1e04      	subs	r4, r0, #0
 8004a54:	d0ec      	beq.n	8004a30 <_realloc_r+0x14>
 8004a56:	0029      	movs	r1, r5
 8004a58:	0032      	movs	r2, r6
 8004a5a:	f7ff fc11 	bl	8004280 <memcpy>
 8004a5e:	0029      	movs	r1, r5
 8004a60:	0038      	movs	r0, r7
 8004a62:	f7ff ff33 	bl	80048cc <_free_r>
 8004a66:	e7e3      	b.n	8004a30 <_realloc_r+0x14>

08004a68 <_sbrk_r>:
 8004a68:	2300      	movs	r3, #0
 8004a6a:	b570      	push	{r4, r5, r6, lr}
 8004a6c:	4c06      	ldr	r4, [pc, #24]	; (8004a88 <_sbrk_r+0x20>)
 8004a6e:	0005      	movs	r5, r0
 8004a70:	0008      	movs	r0, r1
 8004a72:	6023      	str	r3, [r4, #0]
 8004a74:	f7fc fc70 	bl	8001358 <_sbrk>
 8004a78:	1c43      	adds	r3, r0, #1
 8004a7a:	d103      	bne.n	8004a84 <_sbrk_r+0x1c>
 8004a7c:	6823      	ldr	r3, [r4, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d000      	beq.n	8004a84 <_sbrk_r+0x1c>
 8004a82:	602b      	str	r3, [r5, #0]
 8004a84:	bd70      	pop	{r4, r5, r6, pc}
 8004a86:	46c0      	nop			; (mov r8, r8)
 8004a88:	200005cc 	.word	0x200005cc

08004a8c <__malloc_lock>:
 8004a8c:	4770      	bx	lr

08004a8e <__malloc_unlock>:
 8004a8e:	4770      	bx	lr

08004a90 <_malloc_usable_size_r>:
 8004a90:	1f0b      	subs	r3, r1, #4
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	1f18      	subs	r0, r3, #4
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	da01      	bge.n	8004a9e <_malloc_usable_size_r+0xe>
 8004a9a:	580b      	ldr	r3, [r1, r0]
 8004a9c:	18c0      	adds	r0, r0, r3
 8004a9e:	4770      	bx	lr

08004aa0 <_init>:
 8004aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa2:	46c0      	nop			; (mov r8, r8)
 8004aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa6:	bc08      	pop	{r3}
 8004aa8:	469e      	mov	lr, r3
 8004aaa:	4770      	bx	lr

08004aac <_fini>:
 8004aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aae:	46c0      	nop			; (mov r8, r8)
 8004ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ab2:	bc08      	pop	{r3}
 8004ab4:	469e      	mov	lr, r3
 8004ab6:	4770      	bx	lr
