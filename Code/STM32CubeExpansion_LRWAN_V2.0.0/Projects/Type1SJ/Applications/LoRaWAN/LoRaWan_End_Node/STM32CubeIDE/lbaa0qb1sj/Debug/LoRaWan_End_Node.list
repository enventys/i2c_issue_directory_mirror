
LoRaWan_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000110ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f40  080111ac  080111ac  000211ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080120ec  080120ec  000220ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080120f4  080120f4  000220f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080120f8  080120f8  000220f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  080120fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001484  200001dc  080122d8  000301dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000800  20001660  080122d8  00031660  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00066539  00000000  00000000  00030204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000cef1  00000000  00000000  0009673d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002570  00000000  00000000  000a3630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00003b48  00000000  00000000  000a5ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000206a2  00000000  00000000  000a96e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00046a8d  00000000  00000000  000c9d8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000aaa74  00000000  00000000  00110817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001bb28b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000077d0  00000000  00000000  001bb2e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loc    0001f756  00000000  00000000  001c2ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001dc 	.word	0x200001dc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08011194 	.word	0x08011194

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e0 	.word	0x200001e0
 8000104:	08011194 	.word	0x08011194

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	; 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	; 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	; 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_cdrcmple>:
 8000454:	4684      	mov	ip, r0
 8000456:	1c10      	adds	r0, r2, #0
 8000458:	4662      	mov	r2, ip
 800045a:	468c      	mov	ip, r1
 800045c:	1c19      	adds	r1, r3, #0
 800045e:	4663      	mov	r3, ip
 8000460:	e000      	b.n	8000464 <__aeabi_cdcmpeq>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_cdcmpeq>:
 8000464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000466:	f001 fdbf 	bl	8001fe8 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	d401      	bmi.n	8000472 <__aeabi_cdcmpeq+0xe>
 800046e:	2100      	movs	r1, #0
 8000470:	42c8      	cmn	r0, r1
 8000472:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000474 <__aeabi_dcmpeq>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f001 fd09 	bl	8001e8c <__eqdf2>
 800047a:	4240      	negs	r0, r0
 800047c:	3001      	adds	r0, #1
 800047e:	bd10      	pop	{r4, pc}

08000480 <__aeabi_dcmplt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fdb1 	bl	8001fe8 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	db01      	blt.n	800048e <__aeabi_dcmplt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmple>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 fda7 	bl	8001fe8 <__ledf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dd01      	ble.n	80004a2 <__aeabi_dcmple+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpgt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fd2b 	bl	8001f04 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dc01      	bgt.n	80004b6 <__aeabi_dcmpgt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_dcmpge>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f001 fd21 	bl	8001f04 <__gedf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	da01      	bge.n	80004ca <__aeabi_dcmpge+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_cfrcmple>:
 80004d0:	4684      	mov	ip, r0
 80004d2:	1c08      	adds	r0, r1, #0
 80004d4:	4661      	mov	r1, ip
 80004d6:	e7ff      	b.n	80004d8 <__aeabi_cfcmpeq>

080004d8 <__aeabi_cfcmpeq>:
 80004d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004da:	f000 fafd 	bl	8000ad8 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	d401      	bmi.n	80004e6 <__aeabi_cfcmpeq+0xe>
 80004e2:	2100      	movs	r1, #0
 80004e4:	42c8      	cmn	r0, r1
 80004e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004e8 <__aeabi_fcmpeq>:
 80004e8:	b510      	push	{r4, lr}
 80004ea:	f000 fa81 	bl	80009f0 <__eqsf2>
 80004ee:	4240      	negs	r0, r0
 80004f0:	3001      	adds	r0, #1
 80004f2:	bd10      	pop	{r4, pc}

080004f4 <__aeabi_fcmplt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 faef 	bl	8000ad8 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	db01      	blt.n	8000502 <__aeabi_fcmplt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmple>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fae5 	bl	8000ad8 <__lesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dd01      	ble.n	8000516 <__aeabi_fcmple+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fcmpgt>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fa8f 	bl	8000a40 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	dc01      	bgt.n	800052a <__aeabi_fcmpgt+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__aeabi_fcmpge>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fa85 	bl	8000a40 <__gesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	da01      	bge.n	800053e <__aeabi_fcmpge+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_uldivmod>:
 8000544:	2b00      	cmp	r3, #0
 8000546:	d111      	bne.n	800056c <__aeabi_uldivmod+0x28>
 8000548:	2a00      	cmp	r2, #0
 800054a:	d10f      	bne.n	800056c <__aeabi_uldivmod+0x28>
 800054c:	2900      	cmp	r1, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_uldivmod+0xe>
 8000550:	2800      	cmp	r0, #0
 8000552:	d002      	beq.n	800055a <__aeabi_uldivmod+0x16>
 8000554:	2100      	movs	r1, #0
 8000556:	43c9      	mvns	r1, r1
 8000558:	1c08      	adds	r0, r1, #0
 800055a:	b407      	push	{r0, r1, r2}
 800055c:	4802      	ldr	r0, [pc, #8]	; (8000568 <__aeabi_uldivmod+0x24>)
 800055e:	a102      	add	r1, pc, #8	; (adr r1, 8000568 <__aeabi_uldivmod+0x24>)
 8000560:	1840      	adds	r0, r0, r1
 8000562:	9002      	str	r0, [sp, #8]
 8000564:	bd03      	pop	{r0, r1, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	fffffee9 	.word	0xfffffee9
 800056c:	b403      	push	{r0, r1}
 800056e:	4668      	mov	r0, sp
 8000570:	b501      	push	{r0, lr}
 8000572:	9802      	ldr	r0, [sp, #8]
 8000574:	f000 f864 	bl	8000640 <__udivmoddi4>
 8000578:	9b01      	ldr	r3, [sp, #4]
 800057a:	469e      	mov	lr, r3
 800057c:	b002      	add	sp, #8
 800057e:	bc0c      	pop	{r2, r3}
 8000580:	4770      	bx	lr
 8000582:	46c0      	nop			; (mov r8, r8)

08000584 <__aeabi_lmul>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	0415      	lsls	r5, r2, #16
 8000588:	0c2d      	lsrs	r5, r5, #16
 800058a:	000f      	movs	r7, r1
 800058c:	0001      	movs	r1, r0
 800058e:	002e      	movs	r6, r5
 8000590:	46c6      	mov	lr, r8
 8000592:	4684      	mov	ip, r0
 8000594:	0400      	lsls	r0, r0, #16
 8000596:	0c14      	lsrs	r4, r2, #16
 8000598:	0c00      	lsrs	r0, r0, #16
 800059a:	0c09      	lsrs	r1, r1, #16
 800059c:	4346      	muls	r6, r0
 800059e:	434d      	muls	r5, r1
 80005a0:	4360      	muls	r0, r4
 80005a2:	4361      	muls	r1, r4
 80005a4:	1940      	adds	r0, r0, r5
 80005a6:	0c34      	lsrs	r4, r6, #16
 80005a8:	1824      	adds	r4, r4, r0
 80005aa:	b500      	push	{lr}
 80005ac:	42a5      	cmp	r5, r4
 80005ae:	d903      	bls.n	80005b8 <__aeabi_lmul+0x34>
 80005b0:	2080      	movs	r0, #128	; 0x80
 80005b2:	0240      	lsls	r0, r0, #9
 80005b4:	4680      	mov	r8, r0
 80005b6:	4441      	add	r1, r8
 80005b8:	0c25      	lsrs	r5, r4, #16
 80005ba:	186d      	adds	r5, r5, r1
 80005bc:	4661      	mov	r1, ip
 80005be:	4359      	muls	r1, r3
 80005c0:	437a      	muls	r2, r7
 80005c2:	0430      	lsls	r0, r6, #16
 80005c4:	1949      	adds	r1, r1, r5
 80005c6:	0424      	lsls	r4, r4, #16
 80005c8:	0c00      	lsrs	r0, r0, #16
 80005ca:	1820      	adds	r0, r4, r0
 80005cc:	1889      	adds	r1, r1, r2
 80005ce:	bc80      	pop	{r7}
 80005d0:	46b8      	mov	r8, r7
 80005d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080005d4 <__aeabi_f2uiz>:
 80005d4:	219e      	movs	r1, #158	; 0x9e
 80005d6:	b510      	push	{r4, lr}
 80005d8:	05c9      	lsls	r1, r1, #23
 80005da:	1c04      	adds	r4, r0, #0
 80005dc:	f7ff ffa8 	bl	8000530 <__aeabi_fcmpge>
 80005e0:	2800      	cmp	r0, #0
 80005e2:	d103      	bne.n	80005ec <__aeabi_f2uiz+0x18>
 80005e4:	1c20      	adds	r0, r4, #0
 80005e6:	f000 fda3 	bl	8001130 <__aeabi_f2iz>
 80005ea:	bd10      	pop	{r4, pc}
 80005ec:	219e      	movs	r1, #158	; 0x9e
 80005ee:	1c20      	adds	r0, r4, #0
 80005f0:	05c9      	lsls	r1, r1, #23
 80005f2:	f000 fbd5 	bl	8000da0 <__aeabi_fsub>
 80005f6:	f000 fd9b 	bl	8001130 <__aeabi_f2iz>
 80005fa:	2380      	movs	r3, #128	; 0x80
 80005fc:	061b      	lsls	r3, r3, #24
 80005fe:	469c      	mov	ip, r3
 8000600:	4460      	add	r0, ip
 8000602:	e7f2      	b.n	80005ea <__aeabi_f2uiz+0x16>

08000604 <__aeabi_d2uiz>:
 8000604:	b570      	push	{r4, r5, r6, lr}
 8000606:	2200      	movs	r2, #0
 8000608:	4b0c      	ldr	r3, [pc, #48]	; (800063c <__aeabi_d2uiz+0x38>)
 800060a:	0004      	movs	r4, r0
 800060c:	000d      	movs	r5, r1
 800060e:	f7ff ff55 	bl	80004bc <__aeabi_dcmpge>
 8000612:	2800      	cmp	r0, #0
 8000614:	d104      	bne.n	8000620 <__aeabi_d2uiz+0x1c>
 8000616:	0020      	movs	r0, r4
 8000618:	0029      	movs	r1, r5
 800061a:	f002 fb53 	bl	8002cc4 <__aeabi_d2iz>
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <__aeabi_d2uiz+0x38>)
 8000622:	2200      	movs	r2, #0
 8000624:	0020      	movs	r0, r4
 8000626:	0029      	movs	r1, r5
 8000628:	f001 ffba 	bl	80025a0 <__aeabi_dsub>
 800062c:	f002 fb4a 	bl	8002cc4 <__aeabi_d2iz>
 8000630:	2380      	movs	r3, #128	; 0x80
 8000632:	061b      	lsls	r3, r3, #24
 8000634:	469c      	mov	ip, r3
 8000636:	4460      	add	r0, ip
 8000638:	e7f1      	b.n	800061e <__aeabi_d2uiz+0x1a>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	41e00000 	.word	0x41e00000

08000640 <__udivmoddi4>:
 8000640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000642:	4657      	mov	r7, sl
 8000644:	464e      	mov	r6, r9
 8000646:	4645      	mov	r5, r8
 8000648:	46de      	mov	lr, fp
 800064a:	b5e0      	push	{r5, r6, r7, lr}
 800064c:	0004      	movs	r4, r0
 800064e:	000d      	movs	r5, r1
 8000650:	4692      	mov	sl, r2
 8000652:	4699      	mov	r9, r3
 8000654:	b083      	sub	sp, #12
 8000656:	428b      	cmp	r3, r1
 8000658:	d830      	bhi.n	80006bc <__udivmoddi4+0x7c>
 800065a:	d02d      	beq.n	80006b8 <__udivmoddi4+0x78>
 800065c:	4649      	mov	r1, r9
 800065e:	4650      	mov	r0, sl
 8000660:	f002 fc22 	bl	8002ea8 <__clzdi2>
 8000664:	0029      	movs	r1, r5
 8000666:	0006      	movs	r6, r0
 8000668:	0020      	movs	r0, r4
 800066a:	f002 fc1d 	bl	8002ea8 <__clzdi2>
 800066e:	1a33      	subs	r3, r6, r0
 8000670:	4698      	mov	r8, r3
 8000672:	3b20      	subs	r3, #32
 8000674:	469b      	mov	fp, r3
 8000676:	d433      	bmi.n	80006e0 <__udivmoddi4+0xa0>
 8000678:	465a      	mov	r2, fp
 800067a:	4653      	mov	r3, sl
 800067c:	4093      	lsls	r3, r2
 800067e:	4642      	mov	r2, r8
 8000680:	001f      	movs	r7, r3
 8000682:	4653      	mov	r3, sl
 8000684:	4093      	lsls	r3, r2
 8000686:	001e      	movs	r6, r3
 8000688:	42af      	cmp	r7, r5
 800068a:	d83a      	bhi.n	8000702 <__udivmoddi4+0xc2>
 800068c:	42af      	cmp	r7, r5
 800068e:	d100      	bne.n	8000692 <__udivmoddi4+0x52>
 8000690:	e078      	b.n	8000784 <__udivmoddi4+0x144>
 8000692:	465b      	mov	r3, fp
 8000694:	1ba4      	subs	r4, r4, r6
 8000696:	41bd      	sbcs	r5, r7
 8000698:	2b00      	cmp	r3, #0
 800069a:	da00      	bge.n	800069e <__udivmoddi4+0x5e>
 800069c:	e075      	b.n	800078a <__udivmoddi4+0x14a>
 800069e:	2200      	movs	r2, #0
 80006a0:	2300      	movs	r3, #0
 80006a2:	9200      	str	r2, [sp, #0]
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2301      	movs	r3, #1
 80006a8:	465a      	mov	r2, fp
 80006aa:	4093      	lsls	r3, r2
 80006ac:	9301      	str	r3, [sp, #4]
 80006ae:	2301      	movs	r3, #1
 80006b0:	4642      	mov	r2, r8
 80006b2:	4093      	lsls	r3, r2
 80006b4:	9300      	str	r3, [sp, #0]
 80006b6:	e028      	b.n	800070a <__udivmoddi4+0xca>
 80006b8:	4282      	cmp	r2, r0
 80006ba:	d9cf      	bls.n	800065c <__udivmoddi4+0x1c>
 80006bc:	2200      	movs	r2, #0
 80006be:	2300      	movs	r3, #0
 80006c0:	9200      	str	r2, [sp, #0]
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <__udivmoddi4+0x8e>
 80006ca:	601c      	str	r4, [r3, #0]
 80006cc:	605d      	str	r5, [r3, #4]
 80006ce:	9800      	ldr	r0, [sp, #0]
 80006d0:	9901      	ldr	r1, [sp, #4]
 80006d2:	b003      	add	sp, #12
 80006d4:	bcf0      	pop	{r4, r5, r6, r7}
 80006d6:	46bb      	mov	fp, r7
 80006d8:	46b2      	mov	sl, r6
 80006da:	46a9      	mov	r9, r5
 80006dc:	46a0      	mov	r8, r4
 80006de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006e0:	4642      	mov	r2, r8
 80006e2:	2320      	movs	r3, #32
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	4652      	mov	r2, sl
 80006e8:	40da      	lsrs	r2, r3
 80006ea:	4641      	mov	r1, r8
 80006ec:	0013      	movs	r3, r2
 80006ee:	464a      	mov	r2, r9
 80006f0:	408a      	lsls	r2, r1
 80006f2:	0017      	movs	r7, r2
 80006f4:	4642      	mov	r2, r8
 80006f6:	431f      	orrs	r7, r3
 80006f8:	4653      	mov	r3, sl
 80006fa:	4093      	lsls	r3, r2
 80006fc:	001e      	movs	r6, r3
 80006fe:	42af      	cmp	r7, r5
 8000700:	d9c4      	bls.n	800068c <__udivmoddi4+0x4c>
 8000702:	2200      	movs	r2, #0
 8000704:	2300      	movs	r3, #0
 8000706:	9200      	str	r2, [sp, #0]
 8000708:	9301      	str	r3, [sp, #4]
 800070a:	4643      	mov	r3, r8
 800070c:	2b00      	cmp	r3, #0
 800070e:	d0d9      	beq.n	80006c4 <__udivmoddi4+0x84>
 8000710:	07fb      	lsls	r3, r7, #31
 8000712:	0872      	lsrs	r2, r6, #1
 8000714:	431a      	orrs	r2, r3
 8000716:	4646      	mov	r6, r8
 8000718:	087b      	lsrs	r3, r7, #1
 800071a:	e00e      	b.n	800073a <__udivmoddi4+0xfa>
 800071c:	42ab      	cmp	r3, r5
 800071e:	d101      	bne.n	8000724 <__udivmoddi4+0xe4>
 8000720:	42a2      	cmp	r2, r4
 8000722:	d80c      	bhi.n	800073e <__udivmoddi4+0xfe>
 8000724:	1aa4      	subs	r4, r4, r2
 8000726:	419d      	sbcs	r5, r3
 8000728:	2001      	movs	r0, #1
 800072a:	1924      	adds	r4, r4, r4
 800072c:	416d      	adcs	r5, r5
 800072e:	2100      	movs	r1, #0
 8000730:	3e01      	subs	r6, #1
 8000732:	1824      	adds	r4, r4, r0
 8000734:	414d      	adcs	r5, r1
 8000736:	2e00      	cmp	r6, #0
 8000738:	d006      	beq.n	8000748 <__udivmoddi4+0x108>
 800073a:	42ab      	cmp	r3, r5
 800073c:	d9ee      	bls.n	800071c <__udivmoddi4+0xdc>
 800073e:	3e01      	subs	r6, #1
 8000740:	1924      	adds	r4, r4, r4
 8000742:	416d      	adcs	r5, r5
 8000744:	2e00      	cmp	r6, #0
 8000746:	d1f8      	bne.n	800073a <__udivmoddi4+0xfa>
 8000748:	9800      	ldr	r0, [sp, #0]
 800074a:	9901      	ldr	r1, [sp, #4]
 800074c:	465b      	mov	r3, fp
 800074e:	1900      	adds	r0, r0, r4
 8000750:	4169      	adcs	r1, r5
 8000752:	2b00      	cmp	r3, #0
 8000754:	db24      	blt.n	80007a0 <__udivmoddi4+0x160>
 8000756:	002b      	movs	r3, r5
 8000758:	465a      	mov	r2, fp
 800075a:	4644      	mov	r4, r8
 800075c:	40d3      	lsrs	r3, r2
 800075e:	002a      	movs	r2, r5
 8000760:	40e2      	lsrs	r2, r4
 8000762:	001c      	movs	r4, r3
 8000764:	465b      	mov	r3, fp
 8000766:	0015      	movs	r5, r2
 8000768:	2b00      	cmp	r3, #0
 800076a:	db2a      	blt.n	80007c2 <__udivmoddi4+0x182>
 800076c:	0026      	movs	r6, r4
 800076e:	409e      	lsls	r6, r3
 8000770:	0033      	movs	r3, r6
 8000772:	0026      	movs	r6, r4
 8000774:	4647      	mov	r7, r8
 8000776:	40be      	lsls	r6, r7
 8000778:	0032      	movs	r2, r6
 800077a:	1a80      	subs	r0, r0, r2
 800077c:	4199      	sbcs	r1, r3
 800077e:	9000      	str	r0, [sp, #0]
 8000780:	9101      	str	r1, [sp, #4]
 8000782:	e79f      	b.n	80006c4 <__udivmoddi4+0x84>
 8000784:	42a3      	cmp	r3, r4
 8000786:	d8bc      	bhi.n	8000702 <__udivmoddi4+0xc2>
 8000788:	e783      	b.n	8000692 <__udivmoddi4+0x52>
 800078a:	4642      	mov	r2, r8
 800078c:	2320      	movs	r3, #32
 800078e:	2100      	movs	r1, #0
 8000790:	1a9b      	subs	r3, r3, r2
 8000792:	2200      	movs	r2, #0
 8000794:	9100      	str	r1, [sp, #0]
 8000796:	9201      	str	r2, [sp, #4]
 8000798:	2201      	movs	r2, #1
 800079a:	40da      	lsrs	r2, r3
 800079c:	9201      	str	r2, [sp, #4]
 800079e:	e786      	b.n	80006ae <__udivmoddi4+0x6e>
 80007a0:	4642      	mov	r2, r8
 80007a2:	2320      	movs	r3, #32
 80007a4:	1a9b      	subs	r3, r3, r2
 80007a6:	002a      	movs	r2, r5
 80007a8:	4646      	mov	r6, r8
 80007aa:	409a      	lsls	r2, r3
 80007ac:	0023      	movs	r3, r4
 80007ae:	40f3      	lsrs	r3, r6
 80007b0:	4644      	mov	r4, r8
 80007b2:	4313      	orrs	r3, r2
 80007b4:	002a      	movs	r2, r5
 80007b6:	40e2      	lsrs	r2, r4
 80007b8:	001c      	movs	r4, r3
 80007ba:	465b      	mov	r3, fp
 80007bc:	0015      	movs	r5, r2
 80007be:	2b00      	cmp	r3, #0
 80007c0:	dad4      	bge.n	800076c <__udivmoddi4+0x12c>
 80007c2:	4642      	mov	r2, r8
 80007c4:	002f      	movs	r7, r5
 80007c6:	2320      	movs	r3, #32
 80007c8:	0026      	movs	r6, r4
 80007ca:	4097      	lsls	r7, r2
 80007cc:	1a9b      	subs	r3, r3, r2
 80007ce:	40de      	lsrs	r6, r3
 80007d0:	003b      	movs	r3, r7
 80007d2:	4333      	orrs	r3, r6
 80007d4:	e7cd      	b.n	8000772 <__udivmoddi4+0x132>
 80007d6:	46c0      	nop			; (mov r8, r8)

080007d8 <__aeabi_fdiv>:
 80007d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007da:	464f      	mov	r7, r9
 80007dc:	4646      	mov	r6, r8
 80007de:	46d6      	mov	lr, sl
 80007e0:	0245      	lsls	r5, r0, #9
 80007e2:	b5c0      	push	{r6, r7, lr}
 80007e4:	0047      	lsls	r7, r0, #1
 80007e6:	1c0c      	adds	r4, r1, #0
 80007e8:	0a6d      	lsrs	r5, r5, #9
 80007ea:	0e3f      	lsrs	r7, r7, #24
 80007ec:	0fc6      	lsrs	r6, r0, #31
 80007ee:	2f00      	cmp	r7, #0
 80007f0:	d066      	beq.n	80008c0 <__aeabi_fdiv+0xe8>
 80007f2:	2fff      	cmp	r7, #255	; 0xff
 80007f4:	d06c      	beq.n	80008d0 <__aeabi_fdiv+0xf8>
 80007f6:	2300      	movs	r3, #0
 80007f8:	00ea      	lsls	r2, r5, #3
 80007fa:	2580      	movs	r5, #128	; 0x80
 80007fc:	4699      	mov	r9, r3
 80007fe:	469a      	mov	sl, r3
 8000800:	04ed      	lsls	r5, r5, #19
 8000802:	4315      	orrs	r5, r2
 8000804:	3f7f      	subs	r7, #127	; 0x7f
 8000806:	0260      	lsls	r0, r4, #9
 8000808:	0061      	lsls	r1, r4, #1
 800080a:	0a43      	lsrs	r3, r0, #9
 800080c:	4698      	mov	r8, r3
 800080e:	0e09      	lsrs	r1, r1, #24
 8000810:	0fe4      	lsrs	r4, r4, #31
 8000812:	2900      	cmp	r1, #0
 8000814:	d048      	beq.n	80008a8 <__aeabi_fdiv+0xd0>
 8000816:	29ff      	cmp	r1, #255	; 0xff
 8000818:	d010      	beq.n	800083c <__aeabi_fdiv+0x64>
 800081a:	2280      	movs	r2, #128	; 0x80
 800081c:	00d8      	lsls	r0, r3, #3
 800081e:	04d2      	lsls	r2, r2, #19
 8000820:	4302      	orrs	r2, r0
 8000822:	4690      	mov	r8, r2
 8000824:	2000      	movs	r0, #0
 8000826:	397f      	subs	r1, #127	; 0x7f
 8000828:	464a      	mov	r2, r9
 800082a:	0033      	movs	r3, r6
 800082c:	1a7f      	subs	r7, r7, r1
 800082e:	4302      	orrs	r2, r0
 8000830:	496c      	ldr	r1, [pc, #432]	; (80009e4 <__aeabi_fdiv+0x20c>)
 8000832:	0092      	lsls	r2, r2, #2
 8000834:	588a      	ldr	r2, [r1, r2]
 8000836:	4063      	eors	r3, r4
 8000838:	b2db      	uxtb	r3, r3
 800083a:	4697      	mov	pc, r2
 800083c:	2b00      	cmp	r3, #0
 800083e:	d16d      	bne.n	800091c <__aeabi_fdiv+0x144>
 8000840:	2002      	movs	r0, #2
 8000842:	3fff      	subs	r7, #255	; 0xff
 8000844:	e033      	b.n	80008ae <__aeabi_fdiv+0xd6>
 8000846:	2300      	movs	r3, #0
 8000848:	4698      	mov	r8, r3
 800084a:	0026      	movs	r6, r4
 800084c:	4645      	mov	r5, r8
 800084e:	4682      	mov	sl, r0
 8000850:	4653      	mov	r3, sl
 8000852:	2b02      	cmp	r3, #2
 8000854:	d100      	bne.n	8000858 <__aeabi_fdiv+0x80>
 8000856:	e07f      	b.n	8000958 <__aeabi_fdiv+0x180>
 8000858:	2b03      	cmp	r3, #3
 800085a:	d100      	bne.n	800085e <__aeabi_fdiv+0x86>
 800085c:	e094      	b.n	8000988 <__aeabi_fdiv+0x1b0>
 800085e:	2b01      	cmp	r3, #1
 8000860:	d017      	beq.n	8000892 <__aeabi_fdiv+0xba>
 8000862:	0038      	movs	r0, r7
 8000864:	307f      	adds	r0, #127	; 0x7f
 8000866:	2800      	cmp	r0, #0
 8000868:	dd5f      	ble.n	800092a <__aeabi_fdiv+0x152>
 800086a:	076b      	lsls	r3, r5, #29
 800086c:	d004      	beq.n	8000878 <__aeabi_fdiv+0xa0>
 800086e:	230f      	movs	r3, #15
 8000870:	402b      	ands	r3, r5
 8000872:	2b04      	cmp	r3, #4
 8000874:	d000      	beq.n	8000878 <__aeabi_fdiv+0xa0>
 8000876:	3504      	adds	r5, #4
 8000878:	012b      	lsls	r3, r5, #4
 800087a:	d503      	bpl.n	8000884 <__aeabi_fdiv+0xac>
 800087c:	0038      	movs	r0, r7
 800087e:	4b5a      	ldr	r3, [pc, #360]	; (80009e8 <__aeabi_fdiv+0x210>)
 8000880:	3080      	adds	r0, #128	; 0x80
 8000882:	401d      	ands	r5, r3
 8000884:	28fe      	cmp	r0, #254	; 0xfe
 8000886:	dc67      	bgt.n	8000958 <__aeabi_fdiv+0x180>
 8000888:	01ad      	lsls	r5, r5, #6
 800088a:	0a6d      	lsrs	r5, r5, #9
 800088c:	b2c0      	uxtb	r0, r0
 800088e:	e002      	b.n	8000896 <__aeabi_fdiv+0xbe>
 8000890:	001e      	movs	r6, r3
 8000892:	2000      	movs	r0, #0
 8000894:	2500      	movs	r5, #0
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4328      	orrs	r0, r5
 800089a:	07f6      	lsls	r6, r6, #31
 800089c:	4330      	orrs	r0, r6
 800089e:	bce0      	pop	{r5, r6, r7}
 80008a0:	46ba      	mov	sl, r7
 80008a2:	46b1      	mov	r9, r6
 80008a4:	46a8      	mov	r8, r5
 80008a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d12b      	bne.n	8000904 <__aeabi_fdiv+0x12c>
 80008ac:	2001      	movs	r0, #1
 80008ae:	464a      	mov	r2, r9
 80008b0:	0033      	movs	r3, r6
 80008b2:	494e      	ldr	r1, [pc, #312]	; (80009ec <__aeabi_fdiv+0x214>)
 80008b4:	4302      	orrs	r2, r0
 80008b6:	0092      	lsls	r2, r2, #2
 80008b8:	588a      	ldr	r2, [r1, r2]
 80008ba:	4063      	eors	r3, r4
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4697      	mov	pc, r2
 80008c0:	2d00      	cmp	r5, #0
 80008c2:	d113      	bne.n	80008ec <__aeabi_fdiv+0x114>
 80008c4:	2304      	movs	r3, #4
 80008c6:	4699      	mov	r9, r3
 80008c8:	3b03      	subs	r3, #3
 80008ca:	2700      	movs	r7, #0
 80008cc:	469a      	mov	sl, r3
 80008ce:	e79a      	b.n	8000806 <__aeabi_fdiv+0x2e>
 80008d0:	2d00      	cmp	r5, #0
 80008d2:	d105      	bne.n	80008e0 <__aeabi_fdiv+0x108>
 80008d4:	2308      	movs	r3, #8
 80008d6:	4699      	mov	r9, r3
 80008d8:	3b06      	subs	r3, #6
 80008da:	27ff      	movs	r7, #255	; 0xff
 80008dc:	469a      	mov	sl, r3
 80008de:	e792      	b.n	8000806 <__aeabi_fdiv+0x2e>
 80008e0:	230c      	movs	r3, #12
 80008e2:	4699      	mov	r9, r3
 80008e4:	3b09      	subs	r3, #9
 80008e6:	27ff      	movs	r7, #255	; 0xff
 80008e8:	469a      	mov	sl, r3
 80008ea:	e78c      	b.n	8000806 <__aeabi_fdiv+0x2e>
 80008ec:	0028      	movs	r0, r5
 80008ee:	f002 fabd 	bl	8002e6c <__clzsi2>
 80008f2:	2776      	movs	r7, #118	; 0x76
 80008f4:	1f43      	subs	r3, r0, #5
 80008f6:	409d      	lsls	r5, r3
 80008f8:	2300      	movs	r3, #0
 80008fa:	427f      	negs	r7, r7
 80008fc:	4699      	mov	r9, r3
 80008fe:	469a      	mov	sl, r3
 8000900:	1a3f      	subs	r7, r7, r0
 8000902:	e780      	b.n	8000806 <__aeabi_fdiv+0x2e>
 8000904:	0018      	movs	r0, r3
 8000906:	f002 fab1 	bl	8002e6c <__clzsi2>
 800090a:	4642      	mov	r2, r8
 800090c:	1f43      	subs	r3, r0, #5
 800090e:	2176      	movs	r1, #118	; 0x76
 8000910:	409a      	lsls	r2, r3
 8000912:	4249      	negs	r1, r1
 8000914:	1a09      	subs	r1, r1, r0
 8000916:	4690      	mov	r8, r2
 8000918:	2000      	movs	r0, #0
 800091a:	e785      	b.n	8000828 <__aeabi_fdiv+0x50>
 800091c:	21ff      	movs	r1, #255	; 0xff
 800091e:	2003      	movs	r0, #3
 8000920:	e782      	b.n	8000828 <__aeabi_fdiv+0x50>
 8000922:	001e      	movs	r6, r3
 8000924:	20ff      	movs	r0, #255	; 0xff
 8000926:	2500      	movs	r5, #0
 8000928:	e7b5      	b.n	8000896 <__aeabi_fdiv+0xbe>
 800092a:	2301      	movs	r3, #1
 800092c:	1a1b      	subs	r3, r3, r0
 800092e:	2b1b      	cmp	r3, #27
 8000930:	dcaf      	bgt.n	8000892 <__aeabi_fdiv+0xba>
 8000932:	379e      	adds	r7, #158	; 0x9e
 8000934:	0029      	movs	r1, r5
 8000936:	40bd      	lsls	r5, r7
 8000938:	40d9      	lsrs	r1, r3
 800093a:	1e6a      	subs	r2, r5, #1
 800093c:	4195      	sbcs	r5, r2
 800093e:	430d      	orrs	r5, r1
 8000940:	076b      	lsls	r3, r5, #29
 8000942:	d004      	beq.n	800094e <__aeabi_fdiv+0x176>
 8000944:	230f      	movs	r3, #15
 8000946:	402b      	ands	r3, r5
 8000948:	2b04      	cmp	r3, #4
 800094a:	d000      	beq.n	800094e <__aeabi_fdiv+0x176>
 800094c:	3504      	adds	r5, #4
 800094e:	016b      	lsls	r3, r5, #5
 8000950:	d544      	bpl.n	80009dc <__aeabi_fdiv+0x204>
 8000952:	2001      	movs	r0, #1
 8000954:	2500      	movs	r5, #0
 8000956:	e79e      	b.n	8000896 <__aeabi_fdiv+0xbe>
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	2500      	movs	r5, #0
 800095c:	e79b      	b.n	8000896 <__aeabi_fdiv+0xbe>
 800095e:	2580      	movs	r5, #128	; 0x80
 8000960:	2600      	movs	r6, #0
 8000962:	20ff      	movs	r0, #255	; 0xff
 8000964:	03ed      	lsls	r5, r5, #15
 8000966:	e796      	b.n	8000896 <__aeabi_fdiv+0xbe>
 8000968:	2300      	movs	r3, #0
 800096a:	4698      	mov	r8, r3
 800096c:	2080      	movs	r0, #128	; 0x80
 800096e:	03c0      	lsls	r0, r0, #15
 8000970:	4205      	tst	r5, r0
 8000972:	d009      	beq.n	8000988 <__aeabi_fdiv+0x1b0>
 8000974:	4643      	mov	r3, r8
 8000976:	4203      	tst	r3, r0
 8000978:	d106      	bne.n	8000988 <__aeabi_fdiv+0x1b0>
 800097a:	4645      	mov	r5, r8
 800097c:	4305      	orrs	r5, r0
 800097e:	026d      	lsls	r5, r5, #9
 8000980:	0026      	movs	r6, r4
 8000982:	20ff      	movs	r0, #255	; 0xff
 8000984:	0a6d      	lsrs	r5, r5, #9
 8000986:	e786      	b.n	8000896 <__aeabi_fdiv+0xbe>
 8000988:	2080      	movs	r0, #128	; 0x80
 800098a:	03c0      	lsls	r0, r0, #15
 800098c:	4305      	orrs	r5, r0
 800098e:	026d      	lsls	r5, r5, #9
 8000990:	20ff      	movs	r0, #255	; 0xff
 8000992:	0a6d      	lsrs	r5, r5, #9
 8000994:	e77f      	b.n	8000896 <__aeabi_fdiv+0xbe>
 8000996:	4641      	mov	r1, r8
 8000998:	016a      	lsls	r2, r5, #5
 800099a:	0148      	lsls	r0, r1, #5
 800099c:	4282      	cmp	r2, r0
 800099e:	d219      	bcs.n	80009d4 <__aeabi_fdiv+0x1fc>
 80009a0:	211b      	movs	r1, #27
 80009a2:	2500      	movs	r5, #0
 80009a4:	3f01      	subs	r7, #1
 80009a6:	2601      	movs	r6, #1
 80009a8:	0014      	movs	r4, r2
 80009aa:	006d      	lsls	r5, r5, #1
 80009ac:	0052      	lsls	r2, r2, #1
 80009ae:	2c00      	cmp	r4, #0
 80009b0:	db01      	blt.n	80009b6 <__aeabi_fdiv+0x1de>
 80009b2:	4290      	cmp	r0, r2
 80009b4:	d801      	bhi.n	80009ba <__aeabi_fdiv+0x1e2>
 80009b6:	1a12      	subs	r2, r2, r0
 80009b8:	4335      	orrs	r5, r6
 80009ba:	3901      	subs	r1, #1
 80009bc:	2900      	cmp	r1, #0
 80009be:	d1f3      	bne.n	80009a8 <__aeabi_fdiv+0x1d0>
 80009c0:	1e50      	subs	r0, r2, #1
 80009c2:	4182      	sbcs	r2, r0
 80009c4:	0038      	movs	r0, r7
 80009c6:	307f      	adds	r0, #127	; 0x7f
 80009c8:	001e      	movs	r6, r3
 80009ca:	4315      	orrs	r5, r2
 80009cc:	2800      	cmp	r0, #0
 80009ce:	dd00      	ble.n	80009d2 <__aeabi_fdiv+0x1fa>
 80009d0:	e74b      	b.n	800086a <__aeabi_fdiv+0x92>
 80009d2:	e7aa      	b.n	800092a <__aeabi_fdiv+0x152>
 80009d4:	211a      	movs	r1, #26
 80009d6:	2501      	movs	r5, #1
 80009d8:	1a12      	subs	r2, r2, r0
 80009da:	e7e4      	b.n	80009a6 <__aeabi_fdiv+0x1ce>
 80009dc:	01ad      	lsls	r5, r5, #6
 80009de:	2000      	movs	r0, #0
 80009e0:	0a6d      	lsrs	r5, r5, #9
 80009e2:	e758      	b.n	8000896 <__aeabi_fdiv+0xbe>
 80009e4:	08011874 	.word	0x08011874
 80009e8:	f7ffffff 	.word	0xf7ffffff
 80009ec:	080118b4 	.word	0x080118b4

080009f0 <__eqsf2>:
 80009f0:	b570      	push	{r4, r5, r6, lr}
 80009f2:	0042      	lsls	r2, r0, #1
 80009f4:	024e      	lsls	r6, r1, #9
 80009f6:	004c      	lsls	r4, r1, #1
 80009f8:	0245      	lsls	r5, r0, #9
 80009fa:	0a6d      	lsrs	r5, r5, #9
 80009fc:	0e12      	lsrs	r2, r2, #24
 80009fe:	0fc3      	lsrs	r3, r0, #31
 8000a00:	0a76      	lsrs	r6, r6, #9
 8000a02:	0e24      	lsrs	r4, r4, #24
 8000a04:	0fc9      	lsrs	r1, r1, #31
 8000a06:	2aff      	cmp	r2, #255	; 0xff
 8000a08:	d00f      	beq.n	8000a2a <__eqsf2+0x3a>
 8000a0a:	2cff      	cmp	r4, #255	; 0xff
 8000a0c:	d011      	beq.n	8000a32 <__eqsf2+0x42>
 8000a0e:	2001      	movs	r0, #1
 8000a10:	42a2      	cmp	r2, r4
 8000a12:	d000      	beq.n	8000a16 <__eqsf2+0x26>
 8000a14:	bd70      	pop	{r4, r5, r6, pc}
 8000a16:	42b5      	cmp	r5, r6
 8000a18:	d1fc      	bne.n	8000a14 <__eqsf2+0x24>
 8000a1a:	428b      	cmp	r3, r1
 8000a1c:	d00d      	beq.n	8000a3a <__eqsf2+0x4a>
 8000a1e:	2a00      	cmp	r2, #0
 8000a20:	d1f8      	bne.n	8000a14 <__eqsf2+0x24>
 8000a22:	0028      	movs	r0, r5
 8000a24:	1e45      	subs	r5, r0, #1
 8000a26:	41a8      	sbcs	r0, r5
 8000a28:	e7f4      	b.n	8000a14 <__eqsf2+0x24>
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	2d00      	cmp	r5, #0
 8000a2e:	d1f1      	bne.n	8000a14 <__eqsf2+0x24>
 8000a30:	e7eb      	b.n	8000a0a <__eqsf2+0x1a>
 8000a32:	2001      	movs	r0, #1
 8000a34:	2e00      	cmp	r6, #0
 8000a36:	d1ed      	bne.n	8000a14 <__eqsf2+0x24>
 8000a38:	e7e9      	b.n	8000a0e <__eqsf2+0x1e>
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	e7ea      	b.n	8000a14 <__eqsf2+0x24>
 8000a3e:	46c0      	nop			; (mov r8, r8)

08000a40 <__gesf2>:
 8000a40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a42:	0042      	lsls	r2, r0, #1
 8000a44:	0246      	lsls	r6, r0, #9
 8000a46:	024d      	lsls	r5, r1, #9
 8000a48:	004c      	lsls	r4, r1, #1
 8000a4a:	0fc3      	lsrs	r3, r0, #31
 8000a4c:	0a76      	lsrs	r6, r6, #9
 8000a4e:	0e12      	lsrs	r2, r2, #24
 8000a50:	0a6d      	lsrs	r5, r5, #9
 8000a52:	0e24      	lsrs	r4, r4, #24
 8000a54:	0fc8      	lsrs	r0, r1, #31
 8000a56:	2aff      	cmp	r2, #255	; 0xff
 8000a58:	d01f      	beq.n	8000a9a <__gesf2+0x5a>
 8000a5a:	2cff      	cmp	r4, #255	; 0xff
 8000a5c:	d010      	beq.n	8000a80 <__gesf2+0x40>
 8000a5e:	2a00      	cmp	r2, #0
 8000a60:	d11f      	bne.n	8000aa2 <__gesf2+0x62>
 8000a62:	4271      	negs	r1, r6
 8000a64:	4171      	adcs	r1, r6
 8000a66:	2c00      	cmp	r4, #0
 8000a68:	d101      	bne.n	8000a6e <__gesf2+0x2e>
 8000a6a:	2d00      	cmp	r5, #0
 8000a6c:	d01e      	beq.n	8000aac <__gesf2+0x6c>
 8000a6e:	2900      	cmp	r1, #0
 8000a70:	d10e      	bne.n	8000a90 <__gesf2+0x50>
 8000a72:	4283      	cmp	r3, r0
 8000a74:	d01e      	beq.n	8000ab4 <__gesf2+0x74>
 8000a76:	2102      	movs	r1, #2
 8000a78:	1e58      	subs	r0, r3, #1
 8000a7a:	4008      	ands	r0, r1
 8000a7c:	3801      	subs	r0, #1
 8000a7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a80:	2d00      	cmp	r5, #0
 8000a82:	d126      	bne.n	8000ad2 <__gesf2+0x92>
 8000a84:	2a00      	cmp	r2, #0
 8000a86:	d1f4      	bne.n	8000a72 <__gesf2+0x32>
 8000a88:	4271      	negs	r1, r6
 8000a8a:	4171      	adcs	r1, r6
 8000a8c:	2900      	cmp	r1, #0
 8000a8e:	d0f0      	beq.n	8000a72 <__gesf2+0x32>
 8000a90:	2800      	cmp	r0, #0
 8000a92:	d1f4      	bne.n	8000a7e <__gesf2+0x3e>
 8000a94:	2001      	movs	r0, #1
 8000a96:	4240      	negs	r0, r0
 8000a98:	e7f1      	b.n	8000a7e <__gesf2+0x3e>
 8000a9a:	2e00      	cmp	r6, #0
 8000a9c:	d119      	bne.n	8000ad2 <__gesf2+0x92>
 8000a9e:	2cff      	cmp	r4, #255	; 0xff
 8000aa0:	d0ee      	beq.n	8000a80 <__gesf2+0x40>
 8000aa2:	2c00      	cmp	r4, #0
 8000aa4:	d1e5      	bne.n	8000a72 <__gesf2+0x32>
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d1e3      	bne.n	8000a72 <__gesf2+0x32>
 8000aaa:	e7e4      	b.n	8000a76 <__gesf2+0x36>
 8000aac:	2000      	movs	r0, #0
 8000aae:	2e00      	cmp	r6, #0
 8000ab0:	d0e5      	beq.n	8000a7e <__gesf2+0x3e>
 8000ab2:	e7e0      	b.n	8000a76 <__gesf2+0x36>
 8000ab4:	42a2      	cmp	r2, r4
 8000ab6:	dc05      	bgt.n	8000ac4 <__gesf2+0x84>
 8000ab8:	dbea      	blt.n	8000a90 <__gesf2+0x50>
 8000aba:	42ae      	cmp	r6, r5
 8000abc:	d802      	bhi.n	8000ac4 <__gesf2+0x84>
 8000abe:	d3e7      	bcc.n	8000a90 <__gesf2+0x50>
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	e7dc      	b.n	8000a7e <__gesf2+0x3e>
 8000ac4:	4241      	negs	r1, r0
 8000ac6:	4141      	adcs	r1, r0
 8000ac8:	4248      	negs	r0, r1
 8000aca:	2102      	movs	r1, #2
 8000acc:	4008      	ands	r0, r1
 8000ace:	3801      	subs	r0, #1
 8000ad0:	e7d5      	b.n	8000a7e <__gesf2+0x3e>
 8000ad2:	2002      	movs	r0, #2
 8000ad4:	4240      	negs	r0, r0
 8000ad6:	e7d2      	b.n	8000a7e <__gesf2+0x3e>

08000ad8 <__lesf2>:
 8000ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ada:	0042      	lsls	r2, r0, #1
 8000adc:	0246      	lsls	r6, r0, #9
 8000ade:	024d      	lsls	r5, r1, #9
 8000ae0:	004c      	lsls	r4, r1, #1
 8000ae2:	0fc3      	lsrs	r3, r0, #31
 8000ae4:	0a76      	lsrs	r6, r6, #9
 8000ae6:	0e12      	lsrs	r2, r2, #24
 8000ae8:	0a6d      	lsrs	r5, r5, #9
 8000aea:	0e24      	lsrs	r4, r4, #24
 8000aec:	0fc8      	lsrs	r0, r1, #31
 8000aee:	2aff      	cmp	r2, #255	; 0xff
 8000af0:	d00d      	beq.n	8000b0e <__lesf2+0x36>
 8000af2:	2cff      	cmp	r4, #255	; 0xff
 8000af4:	d00f      	beq.n	8000b16 <__lesf2+0x3e>
 8000af6:	2a00      	cmp	r2, #0
 8000af8:	d123      	bne.n	8000b42 <__lesf2+0x6a>
 8000afa:	4271      	negs	r1, r6
 8000afc:	4171      	adcs	r1, r6
 8000afe:	2c00      	cmp	r4, #0
 8000b00:	d10f      	bne.n	8000b22 <__lesf2+0x4a>
 8000b02:	2d00      	cmp	r5, #0
 8000b04:	d10d      	bne.n	8000b22 <__lesf2+0x4a>
 8000b06:	2000      	movs	r0, #0
 8000b08:	2e00      	cmp	r6, #0
 8000b0a:	d014      	beq.n	8000b36 <__lesf2+0x5e>
 8000b0c:	e00d      	b.n	8000b2a <__lesf2+0x52>
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d110      	bne.n	8000b34 <__lesf2+0x5c>
 8000b12:	2cff      	cmp	r4, #255	; 0xff
 8000b14:	d115      	bne.n	8000b42 <__lesf2+0x6a>
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	d10c      	bne.n	8000b34 <__lesf2+0x5c>
 8000b1a:	2a00      	cmp	r2, #0
 8000b1c:	d103      	bne.n	8000b26 <__lesf2+0x4e>
 8000b1e:	4271      	negs	r1, r6
 8000b20:	4171      	adcs	r1, r6
 8000b22:	2900      	cmp	r1, #0
 8000b24:	d108      	bne.n	8000b38 <__lesf2+0x60>
 8000b26:	4283      	cmp	r3, r0
 8000b28:	d010      	beq.n	8000b4c <__lesf2+0x74>
 8000b2a:	2102      	movs	r1, #2
 8000b2c:	1e58      	subs	r0, r3, #1
 8000b2e:	4008      	ands	r0, r1
 8000b30:	3801      	subs	r0, #1
 8000b32:	e000      	b.n	8000b36 <__lesf2+0x5e>
 8000b34:	2002      	movs	r0, #2
 8000b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d1fc      	bne.n	8000b36 <__lesf2+0x5e>
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	4240      	negs	r0, r0
 8000b40:	e7f9      	b.n	8000b36 <__lesf2+0x5e>
 8000b42:	2c00      	cmp	r4, #0
 8000b44:	d1ef      	bne.n	8000b26 <__lesf2+0x4e>
 8000b46:	2d00      	cmp	r5, #0
 8000b48:	d1ed      	bne.n	8000b26 <__lesf2+0x4e>
 8000b4a:	e7ee      	b.n	8000b2a <__lesf2+0x52>
 8000b4c:	42a2      	cmp	r2, r4
 8000b4e:	dc05      	bgt.n	8000b5c <__lesf2+0x84>
 8000b50:	dbf2      	blt.n	8000b38 <__lesf2+0x60>
 8000b52:	42ae      	cmp	r6, r5
 8000b54:	d802      	bhi.n	8000b5c <__lesf2+0x84>
 8000b56:	d3ef      	bcc.n	8000b38 <__lesf2+0x60>
 8000b58:	2000      	movs	r0, #0
 8000b5a:	e7ec      	b.n	8000b36 <__lesf2+0x5e>
 8000b5c:	4241      	negs	r1, r0
 8000b5e:	4141      	adcs	r1, r0
 8000b60:	4248      	negs	r0, r1
 8000b62:	2102      	movs	r1, #2
 8000b64:	4008      	ands	r0, r1
 8000b66:	3801      	subs	r0, #1
 8000b68:	e7e5      	b.n	8000b36 <__lesf2+0x5e>
 8000b6a:	46c0      	nop			; (mov r8, r8)

08000b6c <__aeabi_fmul>:
 8000b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b6e:	4657      	mov	r7, sl
 8000b70:	464e      	mov	r6, r9
 8000b72:	4645      	mov	r5, r8
 8000b74:	46de      	mov	lr, fp
 8000b76:	0244      	lsls	r4, r0, #9
 8000b78:	b5e0      	push	{r5, r6, r7, lr}
 8000b7a:	0045      	lsls	r5, r0, #1
 8000b7c:	1c0f      	adds	r7, r1, #0
 8000b7e:	0a64      	lsrs	r4, r4, #9
 8000b80:	0e2d      	lsrs	r5, r5, #24
 8000b82:	0fc6      	lsrs	r6, r0, #31
 8000b84:	2d00      	cmp	r5, #0
 8000b86:	d047      	beq.n	8000c18 <__aeabi_fmul+0xac>
 8000b88:	2dff      	cmp	r5, #255	; 0xff
 8000b8a:	d04d      	beq.n	8000c28 <__aeabi_fmul+0xbc>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	2080      	movs	r0, #128	; 0x80
 8000b90:	469a      	mov	sl, r3
 8000b92:	469b      	mov	fp, r3
 8000b94:	00e4      	lsls	r4, r4, #3
 8000b96:	04c0      	lsls	r0, r0, #19
 8000b98:	4304      	orrs	r4, r0
 8000b9a:	3d7f      	subs	r5, #127	; 0x7f
 8000b9c:	0278      	lsls	r0, r7, #9
 8000b9e:	0a43      	lsrs	r3, r0, #9
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	007a      	lsls	r2, r7, #1
 8000ba4:	0ffb      	lsrs	r3, r7, #31
 8000ba6:	4698      	mov	r8, r3
 8000ba8:	0e12      	lsrs	r2, r2, #24
 8000baa:	464b      	mov	r3, r9
 8000bac:	d044      	beq.n	8000c38 <__aeabi_fmul+0xcc>
 8000bae:	2aff      	cmp	r2, #255	; 0xff
 8000bb0:	d011      	beq.n	8000bd6 <__aeabi_fmul+0x6a>
 8000bb2:	00d8      	lsls	r0, r3, #3
 8000bb4:	2380      	movs	r3, #128	; 0x80
 8000bb6:	04db      	lsls	r3, r3, #19
 8000bb8:	4303      	orrs	r3, r0
 8000bba:	4699      	mov	r9, r3
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	3a7f      	subs	r2, #127	; 0x7f
 8000bc0:	18ad      	adds	r5, r5, r2
 8000bc2:	4647      	mov	r7, r8
 8000bc4:	4653      	mov	r3, sl
 8000bc6:	4077      	eors	r7, r6
 8000bc8:	1c69      	adds	r1, r5, #1
 8000bca:	2b0f      	cmp	r3, #15
 8000bcc:	d83f      	bhi.n	8000c4e <__aeabi_fmul+0xe2>
 8000bce:	4a72      	ldr	r2, [pc, #456]	; (8000d98 <__aeabi_fmul+0x22c>)
 8000bd0:	009b      	lsls	r3, r3, #2
 8000bd2:	58d3      	ldr	r3, [r2, r3]
 8000bd4:	469f      	mov	pc, r3
 8000bd6:	35ff      	adds	r5, #255	; 0xff
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d000      	beq.n	8000bde <__aeabi_fmul+0x72>
 8000bdc:	e079      	b.n	8000cd2 <__aeabi_fmul+0x166>
 8000bde:	4652      	mov	r2, sl
 8000be0:	2302      	movs	r3, #2
 8000be2:	431a      	orrs	r2, r3
 8000be4:	4692      	mov	sl, r2
 8000be6:	2002      	movs	r0, #2
 8000be8:	e7eb      	b.n	8000bc2 <__aeabi_fmul+0x56>
 8000bea:	4647      	mov	r7, r8
 8000bec:	464c      	mov	r4, r9
 8000bee:	4683      	mov	fp, r0
 8000bf0:	465b      	mov	r3, fp
 8000bf2:	2b02      	cmp	r3, #2
 8000bf4:	d028      	beq.n	8000c48 <__aeabi_fmul+0xdc>
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_fmul+0x90>
 8000bfa:	e0c6      	b.n	8000d8a <__aeabi_fmul+0x21e>
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d14f      	bne.n	8000ca0 <__aeabi_fmul+0x134>
 8000c00:	2000      	movs	r0, #0
 8000c02:	2400      	movs	r4, #0
 8000c04:	05c0      	lsls	r0, r0, #23
 8000c06:	07ff      	lsls	r7, r7, #31
 8000c08:	4320      	orrs	r0, r4
 8000c0a:	4338      	orrs	r0, r7
 8000c0c:	bcf0      	pop	{r4, r5, r6, r7}
 8000c0e:	46bb      	mov	fp, r7
 8000c10:	46b2      	mov	sl, r6
 8000c12:	46a9      	mov	r9, r5
 8000c14:	46a0      	mov	r8, r4
 8000c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c18:	2c00      	cmp	r4, #0
 8000c1a:	d171      	bne.n	8000d00 <__aeabi_fmul+0x194>
 8000c1c:	2304      	movs	r3, #4
 8000c1e:	469a      	mov	sl, r3
 8000c20:	3b03      	subs	r3, #3
 8000c22:	2500      	movs	r5, #0
 8000c24:	469b      	mov	fp, r3
 8000c26:	e7b9      	b.n	8000b9c <__aeabi_fmul+0x30>
 8000c28:	2c00      	cmp	r4, #0
 8000c2a:	d163      	bne.n	8000cf4 <__aeabi_fmul+0x188>
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	469a      	mov	sl, r3
 8000c30:	3b06      	subs	r3, #6
 8000c32:	25ff      	movs	r5, #255	; 0xff
 8000c34:	469b      	mov	fp, r3
 8000c36:	e7b1      	b.n	8000b9c <__aeabi_fmul+0x30>
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d150      	bne.n	8000cde <__aeabi_fmul+0x172>
 8000c3c:	4652      	mov	r2, sl
 8000c3e:	3301      	adds	r3, #1
 8000c40:	431a      	orrs	r2, r3
 8000c42:	4692      	mov	sl, r2
 8000c44:	2001      	movs	r0, #1
 8000c46:	e7bc      	b.n	8000bc2 <__aeabi_fmul+0x56>
 8000c48:	20ff      	movs	r0, #255	; 0xff
 8000c4a:	2400      	movs	r4, #0
 8000c4c:	e7da      	b.n	8000c04 <__aeabi_fmul+0x98>
 8000c4e:	4648      	mov	r0, r9
 8000c50:	0c26      	lsrs	r6, r4, #16
 8000c52:	0424      	lsls	r4, r4, #16
 8000c54:	0c22      	lsrs	r2, r4, #16
 8000c56:	0404      	lsls	r4, r0, #16
 8000c58:	0c24      	lsrs	r4, r4, #16
 8000c5a:	464b      	mov	r3, r9
 8000c5c:	0020      	movs	r0, r4
 8000c5e:	0c1b      	lsrs	r3, r3, #16
 8000c60:	4350      	muls	r0, r2
 8000c62:	4374      	muls	r4, r6
 8000c64:	435a      	muls	r2, r3
 8000c66:	435e      	muls	r6, r3
 8000c68:	1912      	adds	r2, r2, r4
 8000c6a:	0c03      	lsrs	r3, r0, #16
 8000c6c:	189b      	adds	r3, r3, r2
 8000c6e:	429c      	cmp	r4, r3
 8000c70:	d903      	bls.n	8000c7a <__aeabi_fmul+0x10e>
 8000c72:	2280      	movs	r2, #128	; 0x80
 8000c74:	0252      	lsls	r2, r2, #9
 8000c76:	4694      	mov	ip, r2
 8000c78:	4466      	add	r6, ip
 8000c7a:	0400      	lsls	r0, r0, #16
 8000c7c:	041a      	lsls	r2, r3, #16
 8000c7e:	0c00      	lsrs	r0, r0, #16
 8000c80:	1812      	adds	r2, r2, r0
 8000c82:	0194      	lsls	r4, r2, #6
 8000c84:	1e60      	subs	r0, r4, #1
 8000c86:	4184      	sbcs	r4, r0
 8000c88:	0c1b      	lsrs	r3, r3, #16
 8000c8a:	0e92      	lsrs	r2, r2, #26
 8000c8c:	199b      	adds	r3, r3, r6
 8000c8e:	4314      	orrs	r4, r2
 8000c90:	019b      	lsls	r3, r3, #6
 8000c92:	431c      	orrs	r4, r3
 8000c94:	011b      	lsls	r3, r3, #4
 8000c96:	d572      	bpl.n	8000d7e <__aeabi_fmul+0x212>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	0863      	lsrs	r3, r4, #1
 8000c9c:	4004      	ands	r4, r0
 8000c9e:	431c      	orrs	r4, r3
 8000ca0:	0008      	movs	r0, r1
 8000ca2:	307f      	adds	r0, #127	; 0x7f
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	dd3c      	ble.n	8000d22 <__aeabi_fmul+0x1b6>
 8000ca8:	0763      	lsls	r3, r4, #29
 8000caa:	d004      	beq.n	8000cb6 <__aeabi_fmul+0x14a>
 8000cac:	230f      	movs	r3, #15
 8000cae:	4023      	ands	r3, r4
 8000cb0:	2b04      	cmp	r3, #4
 8000cb2:	d000      	beq.n	8000cb6 <__aeabi_fmul+0x14a>
 8000cb4:	3404      	adds	r4, #4
 8000cb6:	0123      	lsls	r3, r4, #4
 8000cb8:	d503      	bpl.n	8000cc2 <__aeabi_fmul+0x156>
 8000cba:	3180      	adds	r1, #128	; 0x80
 8000cbc:	0008      	movs	r0, r1
 8000cbe:	4b37      	ldr	r3, [pc, #220]	; (8000d9c <__aeabi_fmul+0x230>)
 8000cc0:	401c      	ands	r4, r3
 8000cc2:	28fe      	cmp	r0, #254	; 0xfe
 8000cc4:	dcc0      	bgt.n	8000c48 <__aeabi_fmul+0xdc>
 8000cc6:	01a4      	lsls	r4, r4, #6
 8000cc8:	0a64      	lsrs	r4, r4, #9
 8000cca:	b2c0      	uxtb	r0, r0
 8000ccc:	e79a      	b.n	8000c04 <__aeabi_fmul+0x98>
 8000cce:	0037      	movs	r7, r6
 8000cd0:	e78e      	b.n	8000bf0 <__aeabi_fmul+0x84>
 8000cd2:	4652      	mov	r2, sl
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	431a      	orrs	r2, r3
 8000cd8:	4692      	mov	sl, r2
 8000cda:	2003      	movs	r0, #3
 8000cdc:	e771      	b.n	8000bc2 <__aeabi_fmul+0x56>
 8000cde:	4648      	mov	r0, r9
 8000ce0:	f002 f8c4 	bl	8002e6c <__clzsi2>
 8000ce4:	464a      	mov	r2, r9
 8000ce6:	1f43      	subs	r3, r0, #5
 8000ce8:	409a      	lsls	r2, r3
 8000cea:	1a2d      	subs	r5, r5, r0
 8000cec:	4691      	mov	r9, r2
 8000cee:	2000      	movs	r0, #0
 8000cf0:	3d76      	subs	r5, #118	; 0x76
 8000cf2:	e766      	b.n	8000bc2 <__aeabi_fmul+0x56>
 8000cf4:	230c      	movs	r3, #12
 8000cf6:	469a      	mov	sl, r3
 8000cf8:	3b09      	subs	r3, #9
 8000cfa:	25ff      	movs	r5, #255	; 0xff
 8000cfc:	469b      	mov	fp, r3
 8000cfe:	e74d      	b.n	8000b9c <__aeabi_fmul+0x30>
 8000d00:	0020      	movs	r0, r4
 8000d02:	f002 f8b3 	bl	8002e6c <__clzsi2>
 8000d06:	2576      	movs	r5, #118	; 0x76
 8000d08:	1f43      	subs	r3, r0, #5
 8000d0a:	409c      	lsls	r4, r3
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	426d      	negs	r5, r5
 8000d10:	469a      	mov	sl, r3
 8000d12:	469b      	mov	fp, r3
 8000d14:	1a2d      	subs	r5, r5, r0
 8000d16:	e741      	b.n	8000b9c <__aeabi_fmul+0x30>
 8000d18:	2480      	movs	r4, #128	; 0x80
 8000d1a:	2700      	movs	r7, #0
 8000d1c:	20ff      	movs	r0, #255	; 0xff
 8000d1e:	03e4      	lsls	r4, r4, #15
 8000d20:	e770      	b.n	8000c04 <__aeabi_fmul+0x98>
 8000d22:	2301      	movs	r3, #1
 8000d24:	1a1b      	subs	r3, r3, r0
 8000d26:	2b1b      	cmp	r3, #27
 8000d28:	dd00      	ble.n	8000d2c <__aeabi_fmul+0x1c0>
 8000d2a:	e769      	b.n	8000c00 <__aeabi_fmul+0x94>
 8000d2c:	319e      	adds	r1, #158	; 0x9e
 8000d2e:	0020      	movs	r0, r4
 8000d30:	408c      	lsls	r4, r1
 8000d32:	40d8      	lsrs	r0, r3
 8000d34:	1e63      	subs	r3, r4, #1
 8000d36:	419c      	sbcs	r4, r3
 8000d38:	4304      	orrs	r4, r0
 8000d3a:	0763      	lsls	r3, r4, #29
 8000d3c:	d004      	beq.n	8000d48 <__aeabi_fmul+0x1dc>
 8000d3e:	230f      	movs	r3, #15
 8000d40:	4023      	ands	r3, r4
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	d000      	beq.n	8000d48 <__aeabi_fmul+0x1dc>
 8000d46:	3404      	adds	r4, #4
 8000d48:	0163      	lsls	r3, r4, #5
 8000d4a:	d51a      	bpl.n	8000d82 <__aeabi_fmul+0x216>
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2400      	movs	r4, #0
 8000d50:	e758      	b.n	8000c04 <__aeabi_fmul+0x98>
 8000d52:	2080      	movs	r0, #128	; 0x80
 8000d54:	03c0      	lsls	r0, r0, #15
 8000d56:	4204      	tst	r4, r0
 8000d58:	d009      	beq.n	8000d6e <__aeabi_fmul+0x202>
 8000d5a:	464b      	mov	r3, r9
 8000d5c:	4203      	tst	r3, r0
 8000d5e:	d106      	bne.n	8000d6e <__aeabi_fmul+0x202>
 8000d60:	464c      	mov	r4, r9
 8000d62:	4304      	orrs	r4, r0
 8000d64:	0264      	lsls	r4, r4, #9
 8000d66:	4647      	mov	r7, r8
 8000d68:	20ff      	movs	r0, #255	; 0xff
 8000d6a:	0a64      	lsrs	r4, r4, #9
 8000d6c:	e74a      	b.n	8000c04 <__aeabi_fmul+0x98>
 8000d6e:	2080      	movs	r0, #128	; 0x80
 8000d70:	03c0      	lsls	r0, r0, #15
 8000d72:	4304      	orrs	r4, r0
 8000d74:	0264      	lsls	r4, r4, #9
 8000d76:	0037      	movs	r7, r6
 8000d78:	20ff      	movs	r0, #255	; 0xff
 8000d7a:	0a64      	lsrs	r4, r4, #9
 8000d7c:	e742      	b.n	8000c04 <__aeabi_fmul+0x98>
 8000d7e:	0029      	movs	r1, r5
 8000d80:	e78e      	b.n	8000ca0 <__aeabi_fmul+0x134>
 8000d82:	01a4      	lsls	r4, r4, #6
 8000d84:	2000      	movs	r0, #0
 8000d86:	0a64      	lsrs	r4, r4, #9
 8000d88:	e73c      	b.n	8000c04 <__aeabi_fmul+0x98>
 8000d8a:	2080      	movs	r0, #128	; 0x80
 8000d8c:	03c0      	lsls	r0, r0, #15
 8000d8e:	4304      	orrs	r4, r0
 8000d90:	0264      	lsls	r4, r4, #9
 8000d92:	20ff      	movs	r0, #255	; 0xff
 8000d94:	0a64      	lsrs	r4, r4, #9
 8000d96:	e735      	b.n	8000c04 <__aeabi_fmul+0x98>
 8000d98:	080118f4 	.word	0x080118f4
 8000d9c:	f7ffffff 	.word	0xf7ffffff

08000da0 <__aeabi_fsub>:
 8000da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000da2:	4646      	mov	r6, r8
 8000da4:	46d6      	mov	lr, sl
 8000da6:	464f      	mov	r7, r9
 8000da8:	0243      	lsls	r3, r0, #9
 8000daa:	0a5b      	lsrs	r3, r3, #9
 8000dac:	00da      	lsls	r2, r3, #3
 8000dae:	4694      	mov	ip, r2
 8000db0:	024a      	lsls	r2, r1, #9
 8000db2:	b5c0      	push	{r6, r7, lr}
 8000db4:	0044      	lsls	r4, r0, #1
 8000db6:	0a56      	lsrs	r6, r2, #9
 8000db8:	1c05      	adds	r5, r0, #0
 8000dba:	46b0      	mov	r8, r6
 8000dbc:	0e24      	lsrs	r4, r4, #24
 8000dbe:	004e      	lsls	r6, r1, #1
 8000dc0:	0992      	lsrs	r2, r2, #6
 8000dc2:	001f      	movs	r7, r3
 8000dc4:	0020      	movs	r0, r4
 8000dc6:	4692      	mov	sl, r2
 8000dc8:	0fed      	lsrs	r5, r5, #31
 8000dca:	0e36      	lsrs	r6, r6, #24
 8000dcc:	0fc9      	lsrs	r1, r1, #31
 8000dce:	2eff      	cmp	r6, #255	; 0xff
 8000dd0:	d100      	bne.n	8000dd4 <__aeabi_fsub+0x34>
 8000dd2:	e07f      	b.n	8000ed4 <__aeabi_fsub+0x134>
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	4051      	eors	r1, r2
 8000dd8:	428d      	cmp	r5, r1
 8000dda:	d051      	beq.n	8000e80 <__aeabi_fsub+0xe0>
 8000ddc:	1ba2      	subs	r2, r4, r6
 8000dde:	4691      	mov	r9, r2
 8000de0:	2a00      	cmp	r2, #0
 8000de2:	dc00      	bgt.n	8000de6 <__aeabi_fsub+0x46>
 8000de4:	e07e      	b.n	8000ee4 <__aeabi_fsub+0x144>
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d100      	bne.n	8000dec <__aeabi_fsub+0x4c>
 8000dea:	e099      	b.n	8000f20 <__aeabi_fsub+0x180>
 8000dec:	2cff      	cmp	r4, #255	; 0xff
 8000dee:	d100      	bne.n	8000df2 <__aeabi_fsub+0x52>
 8000df0:	e08c      	b.n	8000f0c <__aeabi_fsub+0x16c>
 8000df2:	2380      	movs	r3, #128	; 0x80
 8000df4:	4652      	mov	r2, sl
 8000df6:	04db      	lsls	r3, r3, #19
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	4692      	mov	sl, r2
 8000dfc:	464a      	mov	r2, r9
 8000dfe:	2301      	movs	r3, #1
 8000e00:	2a1b      	cmp	r2, #27
 8000e02:	dc08      	bgt.n	8000e16 <__aeabi_fsub+0x76>
 8000e04:	4653      	mov	r3, sl
 8000e06:	2120      	movs	r1, #32
 8000e08:	40d3      	lsrs	r3, r2
 8000e0a:	1a89      	subs	r1, r1, r2
 8000e0c:	4652      	mov	r2, sl
 8000e0e:	408a      	lsls	r2, r1
 8000e10:	1e51      	subs	r1, r2, #1
 8000e12:	418a      	sbcs	r2, r1
 8000e14:	4313      	orrs	r3, r2
 8000e16:	4662      	mov	r2, ip
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	015a      	lsls	r2, r3, #5
 8000e1c:	d400      	bmi.n	8000e20 <__aeabi_fsub+0x80>
 8000e1e:	e0f3      	b.n	8001008 <__aeabi_fsub+0x268>
 8000e20:	019b      	lsls	r3, r3, #6
 8000e22:	099e      	lsrs	r6, r3, #6
 8000e24:	0030      	movs	r0, r6
 8000e26:	f002 f821 	bl	8002e6c <__clzsi2>
 8000e2a:	3805      	subs	r0, #5
 8000e2c:	4086      	lsls	r6, r0
 8000e2e:	4284      	cmp	r4, r0
 8000e30:	dd00      	ble.n	8000e34 <__aeabi_fsub+0x94>
 8000e32:	e0f7      	b.n	8001024 <__aeabi_fsub+0x284>
 8000e34:	0032      	movs	r2, r6
 8000e36:	1b04      	subs	r4, r0, r4
 8000e38:	2020      	movs	r0, #32
 8000e3a:	3401      	adds	r4, #1
 8000e3c:	40e2      	lsrs	r2, r4
 8000e3e:	1b04      	subs	r4, r0, r4
 8000e40:	40a6      	lsls	r6, r4
 8000e42:	0033      	movs	r3, r6
 8000e44:	1e5e      	subs	r6, r3, #1
 8000e46:	41b3      	sbcs	r3, r6
 8000e48:	2400      	movs	r4, #0
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	075a      	lsls	r2, r3, #29
 8000e4e:	d004      	beq.n	8000e5a <__aeabi_fsub+0xba>
 8000e50:	220f      	movs	r2, #15
 8000e52:	401a      	ands	r2, r3
 8000e54:	2a04      	cmp	r2, #4
 8000e56:	d000      	beq.n	8000e5a <__aeabi_fsub+0xba>
 8000e58:	3304      	adds	r3, #4
 8000e5a:	015a      	lsls	r2, r3, #5
 8000e5c:	d400      	bmi.n	8000e60 <__aeabi_fsub+0xc0>
 8000e5e:	e0d6      	b.n	800100e <__aeabi_fsub+0x26e>
 8000e60:	1c62      	adds	r2, r4, #1
 8000e62:	2cfe      	cmp	r4, #254	; 0xfe
 8000e64:	d100      	bne.n	8000e68 <__aeabi_fsub+0xc8>
 8000e66:	e0da      	b.n	800101e <__aeabi_fsub+0x27e>
 8000e68:	019b      	lsls	r3, r3, #6
 8000e6a:	0a5f      	lsrs	r7, r3, #9
 8000e6c:	b2d0      	uxtb	r0, r2
 8000e6e:	05c0      	lsls	r0, r0, #23
 8000e70:	4338      	orrs	r0, r7
 8000e72:	07ed      	lsls	r5, r5, #31
 8000e74:	4328      	orrs	r0, r5
 8000e76:	bce0      	pop	{r5, r6, r7}
 8000e78:	46ba      	mov	sl, r7
 8000e7a:	46b1      	mov	r9, r6
 8000e7c:	46a8      	mov	r8, r5
 8000e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e80:	1ba2      	subs	r2, r4, r6
 8000e82:	4691      	mov	r9, r2
 8000e84:	2a00      	cmp	r2, #0
 8000e86:	dd63      	ble.n	8000f50 <__aeabi_fsub+0x1b0>
 8000e88:	2e00      	cmp	r6, #0
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_fsub+0xee>
 8000e8c:	e099      	b.n	8000fc2 <__aeabi_fsub+0x222>
 8000e8e:	2cff      	cmp	r4, #255	; 0xff
 8000e90:	d03c      	beq.n	8000f0c <__aeabi_fsub+0x16c>
 8000e92:	2380      	movs	r3, #128	; 0x80
 8000e94:	4652      	mov	r2, sl
 8000e96:	04db      	lsls	r3, r3, #19
 8000e98:	431a      	orrs	r2, r3
 8000e9a:	4692      	mov	sl, r2
 8000e9c:	464a      	mov	r2, r9
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	2a1b      	cmp	r2, #27
 8000ea2:	dc08      	bgt.n	8000eb6 <__aeabi_fsub+0x116>
 8000ea4:	4653      	mov	r3, sl
 8000ea6:	2120      	movs	r1, #32
 8000ea8:	40d3      	lsrs	r3, r2
 8000eaa:	1a89      	subs	r1, r1, r2
 8000eac:	4652      	mov	r2, sl
 8000eae:	408a      	lsls	r2, r1
 8000eb0:	1e51      	subs	r1, r2, #1
 8000eb2:	418a      	sbcs	r2, r1
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	015a      	lsls	r2, r3, #5
 8000eba:	d400      	bmi.n	8000ebe <__aeabi_fsub+0x11e>
 8000ebc:	e0a4      	b.n	8001008 <__aeabi_fsub+0x268>
 8000ebe:	3401      	adds	r4, #1
 8000ec0:	2cff      	cmp	r4, #255	; 0xff
 8000ec2:	d100      	bne.n	8000ec6 <__aeabi_fsub+0x126>
 8000ec4:	e0ab      	b.n	800101e <__aeabi_fsub+0x27e>
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4997      	ldr	r1, [pc, #604]	; (8001128 <__aeabi_fsub+0x388>)
 8000eca:	401a      	ands	r2, r3
 8000ecc:	085b      	lsrs	r3, r3, #1
 8000ece:	400b      	ands	r3, r1
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	e7bb      	b.n	8000e4c <__aeabi_fsub+0xac>
 8000ed4:	2a00      	cmp	r2, #0
 8000ed6:	d032      	beq.n	8000f3e <__aeabi_fsub+0x19e>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d035      	beq.n	8000f48 <__aeabi_fsub+0x1a8>
 8000edc:	22ff      	movs	r2, #255	; 0xff
 8000ede:	4252      	negs	r2, r2
 8000ee0:	4691      	mov	r9, r2
 8000ee2:	44a1      	add	r9, r4
 8000ee4:	464a      	mov	r2, r9
 8000ee6:	2a00      	cmp	r2, #0
 8000ee8:	d051      	beq.n	8000f8e <__aeabi_fsub+0x1ee>
 8000eea:	1b30      	subs	r0, r6, r4
 8000eec:	2c00      	cmp	r4, #0
 8000eee:	d000      	beq.n	8000ef2 <__aeabi_fsub+0x152>
 8000ef0:	e09c      	b.n	800102c <__aeabi_fsub+0x28c>
 8000ef2:	4663      	mov	r3, ip
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d100      	bne.n	8000efa <__aeabi_fsub+0x15a>
 8000ef8:	e0df      	b.n	80010ba <__aeabi_fsub+0x31a>
 8000efa:	3801      	subs	r0, #1
 8000efc:	2800      	cmp	r0, #0
 8000efe:	d100      	bne.n	8000f02 <__aeabi_fsub+0x162>
 8000f00:	e0f7      	b.n	80010f2 <__aeabi_fsub+0x352>
 8000f02:	2eff      	cmp	r6, #255	; 0xff
 8000f04:	d000      	beq.n	8000f08 <__aeabi_fsub+0x168>
 8000f06:	e099      	b.n	800103c <__aeabi_fsub+0x29c>
 8000f08:	000d      	movs	r5, r1
 8000f0a:	4643      	mov	r3, r8
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x172>
 8000f10:	e085      	b.n	800101e <__aeabi_fsub+0x27e>
 8000f12:	2780      	movs	r7, #128	; 0x80
 8000f14:	03ff      	lsls	r7, r7, #15
 8000f16:	431f      	orrs	r7, r3
 8000f18:	027f      	lsls	r7, r7, #9
 8000f1a:	20ff      	movs	r0, #255	; 0xff
 8000f1c:	0a7f      	lsrs	r7, r7, #9
 8000f1e:	e7a6      	b.n	8000e6e <__aeabi_fsub+0xce>
 8000f20:	4652      	mov	r2, sl
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d074      	beq.n	8001010 <__aeabi_fsub+0x270>
 8000f26:	2201      	movs	r2, #1
 8000f28:	4252      	negs	r2, r2
 8000f2a:	4690      	mov	r8, r2
 8000f2c:	44c1      	add	r9, r8
 8000f2e:	464a      	mov	r2, r9
 8000f30:	2a00      	cmp	r2, #0
 8000f32:	d100      	bne.n	8000f36 <__aeabi_fsub+0x196>
 8000f34:	e0c8      	b.n	80010c8 <__aeabi_fsub+0x328>
 8000f36:	2cff      	cmp	r4, #255	; 0xff
 8000f38:	d000      	beq.n	8000f3c <__aeabi_fsub+0x19c>
 8000f3a:	e75f      	b.n	8000dfc <__aeabi_fsub+0x5c>
 8000f3c:	e7e6      	b.n	8000f0c <__aeabi_fsub+0x16c>
 8000f3e:	2201      	movs	r2, #1
 8000f40:	4051      	eors	r1, r2
 8000f42:	42a9      	cmp	r1, r5
 8000f44:	d000      	beq.n	8000f48 <__aeabi_fsub+0x1a8>
 8000f46:	e749      	b.n	8000ddc <__aeabi_fsub+0x3c>
 8000f48:	22ff      	movs	r2, #255	; 0xff
 8000f4a:	4252      	negs	r2, r2
 8000f4c:	4691      	mov	r9, r2
 8000f4e:	44a1      	add	r9, r4
 8000f50:	464a      	mov	r2, r9
 8000f52:	2a00      	cmp	r2, #0
 8000f54:	d043      	beq.n	8000fde <__aeabi_fsub+0x23e>
 8000f56:	1b31      	subs	r1, r6, r4
 8000f58:	2c00      	cmp	r4, #0
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_fsub+0x1be>
 8000f5c:	e08c      	b.n	8001078 <__aeabi_fsub+0x2d8>
 8000f5e:	2eff      	cmp	r6, #255	; 0xff
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fsub+0x1c4>
 8000f62:	e092      	b.n	800108a <__aeabi_fsub+0x2ea>
 8000f64:	2380      	movs	r3, #128	; 0x80
 8000f66:	4662      	mov	r2, ip
 8000f68:	04db      	lsls	r3, r3, #19
 8000f6a:	431a      	orrs	r2, r3
 8000f6c:	4694      	mov	ip, r2
 8000f6e:	2301      	movs	r3, #1
 8000f70:	291b      	cmp	r1, #27
 8000f72:	dc09      	bgt.n	8000f88 <__aeabi_fsub+0x1e8>
 8000f74:	2020      	movs	r0, #32
 8000f76:	4663      	mov	r3, ip
 8000f78:	4662      	mov	r2, ip
 8000f7a:	40cb      	lsrs	r3, r1
 8000f7c:	1a41      	subs	r1, r0, r1
 8000f7e:	408a      	lsls	r2, r1
 8000f80:	0011      	movs	r1, r2
 8000f82:	1e48      	subs	r0, r1, #1
 8000f84:	4181      	sbcs	r1, r0
 8000f86:	430b      	orrs	r3, r1
 8000f88:	0034      	movs	r4, r6
 8000f8a:	4453      	add	r3, sl
 8000f8c:	e794      	b.n	8000eb8 <__aeabi_fsub+0x118>
 8000f8e:	22fe      	movs	r2, #254	; 0xfe
 8000f90:	1c66      	adds	r6, r4, #1
 8000f92:	4232      	tst	r2, r6
 8000f94:	d164      	bne.n	8001060 <__aeabi_fsub+0x2c0>
 8000f96:	2c00      	cmp	r4, #0
 8000f98:	d000      	beq.n	8000f9c <__aeabi_fsub+0x1fc>
 8000f9a:	e082      	b.n	80010a2 <__aeabi_fsub+0x302>
 8000f9c:	4663      	mov	r3, ip
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d100      	bne.n	8000fa4 <__aeabi_fsub+0x204>
 8000fa2:	e0ab      	b.n	80010fc <__aeabi_fsub+0x35c>
 8000fa4:	4653      	mov	r3, sl
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d100      	bne.n	8000fac <__aeabi_fsub+0x20c>
 8000faa:	e760      	b.n	8000e6e <__aeabi_fsub+0xce>
 8000fac:	4663      	mov	r3, ip
 8000fae:	4652      	mov	r2, sl
 8000fb0:	1a9b      	subs	r3, r3, r2
 8000fb2:	015a      	lsls	r2, r3, #5
 8000fb4:	d400      	bmi.n	8000fb8 <__aeabi_fsub+0x218>
 8000fb6:	e0aa      	b.n	800110e <__aeabi_fsub+0x36e>
 8000fb8:	4663      	mov	r3, ip
 8000fba:	4652      	mov	r2, sl
 8000fbc:	000d      	movs	r5, r1
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	e744      	b.n	8000e4c <__aeabi_fsub+0xac>
 8000fc2:	4652      	mov	r2, sl
 8000fc4:	2a00      	cmp	r2, #0
 8000fc6:	d023      	beq.n	8001010 <__aeabi_fsub+0x270>
 8000fc8:	2201      	movs	r2, #1
 8000fca:	4252      	negs	r2, r2
 8000fcc:	4690      	mov	r8, r2
 8000fce:	44c1      	add	r9, r8
 8000fd0:	464a      	mov	r2, r9
 8000fd2:	2a00      	cmp	r2, #0
 8000fd4:	d075      	beq.n	80010c2 <__aeabi_fsub+0x322>
 8000fd6:	2cff      	cmp	r4, #255	; 0xff
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_fsub+0x23c>
 8000fda:	e75f      	b.n	8000e9c <__aeabi_fsub+0xfc>
 8000fdc:	e796      	b.n	8000f0c <__aeabi_fsub+0x16c>
 8000fde:	26fe      	movs	r6, #254	; 0xfe
 8000fe0:	3401      	adds	r4, #1
 8000fe2:	4226      	tst	r6, r4
 8000fe4:	d153      	bne.n	800108e <__aeabi_fsub+0x2ee>
 8000fe6:	2800      	cmp	r0, #0
 8000fe8:	d172      	bne.n	80010d0 <__aeabi_fsub+0x330>
 8000fea:	4663      	mov	r3, ip
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d100      	bne.n	8000ff2 <__aeabi_fsub+0x252>
 8000ff0:	e093      	b.n	800111a <__aeabi_fsub+0x37a>
 8000ff2:	4653      	mov	r3, sl
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d100      	bne.n	8000ffa <__aeabi_fsub+0x25a>
 8000ff8:	e739      	b.n	8000e6e <__aeabi_fsub+0xce>
 8000ffa:	4463      	add	r3, ip
 8000ffc:	2400      	movs	r4, #0
 8000ffe:	015a      	lsls	r2, r3, #5
 8001000:	d502      	bpl.n	8001008 <__aeabi_fsub+0x268>
 8001002:	4a4a      	ldr	r2, [pc, #296]	; (800112c <__aeabi_fsub+0x38c>)
 8001004:	3401      	adds	r4, #1
 8001006:	4013      	ands	r3, r2
 8001008:	075a      	lsls	r2, r3, #29
 800100a:	d000      	beq.n	800100e <__aeabi_fsub+0x26e>
 800100c:	e720      	b.n	8000e50 <__aeabi_fsub+0xb0>
 800100e:	08db      	lsrs	r3, r3, #3
 8001010:	2cff      	cmp	r4, #255	; 0xff
 8001012:	d100      	bne.n	8001016 <__aeabi_fsub+0x276>
 8001014:	e77a      	b.n	8000f0c <__aeabi_fsub+0x16c>
 8001016:	025b      	lsls	r3, r3, #9
 8001018:	0a5f      	lsrs	r7, r3, #9
 800101a:	b2e0      	uxtb	r0, r4
 800101c:	e727      	b.n	8000e6e <__aeabi_fsub+0xce>
 800101e:	20ff      	movs	r0, #255	; 0xff
 8001020:	2700      	movs	r7, #0
 8001022:	e724      	b.n	8000e6e <__aeabi_fsub+0xce>
 8001024:	4b41      	ldr	r3, [pc, #260]	; (800112c <__aeabi_fsub+0x38c>)
 8001026:	1a24      	subs	r4, r4, r0
 8001028:	4033      	ands	r3, r6
 800102a:	e70f      	b.n	8000e4c <__aeabi_fsub+0xac>
 800102c:	2eff      	cmp	r6, #255	; 0xff
 800102e:	d100      	bne.n	8001032 <__aeabi_fsub+0x292>
 8001030:	e76a      	b.n	8000f08 <__aeabi_fsub+0x168>
 8001032:	2380      	movs	r3, #128	; 0x80
 8001034:	4662      	mov	r2, ip
 8001036:	04db      	lsls	r3, r3, #19
 8001038:	431a      	orrs	r2, r3
 800103a:	4694      	mov	ip, r2
 800103c:	2301      	movs	r3, #1
 800103e:	281b      	cmp	r0, #27
 8001040:	dc09      	bgt.n	8001056 <__aeabi_fsub+0x2b6>
 8001042:	2420      	movs	r4, #32
 8001044:	4663      	mov	r3, ip
 8001046:	4662      	mov	r2, ip
 8001048:	40c3      	lsrs	r3, r0
 800104a:	1a20      	subs	r0, r4, r0
 800104c:	4082      	lsls	r2, r0
 800104e:	0010      	movs	r0, r2
 8001050:	1e44      	subs	r4, r0, #1
 8001052:	41a0      	sbcs	r0, r4
 8001054:	4303      	orrs	r3, r0
 8001056:	4652      	mov	r2, sl
 8001058:	000d      	movs	r5, r1
 800105a:	0034      	movs	r4, r6
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	e6dc      	b.n	8000e1a <__aeabi_fsub+0x7a>
 8001060:	4663      	mov	r3, ip
 8001062:	4652      	mov	r2, sl
 8001064:	1a9e      	subs	r6, r3, r2
 8001066:	0173      	lsls	r3, r6, #5
 8001068:	d417      	bmi.n	800109a <__aeabi_fsub+0x2fa>
 800106a:	2e00      	cmp	r6, #0
 800106c:	d000      	beq.n	8001070 <__aeabi_fsub+0x2d0>
 800106e:	e6d9      	b.n	8000e24 <__aeabi_fsub+0x84>
 8001070:	2500      	movs	r5, #0
 8001072:	2000      	movs	r0, #0
 8001074:	2700      	movs	r7, #0
 8001076:	e6fa      	b.n	8000e6e <__aeabi_fsub+0xce>
 8001078:	4663      	mov	r3, ip
 800107a:	2b00      	cmp	r3, #0
 800107c:	d044      	beq.n	8001108 <__aeabi_fsub+0x368>
 800107e:	3901      	subs	r1, #1
 8001080:	2900      	cmp	r1, #0
 8001082:	d04c      	beq.n	800111e <__aeabi_fsub+0x37e>
 8001084:	2eff      	cmp	r6, #255	; 0xff
 8001086:	d000      	beq.n	800108a <__aeabi_fsub+0x2ea>
 8001088:	e771      	b.n	8000f6e <__aeabi_fsub+0x1ce>
 800108a:	4643      	mov	r3, r8
 800108c:	e73e      	b.n	8000f0c <__aeabi_fsub+0x16c>
 800108e:	2cff      	cmp	r4, #255	; 0xff
 8001090:	d0c5      	beq.n	800101e <__aeabi_fsub+0x27e>
 8001092:	4652      	mov	r2, sl
 8001094:	4462      	add	r2, ip
 8001096:	0853      	lsrs	r3, r2, #1
 8001098:	e7b6      	b.n	8001008 <__aeabi_fsub+0x268>
 800109a:	4663      	mov	r3, ip
 800109c:	000d      	movs	r5, r1
 800109e:	1ad6      	subs	r6, r2, r3
 80010a0:	e6c0      	b.n	8000e24 <__aeabi_fsub+0x84>
 80010a2:	4662      	mov	r2, ip
 80010a4:	2a00      	cmp	r2, #0
 80010a6:	d116      	bne.n	80010d6 <__aeabi_fsub+0x336>
 80010a8:	4653      	mov	r3, sl
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d000      	beq.n	80010b0 <__aeabi_fsub+0x310>
 80010ae:	e72b      	b.n	8000f08 <__aeabi_fsub+0x168>
 80010b0:	2780      	movs	r7, #128	; 0x80
 80010b2:	2500      	movs	r5, #0
 80010b4:	20ff      	movs	r0, #255	; 0xff
 80010b6:	03ff      	lsls	r7, r7, #15
 80010b8:	e6d9      	b.n	8000e6e <__aeabi_fsub+0xce>
 80010ba:	000d      	movs	r5, r1
 80010bc:	4643      	mov	r3, r8
 80010be:	0034      	movs	r4, r6
 80010c0:	e7a6      	b.n	8001010 <__aeabi_fsub+0x270>
 80010c2:	4653      	mov	r3, sl
 80010c4:	4463      	add	r3, ip
 80010c6:	e6f7      	b.n	8000eb8 <__aeabi_fsub+0x118>
 80010c8:	4663      	mov	r3, ip
 80010ca:	4652      	mov	r2, sl
 80010cc:	1a9b      	subs	r3, r3, r2
 80010ce:	e6a4      	b.n	8000e1a <__aeabi_fsub+0x7a>
 80010d0:	4662      	mov	r2, ip
 80010d2:	2a00      	cmp	r2, #0
 80010d4:	d0d9      	beq.n	800108a <__aeabi_fsub+0x2ea>
 80010d6:	4652      	mov	r2, sl
 80010d8:	2a00      	cmp	r2, #0
 80010da:	d100      	bne.n	80010de <__aeabi_fsub+0x33e>
 80010dc:	e716      	b.n	8000f0c <__aeabi_fsub+0x16c>
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	4213      	tst	r3, r2
 80010e4:	d100      	bne.n	80010e8 <__aeabi_fsub+0x348>
 80010e6:	e711      	b.n	8000f0c <__aeabi_fsub+0x16c>
 80010e8:	4640      	mov	r0, r8
 80010ea:	4210      	tst	r0, r2
 80010ec:	d000      	beq.n	80010f0 <__aeabi_fsub+0x350>
 80010ee:	e70d      	b.n	8000f0c <__aeabi_fsub+0x16c>
 80010f0:	e70a      	b.n	8000f08 <__aeabi_fsub+0x168>
 80010f2:	4652      	mov	r2, sl
 80010f4:	000d      	movs	r5, r1
 80010f6:	0034      	movs	r4, r6
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	e68e      	b.n	8000e1a <__aeabi_fsub+0x7a>
 80010fc:	4653      	mov	r3, sl
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d008      	beq.n	8001114 <__aeabi_fsub+0x374>
 8001102:	000d      	movs	r5, r1
 8001104:	4647      	mov	r7, r8
 8001106:	e6b2      	b.n	8000e6e <__aeabi_fsub+0xce>
 8001108:	4643      	mov	r3, r8
 800110a:	0034      	movs	r4, r6
 800110c:	e780      	b.n	8001010 <__aeabi_fsub+0x270>
 800110e:	2b00      	cmp	r3, #0
 8001110:	d000      	beq.n	8001114 <__aeabi_fsub+0x374>
 8001112:	e779      	b.n	8001008 <__aeabi_fsub+0x268>
 8001114:	2500      	movs	r5, #0
 8001116:	2700      	movs	r7, #0
 8001118:	e6a9      	b.n	8000e6e <__aeabi_fsub+0xce>
 800111a:	4647      	mov	r7, r8
 800111c:	e6a7      	b.n	8000e6e <__aeabi_fsub+0xce>
 800111e:	4653      	mov	r3, sl
 8001120:	0034      	movs	r4, r6
 8001122:	4463      	add	r3, ip
 8001124:	e6c8      	b.n	8000eb8 <__aeabi_fsub+0x118>
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	7dffffff 	.word	0x7dffffff
 800112c:	fbffffff 	.word	0xfbffffff

08001130 <__aeabi_f2iz>:
 8001130:	0241      	lsls	r1, r0, #9
 8001132:	0042      	lsls	r2, r0, #1
 8001134:	0fc3      	lsrs	r3, r0, #31
 8001136:	0a49      	lsrs	r1, r1, #9
 8001138:	2000      	movs	r0, #0
 800113a:	0e12      	lsrs	r2, r2, #24
 800113c:	2a7e      	cmp	r2, #126	; 0x7e
 800113e:	d903      	bls.n	8001148 <__aeabi_f2iz+0x18>
 8001140:	2a9d      	cmp	r2, #157	; 0x9d
 8001142:	d902      	bls.n	800114a <__aeabi_f2iz+0x1a>
 8001144:	4a09      	ldr	r2, [pc, #36]	; (800116c <__aeabi_f2iz+0x3c>)
 8001146:	1898      	adds	r0, r3, r2
 8001148:	4770      	bx	lr
 800114a:	2080      	movs	r0, #128	; 0x80
 800114c:	0400      	lsls	r0, r0, #16
 800114e:	4301      	orrs	r1, r0
 8001150:	2a95      	cmp	r2, #149	; 0x95
 8001152:	dc07      	bgt.n	8001164 <__aeabi_f2iz+0x34>
 8001154:	2096      	movs	r0, #150	; 0x96
 8001156:	1a82      	subs	r2, r0, r2
 8001158:	40d1      	lsrs	r1, r2
 800115a:	4248      	negs	r0, r1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1f3      	bne.n	8001148 <__aeabi_f2iz+0x18>
 8001160:	0008      	movs	r0, r1
 8001162:	e7f1      	b.n	8001148 <__aeabi_f2iz+0x18>
 8001164:	3a96      	subs	r2, #150	; 0x96
 8001166:	4091      	lsls	r1, r2
 8001168:	e7f7      	b.n	800115a <__aeabi_f2iz+0x2a>
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	7fffffff 	.word	0x7fffffff

08001170 <__aeabi_ui2f>:
 8001170:	b570      	push	{r4, r5, r6, lr}
 8001172:	1e05      	subs	r5, r0, #0
 8001174:	d00e      	beq.n	8001194 <__aeabi_ui2f+0x24>
 8001176:	f001 fe79 	bl	8002e6c <__clzsi2>
 800117a:	239e      	movs	r3, #158	; 0x9e
 800117c:	0004      	movs	r4, r0
 800117e:	1a1b      	subs	r3, r3, r0
 8001180:	2b96      	cmp	r3, #150	; 0x96
 8001182:	dc0c      	bgt.n	800119e <__aeabi_ui2f+0x2e>
 8001184:	2808      	cmp	r0, #8
 8001186:	dd01      	ble.n	800118c <__aeabi_ui2f+0x1c>
 8001188:	3c08      	subs	r4, #8
 800118a:	40a5      	lsls	r5, r4
 800118c:	026d      	lsls	r5, r5, #9
 800118e:	0a6d      	lsrs	r5, r5, #9
 8001190:	b2d8      	uxtb	r0, r3
 8001192:	e001      	b.n	8001198 <__aeabi_ui2f+0x28>
 8001194:	2000      	movs	r0, #0
 8001196:	2500      	movs	r5, #0
 8001198:	05c0      	lsls	r0, r0, #23
 800119a:	4328      	orrs	r0, r5
 800119c:	bd70      	pop	{r4, r5, r6, pc}
 800119e:	2b99      	cmp	r3, #153	; 0x99
 80011a0:	dd09      	ble.n	80011b6 <__aeabi_ui2f+0x46>
 80011a2:	0002      	movs	r2, r0
 80011a4:	0029      	movs	r1, r5
 80011a6:	321b      	adds	r2, #27
 80011a8:	4091      	lsls	r1, r2
 80011aa:	1e4a      	subs	r2, r1, #1
 80011ac:	4191      	sbcs	r1, r2
 80011ae:	2205      	movs	r2, #5
 80011b0:	1a12      	subs	r2, r2, r0
 80011b2:	40d5      	lsrs	r5, r2
 80011b4:	430d      	orrs	r5, r1
 80011b6:	2c05      	cmp	r4, #5
 80011b8:	dd01      	ble.n	80011be <__aeabi_ui2f+0x4e>
 80011ba:	1f62      	subs	r2, r4, #5
 80011bc:	4095      	lsls	r5, r2
 80011be:	0029      	movs	r1, r5
 80011c0:	4e08      	ldr	r6, [pc, #32]	; (80011e4 <__aeabi_ui2f+0x74>)
 80011c2:	4031      	ands	r1, r6
 80011c4:	076a      	lsls	r2, r5, #29
 80011c6:	d009      	beq.n	80011dc <__aeabi_ui2f+0x6c>
 80011c8:	200f      	movs	r0, #15
 80011ca:	4028      	ands	r0, r5
 80011cc:	2804      	cmp	r0, #4
 80011ce:	d005      	beq.n	80011dc <__aeabi_ui2f+0x6c>
 80011d0:	3104      	adds	r1, #4
 80011d2:	014a      	lsls	r2, r1, #5
 80011d4:	d502      	bpl.n	80011dc <__aeabi_ui2f+0x6c>
 80011d6:	239f      	movs	r3, #159	; 0x9f
 80011d8:	4031      	ands	r1, r6
 80011da:	1b1b      	subs	r3, r3, r4
 80011dc:	0189      	lsls	r1, r1, #6
 80011de:	0a4d      	lsrs	r5, r1, #9
 80011e0:	b2d8      	uxtb	r0, r3
 80011e2:	e7d9      	b.n	8001198 <__aeabi_ui2f+0x28>
 80011e4:	fbffffff 	.word	0xfbffffff

080011e8 <__aeabi_dadd>:
 80011e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ea:	464f      	mov	r7, r9
 80011ec:	46d6      	mov	lr, sl
 80011ee:	4646      	mov	r6, r8
 80011f0:	000d      	movs	r5, r1
 80011f2:	0001      	movs	r1, r0
 80011f4:	0018      	movs	r0, r3
 80011f6:	b5c0      	push	{r6, r7, lr}
 80011f8:	0017      	movs	r7, r2
 80011fa:	032b      	lsls	r3, r5, #12
 80011fc:	0a5a      	lsrs	r2, r3, #9
 80011fe:	0f4b      	lsrs	r3, r1, #29
 8001200:	4313      	orrs	r3, r2
 8001202:	00ca      	lsls	r2, r1, #3
 8001204:	4691      	mov	r9, r2
 8001206:	0302      	lsls	r2, r0, #12
 8001208:	006e      	lsls	r6, r5, #1
 800120a:	0041      	lsls	r1, r0, #1
 800120c:	0a52      	lsrs	r2, r2, #9
 800120e:	0fec      	lsrs	r4, r5, #31
 8001210:	0f7d      	lsrs	r5, r7, #29
 8001212:	4315      	orrs	r5, r2
 8001214:	0d76      	lsrs	r6, r6, #21
 8001216:	0d49      	lsrs	r1, r1, #21
 8001218:	0fc0      	lsrs	r0, r0, #31
 800121a:	4682      	mov	sl, r0
 800121c:	46ac      	mov	ip, r5
 800121e:	00ff      	lsls	r7, r7, #3
 8001220:	1a72      	subs	r2, r6, r1
 8001222:	4284      	cmp	r4, r0
 8001224:	d100      	bne.n	8001228 <__aeabi_dadd+0x40>
 8001226:	e098      	b.n	800135a <__aeabi_dadd+0x172>
 8001228:	2a00      	cmp	r2, #0
 800122a:	dc00      	bgt.n	800122e <__aeabi_dadd+0x46>
 800122c:	e081      	b.n	8001332 <__aeabi_dadd+0x14a>
 800122e:	2900      	cmp	r1, #0
 8001230:	d100      	bne.n	8001234 <__aeabi_dadd+0x4c>
 8001232:	e0b6      	b.n	80013a2 <__aeabi_dadd+0x1ba>
 8001234:	49c9      	ldr	r1, [pc, #804]	; (800155c <__aeabi_dadd+0x374>)
 8001236:	428e      	cmp	r6, r1
 8001238:	d100      	bne.n	800123c <__aeabi_dadd+0x54>
 800123a:	e172      	b.n	8001522 <__aeabi_dadd+0x33a>
 800123c:	2180      	movs	r1, #128	; 0x80
 800123e:	0028      	movs	r0, r5
 8001240:	0409      	lsls	r1, r1, #16
 8001242:	4308      	orrs	r0, r1
 8001244:	4684      	mov	ip, r0
 8001246:	2a38      	cmp	r2, #56	; 0x38
 8001248:	dd00      	ble.n	800124c <__aeabi_dadd+0x64>
 800124a:	e15e      	b.n	800150a <__aeabi_dadd+0x322>
 800124c:	2a1f      	cmp	r2, #31
 800124e:	dd00      	ble.n	8001252 <__aeabi_dadd+0x6a>
 8001250:	e1ee      	b.n	8001630 <__aeabi_dadd+0x448>
 8001252:	2020      	movs	r0, #32
 8001254:	0039      	movs	r1, r7
 8001256:	4665      	mov	r5, ip
 8001258:	1a80      	subs	r0, r0, r2
 800125a:	4087      	lsls	r7, r0
 800125c:	40d1      	lsrs	r1, r2
 800125e:	4085      	lsls	r5, r0
 8001260:	430d      	orrs	r5, r1
 8001262:	0039      	movs	r1, r7
 8001264:	1e4f      	subs	r7, r1, #1
 8001266:	41b9      	sbcs	r1, r7
 8001268:	4667      	mov	r7, ip
 800126a:	40d7      	lsrs	r7, r2
 800126c:	4329      	orrs	r1, r5
 800126e:	1bdb      	subs	r3, r3, r7
 8001270:	464a      	mov	r2, r9
 8001272:	1a55      	subs	r5, r2, r1
 8001274:	45a9      	cmp	r9, r5
 8001276:	4189      	sbcs	r1, r1
 8001278:	4249      	negs	r1, r1
 800127a:	1a5b      	subs	r3, r3, r1
 800127c:	4698      	mov	r8, r3
 800127e:	4643      	mov	r3, r8
 8001280:	021b      	lsls	r3, r3, #8
 8001282:	d400      	bmi.n	8001286 <__aeabi_dadd+0x9e>
 8001284:	e0cc      	b.n	8001420 <__aeabi_dadd+0x238>
 8001286:	4643      	mov	r3, r8
 8001288:	025b      	lsls	r3, r3, #9
 800128a:	0a5b      	lsrs	r3, r3, #9
 800128c:	4698      	mov	r8, r3
 800128e:	4643      	mov	r3, r8
 8001290:	2b00      	cmp	r3, #0
 8001292:	d100      	bne.n	8001296 <__aeabi_dadd+0xae>
 8001294:	e12c      	b.n	80014f0 <__aeabi_dadd+0x308>
 8001296:	4640      	mov	r0, r8
 8001298:	f001 fde8 	bl	8002e6c <__clzsi2>
 800129c:	0001      	movs	r1, r0
 800129e:	3908      	subs	r1, #8
 80012a0:	2220      	movs	r2, #32
 80012a2:	0028      	movs	r0, r5
 80012a4:	4643      	mov	r3, r8
 80012a6:	1a52      	subs	r2, r2, r1
 80012a8:	408b      	lsls	r3, r1
 80012aa:	40d0      	lsrs	r0, r2
 80012ac:	408d      	lsls	r5, r1
 80012ae:	4303      	orrs	r3, r0
 80012b0:	428e      	cmp	r6, r1
 80012b2:	dd00      	ble.n	80012b6 <__aeabi_dadd+0xce>
 80012b4:	e117      	b.n	80014e6 <__aeabi_dadd+0x2fe>
 80012b6:	1b8e      	subs	r6, r1, r6
 80012b8:	1c72      	adds	r2, r6, #1
 80012ba:	2a1f      	cmp	r2, #31
 80012bc:	dd00      	ble.n	80012c0 <__aeabi_dadd+0xd8>
 80012be:	e1a7      	b.n	8001610 <__aeabi_dadd+0x428>
 80012c0:	2120      	movs	r1, #32
 80012c2:	0018      	movs	r0, r3
 80012c4:	002e      	movs	r6, r5
 80012c6:	1a89      	subs	r1, r1, r2
 80012c8:	408d      	lsls	r5, r1
 80012ca:	4088      	lsls	r0, r1
 80012cc:	40d6      	lsrs	r6, r2
 80012ce:	40d3      	lsrs	r3, r2
 80012d0:	1e69      	subs	r1, r5, #1
 80012d2:	418d      	sbcs	r5, r1
 80012d4:	4330      	orrs	r0, r6
 80012d6:	4698      	mov	r8, r3
 80012d8:	2600      	movs	r6, #0
 80012da:	4305      	orrs	r5, r0
 80012dc:	076b      	lsls	r3, r5, #29
 80012de:	d009      	beq.n	80012f4 <__aeabi_dadd+0x10c>
 80012e0:	230f      	movs	r3, #15
 80012e2:	402b      	ands	r3, r5
 80012e4:	2b04      	cmp	r3, #4
 80012e6:	d005      	beq.n	80012f4 <__aeabi_dadd+0x10c>
 80012e8:	1d2b      	adds	r3, r5, #4
 80012ea:	42ab      	cmp	r3, r5
 80012ec:	41ad      	sbcs	r5, r5
 80012ee:	426d      	negs	r5, r5
 80012f0:	44a8      	add	r8, r5
 80012f2:	001d      	movs	r5, r3
 80012f4:	4643      	mov	r3, r8
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	d400      	bmi.n	80012fc <__aeabi_dadd+0x114>
 80012fa:	e094      	b.n	8001426 <__aeabi_dadd+0x23e>
 80012fc:	4b97      	ldr	r3, [pc, #604]	; (800155c <__aeabi_dadd+0x374>)
 80012fe:	1c72      	adds	r2, r6, #1
 8001300:	429a      	cmp	r2, r3
 8001302:	d100      	bne.n	8001306 <__aeabi_dadd+0x11e>
 8001304:	e09d      	b.n	8001442 <__aeabi_dadd+0x25a>
 8001306:	4641      	mov	r1, r8
 8001308:	4b95      	ldr	r3, [pc, #596]	; (8001560 <__aeabi_dadd+0x378>)
 800130a:	08ed      	lsrs	r5, r5, #3
 800130c:	4019      	ands	r1, r3
 800130e:	000b      	movs	r3, r1
 8001310:	0552      	lsls	r2, r2, #21
 8001312:	0749      	lsls	r1, r1, #29
 8001314:	025b      	lsls	r3, r3, #9
 8001316:	4329      	orrs	r1, r5
 8001318:	0b1b      	lsrs	r3, r3, #12
 800131a:	0d52      	lsrs	r2, r2, #21
 800131c:	0512      	lsls	r2, r2, #20
 800131e:	4313      	orrs	r3, r2
 8001320:	07e4      	lsls	r4, r4, #31
 8001322:	4323      	orrs	r3, r4
 8001324:	0008      	movs	r0, r1
 8001326:	0019      	movs	r1, r3
 8001328:	bce0      	pop	{r5, r6, r7}
 800132a:	46ba      	mov	sl, r7
 800132c:	46b1      	mov	r9, r6
 800132e:	46a8      	mov	r8, r5
 8001330:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001332:	2a00      	cmp	r2, #0
 8001334:	d043      	beq.n	80013be <__aeabi_dadd+0x1d6>
 8001336:	1b8a      	subs	r2, r1, r6
 8001338:	2e00      	cmp	r6, #0
 800133a:	d000      	beq.n	800133e <__aeabi_dadd+0x156>
 800133c:	e12a      	b.n	8001594 <__aeabi_dadd+0x3ac>
 800133e:	464c      	mov	r4, r9
 8001340:	431c      	orrs	r4, r3
 8001342:	d100      	bne.n	8001346 <__aeabi_dadd+0x15e>
 8001344:	e1d1      	b.n	80016ea <__aeabi_dadd+0x502>
 8001346:	1e54      	subs	r4, r2, #1
 8001348:	2a01      	cmp	r2, #1
 800134a:	d100      	bne.n	800134e <__aeabi_dadd+0x166>
 800134c:	e21f      	b.n	800178e <__aeabi_dadd+0x5a6>
 800134e:	4d83      	ldr	r5, [pc, #524]	; (800155c <__aeabi_dadd+0x374>)
 8001350:	42aa      	cmp	r2, r5
 8001352:	d100      	bne.n	8001356 <__aeabi_dadd+0x16e>
 8001354:	e272      	b.n	800183c <__aeabi_dadd+0x654>
 8001356:	0022      	movs	r2, r4
 8001358:	e123      	b.n	80015a2 <__aeabi_dadd+0x3ba>
 800135a:	2a00      	cmp	r2, #0
 800135c:	dc00      	bgt.n	8001360 <__aeabi_dadd+0x178>
 800135e:	e098      	b.n	8001492 <__aeabi_dadd+0x2aa>
 8001360:	2900      	cmp	r1, #0
 8001362:	d042      	beq.n	80013ea <__aeabi_dadd+0x202>
 8001364:	497d      	ldr	r1, [pc, #500]	; (800155c <__aeabi_dadd+0x374>)
 8001366:	428e      	cmp	r6, r1
 8001368:	d100      	bne.n	800136c <__aeabi_dadd+0x184>
 800136a:	e0da      	b.n	8001522 <__aeabi_dadd+0x33a>
 800136c:	2180      	movs	r1, #128	; 0x80
 800136e:	0028      	movs	r0, r5
 8001370:	0409      	lsls	r1, r1, #16
 8001372:	4308      	orrs	r0, r1
 8001374:	4684      	mov	ip, r0
 8001376:	2a38      	cmp	r2, #56	; 0x38
 8001378:	dd00      	ble.n	800137c <__aeabi_dadd+0x194>
 800137a:	e129      	b.n	80015d0 <__aeabi_dadd+0x3e8>
 800137c:	2a1f      	cmp	r2, #31
 800137e:	dc00      	bgt.n	8001382 <__aeabi_dadd+0x19a>
 8001380:	e187      	b.n	8001692 <__aeabi_dadd+0x4aa>
 8001382:	0011      	movs	r1, r2
 8001384:	4665      	mov	r5, ip
 8001386:	3920      	subs	r1, #32
 8001388:	40cd      	lsrs	r5, r1
 800138a:	2a20      	cmp	r2, #32
 800138c:	d004      	beq.n	8001398 <__aeabi_dadd+0x1b0>
 800138e:	2040      	movs	r0, #64	; 0x40
 8001390:	4661      	mov	r1, ip
 8001392:	1a82      	subs	r2, r0, r2
 8001394:	4091      	lsls	r1, r2
 8001396:	430f      	orrs	r7, r1
 8001398:	0039      	movs	r1, r7
 800139a:	1e4f      	subs	r7, r1, #1
 800139c:	41b9      	sbcs	r1, r7
 800139e:	430d      	orrs	r5, r1
 80013a0:	e11b      	b.n	80015da <__aeabi_dadd+0x3f2>
 80013a2:	0029      	movs	r1, r5
 80013a4:	4339      	orrs	r1, r7
 80013a6:	d100      	bne.n	80013aa <__aeabi_dadd+0x1c2>
 80013a8:	e0b5      	b.n	8001516 <__aeabi_dadd+0x32e>
 80013aa:	1e51      	subs	r1, r2, #1
 80013ac:	2a01      	cmp	r2, #1
 80013ae:	d100      	bne.n	80013b2 <__aeabi_dadd+0x1ca>
 80013b0:	e1ab      	b.n	800170a <__aeabi_dadd+0x522>
 80013b2:	486a      	ldr	r0, [pc, #424]	; (800155c <__aeabi_dadd+0x374>)
 80013b4:	4282      	cmp	r2, r0
 80013b6:	d100      	bne.n	80013ba <__aeabi_dadd+0x1d2>
 80013b8:	e1b2      	b.n	8001720 <__aeabi_dadd+0x538>
 80013ba:	000a      	movs	r2, r1
 80013bc:	e743      	b.n	8001246 <__aeabi_dadd+0x5e>
 80013be:	4969      	ldr	r1, [pc, #420]	; (8001564 <__aeabi_dadd+0x37c>)
 80013c0:	1c75      	adds	r5, r6, #1
 80013c2:	420d      	tst	r5, r1
 80013c4:	d000      	beq.n	80013c8 <__aeabi_dadd+0x1e0>
 80013c6:	e0cf      	b.n	8001568 <__aeabi_dadd+0x380>
 80013c8:	2e00      	cmp	r6, #0
 80013ca:	d000      	beq.n	80013ce <__aeabi_dadd+0x1e6>
 80013cc:	e193      	b.n	80016f6 <__aeabi_dadd+0x50e>
 80013ce:	4649      	mov	r1, r9
 80013d0:	4319      	orrs	r1, r3
 80013d2:	d100      	bne.n	80013d6 <__aeabi_dadd+0x1ee>
 80013d4:	e1d1      	b.n	800177a <__aeabi_dadd+0x592>
 80013d6:	4661      	mov	r1, ip
 80013d8:	4339      	orrs	r1, r7
 80013da:	d000      	beq.n	80013de <__aeabi_dadd+0x1f6>
 80013dc:	e1e3      	b.n	80017a6 <__aeabi_dadd+0x5be>
 80013de:	4649      	mov	r1, r9
 80013e0:	0758      	lsls	r0, r3, #29
 80013e2:	08c9      	lsrs	r1, r1, #3
 80013e4:	4301      	orrs	r1, r0
 80013e6:	08db      	lsrs	r3, r3, #3
 80013e8:	e026      	b.n	8001438 <__aeabi_dadd+0x250>
 80013ea:	0029      	movs	r1, r5
 80013ec:	4339      	orrs	r1, r7
 80013ee:	d100      	bne.n	80013f2 <__aeabi_dadd+0x20a>
 80013f0:	e091      	b.n	8001516 <__aeabi_dadd+0x32e>
 80013f2:	1e51      	subs	r1, r2, #1
 80013f4:	2a01      	cmp	r2, #1
 80013f6:	d005      	beq.n	8001404 <__aeabi_dadd+0x21c>
 80013f8:	4858      	ldr	r0, [pc, #352]	; (800155c <__aeabi_dadd+0x374>)
 80013fa:	4282      	cmp	r2, r0
 80013fc:	d100      	bne.n	8001400 <__aeabi_dadd+0x218>
 80013fe:	e18f      	b.n	8001720 <__aeabi_dadd+0x538>
 8001400:	000a      	movs	r2, r1
 8001402:	e7b8      	b.n	8001376 <__aeabi_dadd+0x18e>
 8001404:	003d      	movs	r5, r7
 8001406:	444d      	add	r5, r9
 8001408:	454d      	cmp	r5, r9
 800140a:	4189      	sbcs	r1, r1
 800140c:	4463      	add	r3, ip
 800140e:	4698      	mov	r8, r3
 8001410:	4249      	negs	r1, r1
 8001412:	4488      	add	r8, r1
 8001414:	4643      	mov	r3, r8
 8001416:	2602      	movs	r6, #2
 8001418:	021b      	lsls	r3, r3, #8
 800141a:	d500      	bpl.n	800141e <__aeabi_dadd+0x236>
 800141c:	e0eb      	b.n	80015f6 <__aeabi_dadd+0x40e>
 800141e:	3e01      	subs	r6, #1
 8001420:	076b      	lsls	r3, r5, #29
 8001422:	d000      	beq.n	8001426 <__aeabi_dadd+0x23e>
 8001424:	e75c      	b.n	80012e0 <__aeabi_dadd+0xf8>
 8001426:	4643      	mov	r3, r8
 8001428:	08e9      	lsrs	r1, r5, #3
 800142a:	075a      	lsls	r2, r3, #29
 800142c:	4311      	orrs	r1, r2
 800142e:	0032      	movs	r2, r6
 8001430:	08db      	lsrs	r3, r3, #3
 8001432:	484a      	ldr	r0, [pc, #296]	; (800155c <__aeabi_dadd+0x374>)
 8001434:	4282      	cmp	r2, r0
 8001436:	d021      	beq.n	800147c <__aeabi_dadd+0x294>
 8001438:	031b      	lsls	r3, r3, #12
 800143a:	0552      	lsls	r2, r2, #21
 800143c:	0b1b      	lsrs	r3, r3, #12
 800143e:	0d52      	lsrs	r2, r2, #21
 8001440:	e76c      	b.n	800131c <__aeabi_dadd+0x134>
 8001442:	2300      	movs	r3, #0
 8001444:	2100      	movs	r1, #0
 8001446:	e769      	b.n	800131c <__aeabi_dadd+0x134>
 8001448:	002a      	movs	r2, r5
 800144a:	433a      	orrs	r2, r7
 800144c:	d069      	beq.n	8001522 <__aeabi_dadd+0x33a>
 800144e:	464a      	mov	r2, r9
 8001450:	0758      	lsls	r0, r3, #29
 8001452:	08d1      	lsrs	r1, r2, #3
 8001454:	08da      	lsrs	r2, r3, #3
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	031b      	lsls	r3, r3, #12
 800145a:	4308      	orrs	r0, r1
 800145c:	421a      	tst	r2, r3
 800145e:	d007      	beq.n	8001470 <__aeabi_dadd+0x288>
 8001460:	0029      	movs	r1, r5
 8001462:	08ed      	lsrs	r5, r5, #3
 8001464:	421d      	tst	r5, r3
 8001466:	d103      	bne.n	8001470 <__aeabi_dadd+0x288>
 8001468:	002a      	movs	r2, r5
 800146a:	08ff      	lsrs	r7, r7, #3
 800146c:	0748      	lsls	r0, r1, #29
 800146e:	4338      	orrs	r0, r7
 8001470:	0f43      	lsrs	r3, r0, #29
 8001472:	00c1      	lsls	r1, r0, #3
 8001474:	075b      	lsls	r3, r3, #29
 8001476:	08c9      	lsrs	r1, r1, #3
 8001478:	4319      	orrs	r1, r3
 800147a:	0013      	movs	r3, r2
 800147c:	000a      	movs	r2, r1
 800147e:	431a      	orrs	r2, r3
 8001480:	d100      	bne.n	8001484 <__aeabi_dadd+0x29c>
 8001482:	e213      	b.n	80018ac <__aeabi_dadd+0x6c4>
 8001484:	2280      	movs	r2, #128	; 0x80
 8001486:	0312      	lsls	r2, r2, #12
 8001488:	4313      	orrs	r3, r2
 800148a:	031b      	lsls	r3, r3, #12
 800148c:	4a33      	ldr	r2, [pc, #204]	; (800155c <__aeabi_dadd+0x374>)
 800148e:	0b1b      	lsrs	r3, r3, #12
 8001490:	e744      	b.n	800131c <__aeabi_dadd+0x134>
 8001492:	2a00      	cmp	r2, #0
 8001494:	d04b      	beq.n	800152e <__aeabi_dadd+0x346>
 8001496:	1b8a      	subs	r2, r1, r6
 8001498:	2e00      	cmp	r6, #0
 800149a:	d100      	bne.n	800149e <__aeabi_dadd+0x2b6>
 800149c:	e0e7      	b.n	800166e <__aeabi_dadd+0x486>
 800149e:	482f      	ldr	r0, [pc, #188]	; (800155c <__aeabi_dadd+0x374>)
 80014a0:	4281      	cmp	r1, r0
 80014a2:	d100      	bne.n	80014a6 <__aeabi_dadd+0x2be>
 80014a4:	e195      	b.n	80017d2 <__aeabi_dadd+0x5ea>
 80014a6:	2080      	movs	r0, #128	; 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4303      	orrs	r3, r0
 80014ac:	2a38      	cmp	r2, #56	; 0x38
 80014ae:	dd00      	ble.n	80014b2 <__aeabi_dadd+0x2ca>
 80014b0:	e143      	b.n	800173a <__aeabi_dadd+0x552>
 80014b2:	2a1f      	cmp	r2, #31
 80014b4:	dd00      	ble.n	80014b8 <__aeabi_dadd+0x2d0>
 80014b6:	e1db      	b.n	8001870 <__aeabi_dadd+0x688>
 80014b8:	2020      	movs	r0, #32
 80014ba:	001d      	movs	r5, r3
 80014bc:	464e      	mov	r6, r9
 80014be:	1a80      	subs	r0, r0, r2
 80014c0:	4085      	lsls	r5, r0
 80014c2:	40d6      	lsrs	r6, r2
 80014c4:	4335      	orrs	r5, r6
 80014c6:	464e      	mov	r6, r9
 80014c8:	4086      	lsls	r6, r0
 80014ca:	0030      	movs	r0, r6
 80014cc:	40d3      	lsrs	r3, r2
 80014ce:	1e46      	subs	r6, r0, #1
 80014d0:	41b0      	sbcs	r0, r6
 80014d2:	449c      	add	ip, r3
 80014d4:	4305      	orrs	r5, r0
 80014d6:	19ed      	adds	r5, r5, r7
 80014d8:	42bd      	cmp	r5, r7
 80014da:	419b      	sbcs	r3, r3
 80014dc:	425b      	negs	r3, r3
 80014de:	4463      	add	r3, ip
 80014e0:	4698      	mov	r8, r3
 80014e2:	000e      	movs	r6, r1
 80014e4:	e07f      	b.n	80015e6 <__aeabi_dadd+0x3fe>
 80014e6:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <__aeabi_dadd+0x378>)
 80014e8:	1a76      	subs	r6, r6, r1
 80014ea:	4013      	ands	r3, r2
 80014ec:	4698      	mov	r8, r3
 80014ee:	e6f5      	b.n	80012dc <__aeabi_dadd+0xf4>
 80014f0:	0028      	movs	r0, r5
 80014f2:	f001 fcbb 	bl	8002e6c <__clzsi2>
 80014f6:	0001      	movs	r1, r0
 80014f8:	3118      	adds	r1, #24
 80014fa:	291f      	cmp	r1, #31
 80014fc:	dc00      	bgt.n	8001500 <__aeabi_dadd+0x318>
 80014fe:	e6cf      	b.n	80012a0 <__aeabi_dadd+0xb8>
 8001500:	002b      	movs	r3, r5
 8001502:	3808      	subs	r0, #8
 8001504:	4083      	lsls	r3, r0
 8001506:	2500      	movs	r5, #0
 8001508:	e6d2      	b.n	80012b0 <__aeabi_dadd+0xc8>
 800150a:	4662      	mov	r2, ip
 800150c:	433a      	orrs	r2, r7
 800150e:	0011      	movs	r1, r2
 8001510:	1e4f      	subs	r7, r1, #1
 8001512:	41b9      	sbcs	r1, r7
 8001514:	e6ac      	b.n	8001270 <__aeabi_dadd+0x88>
 8001516:	4649      	mov	r1, r9
 8001518:	0758      	lsls	r0, r3, #29
 800151a:	08c9      	lsrs	r1, r1, #3
 800151c:	4301      	orrs	r1, r0
 800151e:	08db      	lsrs	r3, r3, #3
 8001520:	e787      	b.n	8001432 <__aeabi_dadd+0x24a>
 8001522:	4649      	mov	r1, r9
 8001524:	075a      	lsls	r2, r3, #29
 8001526:	08c9      	lsrs	r1, r1, #3
 8001528:	4311      	orrs	r1, r2
 800152a:	08db      	lsrs	r3, r3, #3
 800152c:	e7a6      	b.n	800147c <__aeabi_dadd+0x294>
 800152e:	490d      	ldr	r1, [pc, #52]	; (8001564 <__aeabi_dadd+0x37c>)
 8001530:	1c70      	adds	r0, r6, #1
 8001532:	4208      	tst	r0, r1
 8001534:	d000      	beq.n	8001538 <__aeabi_dadd+0x350>
 8001536:	e0bb      	b.n	80016b0 <__aeabi_dadd+0x4c8>
 8001538:	2e00      	cmp	r6, #0
 800153a:	d000      	beq.n	800153e <__aeabi_dadd+0x356>
 800153c:	e114      	b.n	8001768 <__aeabi_dadd+0x580>
 800153e:	4649      	mov	r1, r9
 8001540:	4319      	orrs	r1, r3
 8001542:	d100      	bne.n	8001546 <__aeabi_dadd+0x35e>
 8001544:	e175      	b.n	8001832 <__aeabi_dadd+0x64a>
 8001546:	0029      	movs	r1, r5
 8001548:	4339      	orrs	r1, r7
 800154a:	d000      	beq.n	800154e <__aeabi_dadd+0x366>
 800154c:	e17e      	b.n	800184c <__aeabi_dadd+0x664>
 800154e:	4649      	mov	r1, r9
 8001550:	0758      	lsls	r0, r3, #29
 8001552:	08c9      	lsrs	r1, r1, #3
 8001554:	4301      	orrs	r1, r0
 8001556:	08db      	lsrs	r3, r3, #3
 8001558:	e76e      	b.n	8001438 <__aeabi_dadd+0x250>
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	000007ff 	.word	0x000007ff
 8001560:	ff7fffff 	.word	0xff7fffff
 8001564:	000007fe 	.word	0x000007fe
 8001568:	4649      	mov	r1, r9
 800156a:	1bcd      	subs	r5, r1, r7
 800156c:	4661      	mov	r1, ip
 800156e:	1a58      	subs	r0, r3, r1
 8001570:	45a9      	cmp	r9, r5
 8001572:	4189      	sbcs	r1, r1
 8001574:	4249      	negs	r1, r1
 8001576:	4688      	mov	r8, r1
 8001578:	0001      	movs	r1, r0
 800157a:	4640      	mov	r0, r8
 800157c:	1a09      	subs	r1, r1, r0
 800157e:	4688      	mov	r8, r1
 8001580:	0209      	lsls	r1, r1, #8
 8001582:	d500      	bpl.n	8001586 <__aeabi_dadd+0x39e>
 8001584:	e0a6      	b.n	80016d4 <__aeabi_dadd+0x4ec>
 8001586:	4641      	mov	r1, r8
 8001588:	4329      	orrs	r1, r5
 800158a:	d000      	beq.n	800158e <__aeabi_dadd+0x3a6>
 800158c:	e67f      	b.n	800128e <__aeabi_dadd+0xa6>
 800158e:	2300      	movs	r3, #0
 8001590:	2400      	movs	r4, #0
 8001592:	e751      	b.n	8001438 <__aeabi_dadd+0x250>
 8001594:	4cc7      	ldr	r4, [pc, #796]	; (80018b4 <__aeabi_dadd+0x6cc>)
 8001596:	42a1      	cmp	r1, r4
 8001598:	d100      	bne.n	800159c <__aeabi_dadd+0x3b4>
 800159a:	e0c7      	b.n	800172c <__aeabi_dadd+0x544>
 800159c:	2480      	movs	r4, #128	; 0x80
 800159e:	0424      	lsls	r4, r4, #16
 80015a0:	4323      	orrs	r3, r4
 80015a2:	2a38      	cmp	r2, #56	; 0x38
 80015a4:	dc54      	bgt.n	8001650 <__aeabi_dadd+0x468>
 80015a6:	2a1f      	cmp	r2, #31
 80015a8:	dd00      	ble.n	80015ac <__aeabi_dadd+0x3c4>
 80015aa:	e0cc      	b.n	8001746 <__aeabi_dadd+0x55e>
 80015ac:	2420      	movs	r4, #32
 80015ae:	4648      	mov	r0, r9
 80015b0:	1aa4      	subs	r4, r4, r2
 80015b2:	001d      	movs	r5, r3
 80015b4:	464e      	mov	r6, r9
 80015b6:	40a0      	lsls	r0, r4
 80015b8:	40d6      	lsrs	r6, r2
 80015ba:	40a5      	lsls	r5, r4
 80015bc:	0004      	movs	r4, r0
 80015be:	40d3      	lsrs	r3, r2
 80015c0:	4662      	mov	r2, ip
 80015c2:	4335      	orrs	r5, r6
 80015c4:	1e66      	subs	r6, r4, #1
 80015c6:	41b4      	sbcs	r4, r6
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	469c      	mov	ip, r3
 80015cc:	4325      	orrs	r5, r4
 80015ce:	e044      	b.n	800165a <__aeabi_dadd+0x472>
 80015d0:	4662      	mov	r2, ip
 80015d2:	433a      	orrs	r2, r7
 80015d4:	0015      	movs	r5, r2
 80015d6:	1e6f      	subs	r7, r5, #1
 80015d8:	41bd      	sbcs	r5, r7
 80015da:	444d      	add	r5, r9
 80015dc:	454d      	cmp	r5, r9
 80015de:	4189      	sbcs	r1, r1
 80015e0:	4249      	negs	r1, r1
 80015e2:	4688      	mov	r8, r1
 80015e4:	4498      	add	r8, r3
 80015e6:	4643      	mov	r3, r8
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	d400      	bmi.n	80015ee <__aeabi_dadd+0x406>
 80015ec:	e718      	b.n	8001420 <__aeabi_dadd+0x238>
 80015ee:	4bb1      	ldr	r3, [pc, #708]	; (80018b4 <__aeabi_dadd+0x6cc>)
 80015f0:	3601      	adds	r6, #1
 80015f2:	429e      	cmp	r6, r3
 80015f4:	d049      	beq.n	800168a <__aeabi_dadd+0x4a2>
 80015f6:	4642      	mov	r2, r8
 80015f8:	4baf      	ldr	r3, [pc, #700]	; (80018b8 <__aeabi_dadd+0x6d0>)
 80015fa:	2101      	movs	r1, #1
 80015fc:	401a      	ands	r2, r3
 80015fe:	0013      	movs	r3, r2
 8001600:	086a      	lsrs	r2, r5, #1
 8001602:	400d      	ands	r5, r1
 8001604:	4315      	orrs	r5, r2
 8001606:	07d9      	lsls	r1, r3, #31
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	4698      	mov	r8, r3
 800160c:	430d      	orrs	r5, r1
 800160e:	e665      	b.n	80012dc <__aeabi_dadd+0xf4>
 8001610:	0018      	movs	r0, r3
 8001612:	3e1f      	subs	r6, #31
 8001614:	40f0      	lsrs	r0, r6
 8001616:	2a20      	cmp	r2, #32
 8001618:	d003      	beq.n	8001622 <__aeabi_dadd+0x43a>
 800161a:	2140      	movs	r1, #64	; 0x40
 800161c:	1a8a      	subs	r2, r1, r2
 800161e:	4093      	lsls	r3, r2
 8001620:	431d      	orrs	r5, r3
 8001622:	1e69      	subs	r1, r5, #1
 8001624:	418d      	sbcs	r5, r1
 8001626:	2300      	movs	r3, #0
 8001628:	2600      	movs	r6, #0
 800162a:	4698      	mov	r8, r3
 800162c:	4305      	orrs	r5, r0
 800162e:	e6f7      	b.n	8001420 <__aeabi_dadd+0x238>
 8001630:	0011      	movs	r1, r2
 8001632:	4665      	mov	r5, ip
 8001634:	3920      	subs	r1, #32
 8001636:	40cd      	lsrs	r5, r1
 8001638:	2a20      	cmp	r2, #32
 800163a:	d004      	beq.n	8001646 <__aeabi_dadd+0x45e>
 800163c:	2040      	movs	r0, #64	; 0x40
 800163e:	4661      	mov	r1, ip
 8001640:	1a82      	subs	r2, r0, r2
 8001642:	4091      	lsls	r1, r2
 8001644:	430f      	orrs	r7, r1
 8001646:	0039      	movs	r1, r7
 8001648:	1e4f      	subs	r7, r1, #1
 800164a:	41b9      	sbcs	r1, r7
 800164c:	4329      	orrs	r1, r5
 800164e:	e60f      	b.n	8001270 <__aeabi_dadd+0x88>
 8001650:	464a      	mov	r2, r9
 8001652:	4313      	orrs	r3, r2
 8001654:	001d      	movs	r5, r3
 8001656:	1e6b      	subs	r3, r5, #1
 8001658:	419d      	sbcs	r5, r3
 800165a:	1b7d      	subs	r5, r7, r5
 800165c:	42af      	cmp	r7, r5
 800165e:	419b      	sbcs	r3, r3
 8001660:	4662      	mov	r2, ip
 8001662:	425b      	negs	r3, r3
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	4698      	mov	r8, r3
 8001668:	4654      	mov	r4, sl
 800166a:	000e      	movs	r6, r1
 800166c:	e607      	b.n	800127e <__aeabi_dadd+0x96>
 800166e:	4648      	mov	r0, r9
 8001670:	4318      	orrs	r0, r3
 8001672:	d100      	bne.n	8001676 <__aeabi_dadd+0x48e>
 8001674:	e0b3      	b.n	80017de <__aeabi_dadd+0x5f6>
 8001676:	1e50      	subs	r0, r2, #1
 8001678:	2a01      	cmp	r2, #1
 800167a:	d100      	bne.n	800167e <__aeabi_dadd+0x496>
 800167c:	e10d      	b.n	800189a <__aeabi_dadd+0x6b2>
 800167e:	4d8d      	ldr	r5, [pc, #564]	; (80018b4 <__aeabi_dadd+0x6cc>)
 8001680:	42aa      	cmp	r2, r5
 8001682:	d100      	bne.n	8001686 <__aeabi_dadd+0x49e>
 8001684:	e0a5      	b.n	80017d2 <__aeabi_dadd+0x5ea>
 8001686:	0002      	movs	r2, r0
 8001688:	e710      	b.n	80014ac <__aeabi_dadd+0x2c4>
 800168a:	0032      	movs	r2, r6
 800168c:	2300      	movs	r3, #0
 800168e:	2100      	movs	r1, #0
 8001690:	e644      	b.n	800131c <__aeabi_dadd+0x134>
 8001692:	2120      	movs	r1, #32
 8001694:	0038      	movs	r0, r7
 8001696:	1a89      	subs	r1, r1, r2
 8001698:	4665      	mov	r5, ip
 800169a:	408f      	lsls	r7, r1
 800169c:	408d      	lsls	r5, r1
 800169e:	40d0      	lsrs	r0, r2
 80016a0:	1e79      	subs	r1, r7, #1
 80016a2:	418f      	sbcs	r7, r1
 80016a4:	4305      	orrs	r5, r0
 80016a6:	433d      	orrs	r5, r7
 80016a8:	4667      	mov	r7, ip
 80016aa:	40d7      	lsrs	r7, r2
 80016ac:	19db      	adds	r3, r3, r7
 80016ae:	e794      	b.n	80015da <__aeabi_dadd+0x3f2>
 80016b0:	4a80      	ldr	r2, [pc, #512]	; (80018b4 <__aeabi_dadd+0x6cc>)
 80016b2:	4290      	cmp	r0, r2
 80016b4:	d100      	bne.n	80016b8 <__aeabi_dadd+0x4d0>
 80016b6:	e0ec      	b.n	8001892 <__aeabi_dadd+0x6aa>
 80016b8:	0039      	movs	r1, r7
 80016ba:	4449      	add	r1, r9
 80016bc:	4549      	cmp	r1, r9
 80016be:	4192      	sbcs	r2, r2
 80016c0:	4463      	add	r3, ip
 80016c2:	4252      	negs	r2, r2
 80016c4:	189b      	adds	r3, r3, r2
 80016c6:	07dd      	lsls	r5, r3, #31
 80016c8:	0849      	lsrs	r1, r1, #1
 80016ca:	085b      	lsrs	r3, r3, #1
 80016cc:	4698      	mov	r8, r3
 80016ce:	0006      	movs	r6, r0
 80016d0:	430d      	orrs	r5, r1
 80016d2:	e6a5      	b.n	8001420 <__aeabi_dadd+0x238>
 80016d4:	464a      	mov	r2, r9
 80016d6:	1abd      	subs	r5, r7, r2
 80016d8:	42af      	cmp	r7, r5
 80016da:	4189      	sbcs	r1, r1
 80016dc:	4662      	mov	r2, ip
 80016de:	4249      	negs	r1, r1
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	1a5b      	subs	r3, r3, r1
 80016e4:	4698      	mov	r8, r3
 80016e6:	4654      	mov	r4, sl
 80016e8:	e5d1      	b.n	800128e <__aeabi_dadd+0xa6>
 80016ea:	076c      	lsls	r4, r5, #29
 80016ec:	08f9      	lsrs	r1, r7, #3
 80016ee:	4321      	orrs	r1, r4
 80016f0:	08eb      	lsrs	r3, r5, #3
 80016f2:	0004      	movs	r4, r0
 80016f4:	e69d      	b.n	8001432 <__aeabi_dadd+0x24a>
 80016f6:	464a      	mov	r2, r9
 80016f8:	431a      	orrs	r2, r3
 80016fa:	d175      	bne.n	80017e8 <__aeabi_dadd+0x600>
 80016fc:	4661      	mov	r1, ip
 80016fe:	4339      	orrs	r1, r7
 8001700:	d114      	bne.n	800172c <__aeabi_dadd+0x544>
 8001702:	2380      	movs	r3, #128	; 0x80
 8001704:	2400      	movs	r4, #0
 8001706:	031b      	lsls	r3, r3, #12
 8001708:	e6bc      	b.n	8001484 <__aeabi_dadd+0x29c>
 800170a:	464a      	mov	r2, r9
 800170c:	1bd5      	subs	r5, r2, r7
 800170e:	45a9      	cmp	r9, r5
 8001710:	4189      	sbcs	r1, r1
 8001712:	4662      	mov	r2, ip
 8001714:	4249      	negs	r1, r1
 8001716:	1a9b      	subs	r3, r3, r2
 8001718:	1a5b      	subs	r3, r3, r1
 800171a:	4698      	mov	r8, r3
 800171c:	2601      	movs	r6, #1
 800171e:	e5ae      	b.n	800127e <__aeabi_dadd+0x96>
 8001720:	464a      	mov	r2, r9
 8001722:	08d1      	lsrs	r1, r2, #3
 8001724:	075a      	lsls	r2, r3, #29
 8001726:	4311      	orrs	r1, r2
 8001728:	08db      	lsrs	r3, r3, #3
 800172a:	e6a7      	b.n	800147c <__aeabi_dadd+0x294>
 800172c:	4663      	mov	r3, ip
 800172e:	08f9      	lsrs	r1, r7, #3
 8001730:	075a      	lsls	r2, r3, #29
 8001732:	4654      	mov	r4, sl
 8001734:	4311      	orrs	r1, r2
 8001736:	08db      	lsrs	r3, r3, #3
 8001738:	e6a0      	b.n	800147c <__aeabi_dadd+0x294>
 800173a:	464a      	mov	r2, r9
 800173c:	4313      	orrs	r3, r2
 800173e:	001d      	movs	r5, r3
 8001740:	1e6b      	subs	r3, r5, #1
 8001742:	419d      	sbcs	r5, r3
 8001744:	e6c7      	b.n	80014d6 <__aeabi_dadd+0x2ee>
 8001746:	0014      	movs	r4, r2
 8001748:	001e      	movs	r6, r3
 800174a:	3c20      	subs	r4, #32
 800174c:	40e6      	lsrs	r6, r4
 800174e:	2a20      	cmp	r2, #32
 8001750:	d005      	beq.n	800175e <__aeabi_dadd+0x576>
 8001752:	2440      	movs	r4, #64	; 0x40
 8001754:	1aa2      	subs	r2, r4, r2
 8001756:	4093      	lsls	r3, r2
 8001758:	464a      	mov	r2, r9
 800175a:	431a      	orrs	r2, r3
 800175c:	4691      	mov	r9, r2
 800175e:	464d      	mov	r5, r9
 8001760:	1e6b      	subs	r3, r5, #1
 8001762:	419d      	sbcs	r5, r3
 8001764:	4335      	orrs	r5, r6
 8001766:	e778      	b.n	800165a <__aeabi_dadd+0x472>
 8001768:	464a      	mov	r2, r9
 800176a:	431a      	orrs	r2, r3
 800176c:	d000      	beq.n	8001770 <__aeabi_dadd+0x588>
 800176e:	e66b      	b.n	8001448 <__aeabi_dadd+0x260>
 8001770:	076b      	lsls	r3, r5, #29
 8001772:	08f9      	lsrs	r1, r7, #3
 8001774:	4319      	orrs	r1, r3
 8001776:	08eb      	lsrs	r3, r5, #3
 8001778:	e680      	b.n	800147c <__aeabi_dadd+0x294>
 800177a:	4661      	mov	r1, ip
 800177c:	4339      	orrs	r1, r7
 800177e:	d054      	beq.n	800182a <__aeabi_dadd+0x642>
 8001780:	4663      	mov	r3, ip
 8001782:	08f9      	lsrs	r1, r7, #3
 8001784:	075c      	lsls	r4, r3, #29
 8001786:	4321      	orrs	r1, r4
 8001788:	08db      	lsrs	r3, r3, #3
 800178a:	0004      	movs	r4, r0
 800178c:	e654      	b.n	8001438 <__aeabi_dadd+0x250>
 800178e:	464a      	mov	r2, r9
 8001790:	1abd      	subs	r5, r7, r2
 8001792:	42af      	cmp	r7, r5
 8001794:	4189      	sbcs	r1, r1
 8001796:	4662      	mov	r2, ip
 8001798:	4249      	negs	r1, r1
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	1a5b      	subs	r3, r3, r1
 800179e:	4698      	mov	r8, r3
 80017a0:	0004      	movs	r4, r0
 80017a2:	2601      	movs	r6, #1
 80017a4:	e56b      	b.n	800127e <__aeabi_dadd+0x96>
 80017a6:	464a      	mov	r2, r9
 80017a8:	1bd5      	subs	r5, r2, r7
 80017aa:	45a9      	cmp	r9, r5
 80017ac:	4189      	sbcs	r1, r1
 80017ae:	4662      	mov	r2, ip
 80017b0:	4249      	negs	r1, r1
 80017b2:	1a9a      	subs	r2, r3, r2
 80017b4:	1a52      	subs	r2, r2, r1
 80017b6:	4690      	mov	r8, r2
 80017b8:	0212      	lsls	r2, r2, #8
 80017ba:	d532      	bpl.n	8001822 <__aeabi_dadd+0x63a>
 80017bc:	464a      	mov	r2, r9
 80017be:	1abd      	subs	r5, r7, r2
 80017c0:	42af      	cmp	r7, r5
 80017c2:	4189      	sbcs	r1, r1
 80017c4:	4662      	mov	r2, ip
 80017c6:	4249      	negs	r1, r1
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	1a5b      	subs	r3, r3, r1
 80017cc:	4698      	mov	r8, r3
 80017ce:	0004      	movs	r4, r0
 80017d0:	e584      	b.n	80012dc <__aeabi_dadd+0xf4>
 80017d2:	4663      	mov	r3, ip
 80017d4:	08f9      	lsrs	r1, r7, #3
 80017d6:	075a      	lsls	r2, r3, #29
 80017d8:	4311      	orrs	r1, r2
 80017da:	08db      	lsrs	r3, r3, #3
 80017dc:	e64e      	b.n	800147c <__aeabi_dadd+0x294>
 80017de:	08f9      	lsrs	r1, r7, #3
 80017e0:	0768      	lsls	r0, r5, #29
 80017e2:	4301      	orrs	r1, r0
 80017e4:	08eb      	lsrs	r3, r5, #3
 80017e6:	e624      	b.n	8001432 <__aeabi_dadd+0x24a>
 80017e8:	4662      	mov	r2, ip
 80017ea:	433a      	orrs	r2, r7
 80017ec:	d100      	bne.n	80017f0 <__aeabi_dadd+0x608>
 80017ee:	e698      	b.n	8001522 <__aeabi_dadd+0x33a>
 80017f0:	464a      	mov	r2, r9
 80017f2:	08d1      	lsrs	r1, r2, #3
 80017f4:	075a      	lsls	r2, r3, #29
 80017f6:	4311      	orrs	r1, r2
 80017f8:	08da      	lsrs	r2, r3, #3
 80017fa:	2380      	movs	r3, #128	; 0x80
 80017fc:	031b      	lsls	r3, r3, #12
 80017fe:	421a      	tst	r2, r3
 8001800:	d008      	beq.n	8001814 <__aeabi_dadd+0x62c>
 8001802:	4660      	mov	r0, ip
 8001804:	08c5      	lsrs	r5, r0, #3
 8001806:	421d      	tst	r5, r3
 8001808:	d104      	bne.n	8001814 <__aeabi_dadd+0x62c>
 800180a:	4654      	mov	r4, sl
 800180c:	002a      	movs	r2, r5
 800180e:	08f9      	lsrs	r1, r7, #3
 8001810:	0743      	lsls	r3, r0, #29
 8001812:	4319      	orrs	r1, r3
 8001814:	0f4b      	lsrs	r3, r1, #29
 8001816:	00c9      	lsls	r1, r1, #3
 8001818:	075b      	lsls	r3, r3, #29
 800181a:	08c9      	lsrs	r1, r1, #3
 800181c:	4319      	orrs	r1, r3
 800181e:	0013      	movs	r3, r2
 8001820:	e62c      	b.n	800147c <__aeabi_dadd+0x294>
 8001822:	4641      	mov	r1, r8
 8001824:	4329      	orrs	r1, r5
 8001826:	d000      	beq.n	800182a <__aeabi_dadd+0x642>
 8001828:	e5fa      	b.n	8001420 <__aeabi_dadd+0x238>
 800182a:	2300      	movs	r3, #0
 800182c:	000a      	movs	r2, r1
 800182e:	2400      	movs	r4, #0
 8001830:	e602      	b.n	8001438 <__aeabi_dadd+0x250>
 8001832:	076b      	lsls	r3, r5, #29
 8001834:	08f9      	lsrs	r1, r7, #3
 8001836:	4319      	orrs	r1, r3
 8001838:	08eb      	lsrs	r3, r5, #3
 800183a:	e5fd      	b.n	8001438 <__aeabi_dadd+0x250>
 800183c:	4663      	mov	r3, ip
 800183e:	08f9      	lsrs	r1, r7, #3
 8001840:	075b      	lsls	r3, r3, #29
 8001842:	4319      	orrs	r1, r3
 8001844:	4663      	mov	r3, ip
 8001846:	0004      	movs	r4, r0
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	e617      	b.n	800147c <__aeabi_dadd+0x294>
 800184c:	003d      	movs	r5, r7
 800184e:	444d      	add	r5, r9
 8001850:	4463      	add	r3, ip
 8001852:	454d      	cmp	r5, r9
 8001854:	4189      	sbcs	r1, r1
 8001856:	4698      	mov	r8, r3
 8001858:	4249      	negs	r1, r1
 800185a:	4488      	add	r8, r1
 800185c:	4643      	mov	r3, r8
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	d400      	bmi.n	8001864 <__aeabi_dadd+0x67c>
 8001862:	e5dd      	b.n	8001420 <__aeabi_dadd+0x238>
 8001864:	4642      	mov	r2, r8
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <__aeabi_dadd+0x6d0>)
 8001868:	2601      	movs	r6, #1
 800186a:	401a      	ands	r2, r3
 800186c:	4690      	mov	r8, r2
 800186e:	e5d7      	b.n	8001420 <__aeabi_dadd+0x238>
 8001870:	0010      	movs	r0, r2
 8001872:	001e      	movs	r6, r3
 8001874:	3820      	subs	r0, #32
 8001876:	40c6      	lsrs	r6, r0
 8001878:	2a20      	cmp	r2, #32
 800187a:	d005      	beq.n	8001888 <__aeabi_dadd+0x6a0>
 800187c:	2040      	movs	r0, #64	; 0x40
 800187e:	1a82      	subs	r2, r0, r2
 8001880:	4093      	lsls	r3, r2
 8001882:	464a      	mov	r2, r9
 8001884:	431a      	orrs	r2, r3
 8001886:	4691      	mov	r9, r2
 8001888:	464d      	mov	r5, r9
 800188a:	1e6b      	subs	r3, r5, #1
 800188c:	419d      	sbcs	r5, r3
 800188e:	4335      	orrs	r5, r6
 8001890:	e621      	b.n	80014d6 <__aeabi_dadd+0x2ee>
 8001892:	0002      	movs	r2, r0
 8001894:	2300      	movs	r3, #0
 8001896:	2100      	movs	r1, #0
 8001898:	e540      	b.n	800131c <__aeabi_dadd+0x134>
 800189a:	464a      	mov	r2, r9
 800189c:	19d5      	adds	r5, r2, r7
 800189e:	42bd      	cmp	r5, r7
 80018a0:	4189      	sbcs	r1, r1
 80018a2:	4463      	add	r3, ip
 80018a4:	4698      	mov	r8, r3
 80018a6:	4249      	negs	r1, r1
 80018a8:	4488      	add	r8, r1
 80018aa:	e5b3      	b.n	8001414 <__aeabi_dadd+0x22c>
 80018ac:	2100      	movs	r1, #0
 80018ae:	4a01      	ldr	r2, [pc, #4]	; (80018b4 <__aeabi_dadd+0x6cc>)
 80018b0:	000b      	movs	r3, r1
 80018b2:	e533      	b.n	800131c <__aeabi_dadd+0x134>
 80018b4:	000007ff 	.word	0x000007ff
 80018b8:	ff7fffff 	.word	0xff7fffff

080018bc <__aeabi_ddiv>:
 80018bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018be:	4657      	mov	r7, sl
 80018c0:	464e      	mov	r6, r9
 80018c2:	4645      	mov	r5, r8
 80018c4:	46de      	mov	lr, fp
 80018c6:	b5e0      	push	{r5, r6, r7, lr}
 80018c8:	4681      	mov	r9, r0
 80018ca:	0005      	movs	r5, r0
 80018cc:	030c      	lsls	r4, r1, #12
 80018ce:	0048      	lsls	r0, r1, #1
 80018d0:	4692      	mov	sl, r2
 80018d2:	001f      	movs	r7, r3
 80018d4:	b085      	sub	sp, #20
 80018d6:	0b24      	lsrs	r4, r4, #12
 80018d8:	0d40      	lsrs	r0, r0, #21
 80018da:	0fce      	lsrs	r6, r1, #31
 80018dc:	2800      	cmp	r0, #0
 80018de:	d059      	beq.n	8001994 <__aeabi_ddiv+0xd8>
 80018e0:	4b87      	ldr	r3, [pc, #540]	; (8001b00 <__aeabi_ddiv+0x244>)
 80018e2:	4298      	cmp	r0, r3
 80018e4:	d100      	bne.n	80018e8 <__aeabi_ddiv+0x2c>
 80018e6:	e098      	b.n	8001a1a <__aeabi_ddiv+0x15e>
 80018e8:	0f6b      	lsrs	r3, r5, #29
 80018ea:	00e4      	lsls	r4, r4, #3
 80018ec:	431c      	orrs	r4, r3
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	041b      	lsls	r3, r3, #16
 80018f2:	4323      	orrs	r3, r4
 80018f4:	4698      	mov	r8, r3
 80018f6:	4b83      	ldr	r3, [pc, #524]	; (8001b04 <__aeabi_ddiv+0x248>)
 80018f8:	00ed      	lsls	r5, r5, #3
 80018fa:	469b      	mov	fp, r3
 80018fc:	2300      	movs	r3, #0
 80018fe:	4699      	mov	r9, r3
 8001900:	4483      	add	fp, r0
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	033c      	lsls	r4, r7, #12
 8001906:	007b      	lsls	r3, r7, #1
 8001908:	4650      	mov	r0, sl
 800190a:	0b24      	lsrs	r4, r4, #12
 800190c:	0d5b      	lsrs	r3, r3, #21
 800190e:	0fff      	lsrs	r7, r7, #31
 8001910:	2b00      	cmp	r3, #0
 8001912:	d067      	beq.n	80019e4 <__aeabi_ddiv+0x128>
 8001914:	4a7a      	ldr	r2, [pc, #488]	; (8001b00 <__aeabi_ddiv+0x244>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d018      	beq.n	800194c <__aeabi_ddiv+0x90>
 800191a:	497a      	ldr	r1, [pc, #488]	; (8001b04 <__aeabi_ddiv+0x248>)
 800191c:	0f42      	lsrs	r2, r0, #29
 800191e:	468c      	mov	ip, r1
 8001920:	00e4      	lsls	r4, r4, #3
 8001922:	4659      	mov	r1, fp
 8001924:	4314      	orrs	r4, r2
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	4463      	add	r3, ip
 800192a:	0412      	lsls	r2, r2, #16
 800192c:	1acb      	subs	r3, r1, r3
 800192e:	4314      	orrs	r4, r2
 8001930:	469b      	mov	fp, r3
 8001932:	00c2      	lsls	r2, r0, #3
 8001934:	2000      	movs	r0, #0
 8001936:	0033      	movs	r3, r6
 8001938:	407b      	eors	r3, r7
 800193a:	469a      	mov	sl, r3
 800193c:	464b      	mov	r3, r9
 800193e:	2b0f      	cmp	r3, #15
 8001940:	d900      	bls.n	8001944 <__aeabi_ddiv+0x88>
 8001942:	e0ef      	b.n	8001b24 <__aeabi_ddiv+0x268>
 8001944:	4970      	ldr	r1, [pc, #448]	; (8001b08 <__aeabi_ddiv+0x24c>)
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	58cb      	ldr	r3, [r1, r3]
 800194a:	469f      	mov	pc, r3
 800194c:	4b6f      	ldr	r3, [pc, #444]	; (8001b0c <__aeabi_ddiv+0x250>)
 800194e:	4652      	mov	r2, sl
 8001950:	469c      	mov	ip, r3
 8001952:	4322      	orrs	r2, r4
 8001954:	44e3      	add	fp, ip
 8001956:	2a00      	cmp	r2, #0
 8001958:	d000      	beq.n	800195c <__aeabi_ddiv+0xa0>
 800195a:	e095      	b.n	8001a88 <__aeabi_ddiv+0x1cc>
 800195c:	4649      	mov	r1, r9
 800195e:	2302      	movs	r3, #2
 8001960:	4319      	orrs	r1, r3
 8001962:	4689      	mov	r9, r1
 8001964:	2400      	movs	r4, #0
 8001966:	2002      	movs	r0, #2
 8001968:	e7e5      	b.n	8001936 <__aeabi_ddiv+0x7a>
 800196a:	2300      	movs	r3, #0
 800196c:	2400      	movs	r4, #0
 800196e:	2500      	movs	r5, #0
 8001970:	4652      	mov	r2, sl
 8001972:	051b      	lsls	r3, r3, #20
 8001974:	4323      	orrs	r3, r4
 8001976:	07d2      	lsls	r2, r2, #31
 8001978:	4313      	orrs	r3, r2
 800197a:	0028      	movs	r0, r5
 800197c:	0019      	movs	r1, r3
 800197e:	b005      	add	sp, #20
 8001980:	bcf0      	pop	{r4, r5, r6, r7}
 8001982:	46bb      	mov	fp, r7
 8001984:	46b2      	mov	sl, r6
 8001986:	46a9      	mov	r9, r5
 8001988:	46a0      	mov	r8, r4
 800198a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198c:	2400      	movs	r4, #0
 800198e:	2500      	movs	r5, #0
 8001990:	4b5b      	ldr	r3, [pc, #364]	; (8001b00 <__aeabi_ddiv+0x244>)
 8001992:	e7ed      	b.n	8001970 <__aeabi_ddiv+0xb4>
 8001994:	464b      	mov	r3, r9
 8001996:	4323      	orrs	r3, r4
 8001998:	4698      	mov	r8, r3
 800199a:	d100      	bne.n	800199e <__aeabi_ddiv+0xe2>
 800199c:	e089      	b.n	8001ab2 <__aeabi_ddiv+0x1f6>
 800199e:	2c00      	cmp	r4, #0
 80019a0:	d100      	bne.n	80019a4 <__aeabi_ddiv+0xe8>
 80019a2:	e1e0      	b.n	8001d66 <__aeabi_ddiv+0x4aa>
 80019a4:	0020      	movs	r0, r4
 80019a6:	f001 fa61 	bl	8002e6c <__clzsi2>
 80019aa:	0001      	movs	r1, r0
 80019ac:	0002      	movs	r2, r0
 80019ae:	390b      	subs	r1, #11
 80019b0:	231d      	movs	r3, #29
 80019b2:	1a5b      	subs	r3, r3, r1
 80019b4:	4649      	mov	r1, r9
 80019b6:	0010      	movs	r0, r2
 80019b8:	40d9      	lsrs	r1, r3
 80019ba:	3808      	subs	r0, #8
 80019bc:	4084      	lsls	r4, r0
 80019be:	000b      	movs	r3, r1
 80019c0:	464d      	mov	r5, r9
 80019c2:	4323      	orrs	r3, r4
 80019c4:	4698      	mov	r8, r3
 80019c6:	4085      	lsls	r5, r0
 80019c8:	4851      	ldr	r0, [pc, #324]	; (8001b10 <__aeabi_ddiv+0x254>)
 80019ca:	033c      	lsls	r4, r7, #12
 80019cc:	1a83      	subs	r3, r0, r2
 80019ce:	469b      	mov	fp, r3
 80019d0:	2300      	movs	r3, #0
 80019d2:	4699      	mov	r9, r3
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	007b      	lsls	r3, r7, #1
 80019d8:	4650      	mov	r0, sl
 80019da:	0b24      	lsrs	r4, r4, #12
 80019dc:	0d5b      	lsrs	r3, r3, #21
 80019de:	0fff      	lsrs	r7, r7, #31
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d197      	bne.n	8001914 <__aeabi_ddiv+0x58>
 80019e4:	4652      	mov	r2, sl
 80019e6:	4322      	orrs	r2, r4
 80019e8:	d055      	beq.n	8001a96 <__aeabi_ddiv+0x1da>
 80019ea:	2c00      	cmp	r4, #0
 80019ec:	d100      	bne.n	80019f0 <__aeabi_ddiv+0x134>
 80019ee:	e1ca      	b.n	8001d86 <__aeabi_ddiv+0x4ca>
 80019f0:	0020      	movs	r0, r4
 80019f2:	f001 fa3b 	bl	8002e6c <__clzsi2>
 80019f6:	0002      	movs	r2, r0
 80019f8:	3a0b      	subs	r2, #11
 80019fa:	231d      	movs	r3, #29
 80019fc:	0001      	movs	r1, r0
 80019fe:	1a9b      	subs	r3, r3, r2
 8001a00:	4652      	mov	r2, sl
 8001a02:	3908      	subs	r1, #8
 8001a04:	40da      	lsrs	r2, r3
 8001a06:	408c      	lsls	r4, r1
 8001a08:	4314      	orrs	r4, r2
 8001a0a:	4652      	mov	r2, sl
 8001a0c:	408a      	lsls	r2, r1
 8001a0e:	4b41      	ldr	r3, [pc, #260]	; (8001b14 <__aeabi_ddiv+0x258>)
 8001a10:	4458      	add	r0, fp
 8001a12:	469b      	mov	fp, r3
 8001a14:	4483      	add	fp, r0
 8001a16:	2000      	movs	r0, #0
 8001a18:	e78d      	b.n	8001936 <__aeabi_ddiv+0x7a>
 8001a1a:	464b      	mov	r3, r9
 8001a1c:	4323      	orrs	r3, r4
 8001a1e:	4698      	mov	r8, r3
 8001a20:	d140      	bne.n	8001aa4 <__aeabi_ddiv+0x1e8>
 8001a22:	2308      	movs	r3, #8
 8001a24:	4699      	mov	r9, r3
 8001a26:	3b06      	subs	r3, #6
 8001a28:	2500      	movs	r5, #0
 8001a2a:	4683      	mov	fp, r0
 8001a2c:	9300      	str	r3, [sp, #0]
 8001a2e:	e769      	b.n	8001904 <__aeabi_ddiv+0x48>
 8001a30:	46b2      	mov	sl, r6
 8001a32:	9b00      	ldr	r3, [sp, #0]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d0a9      	beq.n	800198c <__aeabi_ddiv+0xd0>
 8001a38:	2b03      	cmp	r3, #3
 8001a3a:	d100      	bne.n	8001a3e <__aeabi_ddiv+0x182>
 8001a3c:	e211      	b.n	8001e62 <__aeabi_ddiv+0x5a6>
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d093      	beq.n	800196a <__aeabi_ddiv+0xae>
 8001a42:	4a35      	ldr	r2, [pc, #212]	; (8001b18 <__aeabi_ddiv+0x25c>)
 8001a44:	445a      	add	r2, fp
 8001a46:	2a00      	cmp	r2, #0
 8001a48:	dc00      	bgt.n	8001a4c <__aeabi_ddiv+0x190>
 8001a4a:	e13c      	b.n	8001cc6 <__aeabi_ddiv+0x40a>
 8001a4c:	076b      	lsls	r3, r5, #29
 8001a4e:	d000      	beq.n	8001a52 <__aeabi_ddiv+0x196>
 8001a50:	e1a7      	b.n	8001da2 <__aeabi_ddiv+0x4e6>
 8001a52:	08ed      	lsrs	r5, r5, #3
 8001a54:	4643      	mov	r3, r8
 8001a56:	01db      	lsls	r3, r3, #7
 8001a58:	d506      	bpl.n	8001a68 <__aeabi_ddiv+0x1ac>
 8001a5a:	4642      	mov	r2, r8
 8001a5c:	4b2f      	ldr	r3, [pc, #188]	; (8001b1c <__aeabi_ddiv+0x260>)
 8001a5e:	401a      	ands	r2, r3
 8001a60:	4690      	mov	r8, r2
 8001a62:	2280      	movs	r2, #128	; 0x80
 8001a64:	00d2      	lsls	r2, r2, #3
 8001a66:	445a      	add	r2, fp
 8001a68:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <__aeabi_ddiv+0x264>)
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	dc8e      	bgt.n	800198c <__aeabi_ddiv+0xd0>
 8001a6e:	4643      	mov	r3, r8
 8001a70:	0552      	lsls	r2, r2, #21
 8001a72:	0758      	lsls	r0, r3, #29
 8001a74:	025c      	lsls	r4, r3, #9
 8001a76:	4305      	orrs	r5, r0
 8001a78:	0b24      	lsrs	r4, r4, #12
 8001a7a:	0d53      	lsrs	r3, r2, #21
 8001a7c:	e778      	b.n	8001970 <__aeabi_ddiv+0xb4>
 8001a7e:	46ba      	mov	sl, r7
 8001a80:	46a0      	mov	r8, r4
 8001a82:	0015      	movs	r5, r2
 8001a84:	9000      	str	r0, [sp, #0]
 8001a86:	e7d4      	b.n	8001a32 <__aeabi_ddiv+0x176>
 8001a88:	464a      	mov	r2, r9
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	4691      	mov	r9, r2
 8001a90:	2003      	movs	r0, #3
 8001a92:	4652      	mov	r2, sl
 8001a94:	e74f      	b.n	8001936 <__aeabi_ddiv+0x7a>
 8001a96:	4649      	mov	r1, r9
 8001a98:	2301      	movs	r3, #1
 8001a9a:	4319      	orrs	r1, r3
 8001a9c:	4689      	mov	r9, r1
 8001a9e:	2400      	movs	r4, #0
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	e748      	b.n	8001936 <__aeabi_ddiv+0x7a>
 8001aa4:	230c      	movs	r3, #12
 8001aa6:	4699      	mov	r9, r3
 8001aa8:	3b09      	subs	r3, #9
 8001aaa:	46a0      	mov	r8, r4
 8001aac:	4683      	mov	fp, r0
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	e728      	b.n	8001904 <__aeabi_ddiv+0x48>
 8001ab2:	2304      	movs	r3, #4
 8001ab4:	4699      	mov	r9, r3
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	469b      	mov	fp, r3
 8001aba:	3301      	adds	r3, #1
 8001abc:	2500      	movs	r5, #0
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	e720      	b.n	8001904 <__aeabi_ddiv+0x48>
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	2480      	movs	r4, #128	; 0x80
 8001ac6:	469a      	mov	sl, r3
 8001ac8:	2500      	movs	r5, #0
 8001aca:	4b0d      	ldr	r3, [pc, #52]	; (8001b00 <__aeabi_ddiv+0x244>)
 8001acc:	0324      	lsls	r4, r4, #12
 8001ace:	e74f      	b.n	8001970 <__aeabi_ddiv+0xb4>
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	4641      	mov	r1, r8
 8001ad4:	031b      	lsls	r3, r3, #12
 8001ad6:	4219      	tst	r1, r3
 8001ad8:	d008      	beq.n	8001aec <__aeabi_ddiv+0x230>
 8001ada:	421c      	tst	r4, r3
 8001adc:	d106      	bne.n	8001aec <__aeabi_ddiv+0x230>
 8001ade:	431c      	orrs	r4, r3
 8001ae0:	0324      	lsls	r4, r4, #12
 8001ae2:	46ba      	mov	sl, r7
 8001ae4:	0015      	movs	r5, r2
 8001ae6:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <__aeabi_ddiv+0x244>)
 8001ae8:	0b24      	lsrs	r4, r4, #12
 8001aea:	e741      	b.n	8001970 <__aeabi_ddiv+0xb4>
 8001aec:	2480      	movs	r4, #128	; 0x80
 8001aee:	4643      	mov	r3, r8
 8001af0:	0324      	lsls	r4, r4, #12
 8001af2:	431c      	orrs	r4, r3
 8001af4:	0324      	lsls	r4, r4, #12
 8001af6:	46b2      	mov	sl, r6
 8001af8:	4b01      	ldr	r3, [pc, #4]	; (8001b00 <__aeabi_ddiv+0x244>)
 8001afa:	0b24      	lsrs	r4, r4, #12
 8001afc:	e738      	b.n	8001970 <__aeabi_ddiv+0xb4>
 8001afe:	46c0      	nop			; (mov r8, r8)
 8001b00:	000007ff 	.word	0x000007ff
 8001b04:	fffffc01 	.word	0xfffffc01
 8001b08:	08011934 	.word	0x08011934
 8001b0c:	fffff801 	.word	0xfffff801
 8001b10:	fffffc0d 	.word	0xfffffc0d
 8001b14:	000003f3 	.word	0x000003f3
 8001b18:	000003ff 	.word	0x000003ff
 8001b1c:	feffffff 	.word	0xfeffffff
 8001b20:	000007fe 	.word	0x000007fe
 8001b24:	4544      	cmp	r4, r8
 8001b26:	d200      	bcs.n	8001b2a <__aeabi_ddiv+0x26e>
 8001b28:	e116      	b.n	8001d58 <__aeabi_ddiv+0x49c>
 8001b2a:	d100      	bne.n	8001b2e <__aeabi_ddiv+0x272>
 8001b2c:	e111      	b.n	8001d52 <__aeabi_ddiv+0x496>
 8001b2e:	2301      	movs	r3, #1
 8001b30:	425b      	negs	r3, r3
 8001b32:	469c      	mov	ip, r3
 8001b34:	002e      	movs	r6, r5
 8001b36:	4640      	mov	r0, r8
 8001b38:	2500      	movs	r5, #0
 8001b3a:	44e3      	add	fp, ip
 8001b3c:	0223      	lsls	r3, r4, #8
 8001b3e:	0e14      	lsrs	r4, r2, #24
 8001b40:	431c      	orrs	r4, r3
 8001b42:	0c1b      	lsrs	r3, r3, #16
 8001b44:	4699      	mov	r9, r3
 8001b46:	0423      	lsls	r3, r4, #16
 8001b48:	0c1f      	lsrs	r7, r3, #16
 8001b4a:	0212      	lsls	r2, r2, #8
 8001b4c:	4649      	mov	r1, r9
 8001b4e:	9200      	str	r2, [sp, #0]
 8001b50:	9701      	str	r7, [sp, #4]
 8001b52:	f7fe fb8f 	bl	8000274 <__aeabi_uidivmod>
 8001b56:	0002      	movs	r2, r0
 8001b58:	437a      	muls	r2, r7
 8001b5a:	040b      	lsls	r3, r1, #16
 8001b5c:	0c31      	lsrs	r1, r6, #16
 8001b5e:	4680      	mov	r8, r0
 8001b60:	4319      	orrs	r1, r3
 8001b62:	428a      	cmp	r2, r1
 8001b64:	d90b      	bls.n	8001b7e <__aeabi_ddiv+0x2c2>
 8001b66:	2301      	movs	r3, #1
 8001b68:	425b      	negs	r3, r3
 8001b6a:	469c      	mov	ip, r3
 8001b6c:	1909      	adds	r1, r1, r4
 8001b6e:	44e0      	add	r8, ip
 8001b70:	428c      	cmp	r4, r1
 8001b72:	d804      	bhi.n	8001b7e <__aeabi_ddiv+0x2c2>
 8001b74:	428a      	cmp	r2, r1
 8001b76:	d902      	bls.n	8001b7e <__aeabi_ddiv+0x2c2>
 8001b78:	1e83      	subs	r3, r0, #2
 8001b7a:	4698      	mov	r8, r3
 8001b7c:	1909      	adds	r1, r1, r4
 8001b7e:	1a88      	subs	r0, r1, r2
 8001b80:	4649      	mov	r1, r9
 8001b82:	f7fe fb77 	bl	8000274 <__aeabi_uidivmod>
 8001b86:	0409      	lsls	r1, r1, #16
 8001b88:	468c      	mov	ip, r1
 8001b8a:	0431      	lsls	r1, r6, #16
 8001b8c:	4666      	mov	r6, ip
 8001b8e:	9a01      	ldr	r2, [sp, #4]
 8001b90:	0c09      	lsrs	r1, r1, #16
 8001b92:	4342      	muls	r2, r0
 8001b94:	0003      	movs	r3, r0
 8001b96:	4331      	orrs	r1, r6
 8001b98:	428a      	cmp	r2, r1
 8001b9a:	d904      	bls.n	8001ba6 <__aeabi_ddiv+0x2ea>
 8001b9c:	1909      	adds	r1, r1, r4
 8001b9e:	3b01      	subs	r3, #1
 8001ba0:	428c      	cmp	r4, r1
 8001ba2:	d800      	bhi.n	8001ba6 <__aeabi_ddiv+0x2ea>
 8001ba4:	e111      	b.n	8001dca <__aeabi_ddiv+0x50e>
 8001ba6:	1a89      	subs	r1, r1, r2
 8001ba8:	4642      	mov	r2, r8
 8001baa:	9e00      	ldr	r6, [sp, #0]
 8001bac:	0412      	lsls	r2, r2, #16
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	0c33      	lsrs	r3, r6, #16
 8001bb2:	001f      	movs	r7, r3
 8001bb4:	0c10      	lsrs	r0, r2, #16
 8001bb6:	4690      	mov	r8, r2
 8001bb8:	9302      	str	r3, [sp, #8]
 8001bba:	0413      	lsls	r3, r2, #16
 8001bbc:	0432      	lsls	r2, r6, #16
 8001bbe:	0c16      	lsrs	r6, r2, #16
 8001bc0:	0032      	movs	r2, r6
 8001bc2:	0c1b      	lsrs	r3, r3, #16
 8001bc4:	435a      	muls	r2, r3
 8001bc6:	9603      	str	r6, [sp, #12]
 8001bc8:	437b      	muls	r3, r7
 8001bca:	4346      	muls	r6, r0
 8001bcc:	4378      	muls	r0, r7
 8001bce:	0c17      	lsrs	r7, r2, #16
 8001bd0:	46bc      	mov	ip, r7
 8001bd2:	199b      	adds	r3, r3, r6
 8001bd4:	4463      	add	r3, ip
 8001bd6:	429e      	cmp	r6, r3
 8001bd8:	d903      	bls.n	8001be2 <__aeabi_ddiv+0x326>
 8001bda:	2680      	movs	r6, #128	; 0x80
 8001bdc:	0276      	lsls	r6, r6, #9
 8001bde:	46b4      	mov	ip, r6
 8001be0:	4460      	add	r0, ip
 8001be2:	0c1e      	lsrs	r6, r3, #16
 8001be4:	1830      	adds	r0, r6, r0
 8001be6:	0416      	lsls	r6, r2, #16
 8001be8:	041b      	lsls	r3, r3, #16
 8001bea:	0c36      	lsrs	r6, r6, #16
 8001bec:	199e      	adds	r6, r3, r6
 8001bee:	4281      	cmp	r1, r0
 8001bf0:	d200      	bcs.n	8001bf4 <__aeabi_ddiv+0x338>
 8001bf2:	e09c      	b.n	8001d2e <__aeabi_ddiv+0x472>
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_ddiv+0x33c>
 8001bf6:	e097      	b.n	8001d28 <__aeabi_ddiv+0x46c>
 8001bf8:	1bae      	subs	r6, r5, r6
 8001bfa:	1a09      	subs	r1, r1, r0
 8001bfc:	42b5      	cmp	r5, r6
 8001bfe:	4180      	sbcs	r0, r0
 8001c00:	4240      	negs	r0, r0
 8001c02:	1a08      	subs	r0, r1, r0
 8001c04:	4284      	cmp	r4, r0
 8001c06:	d100      	bne.n	8001c0a <__aeabi_ddiv+0x34e>
 8001c08:	e111      	b.n	8001e2e <__aeabi_ddiv+0x572>
 8001c0a:	4649      	mov	r1, r9
 8001c0c:	f7fe fb32 	bl	8000274 <__aeabi_uidivmod>
 8001c10:	9a01      	ldr	r2, [sp, #4]
 8001c12:	040b      	lsls	r3, r1, #16
 8001c14:	4342      	muls	r2, r0
 8001c16:	0c31      	lsrs	r1, r6, #16
 8001c18:	0005      	movs	r5, r0
 8001c1a:	4319      	orrs	r1, r3
 8001c1c:	428a      	cmp	r2, r1
 8001c1e:	d907      	bls.n	8001c30 <__aeabi_ddiv+0x374>
 8001c20:	1909      	adds	r1, r1, r4
 8001c22:	3d01      	subs	r5, #1
 8001c24:	428c      	cmp	r4, r1
 8001c26:	d803      	bhi.n	8001c30 <__aeabi_ddiv+0x374>
 8001c28:	428a      	cmp	r2, r1
 8001c2a:	d901      	bls.n	8001c30 <__aeabi_ddiv+0x374>
 8001c2c:	1e85      	subs	r5, r0, #2
 8001c2e:	1909      	adds	r1, r1, r4
 8001c30:	1a88      	subs	r0, r1, r2
 8001c32:	4649      	mov	r1, r9
 8001c34:	f7fe fb1e 	bl	8000274 <__aeabi_uidivmod>
 8001c38:	0409      	lsls	r1, r1, #16
 8001c3a:	468c      	mov	ip, r1
 8001c3c:	0431      	lsls	r1, r6, #16
 8001c3e:	4666      	mov	r6, ip
 8001c40:	9a01      	ldr	r2, [sp, #4]
 8001c42:	0c09      	lsrs	r1, r1, #16
 8001c44:	4342      	muls	r2, r0
 8001c46:	0003      	movs	r3, r0
 8001c48:	4331      	orrs	r1, r6
 8001c4a:	428a      	cmp	r2, r1
 8001c4c:	d907      	bls.n	8001c5e <__aeabi_ddiv+0x3a2>
 8001c4e:	1909      	adds	r1, r1, r4
 8001c50:	3b01      	subs	r3, #1
 8001c52:	428c      	cmp	r4, r1
 8001c54:	d803      	bhi.n	8001c5e <__aeabi_ddiv+0x3a2>
 8001c56:	428a      	cmp	r2, r1
 8001c58:	d901      	bls.n	8001c5e <__aeabi_ddiv+0x3a2>
 8001c5a:	1e83      	subs	r3, r0, #2
 8001c5c:	1909      	adds	r1, r1, r4
 8001c5e:	9e03      	ldr	r6, [sp, #12]
 8001c60:	1a89      	subs	r1, r1, r2
 8001c62:	0032      	movs	r2, r6
 8001c64:	042d      	lsls	r5, r5, #16
 8001c66:	431d      	orrs	r5, r3
 8001c68:	9f02      	ldr	r7, [sp, #8]
 8001c6a:	042b      	lsls	r3, r5, #16
 8001c6c:	0c1b      	lsrs	r3, r3, #16
 8001c6e:	435a      	muls	r2, r3
 8001c70:	437b      	muls	r3, r7
 8001c72:	469c      	mov	ip, r3
 8001c74:	0c28      	lsrs	r0, r5, #16
 8001c76:	4346      	muls	r6, r0
 8001c78:	0c13      	lsrs	r3, r2, #16
 8001c7a:	44b4      	add	ip, r6
 8001c7c:	4463      	add	r3, ip
 8001c7e:	4378      	muls	r0, r7
 8001c80:	429e      	cmp	r6, r3
 8001c82:	d903      	bls.n	8001c8c <__aeabi_ddiv+0x3d0>
 8001c84:	2680      	movs	r6, #128	; 0x80
 8001c86:	0276      	lsls	r6, r6, #9
 8001c88:	46b4      	mov	ip, r6
 8001c8a:	4460      	add	r0, ip
 8001c8c:	0c1e      	lsrs	r6, r3, #16
 8001c8e:	0412      	lsls	r2, r2, #16
 8001c90:	041b      	lsls	r3, r3, #16
 8001c92:	0c12      	lsrs	r2, r2, #16
 8001c94:	1830      	adds	r0, r6, r0
 8001c96:	189b      	adds	r3, r3, r2
 8001c98:	4281      	cmp	r1, r0
 8001c9a:	d306      	bcc.n	8001caa <__aeabi_ddiv+0x3ee>
 8001c9c:	d002      	beq.n	8001ca4 <__aeabi_ddiv+0x3e8>
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	431d      	orrs	r5, r3
 8001ca2:	e6ce      	b.n	8001a42 <__aeabi_ddiv+0x186>
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d100      	bne.n	8001caa <__aeabi_ddiv+0x3ee>
 8001ca8:	e6cb      	b.n	8001a42 <__aeabi_ddiv+0x186>
 8001caa:	1861      	adds	r1, r4, r1
 8001cac:	1e6e      	subs	r6, r5, #1
 8001cae:	42a1      	cmp	r1, r4
 8001cb0:	d200      	bcs.n	8001cb4 <__aeabi_ddiv+0x3f8>
 8001cb2:	e0a4      	b.n	8001dfe <__aeabi_ddiv+0x542>
 8001cb4:	4281      	cmp	r1, r0
 8001cb6:	d200      	bcs.n	8001cba <__aeabi_ddiv+0x3fe>
 8001cb8:	e0c9      	b.n	8001e4e <__aeabi_ddiv+0x592>
 8001cba:	d100      	bne.n	8001cbe <__aeabi_ddiv+0x402>
 8001cbc:	e0d9      	b.n	8001e72 <__aeabi_ddiv+0x5b6>
 8001cbe:	0035      	movs	r5, r6
 8001cc0:	e7ed      	b.n	8001c9e <__aeabi_ddiv+0x3e2>
 8001cc2:	2501      	movs	r5, #1
 8001cc4:	426d      	negs	r5, r5
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	1a89      	subs	r1, r1, r2
 8001cca:	2938      	cmp	r1, #56	; 0x38
 8001ccc:	dd00      	ble.n	8001cd0 <__aeabi_ddiv+0x414>
 8001cce:	e64c      	b.n	800196a <__aeabi_ddiv+0xae>
 8001cd0:	291f      	cmp	r1, #31
 8001cd2:	dc00      	bgt.n	8001cd6 <__aeabi_ddiv+0x41a>
 8001cd4:	e07f      	b.n	8001dd6 <__aeabi_ddiv+0x51a>
 8001cd6:	231f      	movs	r3, #31
 8001cd8:	425b      	negs	r3, r3
 8001cda:	1a9a      	subs	r2, r3, r2
 8001cdc:	4643      	mov	r3, r8
 8001cde:	40d3      	lsrs	r3, r2
 8001ce0:	2920      	cmp	r1, #32
 8001ce2:	d004      	beq.n	8001cee <__aeabi_ddiv+0x432>
 8001ce4:	4644      	mov	r4, r8
 8001ce6:	4a65      	ldr	r2, [pc, #404]	; (8001e7c <__aeabi_ddiv+0x5c0>)
 8001ce8:	445a      	add	r2, fp
 8001cea:	4094      	lsls	r4, r2
 8001cec:	4325      	orrs	r5, r4
 8001cee:	1e6a      	subs	r2, r5, #1
 8001cf0:	4195      	sbcs	r5, r2
 8001cf2:	2207      	movs	r2, #7
 8001cf4:	432b      	orrs	r3, r5
 8001cf6:	0015      	movs	r5, r2
 8001cf8:	2400      	movs	r4, #0
 8001cfa:	401d      	ands	r5, r3
 8001cfc:	421a      	tst	r2, r3
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_ddiv+0x446>
 8001d00:	e0a1      	b.n	8001e46 <__aeabi_ddiv+0x58a>
 8001d02:	220f      	movs	r2, #15
 8001d04:	2400      	movs	r4, #0
 8001d06:	401a      	ands	r2, r3
 8001d08:	2a04      	cmp	r2, #4
 8001d0a:	d100      	bne.n	8001d0e <__aeabi_ddiv+0x452>
 8001d0c:	e098      	b.n	8001e40 <__aeabi_ddiv+0x584>
 8001d0e:	1d1a      	adds	r2, r3, #4
 8001d10:	429a      	cmp	r2, r3
 8001d12:	419b      	sbcs	r3, r3
 8001d14:	425b      	negs	r3, r3
 8001d16:	18e4      	adds	r4, r4, r3
 8001d18:	0013      	movs	r3, r2
 8001d1a:	0222      	lsls	r2, r4, #8
 8001d1c:	d400      	bmi.n	8001d20 <__aeabi_ddiv+0x464>
 8001d1e:	e08f      	b.n	8001e40 <__aeabi_ddiv+0x584>
 8001d20:	2301      	movs	r3, #1
 8001d22:	2400      	movs	r4, #0
 8001d24:	2500      	movs	r5, #0
 8001d26:	e623      	b.n	8001970 <__aeabi_ddiv+0xb4>
 8001d28:	42b5      	cmp	r5, r6
 8001d2a:	d300      	bcc.n	8001d2e <__aeabi_ddiv+0x472>
 8001d2c:	e764      	b.n	8001bf8 <__aeabi_ddiv+0x33c>
 8001d2e:	4643      	mov	r3, r8
 8001d30:	1e5a      	subs	r2, r3, #1
 8001d32:	9b00      	ldr	r3, [sp, #0]
 8001d34:	469c      	mov	ip, r3
 8001d36:	4465      	add	r5, ip
 8001d38:	001f      	movs	r7, r3
 8001d3a:	429d      	cmp	r5, r3
 8001d3c:	419b      	sbcs	r3, r3
 8001d3e:	425b      	negs	r3, r3
 8001d40:	191b      	adds	r3, r3, r4
 8001d42:	18c9      	adds	r1, r1, r3
 8001d44:	428c      	cmp	r4, r1
 8001d46:	d23a      	bcs.n	8001dbe <__aeabi_ddiv+0x502>
 8001d48:	4288      	cmp	r0, r1
 8001d4a:	d863      	bhi.n	8001e14 <__aeabi_ddiv+0x558>
 8001d4c:	d060      	beq.n	8001e10 <__aeabi_ddiv+0x554>
 8001d4e:	4690      	mov	r8, r2
 8001d50:	e752      	b.n	8001bf8 <__aeabi_ddiv+0x33c>
 8001d52:	42aa      	cmp	r2, r5
 8001d54:	d900      	bls.n	8001d58 <__aeabi_ddiv+0x49c>
 8001d56:	e6ea      	b.n	8001b2e <__aeabi_ddiv+0x272>
 8001d58:	4643      	mov	r3, r8
 8001d5a:	07de      	lsls	r6, r3, #31
 8001d5c:	0858      	lsrs	r0, r3, #1
 8001d5e:	086b      	lsrs	r3, r5, #1
 8001d60:	431e      	orrs	r6, r3
 8001d62:	07ed      	lsls	r5, r5, #31
 8001d64:	e6ea      	b.n	8001b3c <__aeabi_ddiv+0x280>
 8001d66:	4648      	mov	r0, r9
 8001d68:	f001 f880 	bl	8002e6c <__clzsi2>
 8001d6c:	0001      	movs	r1, r0
 8001d6e:	0002      	movs	r2, r0
 8001d70:	3115      	adds	r1, #21
 8001d72:	3220      	adds	r2, #32
 8001d74:	291c      	cmp	r1, #28
 8001d76:	dc00      	bgt.n	8001d7a <__aeabi_ddiv+0x4be>
 8001d78:	e61a      	b.n	80019b0 <__aeabi_ddiv+0xf4>
 8001d7a:	464b      	mov	r3, r9
 8001d7c:	3808      	subs	r0, #8
 8001d7e:	4083      	lsls	r3, r0
 8001d80:	2500      	movs	r5, #0
 8001d82:	4698      	mov	r8, r3
 8001d84:	e620      	b.n	80019c8 <__aeabi_ddiv+0x10c>
 8001d86:	f001 f871 	bl	8002e6c <__clzsi2>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	001a      	movs	r2, r3
 8001d8e:	3215      	adds	r2, #21
 8001d90:	3020      	adds	r0, #32
 8001d92:	2a1c      	cmp	r2, #28
 8001d94:	dc00      	bgt.n	8001d98 <__aeabi_ddiv+0x4dc>
 8001d96:	e630      	b.n	80019fa <__aeabi_ddiv+0x13e>
 8001d98:	4654      	mov	r4, sl
 8001d9a:	3b08      	subs	r3, #8
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	409c      	lsls	r4, r3
 8001da0:	e635      	b.n	8001a0e <__aeabi_ddiv+0x152>
 8001da2:	230f      	movs	r3, #15
 8001da4:	402b      	ands	r3, r5
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	d100      	bne.n	8001dac <__aeabi_ddiv+0x4f0>
 8001daa:	e652      	b.n	8001a52 <__aeabi_ddiv+0x196>
 8001dac:	2305      	movs	r3, #5
 8001dae:	425b      	negs	r3, r3
 8001db0:	42ab      	cmp	r3, r5
 8001db2:	419b      	sbcs	r3, r3
 8001db4:	3504      	adds	r5, #4
 8001db6:	425b      	negs	r3, r3
 8001db8:	08ed      	lsrs	r5, r5, #3
 8001dba:	4498      	add	r8, r3
 8001dbc:	e64a      	b.n	8001a54 <__aeabi_ddiv+0x198>
 8001dbe:	428c      	cmp	r4, r1
 8001dc0:	d1c5      	bne.n	8001d4e <__aeabi_ddiv+0x492>
 8001dc2:	42af      	cmp	r7, r5
 8001dc4:	d9c0      	bls.n	8001d48 <__aeabi_ddiv+0x48c>
 8001dc6:	4690      	mov	r8, r2
 8001dc8:	e716      	b.n	8001bf8 <__aeabi_ddiv+0x33c>
 8001dca:	428a      	cmp	r2, r1
 8001dcc:	d800      	bhi.n	8001dd0 <__aeabi_ddiv+0x514>
 8001dce:	e6ea      	b.n	8001ba6 <__aeabi_ddiv+0x2ea>
 8001dd0:	1e83      	subs	r3, r0, #2
 8001dd2:	1909      	adds	r1, r1, r4
 8001dd4:	e6e7      	b.n	8001ba6 <__aeabi_ddiv+0x2ea>
 8001dd6:	4a2a      	ldr	r2, [pc, #168]	; (8001e80 <__aeabi_ddiv+0x5c4>)
 8001dd8:	0028      	movs	r0, r5
 8001dda:	445a      	add	r2, fp
 8001ddc:	4643      	mov	r3, r8
 8001dde:	4095      	lsls	r5, r2
 8001de0:	4093      	lsls	r3, r2
 8001de2:	40c8      	lsrs	r0, r1
 8001de4:	1e6a      	subs	r2, r5, #1
 8001de6:	4195      	sbcs	r5, r2
 8001de8:	4644      	mov	r4, r8
 8001dea:	4303      	orrs	r3, r0
 8001dec:	432b      	orrs	r3, r5
 8001dee:	40cc      	lsrs	r4, r1
 8001df0:	075a      	lsls	r2, r3, #29
 8001df2:	d092      	beq.n	8001d1a <__aeabi_ddiv+0x45e>
 8001df4:	220f      	movs	r2, #15
 8001df6:	401a      	ands	r2, r3
 8001df8:	2a04      	cmp	r2, #4
 8001dfa:	d188      	bne.n	8001d0e <__aeabi_ddiv+0x452>
 8001dfc:	e78d      	b.n	8001d1a <__aeabi_ddiv+0x45e>
 8001dfe:	0035      	movs	r5, r6
 8001e00:	4281      	cmp	r1, r0
 8001e02:	d000      	beq.n	8001e06 <__aeabi_ddiv+0x54a>
 8001e04:	e74b      	b.n	8001c9e <__aeabi_ddiv+0x3e2>
 8001e06:	9a00      	ldr	r2, [sp, #0]
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d000      	beq.n	8001e0e <__aeabi_ddiv+0x552>
 8001e0c:	e747      	b.n	8001c9e <__aeabi_ddiv+0x3e2>
 8001e0e:	e618      	b.n	8001a42 <__aeabi_ddiv+0x186>
 8001e10:	42ae      	cmp	r6, r5
 8001e12:	d99c      	bls.n	8001d4e <__aeabi_ddiv+0x492>
 8001e14:	2302      	movs	r3, #2
 8001e16:	425b      	negs	r3, r3
 8001e18:	469c      	mov	ip, r3
 8001e1a:	9b00      	ldr	r3, [sp, #0]
 8001e1c:	44e0      	add	r8, ip
 8001e1e:	469c      	mov	ip, r3
 8001e20:	4465      	add	r5, ip
 8001e22:	429d      	cmp	r5, r3
 8001e24:	419b      	sbcs	r3, r3
 8001e26:	425b      	negs	r3, r3
 8001e28:	191b      	adds	r3, r3, r4
 8001e2a:	18c9      	adds	r1, r1, r3
 8001e2c:	e6e4      	b.n	8001bf8 <__aeabi_ddiv+0x33c>
 8001e2e:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <__aeabi_ddiv+0x5c8>)
 8001e30:	445a      	add	r2, fp
 8001e32:	2a00      	cmp	r2, #0
 8001e34:	dc00      	bgt.n	8001e38 <__aeabi_ddiv+0x57c>
 8001e36:	e744      	b.n	8001cc2 <__aeabi_ddiv+0x406>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	2500      	movs	r5, #0
 8001e3c:	4498      	add	r8, r3
 8001e3e:	e609      	b.n	8001a54 <__aeabi_ddiv+0x198>
 8001e40:	0765      	lsls	r5, r4, #29
 8001e42:	0264      	lsls	r4, r4, #9
 8001e44:	0b24      	lsrs	r4, r4, #12
 8001e46:	08db      	lsrs	r3, r3, #3
 8001e48:	431d      	orrs	r5, r3
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e590      	b.n	8001970 <__aeabi_ddiv+0xb4>
 8001e4e:	9e00      	ldr	r6, [sp, #0]
 8001e50:	3d02      	subs	r5, #2
 8001e52:	0072      	lsls	r2, r6, #1
 8001e54:	42b2      	cmp	r2, r6
 8001e56:	41bf      	sbcs	r7, r7
 8001e58:	427f      	negs	r7, r7
 8001e5a:	193c      	adds	r4, r7, r4
 8001e5c:	1909      	adds	r1, r1, r4
 8001e5e:	9200      	str	r2, [sp, #0]
 8001e60:	e7ce      	b.n	8001e00 <__aeabi_ddiv+0x544>
 8001e62:	2480      	movs	r4, #128	; 0x80
 8001e64:	4643      	mov	r3, r8
 8001e66:	0324      	lsls	r4, r4, #12
 8001e68:	431c      	orrs	r4, r3
 8001e6a:	0324      	lsls	r4, r4, #12
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <__aeabi_ddiv+0x5cc>)
 8001e6e:	0b24      	lsrs	r4, r4, #12
 8001e70:	e57e      	b.n	8001970 <__aeabi_ddiv+0xb4>
 8001e72:	9a00      	ldr	r2, [sp, #0]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d3ea      	bcc.n	8001e4e <__aeabi_ddiv+0x592>
 8001e78:	0035      	movs	r5, r6
 8001e7a:	e7c4      	b.n	8001e06 <__aeabi_ddiv+0x54a>
 8001e7c:	0000043e 	.word	0x0000043e
 8001e80:	0000041e 	.word	0x0000041e
 8001e84:	000003ff 	.word	0x000003ff
 8001e88:	000007ff 	.word	0x000007ff

08001e8c <__eqdf2>:
 8001e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e8e:	464f      	mov	r7, r9
 8001e90:	4646      	mov	r6, r8
 8001e92:	46d6      	mov	lr, sl
 8001e94:	4694      	mov	ip, r2
 8001e96:	4691      	mov	r9, r2
 8001e98:	031a      	lsls	r2, r3, #12
 8001e9a:	0b12      	lsrs	r2, r2, #12
 8001e9c:	4d18      	ldr	r5, [pc, #96]	; (8001f00 <__eqdf2+0x74>)
 8001e9e:	b5c0      	push	{r6, r7, lr}
 8001ea0:	004c      	lsls	r4, r1, #1
 8001ea2:	030f      	lsls	r7, r1, #12
 8001ea4:	4692      	mov	sl, r2
 8001ea6:	005a      	lsls	r2, r3, #1
 8001ea8:	0006      	movs	r6, r0
 8001eaa:	4680      	mov	r8, r0
 8001eac:	0b3f      	lsrs	r7, r7, #12
 8001eae:	2001      	movs	r0, #1
 8001eb0:	0d64      	lsrs	r4, r4, #21
 8001eb2:	0fc9      	lsrs	r1, r1, #31
 8001eb4:	0d52      	lsrs	r2, r2, #21
 8001eb6:	0fdb      	lsrs	r3, r3, #31
 8001eb8:	42ac      	cmp	r4, r5
 8001eba:	d00a      	beq.n	8001ed2 <__eqdf2+0x46>
 8001ebc:	42aa      	cmp	r2, r5
 8001ebe:	d003      	beq.n	8001ec8 <__eqdf2+0x3c>
 8001ec0:	4294      	cmp	r4, r2
 8001ec2:	d101      	bne.n	8001ec8 <__eqdf2+0x3c>
 8001ec4:	4557      	cmp	r7, sl
 8001ec6:	d00d      	beq.n	8001ee4 <__eqdf2+0x58>
 8001ec8:	bce0      	pop	{r5, r6, r7}
 8001eca:	46ba      	mov	sl, r7
 8001ecc:	46b1      	mov	r9, r6
 8001ece:	46a8      	mov	r8, r5
 8001ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ed2:	003d      	movs	r5, r7
 8001ed4:	4335      	orrs	r5, r6
 8001ed6:	d1f7      	bne.n	8001ec8 <__eqdf2+0x3c>
 8001ed8:	42a2      	cmp	r2, r4
 8001eda:	d1f5      	bne.n	8001ec8 <__eqdf2+0x3c>
 8001edc:	4652      	mov	r2, sl
 8001ede:	4665      	mov	r5, ip
 8001ee0:	432a      	orrs	r2, r5
 8001ee2:	d1f1      	bne.n	8001ec8 <__eqdf2+0x3c>
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	45c8      	cmp	r8, r9
 8001ee8:	d1ee      	bne.n	8001ec8 <__eqdf2+0x3c>
 8001eea:	4299      	cmp	r1, r3
 8001eec:	d006      	beq.n	8001efc <__eqdf2+0x70>
 8001eee:	2c00      	cmp	r4, #0
 8001ef0:	d1ea      	bne.n	8001ec8 <__eqdf2+0x3c>
 8001ef2:	433e      	orrs	r6, r7
 8001ef4:	0030      	movs	r0, r6
 8001ef6:	1e46      	subs	r6, r0, #1
 8001ef8:	41b0      	sbcs	r0, r6
 8001efa:	e7e5      	b.n	8001ec8 <__eqdf2+0x3c>
 8001efc:	2000      	movs	r0, #0
 8001efe:	e7e3      	b.n	8001ec8 <__eqdf2+0x3c>
 8001f00:	000007ff 	.word	0x000007ff

08001f04 <__gedf2>:
 8001f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f06:	464e      	mov	r6, r9
 8001f08:	4645      	mov	r5, r8
 8001f0a:	4657      	mov	r7, sl
 8001f0c:	46de      	mov	lr, fp
 8001f0e:	0004      	movs	r4, r0
 8001f10:	0018      	movs	r0, r3
 8001f12:	b5e0      	push	{r5, r6, r7, lr}
 8001f14:	0016      	movs	r6, r2
 8001f16:	031b      	lsls	r3, r3, #12
 8001f18:	0b1b      	lsrs	r3, r3, #12
 8001f1a:	4d32      	ldr	r5, [pc, #200]	; (8001fe4 <__gedf2+0xe0>)
 8001f1c:	030f      	lsls	r7, r1, #12
 8001f1e:	004a      	lsls	r2, r1, #1
 8001f20:	4699      	mov	r9, r3
 8001f22:	0043      	lsls	r3, r0, #1
 8001f24:	46a4      	mov	ip, r4
 8001f26:	46b0      	mov	r8, r6
 8001f28:	0b3f      	lsrs	r7, r7, #12
 8001f2a:	0d52      	lsrs	r2, r2, #21
 8001f2c:	0fc9      	lsrs	r1, r1, #31
 8001f2e:	0d5b      	lsrs	r3, r3, #21
 8001f30:	0fc0      	lsrs	r0, r0, #31
 8001f32:	42aa      	cmp	r2, r5
 8001f34:	d029      	beq.n	8001f8a <__gedf2+0x86>
 8001f36:	42ab      	cmp	r3, r5
 8001f38:	d018      	beq.n	8001f6c <__gedf2+0x68>
 8001f3a:	2a00      	cmp	r2, #0
 8001f3c:	d12a      	bne.n	8001f94 <__gedf2+0x90>
 8001f3e:	433c      	orrs	r4, r7
 8001f40:	46a3      	mov	fp, r4
 8001f42:	4265      	negs	r5, r4
 8001f44:	4165      	adcs	r5, r4
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <__gedf2+0x4c>
 8001f4a:	464c      	mov	r4, r9
 8001f4c:	4326      	orrs	r6, r4
 8001f4e:	d027      	beq.n	8001fa0 <__gedf2+0x9c>
 8001f50:	2d00      	cmp	r5, #0
 8001f52:	d115      	bne.n	8001f80 <__gedf2+0x7c>
 8001f54:	4281      	cmp	r1, r0
 8001f56:	d028      	beq.n	8001faa <__gedf2+0xa6>
 8001f58:	2002      	movs	r0, #2
 8001f5a:	3901      	subs	r1, #1
 8001f5c:	4008      	ands	r0, r1
 8001f5e:	3801      	subs	r0, #1
 8001f60:	bcf0      	pop	{r4, r5, r6, r7}
 8001f62:	46bb      	mov	fp, r7
 8001f64:	46b2      	mov	sl, r6
 8001f66:	46a9      	mov	r9, r5
 8001f68:	46a0      	mov	r8, r4
 8001f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f6c:	464d      	mov	r5, r9
 8001f6e:	432e      	orrs	r6, r5
 8001f70:	d12f      	bne.n	8001fd2 <__gedf2+0xce>
 8001f72:	2a00      	cmp	r2, #0
 8001f74:	d1ee      	bne.n	8001f54 <__gedf2+0x50>
 8001f76:	433c      	orrs	r4, r7
 8001f78:	4265      	negs	r5, r4
 8001f7a:	4165      	adcs	r5, r4
 8001f7c:	2d00      	cmp	r5, #0
 8001f7e:	d0e9      	beq.n	8001f54 <__gedf2+0x50>
 8001f80:	2800      	cmp	r0, #0
 8001f82:	d1ed      	bne.n	8001f60 <__gedf2+0x5c>
 8001f84:	2001      	movs	r0, #1
 8001f86:	4240      	negs	r0, r0
 8001f88:	e7ea      	b.n	8001f60 <__gedf2+0x5c>
 8001f8a:	003d      	movs	r5, r7
 8001f8c:	4325      	orrs	r5, r4
 8001f8e:	d120      	bne.n	8001fd2 <__gedf2+0xce>
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d0eb      	beq.n	8001f6c <__gedf2+0x68>
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d1dd      	bne.n	8001f54 <__gedf2+0x50>
 8001f98:	464c      	mov	r4, r9
 8001f9a:	4326      	orrs	r6, r4
 8001f9c:	d1da      	bne.n	8001f54 <__gedf2+0x50>
 8001f9e:	e7db      	b.n	8001f58 <__gedf2+0x54>
 8001fa0:	465b      	mov	r3, fp
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0db      	beq.n	8001f60 <__gedf2+0x5c>
 8001fa8:	e7d6      	b.n	8001f58 <__gedf2+0x54>
 8001faa:	429a      	cmp	r2, r3
 8001fac:	dc0a      	bgt.n	8001fc4 <__gedf2+0xc0>
 8001fae:	dbe7      	blt.n	8001f80 <__gedf2+0x7c>
 8001fb0:	454f      	cmp	r7, r9
 8001fb2:	d8d1      	bhi.n	8001f58 <__gedf2+0x54>
 8001fb4:	d010      	beq.n	8001fd8 <__gedf2+0xd4>
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	454f      	cmp	r7, r9
 8001fba:	d2d1      	bcs.n	8001f60 <__gedf2+0x5c>
 8001fbc:	2900      	cmp	r1, #0
 8001fbe:	d0e1      	beq.n	8001f84 <__gedf2+0x80>
 8001fc0:	0008      	movs	r0, r1
 8001fc2:	e7cd      	b.n	8001f60 <__gedf2+0x5c>
 8001fc4:	4243      	negs	r3, r0
 8001fc6:	4158      	adcs	r0, r3
 8001fc8:	2302      	movs	r3, #2
 8001fca:	4240      	negs	r0, r0
 8001fcc:	4018      	ands	r0, r3
 8001fce:	3801      	subs	r0, #1
 8001fd0:	e7c6      	b.n	8001f60 <__gedf2+0x5c>
 8001fd2:	2002      	movs	r0, #2
 8001fd4:	4240      	negs	r0, r0
 8001fd6:	e7c3      	b.n	8001f60 <__gedf2+0x5c>
 8001fd8:	45c4      	cmp	ip, r8
 8001fda:	d8bd      	bhi.n	8001f58 <__gedf2+0x54>
 8001fdc:	2000      	movs	r0, #0
 8001fde:	45c4      	cmp	ip, r8
 8001fe0:	d2be      	bcs.n	8001f60 <__gedf2+0x5c>
 8001fe2:	e7eb      	b.n	8001fbc <__gedf2+0xb8>
 8001fe4:	000007ff 	.word	0x000007ff

08001fe8 <__ledf2>:
 8001fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fea:	464e      	mov	r6, r9
 8001fec:	4645      	mov	r5, r8
 8001fee:	4657      	mov	r7, sl
 8001ff0:	46de      	mov	lr, fp
 8001ff2:	0004      	movs	r4, r0
 8001ff4:	0018      	movs	r0, r3
 8001ff6:	b5e0      	push	{r5, r6, r7, lr}
 8001ff8:	0016      	movs	r6, r2
 8001ffa:	031b      	lsls	r3, r3, #12
 8001ffc:	0b1b      	lsrs	r3, r3, #12
 8001ffe:	4d31      	ldr	r5, [pc, #196]	; (80020c4 <__ledf2+0xdc>)
 8002000:	030f      	lsls	r7, r1, #12
 8002002:	004a      	lsls	r2, r1, #1
 8002004:	4699      	mov	r9, r3
 8002006:	0043      	lsls	r3, r0, #1
 8002008:	46a4      	mov	ip, r4
 800200a:	46b0      	mov	r8, r6
 800200c:	0b3f      	lsrs	r7, r7, #12
 800200e:	0d52      	lsrs	r2, r2, #21
 8002010:	0fc9      	lsrs	r1, r1, #31
 8002012:	0d5b      	lsrs	r3, r3, #21
 8002014:	0fc0      	lsrs	r0, r0, #31
 8002016:	42aa      	cmp	r2, r5
 8002018:	d011      	beq.n	800203e <__ledf2+0x56>
 800201a:	42ab      	cmp	r3, r5
 800201c:	d014      	beq.n	8002048 <__ledf2+0x60>
 800201e:	2a00      	cmp	r2, #0
 8002020:	d12f      	bne.n	8002082 <__ledf2+0x9a>
 8002022:	433c      	orrs	r4, r7
 8002024:	46a3      	mov	fp, r4
 8002026:	4265      	negs	r5, r4
 8002028:	4165      	adcs	r5, r4
 800202a:	2b00      	cmp	r3, #0
 800202c:	d114      	bne.n	8002058 <__ledf2+0x70>
 800202e:	464c      	mov	r4, r9
 8002030:	4326      	orrs	r6, r4
 8002032:	d111      	bne.n	8002058 <__ledf2+0x70>
 8002034:	465b      	mov	r3, fp
 8002036:	2000      	movs	r0, #0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d017      	beq.n	800206c <__ledf2+0x84>
 800203c:	e010      	b.n	8002060 <__ledf2+0x78>
 800203e:	003d      	movs	r5, r7
 8002040:	4325      	orrs	r5, r4
 8002042:	d112      	bne.n	800206a <__ledf2+0x82>
 8002044:	4293      	cmp	r3, r2
 8002046:	d11c      	bne.n	8002082 <__ledf2+0x9a>
 8002048:	464d      	mov	r5, r9
 800204a:	432e      	orrs	r6, r5
 800204c:	d10d      	bne.n	800206a <__ledf2+0x82>
 800204e:	2a00      	cmp	r2, #0
 8002050:	d104      	bne.n	800205c <__ledf2+0x74>
 8002052:	433c      	orrs	r4, r7
 8002054:	4265      	negs	r5, r4
 8002056:	4165      	adcs	r5, r4
 8002058:	2d00      	cmp	r5, #0
 800205a:	d10d      	bne.n	8002078 <__ledf2+0x90>
 800205c:	4281      	cmp	r1, r0
 800205e:	d016      	beq.n	800208e <__ledf2+0xa6>
 8002060:	2002      	movs	r0, #2
 8002062:	3901      	subs	r1, #1
 8002064:	4008      	ands	r0, r1
 8002066:	3801      	subs	r0, #1
 8002068:	e000      	b.n	800206c <__ledf2+0x84>
 800206a:	2002      	movs	r0, #2
 800206c:	bcf0      	pop	{r4, r5, r6, r7}
 800206e:	46bb      	mov	fp, r7
 8002070:	46b2      	mov	sl, r6
 8002072:	46a9      	mov	r9, r5
 8002074:	46a0      	mov	r8, r4
 8002076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002078:	2800      	cmp	r0, #0
 800207a:	d1f7      	bne.n	800206c <__ledf2+0x84>
 800207c:	2001      	movs	r0, #1
 800207e:	4240      	negs	r0, r0
 8002080:	e7f4      	b.n	800206c <__ledf2+0x84>
 8002082:	2b00      	cmp	r3, #0
 8002084:	d1ea      	bne.n	800205c <__ledf2+0x74>
 8002086:	464c      	mov	r4, r9
 8002088:	4326      	orrs	r6, r4
 800208a:	d1e7      	bne.n	800205c <__ledf2+0x74>
 800208c:	e7e8      	b.n	8002060 <__ledf2+0x78>
 800208e:	429a      	cmp	r2, r3
 8002090:	dd06      	ble.n	80020a0 <__ledf2+0xb8>
 8002092:	4243      	negs	r3, r0
 8002094:	4158      	adcs	r0, r3
 8002096:	2302      	movs	r3, #2
 8002098:	4240      	negs	r0, r0
 800209a:	4018      	ands	r0, r3
 800209c:	3801      	subs	r0, #1
 800209e:	e7e5      	b.n	800206c <__ledf2+0x84>
 80020a0:	429a      	cmp	r2, r3
 80020a2:	dbe9      	blt.n	8002078 <__ledf2+0x90>
 80020a4:	454f      	cmp	r7, r9
 80020a6:	d8db      	bhi.n	8002060 <__ledf2+0x78>
 80020a8:	d006      	beq.n	80020b8 <__ledf2+0xd0>
 80020aa:	2000      	movs	r0, #0
 80020ac:	454f      	cmp	r7, r9
 80020ae:	d2dd      	bcs.n	800206c <__ledf2+0x84>
 80020b0:	2900      	cmp	r1, #0
 80020b2:	d0e3      	beq.n	800207c <__ledf2+0x94>
 80020b4:	0008      	movs	r0, r1
 80020b6:	e7d9      	b.n	800206c <__ledf2+0x84>
 80020b8:	45c4      	cmp	ip, r8
 80020ba:	d8d1      	bhi.n	8002060 <__ledf2+0x78>
 80020bc:	2000      	movs	r0, #0
 80020be:	45c4      	cmp	ip, r8
 80020c0:	d2d4      	bcs.n	800206c <__ledf2+0x84>
 80020c2:	e7f5      	b.n	80020b0 <__ledf2+0xc8>
 80020c4:	000007ff 	.word	0x000007ff

080020c8 <__aeabi_dmul>:
 80020c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020ca:	4657      	mov	r7, sl
 80020cc:	464e      	mov	r6, r9
 80020ce:	4645      	mov	r5, r8
 80020d0:	46de      	mov	lr, fp
 80020d2:	b5e0      	push	{r5, r6, r7, lr}
 80020d4:	4698      	mov	r8, r3
 80020d6:	030c      	lsls	r4, r1, #12
 80020d8:	004b      	lsls	r3, r1, #1
 80020da:	0006      	movs	r6, r0
 80020dc:	4692      	mov	sl, r2
 80020de:	b087      	sub	sp, #28
 80020e0:	0b24      	lsrs	r4, r4, #12
 80020e2:	0d5b      	lsrs	r3, r3, #21
 80020e4:	0fcf      	lsrs	r7, r1, #31
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d06c      	beq.n	80021c4 <__aeabi_dmul+0xfc>
 80020ea:	4add      	ldr	r2, [pc, #884]	; (8002460 <__aeabi_dmul+0x398>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d100      	bne.n	80020f2 <__aeabi_dmul+0x2a>
 80020f0:	e086      	b.n	8002200 <__aeabi_dmul+0x138>
 80020f2:	0f42      	lsrs	r2, r0, #29
 80020f4:	00e4      	lsls	r4, r4, #3
 80020f6:	4314      	orrs	r4, r2
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	0412      	lsls	r2, r2, #16
 80020fc:	4314      	orrs	r4, r2
 80020fe:	4ad9      	ldr	r2, [pc, #868]	; (8002464 <__aeabi_dmul+0x39c>)
 8002100:	00c5      	lsls	r5, r0, #3
 8002102:	4694      	mov	ip, r2
 8002104:	4463      	add	r3, ip
 8002106:	9300      	str	r3, [sp, #0]
 8002108:	2300      	movs	r3, #0
 800210a:	4699      	mov	r9, r3
 800210c:	469b      	mov	fp, r3
 800210e:	4643      	mov	r3, r8
 8002110:	4642      	mov	r2, r8
 8002112:	031e      	lsls	r6, r3, #12
 8002114:	0fd2      	lsrs	r2, r2, #31
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4650      	mov	r0, sl
 800211a:	4690      	mov	r8, r2
 800211c:	0b36      	lsrs	r6, r6, #12
 800211e:	0d5b      	lsrs	r3, r3, #21
 8002120:	d100      	bne.n	8002124 <__aeabi_dmul+0x5c>
 8002122:	e078      	b.n	8002216 <__aeabi_dmul+0x14e>
 8002124:	4ace      	ldr	r2, [pc, #824]	; (8002460 <__aeabi_dmul+0x398>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01d      	beq.n	8002166 <__aeabi_dmul+0x9e>
 800212a:	49ce      	ldr	r1, [pc, #824]	; (8002464 <__aeabi_dmul+0x39c>)
 800212c:	0f42      	lsrs	r2, r0, #29
 800212e:	468c      	mov	ip, r1
 8002130:	9900      	ldr	r1, [sp, #0]
 8002132:	4463      	add	r3, ip
 8002134:	00f6      	lsls	r6, r6, #3
 8002136:	468c      	mov	ip, r1
 8002138:	4316      	orrs	r6, r2
 800213a:	2280      	movs	r2, #128	; 0x80
 800213c:	449c      	add	ip, r3
 800213e:	0412      	lsls	r2, r2, #16
 8002140:	4663      	mov	r3, ip
 8002142:	4316      	orrs	r6, r2
 8002144:	00c2      	lsls	r2, r0, #3
 8002146:	2000      	movs	r0, #0
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	9900      	ldr	r1, [sp, #0]
 800214c:	4643      	mov	r3, r8
 800214e:	3101      	adds	r1, #1
 8002150:	468c      	mov	ip, r1
 8002152:	4649      	mov	r1, r9
 8002154:	407b      	eors	r3, r7
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	290f      	cmp	r1, #15
 800215a:	d900      	bls.n	800215e <__aeabi_dmul+0x96>
 800215c:	e07e      	b.n	800225c <__aeabi_dmul+0x194>
 800215e:	4bc2      	ldr	r3, [pc, #776]	; (8002468 <__aeabi_dmul+0x3a0>)
 8002160:	0089      	lsls	r1, r1, #2
 8002162:	5859      	ldr	r1, [r3, r1]
 8002164:	468f      	mov	pc, r1
 8002166:	4652      	mov	r2, sl
 8002168:	9b00      	ldr	r3, [sp, #0]
 800216a:	4332      	orrs	r2, r6
 800216c:	d000      	beq.n	8002170 <__aeabi_dmul+0xa8>
 800216e:	e156      	b.n	800241e <__aeabi_dmul+0x356>
 8002170:	49bb      	ldr	r1, [pc, #748]	; (8002460 <__aeabi_dmul+0x398>)
 8002172:	2600      	movs	r6, #0
 8002174:	468c      	mov	ip, r1
 8002176:	4463      	add	r3, ip
 8002178:	4649      	mov	r1, r9
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2302      	movs	r3, #2
 800217e:	4319      	orrs	r1, r3
 8002180:	4689      	mov	r9, r1
 8002182:	2002      	movs	r0, #2
 8002184:	e7e1      	b.n	800214a <__aeabi_dmul+0x82>
 8002186:	4643      	mov	r3, r8
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	0034      	movs	r4, r6
 800218c:	0015      	movs	r5, r2
 800218e:	4683      	mov	fp, r0
 8002190:	465b      	mov	r3, fp
 8002192:	2b02      	cmp	r3, #2
 8002194:	d05e      	beq.n	8002254 <__aeabi_dmul+0x18c>
 8002196:	2b03      	cmp	r3, #3
 8002198:	d100      	bne.n	800219c <__aeabi_dmul+0xd4>
 800219a:	e1f3      	b.n	8002584 <__aeabi_dmul+0x4bc>
 800219c:	2b01      	cmp	r3, #1
 800219e:	d000      	beq.n	80021a2 <__aeabi_dmul+0xda>
 80021a0:	e118      	b.n	80023d4 <__aeabi_dmul+0x30c>
 80021a2:	2200      	movs	r2, #0
 80021a4:	2400      	movs	r4, #0
 80021a6:	2500      	movs	r5, #0
 80021a8:	9b01      	ldr	r3, [sp, #4]
 80021aa:	0512      	lsls	r2, r2, #20
 80021ac:	4322      	orrs	r2, r4
 80021ae:	07db      	lsls	r3, r3, #31
 80021b0:	431a      	orrs	r2, r3
 80021b2:	0028      	movs	r0, r5
 80021b4:	0011      	movs	r1, r2
 80021b6:	b007      	add	sp, #28
 80021b8:	bcf0      	pop	{r4, r5, r6, r7}
 80021ba:	46bb      	mov	fp, r7
 80021bc:	46b2      	mov	sl, r6
 80021be:	46a9      	mov	r9, r5
 80021c0:	46a0      	mov	r8, r4
 80021c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021c4:	0025      	movs	r5, r4
 80021c6:	4305      	orrs	r5, r0
 80021c8:	d100      	bne.n	80021cc <__aeabi_dmul+0x104>
 80021ca:	e141      	b.n	8002450 <__aeabi_dmul+0x388>
 80021cc:	2c00      	cmp	r4, #0
 80021ce:	d100      	bne.n	80021d2 <__aeabi_dmul+0x10a>
 80021d0:	e1ad      	b.n	800252e <__aeabi_dmul+0x466>
 80021d2:	0020      	movs	r0, r4
 80021d4:	f000 fe4a 	bl	8002e6c <__clzsi2>
 80021d8:	0001      	movs	r1, r0
 80021da:	0002      	movs	r2, r0
 80021dc:	390b      	subs	r1, #11
 80021de:	231d      	movs	r3, #29
 80021e0:	0010      	movs	r0, r2
 80021e2:	1a5b      	subs	r3, r3, r1
 80021e4:	0031      	movs	r1, r6
 80021e6:	0035      	movs	r5, r6
 80021e8:	3808      	subs	r0, #8
 80021ea:	4084      	lsls	r4, r0
 80021ec:	40d9      	lsrs	r1, r3
 80021ee:	4085      	lsls	r5, r0
 80021f0:	430c      	orrs	r4, r1
 80021f2:	489e      	ldr	r0, [pc, #632]	; (800246c <__aeabi_dmul+0x3a4>)
 80021f4:	1a83      	subs	r3, r0, r2
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2300      	movs	r3, #0
 80021fa:	4699      	mov	r9, r3
 80021fc:	469b      	mov	fp, r3
 80021fe:	e786      	b.n	800210e <__aeabi_dmul+0x46>
 8002200:	0005      	movs	r5, r0
 8002202:	4325      	orrs	r5, r4
 8002204:	d000      	beq.n	8002208 <__aeabi_dmul+0x140>
 8002206:	e11c      	b.n	8002442 <__aeabi_dmul+0x37a>
 8002208:	2208      	movs	r2, #8
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2302      	movs	r3, #2
 800220e:	2400      	movs	r4, #0
 8002210:	4691      	mov	r9, r2
 8002212:	469b      	mov	fp, r3
 8002214:	e77b      	b.n	800210e <__aeabi_dmul+0x46>
 8002216:	4652      	mov	r2, sl
 8002218:	4332      	orrs	r2, r6
 800221a:	d100      	bne.n	800221e <__aeabi_dmul+0x156>
 800221c:	e10a      	b.n	8002434 <__aeabi_dmul+0x36c>
 800221e:	2e00      	cmp	r6, #0
 8002220:	d100      	bne.n	8002224 <__aeabi_dmul+0x15c>
 8002222:	e176      	b.n	8002512 <__aeabi_dmul+0x44a>
 8002224:	0030      	movs	r0, r6
 8002226:	f000 fe21 	bl	8002e6c <__clzsi2>
 800222a:	0002      	movs	r2, r0
 800222c:	3a0b      	subs	r2, #11
 800222e:	231d      	movs	r3, #29
 8002230:	0001      	movs	r1, r0
 8002232:	1a9b      	subs	r3, r3, r2
 8002234:	4652      	mov	r2, sl
 8002236:	3908      	subs	r1, #8
 8002238:	40da      	lsrs	r2, r3
 800223a:	408e      	lsls	r6, r1
 800223c:	4316      	orrs	r6, r2
 800223e:	4652      	mov	r2, sl
 8002240:	408a      	lsls	r2, r1
 8002242:	9b00      	ldr	r3, [sp, #0]
 8002244:	4989      	ldr	r1, [pc, #548]	; (800246c <__aeabi_dmul+0x3a4>)
 8002246:	1a18      	subs	r0, r3, r0
 8002248:	0003      	movs	r3, r0
 800224a:	468c      	mov	ip, r1
 800224c:	4463      	add	r3, ip
 800224e:	2000      	movs	r0, #0
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	e77a      	b.n	800214a <__aeabi_dmul+0x82>
 8002254:	2400      	movs	r4, #0
 8002256:	2500      	movs	r5, #0
 8002258:	4a81      	ldr	r2, [pc, #516]	; (8002460 <__aeabi_dmul+0x398>)
 800225a:	e7a5      	b.n	80021a8 <__aeabi_dmul+0xe0>
 800225c:	0c2f      	lsrs	r7, r5, #16
 800225e:	042d      	lsls	r5, r5, #16
 8002260:	0c2d      	lsrs	r5, r5, #16
 8002262:	002b      	movs	r3, r5
 8002264:	0c11      	lsrs	r1, r2, #16
 8002266:	0412      	lsls	r2, r2, #16
 8002268:	0c12      	lsrs	r2, r2, #16
 800226a:	4353      	muls	r3, r2
 800226c:	4698      	mov	r8, r3
 800226e:	0013      	movs	r3, r2
 8002270:	0028      	movs	r0, r5
 8002272:	437b      	muls	r3, r7
 8002274:	4699      	mov	r9, r3
 8002276:	4348      	muls	r0, r1
 8002278:	4448      	add	r0, r9
 800227a:	4683      	mov	fp, r0
 800227c:	4640      	mov	r0, r8
 800227e:	000b      	movs	r3, r1
 8002280:	0c00      	lsrs	r0, r0, #16
 8002282:	4682      	mov	sl, r0
 8002284:	4658      	mov	r0, fp
 8002286:	437b      	muls	r3, r7
 8002288:	4450      	add	r0, sl
 800228a:	9302      	str	r3, [sp, #8]
 800228c:	4581      	cmp	r9, r0
 800228e:	d906      	bls.n	800229e <__aeabi_dmul+0x1d6>
 8002290:	469a      	mov	sl, r3
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	025b      	lsls	r3, r3, #9
 8002296:	4699      	mov	r9, r3
 8002298:	44ca      	add	sl, r9
 800229a:	4653      	mov	r3, sl
 800229c:	9302      	str	r3, [sp, #8]
 800229e:	0c03      	lsrs	r3, r0, #16
 80022a0:	469b      	mov	fp, r3
 80022a2:	4643      	mov	r3, r8
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	0400      	lsls	r0, r0, #16
 80022a8:	0c1b      	lsrs	r3, r3, #16
 80022aa:	4698      	mov	r8, r3
 80022ac:	0003      	movs	r3, r0
 80022ae:	4443      	add	r3, r8
 80022b0:	9304      	str	r3, [sp, #16]
 80022b2:	0c33      	lsrs	r3, r6, #16
 80022b4:	4699      	mov	r9, r3
 80022b6:	002b      	movs	r3, r5
 80022b8:	0436      	lsls	r6, r6, #16
 80022ba:	0c36      	lsrs	r6, r6, #16
 80022bc:	4373      	muls	r3, r6
 80022be:	4698      	mov	r8, r3
 80022c0:	0033      	movs	r3, r6
 80022c2:	437b      	muls	r3, r7
 80022c4:	469a      	mov	sl, r3
 80022c6:	464b      	mov	r3, r9
 80022c8:	435d      	muls	r5, r3
 80022ca:	435f      	muls	r7, r3
 80022cc:	4643      	mov	r3, r8
 80022ce:	4455      	add	r5, sl
 80022d0:	0c18      	lsrs	r0, r3, #16
 80022d2:	1940      	adds	r0, r0, r5
 80022d4:	4582      	cmp	sl, r0
 80022d6:	d903      	bls.n	80022e0 <__aeabi_dmul+0x218>
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	025b      	lsls	r3, r3, #9
 80022dc:	469a      	mov	sl, r3
 80022de:	4457      	add	r7, sl
 80022e0:	0c05      	lsrs	r5, r0, #16
 80022e2:	19eb      	adds	r3, r5, r7
 80022e4:	9305      	str	r3, [sp, #20]
 80022e6:	4643      	mov	r3, r8
 80022e8:	041d      	lsls	r5, r3, #16
 80022ea:	0c2d      	lsrs	r5, r5, #16
 80022ec:	0400      	lsls	r0, r0, #16
 80022ee:	1940      	adds	r0, r0, r5
 80022f0:	0c25      	lsrs	r5, r4, #16
 80022f2:	0424      	lsls	r4, r4, #16
 80022f4:	0c24      	lsrs	r4, r4, #16
 80022f6:	0027      	movs	r7, r4
 80022f8:	4357      	muls	r7, r2
 80022fa:	436a      	muls	r2, r5
 80022fc:	4690      	mov	r8, r2
 80022fe:	002a      	movs	r2, r5
 8002300:	0c3b      	lsrs	r3, r7, #16
 8002302:	469a      	mov	sl, r3
 8002304:	434a      	muls	r2, r1
 8002306:	4361      	muls	r1, r4
 8002308:	4441      	add	r1, r8
 800230a:	4451      	add	r1, sl
 800230c:	4483      	add	fp, r0
 800230e:	4588      	cmp	r8, r1
 8002310:	d903      	bls.n	800231a <__aeabi_dmul+0x252>
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	025b      	lsls	r3, r3, #9
 8002316:	4698      	mov	r8, r3
 8002318:	4442      	add	r2, r8
 800231a:	043f      	lsls	r7, r7, #16
 800231c:	0c0b      	lsrs	r3, r1, #16
 800231e:	0c3f      	lsrs	r7, r7, #16
 8002320:	0409      	lsls	r1, r1, #16
 8002322:	19c9      	adds	r1, r1, r7
 8002324:	0027      	movs	r7, r4
 8002326:	4698      	mov	r8, r3
 8002328:	464b      	mov	r3, r9
 800232a:	4377      	muls	r7, r6
 800232c:	435c      	muls	r4, r3
 800232e:	436e      	muls	r6, r5
 8002330:	435d      	muls	r5, r3
 8002332:	0c3b      	lsrs	r3, r7, #16
 8002334:	4699      	mov	r9, r3
 8002336:	19a4      	adds	r4, r4, r6
 8002338:	444c      	add	r4, r9
 800233a:	4442      	add	r2, r8
 800233c:	9503      	str	r5, [sp, #12]
 800233e:	42a6      	cmp	r6, r4
 8002340:	d904      	bls.n	800234c <__aeabi_dmul+0x284>
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	025b      	lsls	r3, r3, #9
 8002346:	4698      	mov	r8, r3
 8002348:	4445      	add	r5, r8
 800234a:	9503      	str	r5, [sp, #12]
 800234c:	9b02      	ldr	r3, [sp, #8]
 800234e:	043f      	lsls	r7, r7, #16
 8002350:	445b      	add	r3, fp
 8002352:	001e      	movs	r6, r3
 8002354:	4283      	cmp	r3, r0
 8002356:	4180      	sbcs	r0, r0
 8002358:	0423      	lsls	r3, r4, #16
 800235a:	4698      	mov	r8, r3
 800235c:	9b05      	ldr	r3, [sp, #20]
 800235e:	0c3f      	lsrs	r7, r7, #16
 8002360:	4447      	add	r7, r8
 8002362:	4698      	mov	r8, r3
 8002364:	1876      	adds	r6, r6, r1
 8002366:	428e      	cmp	r6, r1
 8002368:	4189      	sbcs	r1, r1
 800236a:	4447      	add	r7, r8
 800236c:	4240      	negs	r0, r0
 800236e:	183d      	adds	r5, r7, r0
 8002370:	46a8      	mov	r8, r5
 8002372:	4693      	mov	fp, r2
 8002374:	4249      	negs	r1, r1
 8002376:	468a      	mov	sl, r1
 8002378:	44c3      	add	fp, r8
 800237a:	429f      	cmp	r7, r3
 800237c:	41bf      	sbcs	r7, r7
 800237e:	4580      	cmp	r8, r0
 8002380:	4180      	sbcs	r0, r0
 8002382:	9b03      	ldr	r3, [sp, #12]
 8002384:	44da      	add	sl, fp
 8002386:	4698      	mov	r8, r3
 8002388:	4653      	mov	r3, sl
 800238a:	4240      	negs	r0, r0
 800238c:	427f      	negs	r7, r7
 800238e:	4307      	orrs	r7, r0
 8002390:	0c24      	lsrs	r4, r4, #16
 8002392:	4593      	cmp	fp, r2
 8002394:	4192      	sbcs	r2, r2
 8002396:	458a      	cmp	sl, r1
 8002398:	4189      	sbcs	r1, r1
 800239a:	193f      	adds	r7, r7, r4
 800239c:	0ddc      	lsrs	r4, r3, #23
 800239e:	9b04      	ldr	r3, [sp, #16]
 80023a0:	0275      	lsls	r5, r6, #9
 80023a2:	431d      	orrs	r5, r3
 80023a4:	1e68      	subs	r0, r5, #1
 80023a6:	4185      	sbcs	r5, r0
 80023a8:	4653      	mov	r3, sl
 80023aa:	4252      	negs	r2, r2
 80023ac:	4249      	negs	r1, r1
 80023ae:	430a      	orrs	r2, r1
 80023b0:	18bf      	adds	r7, r7, r2
 80023b2:	4447      	add	r7, r8
 80023b4:	0df6      	lsrs	r6, r6, #23
 80023b6:	027f      	lsls	r7, r7, #9
 80023b8:	4335      	orrs	r5, r6
 80023ba:	025a      	lsls	r2, r3, #9
 80023bc:	433c      	orrs	r4, r7
 80023be:	4315      	orrs	r5, r2
 80023c0:	01fb      	lsls	r3, r7, #7
 80023c2:	d400      	bmi.n	80023c6 <__aeabi_dmul+0x2fe>
 80023c4:	e0c1      	b.n	800254a <__aeabi_dmul+0x482>
 80023c6:	2101      	movs	r1, #1
 80023c8:	086a      	lsrs	r2, r5, #1
 80023ca:	400d      	ands	r5, r1
 80023cc:	4315      	orrs	r5, r2
 80023ce:	07e2      	lsls	r2, r4, #31
 80023d0:	4315      	orrs	r5, r2
 80023d2:	0864      	lsrs	r4, r4, #1
 80023d4:	4926      	ldr	r1, [pc, #152]	; (8002470 <__aeabi_dmul+0x3a8>)
 80023d6:	4461      	add	r1, ip
 80023d8:	2900      	cmp	r1, #0
 80023da:	dd56      	ble.n	800248a <__aeabi_dmul+0x3c2>
 80023dc:	076b      	lsls	r3, r5, #29
 80023de:	d009      	beq.n	80023f4 <__aeabi_dmul+0x32c>
 80023e0:	220f      	movs	r2, #15
 80023e2:	402a      	ands	r2, r5
 80023e4:	2a04      	cmp	r2, #4
 80023e6:	d005      	beq.n	80023f4 <__aeabi_dmul+0x32c>
 80023e8:	1d2a      	adds	r2, r5, #4
 80023ea:	42aa      	cmp	r2, r5
 80023ec:	41ad      	sbcs	r5, r5
 80023ee:	426d      	negs	r5, r5
 80023f0:	1964      	adds	r4, r4, r5
 80023f2:	0015      	movs	r5, r2
 80023f4:	01e3      	lsls	r3, r4, #7
 80023f6:	d504      	bpl.n	8002402 <__aeabi_dmul+0x33a>
 80023f8:	2180      	movs	r1, #128	; 0x80
 80023fa:	4a1e      	ldr	r2, [pc, #120]	; (8002474 <__aeabi_dmul+0x3ac>)
 80023fc:	00c9      	lsls	r1, r1, #3
 80023fe:	4014      	ands	r4, r2
 8002400:	4461      	add	r1, ip
 8002402:	4a1d      	ldr	r2, [pc, #116]	; (8002478 <__aeabi_dmul+0x3b0>)
 8002404:	4291      	cmp	r1, r2
 8002406:	dd00      	ble.n	800240a <__aeabi_dmul+0x342>
 8002408:	e724      	b.n	8002254 <__aeabi_dmul+0x18c>
 800240a:	0762      	lsls	r2, r4, #29
 800240c:	08ed      	lsrs	r5, r5, #3
 800240e:	0264      	lsls	r4, r4, #9
 8002410:	0549      	lsls	r1, r1, #21
 8002412:	4315      	orrs	r5, r2
 8002414:	0b24      	lsrs	r4, r4, #12
 8002416:	0d4a      	lsrs	r2, r1, #21
 8002418:	e6c6      	b.n	80021a8 <__aeabi_dmul+0xe0>
 800241a:	9701      	str	r7, [sp, #4]
 800241c:	e6b8      	b.n	8002190 <__aeabi_dmul+0xc8>
 800241e:	4a10      	ldr	r2, [pc, #64]	; (8002460 <__aeabi_dmul+0x398>)
 8002420:	2003      	movs	r0, #3
 8002422:	4694      	mov	ip, r2
 8002424:	4463      	add	r3, ip
 8002426:	464a      	mov	r2, r9
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	2303      	movs	r3, #3
 800242c:	431a      	orrs	r2, r3
 800242e:	4691      	mov	r9, r2
 8002430:	4652      	mov	r2, sl
 8002432:	e68a      	b.n	800214a <__aeabi_dmul+0x82>
 8002434:	4649      	mov	r1, r9
 8002436:	2301      	movs	r3, #1
 8002438:	4319      	orrs	r1, r3
 800243a:	4689      	mov	r9, r1
 800243c:	2600      	movs	r6, #0
 800243e:	2001      	movs	r0, #1
 8002440:	e683      	b.n	800214a <__aeabi_dmul+0x82>
 8002442:	220c      	movs	r2, #12
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	2303      	movs	r3, #3
 8002448:	0005      	movs	r5, r0
 800244a:	4691      	mov	r9, r2
 800244c:	469b      	mov	fp, r3
 800244e:	e65e      	b.n	800210e <__aeabi_dmul+0x46>
 8002450:	2304      	movs	r3, #4
 8002452:	4699      	mov	r9, r3
 8002454:	2300      	movs	r3, #0
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	3301      	adds	r3, #1
 800245a:	2400      	movs	r4, #0
 800245c:	469b      	mov	fp, r3
 800245e:	e656      	b.n	800210e <__aeabi_dmul+0x46>
 8002460:	000007ff 	.word	0x000007ff
 8002464:	fffffc01 	.word	0xfffffc01
 8002468:	08011974 	.word	0x08011974
 800246c:	fffffc0d 	.word	0xfffffc0d
 8002470:	000003ff 	.word	0x000003ff
 8002474:	feffffff 	.word	0xfeffffff
 8002478:	000007fe 	.word	0x000007fe
 800247c:	2300      	movs	r3, #0
 800247e:	2480      	movs	r4, #128	; 0x80
 8002480:	2500      	movs	r5, #0
 8002482:	4a44      	ldr	r2, [pc, #272]	; (8002594 <__aeabi_dmul+0x4cc>)
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	0324      	lsls	r4, r4, #12
 8002488:	e68e      	b.n	80021a8 <__aeabi_dmul+0xe0>
 800248a:	2001      	movs	r0, #1
 800248c:	1a40      	subs	r0, r0, r1
 800248e:	2838      	cmp	r0, #56	; 0x38
 8002490:	dd00      	ble.n	8002494 <__aeabi_dmul+0x3cc>
 8002492:	e686      	b.n	80021a2 <__aeabi_dmul+0xda>
 8002494:	281f      	cmp	r0, #31
 8002496:	dd5b      	ble.n	8002550 <__aeabi_dmul+0x488>
 8002498:	221f      	movs	r2, #31
 800249a:	0023      	movs	r3, r4
 800249c:	4252      	negs	r2, r2
 800249e:	1a51      	subs	r1, r2, r1
 80024a0:	40cb      	lsrs	r3, r1
 80024a2:	0019      	movs	r1, r3
 80024a4:	2820      	cmp	r0, #32
 80024a6:	d003      	beq.n	80024b0 <__aeabi_dmul+0x3e8>
 80024a8:	4a3b      	ldr	r2, [pc, #236]	; (8002598 <__aeabi_dmul+0x4d0>)
 80024aa:	4462      	add	r2, ip
 80024ac:	4094      	lsls	r4, r2
 80024ae:	4325      	orrs	r5, r4
 80024b0:	1e6a      	subs	r2, r5, #1
 80024b2:	4195      	sbcs	r5, r2
 80024b4:	002a      	movs	r2, r5
 80024b6:	430a      	orrs	r2, r1
 80024b8:	2107      	movs	r1, #7
 80024ba:	000d      	movs	r5, r1
 80024bc:	2400      	movs	r4, #0
 80024be:	4015      	ands	r5, r2
 80024c0:	4211      	tst	r1, r2
 80024c2:	d05b      	beq.n	800257c <__aeabi_dmul+0x4b4>
 80024c4:	210f      	movs	r1, #15
 80024c6:	2400      	movs	r4, #0
 80024c8:	4011      	ands	r1, r2
 80024ca:	2904      	cmp	r1, #4
 80024cc:	d053      	beq.n	8002576 <__aeabi_dmul+0x4ae>
 80024ce:	1d11      	adds	r1, r2, #4
 80024d0:	4291      	cmp	r1, r2
 80024d2:	4192      	sbcs	r2, r2
 80024d4:	4252      	negs	r2, r2
 80024d6:	18a4      	adds	r4, r4, r2
 80024d8:	000a      	movs	r2, r1
 80024da:	0223      	lsls	r3, r4, #8
 80024dc:	d54b      	bpl.n	8002576 <__aeabi_dmul+0x4ae>
 80024de:	2201      	movs	r2, #1
 80024e0:	2400      	movs	r4, #0
 80024e2:	2500      	movs	r5, #0
 80024e4:	e660      	b.n	80021a8 <__aeabi_dmul+0xe0>
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	031b      	lsls	r3, r3, #12
 80024ea:	421c      	tst	r4, r3
 80024ec:	d009      	beq.n	8002502 <__aeabi_dmul+0x43a>
 80024ee:	421e      	tst	r6, r3
 80024f0:	d107      	bne.n	8002502 <__aeabi_dmul+0x43a>
 80024f2:	4333      	orrs	r3, r6
 80024f4:	031c      	lsls	r4, r3, #12
 80024f6:	4643      	mov	r3, r8
 80024f8:	0015      	movs	r5, r2
 80024fa:	0b24      	lsrs	r4, r4, #12
 80024fc:	4a25      	ldr	r2, [pc, #148]	; (8002594 <__aeabi_dmul+0x4cc>)
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	e652      	b.n	80021a8 <__aeabi_dmul+0xe0>
 8002502:	2280      	movs	r2, #128	; 0x80
 8002504:	0312      	lsls	r2, r2, #12
 8002506:	4314      	orrs	r4, r2
 8002508:	0324      	lsls	r4, r4, #12
 800250a:	4a22      	ldr	r2, [pc, #136]	; (8002594 <__aeabi_dmul+0x4cc>)
 800250c:	0b24      	lsrs	r4, r4, #12
 800250e:	9701      	str	r7, [sp, #4]
 8002510:	e64a      	b.n	80021a8 <__aeabi_dmul+0xe0>
 8002512:	f000 fcab 	bl	8002e6c <__clzsi2>
 8002516:	0003      	movs	r3, r0
 8002518:	001a      	movs	r2, r3
 800251a:	3215      	adds	r2, #21
 800251c:	3020      	adds	r0, #32
 800251e:	2a1c      	cmp	r2, #28
 8002520:	dc00      	bgt.n	8002524 <__aeabi_dmul+0x45c>
 8002522:	e684      	b.n	800222e <__aeabi_dmul+0x166>
 8002524:	4656      	mov	r6, sl
 8002526:	3b08      	subs	r3, #8
 8002528:	2200      	movs	r2, #0
 800252a:	409e      	lsls	r6, r3
 800252c:	e689      	b.n	8002242 <__aeabi_dmul+0x17a>
 800252e:	f000 fc9d 	bl	8002e6c <__clzsi2>
 8002532:	0001      	movs	r1, r0
 8002534:	0002      	movs	r2, r0
 8002536:	3115      	adds	r1, #21
 8002538:	3220      	adds	r2, #32
 800253a:	291c      	cmp	r1, #28
 800253c:	dc00      	bgt.n	8002540 <__aeabi_dmul+0x478>
 800253e:	e64e      	b.n	80021de <__aeabi_dmul+0x116>
 8002540:	0034      	movs	r4, r6
 8002542:	3808      	subs	r0, #8
 8002544:	2500      	movs	r5, #0
 8002546:	4084      	lsls	r4, r0
 8002548:	e653      	b.n	80021f2 <__aeabi_dmul+0x12a>
 800254a:	9b00      	ldr	r3, [sp, #0]
 800254c:	469c      	mov	ip, r3
 800254e:	e741      	b.n	80023d4 <__aeabi_dmul+0x30c>
 8002550:	4912      	ldr	r1, [pc, #72]	; (800259c <__aeabi_dmul+0x4d4>)
 8002552:	0022      	movs	r2, r4
 8002554:	4461      	add	r1, ip
 8002556:	002e      	movs	r6, r5
 8002558:	408d      	lsls	r5, r1
 800255a:	408a      	lsls	r2, r1
 800255c:	40c6      	lsrs	r6, r0
 800255e:	1e69      	subs	r1, r5, #1
 8002560:	418d      	sbcs	r5, r1
 8002562:	4332      	orrs	r2, r6
 8002564:	432a      	orrs	r2, r5
 8002566:	40c4      	lsrs	r4, r0
 8002568:	0753      	lsls	r3, r2, #29
 800256a:	d0b6      	beq.n	80024da <__aeabi_dmul+0x412>
 800256c:	210f      	movs	r1, #15
 800256e:	4011      	ands	r1, r2
 8002570:	2904      	cmp	r1, #4
 8002572:	d1ac      	bne.n	80024ce <__aeabi_dmul+0x406>
 8002574:	e7b1      	b.n	80024da <__aeabi_dmul+0x412>
 8002576:	0765      	lsls	r5, r4, #29
 8002578:	0264      	lsls	r4, r4, #9
 800257a:	0b24      	lsrs	r4, r4, #12
 800257c:	08d2      	lsrs	r2, r2, #3
 800257e:	4315      	orrs	r5, r2
 8002580:	2200      	movs	r2, #0
 8002582:	e611      	b.n	80021a8 <__aeabi_dmul+0xe0>
 8002584:	2280      	movs	r2, #128	; 0x80
 8002586:	0312      	lsls	r2, r2, #12
 8002588:	4314      	orrs	r4, r2
 800258a:	0324      	lsls	r4, r4, #12
 800258c:	4a01      	ldr	r2, [pc, #4]	; (8002594 <__aeabi_dmul+0x4cc>)
 800258e:	0b24      	lsrs	r4, r4, #12
 8002590:	e60a      	b.n	80021a8 <__aeabi_dmul+0xe0>
 8002592:	46c0      	nop			; (mov r8, r8)
 8002594:	000007ff 	.word	0x000007ff
 8002598:	0000043e 	.word	0x0000043e
 800259c:	0000041e 	.word	0x0000041e

080025a0 <__aeabi_dsub>:
 80025a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a2:	4657      	mov	r7, sl
 80025a4:	464e      	mov	r6, r9
 80025a6:	4645      	mov	r5, r8
 80025a8:	46de      	mov	lr, fp
 80025aa:	0004      	movs	r4, r0
 80025ac:	b5e0      	push	{r5, r6, r7, lr}
 80025ae:	001f      	movs	r7, r3
 80025b0:	0010      	movs	r0, r2
 80025b2:	030b      	lsls	r3, r1, #12
 80025b4:	0f62      	lsrs	r2, r4, #29
 80025b6:	004e      	lsls	r6, r1, #1
 80025b8:	0fcd      	lsrs	r5, r1, #31
 80025ba:	0a5b      	lsrs	r3, r3, #9
 80025bc:	0339      	lsls	r1, r7, #12
 80025be:	4313      	orrs	r3, r2
 80025c0:	0a49      	lsrs	r1, r1, #9
 80025c2:	00e2      	lsls	r2, r4, #3
 80025c4:	0f44      	lsrs	r4, r0, #29
 80025c6:	4321      	orrs	r1, r4
 80025c8:	4cc2      	ldr	r4, [pc, #776]	; (80028d4 <__aeabi_dsub+0x334>)
 80025ca:	4691      	mov	r9, r2
 80025cc:	4692      	mov	sl, r2
 80025ce:	00c0      	lsls	r0, r0, #3
 80025d0:	007a      	lsls	r2, r7, #1
 80025d2:	4680      	mov	r8, r0
 80025d4:	0d76      	lsrs	r6, r6, #21
 80025d6:	0d52      	lsrs	r2, r2, #21
 80025d8:	0fff      	lsrs	r7, r7, #31
 80025da:	42a2      	cmp	r2, r4
 80025dc:	d100      	bne.n	80025e0 <__aeabi_dsub+0x40>
 80025de:	e0b4      	b.n	800274a <__aeabi_dsub+0x1aa>
 80025e0:	2401      	movs	r4, #1
 80025e2:	4067      	eors	r7, r4
 80025e4:	46bb      	mov	fp, r7
 80025e6:	42bd      	cmp	r5, r7
 80025e8:	d100      	bne.n	80025ec <__aeabi_dsub+0x4c>
 80025ea:	e088      	b.n	80026fe <__aeabi_dsub+0x15e>
 80025ec:	1ab4      	subs	r4, r6, r2
 80025ee:	46a4      	mov	ip, r4
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	dc00      	bgt.n	80025f6 <__aeabi_dsub+0x56>
 80025f4:	e0b2      	b.n	800275c <__aeabi_dsub+0x1bc>
 80025f6:	2a00      	cmp	r2, #0
 80025f8:	d100      	bne.n	80025fc <__aeabi_dsub+0x5c>
 80025fa:	e0c5      	b.n	8002788 <__aeabi_dsub+0x1e8>
 80025fc:	4ab5      	ldr	r2, [pc, #724]	; (80028d4 <__aeabi_dsub+0x334>)
 80025fe:	4296      	cmp	r6, r2
 8002600:	d100      	bne.n	8002604 <__aeabi_dsub+0x64>
 8002602:	e28b      	b.n	8002b1c <__aeabi_dsub+0x57c>
 8002604:	2280      	movs	r2, #128	; 0x80
 8002606:	0412      	lsls	r2, r2, #16
 8002608:	4311      	orrs	r1, r2
 800260a:	4662      	mov	r2, ip
 800260c:	2a38      	cmp	r2, #56	; 0x38
 800260e:	dd00      	ble.n	8002612 <__aeabi_dsub+0x72>
 8002610:	e1a1      	b.n	8002956 <__aeabi_dsub+0x3b6>
 8002612:	2a1f      	cmp	r2, #31
 8002614:	dd00      	ble.n	8002618 <__aeabi_dsub+0x78>
 8002616:	e216      	b.n	8002a46 <__aeabi_dsub+0x4a6>
 8002618:	2720      	movs	r7, #32
 800261a:	000c      	movs	r4, r1
 800261c:	1abf      	subs	r7, r7, r2
 800261e:	40bc      	lsls	r4, r7
 8002620:	0002      	movs	r2, r0
 8002622:	46a0      	mov	r8, r4
 8002624:	4664      	mov	r4, ip
 8002626:	40b8      	lsls	r0, r7
 8002628:	40e2      	lsrs	r2, r4
 800262a:	4644      	mov	r4, r8
 800262c:	4314      	orrs	r4, r2
 800262e:	0002      	movs	r2, r0
 8002630:	1e50      	subs	r0, r2, #1
 8002632:	4182      	sbcs	r2, r0
 8002634:	4660      	mov	r0, ip
 8002636:	40c1      	lsrs	r1, r0
 8002638:	4322      	orrs	r2, r4
 800263a:	1a5b      	subs	r3, r3, r1
 800263c:	4649      	mov	r1, r9
 800263e:	1a8c      	subs	r4, r1, r2
 8002640:	45a1      	cmp	r9, r4
 8002642:	4192      	sbcs	r2, r2
 8002644:	4252      	negs	r2, r2
 8002646:	1a9b      	subs	r3, r3, r2
 8002648:	4698      	mov	r8, r3
 800264a:	4643      	mov	r3, r8
 800264c:	021b      	lsls	r3, r3, #8
 800264e:	d400      	bmi.n	8002652 <__aeabi_dsub+0xb2>
 8002650:	e117      	b.n	8002882 <__aeabi_dsub+0x2e2>
 8002652:	4643      	mov	r3, r8
 8002654:	025b      	lsls	r3, r3, #9
 8002656:	0a5b      	lsrs	r3, r3, #9
 8002658:	4698      	mov	r8, r3
 800265a:	4643      	mov	r3, r8
 800265c:	2b00      	cmp	r3, #0
 800265e:	d100      	bne.n	8002662 <__aeabi_dsub+0xc2>
 8002660:	e16c      	b.n	800293c <__aeabi_dsub+0x39c>
 8002662:	4640      	mov	r0, r8
 8002664:	f000 fc02 	bl	8002e6c <__clzsi2>
 8002668:	0002      	movs	r2, r0
 800266a:	3a08      	subs	r2, #8
 800266c:	2120      	movs	r1, #32
 800266e:	0020      	movs	r0, r4
 8002670:	4643      	mov	r3, r8
 8002672:	1a89      	subs	r1, r1, r2
 8002674:	4093      	lsls	r3, r2
 8002676:	40c8      	lsrs	r0, r1
 8002678:	4094      	lsls	r4, r2
 800267a:	4303      	orrs	r3, r0
 800267c:	4296      	cmp	r6, r2
 800267e:	dd00      	ble.n	8002682 <__aeabi_dsub+0xe2>
 8002680:	e157      	b.n	8002932 <__aeabi_dsub+0x392>
 8002682:	1b96      	subs	r6, r2, r6
 8002684:	1c71      	adds	r1, r6, #1
 8002686:	291f      	cmp	r1, #31
 8002688:	dd00      	ble.n	800268c <__aeabi_dsub+0xec>
 800268a:	e1cb      	b.n	8002a24 <__aeabi_dsub+0x484>
 800268c:	2220      	movs	r2, #32
 800268e:	0018      	movs	r0, r3
 8002690:	0026      	movs	r6, r4
 8002692:	1a52      	subs	r2, r2, r1
 8002694:	4094      	lsls	r4, r2
 8002696:	4090      	lsls	r0, r2
 8002698:	40ce      	lsrs	r6, r1
 800269a:	40cb      	lsrs	r3, r1
 800269c:	1e62      	subs	r2, r4, #1
 800269e:	4194      	sbcs	r4, r2
 80026a0:	4330      	orrs	r0, r6
 80026a2:	4698      	mov	r8, r3
 80026a4:	2600      	movs	r6, #0
 80026a6:	4304      	orrs	r4, r0
 80026a8:	0763      	lsls	r3, r4, #29
 80026aa:	d009      	beq.n	80026c0 <__aeabi_dsub+0x120>
 80026ac:	230f      	movs	r3, #15
 80026ae:	4023      	ands	r3, r4
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d005      	beq.n	80026c0 <__aeabi_dsub+0x120>
 80026b4:	1d23      	adds	r3, r4, #4
 80026b6:	42a3      	cmp	r3, r4
 80026b8:	41a4      	sbcs	r4, r4
 80026ba:	4264      	negs	r4, r4
 80026bc:	44a0      	add	r8, r4
 80026be:	001c      	movs	r4, r3
 80026c0:	4643      	mov	r3, r8
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	d400      	bmi.n	80026c8 <__aeabi_dsub+0x128>
 80026c6:	e0df      	b.n	8002888 <__aeabi_dsub+0x2e8>
 80026c8:	4b82      	ldr	r3, [pc, #520]	; (80028d4 <__aeabi_dsub+0x334>)
 80026ca:	3601      	adds	r6, #1
 80026cc:	429e      	cmp	r6, r3
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dsub+0x132>
 80026d0:	e0fb      	b.n	80028ca <__aeabi_dsub+0x32a>
 80026d2:	4642      	mov	r2, r8
 80026d4:	4b80      	ldr	r3, [pc, #512]	; (80028d8 <__aeabi_dsub+0x338>)
 80026d6:	08e4      	lsrs	r4, r4, #3
 80026d8:	401a      	ands	r2, r3
 80026da:	0013      	movs	r3, r2
 80026dc:	0571      	lsls	r1, r6, #21
 80026de:	0752      	lsls	r2, r2, #29
 80026e0:	025b      	lsls	r3, r3, #9
 80026e2:	4322      	orrs	r2, r4
 80026e4:	0b1b      	lsrs	r3, r3, #12
 80026e6:	0d49      	lsrs	r1, r1, #21
 80026e8:	0509      	lsls	r1, r1, #20
 80026ea:	07ed      	lsls	r5, r5, #31
 80026ec:	4319      	orrs	r1, r3
 80026ee:	4329      	orrs	r1, r5
 80026f0:	0010      	movs	r0, r2
 80026f2:	bcf0      	pop	{r4, r5, r6, r7}
 80026f4:	46bb      	mov	fp, r7
 80026f6:	46b2      	mov	sl, r6
 80026f8:	46a9      	mov	r9, r5
 80026fa:	46a0      	mov	r8, r4
 80026fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026fe:	1ab4      	subs	r4, r6, r2
 8002700:	46a4      	mov	ip, r4
 8002702:	2c00      	cmp	r4, #0
 8002704:	dd58      	ble.n	80027b8 <__aeabi_dsub+0x218>
 8002706:	2a00      	cmp	r2, #0
 8002708:	d100      	bne.n	800270c <__aeabi_dsub+0x16c>
 800270a:	e09e      	b.n	800284a <__aeabi_dsub+0x2aa>
 800270c:	4a71      	ldr	r2, [pc, #452]	; (80028d4 <__aeabi_dsub+0x334>)
 800270e:	4296      	cmp	r6, r2
 8002710:	d100      	bne.n	8002714 <__aeabi_dsub+0x174>
 8002712:	e13b      	b.n	800298c <__aeabi_dsub+0x3ec>
 8002714:	2280      	movs	r2, #128	; 0x80
 8002716:	0412      	lsls	r2, r2, #16
 8002718:	4311      	orrs	r1, r2
 800271a:	4662      	mov	r2, ip
 800271c:	2a38      	cmp	r2, #56	; 0x38
 800271e:	dd00      	ble.n	8002722 <__aeabi_dsub+0x182>
 8002720:	e0c1      	b.n	80028a6 <__aeabi_dsub+0x306>
 8002722:	2a1f      	cmp	r2, #31
 8002724:	dc00      	bgt.n	8002728 <__aeabi_dsub+0x188>
 8002726:	e1bb      	b.n	8002aa0 <__aeabi_dsub+0x500>
 8002728:	000c      	movs	r4, r1
 800272a:	3a20      	subs	r2, #32
 800272c:	40d4      	lsrs	r4, r2
 800272e:	0022      	movs	r2, r4
 8002730:	4664      	mov	r4, ip
 8002732:	2c20      	cmp	r4, #32
 8002734:	d004      	beq.n	8002740 <__aeabi_dsub+0x1a0>
 8002736:	2740      	movs	r7, #64	; 0x40
 8002738:	1b3f      	subs	r7, r7, r4
 800273a:	40b9      	lsls	r1, r7
 800273c:	4308      	orrs	r0, r1
 800273e:	4680      	mov	r8, r0
 8002740:	4644      	mov	r4, r8
 8002742:	1e61      	subs	r1, r4, #1
 8002744:	418c      	sbcs	r4, r1
 8002746:	4314      	orrs	r4, r2
 8002748:	e0b1      	b.n	80028ae <__aeabi_dsub+0x30e>
 800274a:	000c      	movs	r4, r1
 800274c:	4304      	orrs	r4, r0
 800274e:	d02a      	beq.n	80027a6 <__aeabi_dsub+0x206>
 8002750:	46bb      	mov	fp, r7
 8002752:	42bd      	cmp	r5, r7
 8002754:	d02d      	beq.n	80027b2 <__aeabi_dsub+0x212>
 8002756:	4c61      	ldr	r4, [pc, #388]	; (80028dc <__aeabi_dsub+0x33c>)
 8002758:	46a4      	mov	ip, r4
 800275a:	44b4      	add	ip, r6
 800275c:	4664      	mov	r4, ip
 800275e:	2c00      	cmp	r4, #0
 8002760:	d05c      	beq.n	800281c <__aeabi_dsub+0x27c>
 8002762:	1b94      	subs	r4, r2, r6
 8002764:	46a4      	mov	ip, r4
 8002766:	2e00      	cmp	r6, #0
 8002768:	d000      	beq.n	800276c <__aeabi_dsub+0x1cc>
 800276a:	e115      	b.n	8002998 <__aeabi_dsub+0x3f8>
 800276c:	464d      	mov	r5, r9
 800276e:	431d      	orrs	r5, r3
 8002770:	d100      	bne.n	8002774 <__aeabi_dsub+0x1d4>
 8002772:	e1c3      	b.n	8002afc <__aeabi_dsub+0x55c>
 8002774:	1e65      	subs	r5, r4, #1
 8002776:	2c01      	cmp	r4, #1
 8002778:	d100      	bne.n	800277c <__aeabi_dsub+0x1dc>
 800277a:	e20c      	b.n	8002b96 <__aeabi_dsub+0x5f6>
 800277c:	4e55      	ldr	r6, [pc, #340]	; (80028d4 <__aeabi_dsub+0x334>)
 800277e:	42b4      	cmp	r4, r6
 8002780:	d100      	bne.n	8002784 <__aeabi_dsub+0x1e4>
 8002782:	e1f8      	b.n	8002b76 <__aeabi_dsub+0x5d6>
 8002784:	46ac      	mov	ip, r5
 8002786:	e10e      	b.n	80029a6 <__aeabi_dsub+0x406>
 8002788:	000a      	movs	r2, r1
 800278a:	4302      	orrs	r2, r0
 800278c:	d100      	bne.n	8002790 <__aeabi_dsub+0x1f0>
 800278e:	e136      	b.n	80029fe <__aeabi_dsub+0x45e>
 8002790:	0022      	movs	r2, r4
 8002792:	3a01      	subs	r2, #1
 8002794:	2c01      	cmp	r4, #1
 8002796:	d100      	bne.n	800279a <__aeabi_dsub+0x1fa>
 8002798:	e1c6      	b.n	8002b28 <__aeabi_dsub+0x588>
 800279a:	4c4e      	ldr	r4, [pc, #312]	; (80028d4 <__aeabi_dsub+0x334>)
 800279c:	45a4      	cmp	ip, r4
 800279e:	d100      	bne.n	80027a2 <__aeabi_dsub+0x202>
 80027a0:	e0f4      	b.n	800298c <__aeabi_dsub+0x3ec>
 80027a2:	4694      	mov	ip, r2
 80027a4:	e731      	b.n	800260a <__aeabi_dsub+0x6a>
 80027a6:	2401      	movs	r4, #1
 80027a8:	4067      	eors	r7, r4
 80027aa:	46bb      	mov	fp, r7
 80027ac:	42bd      	cmp	r5, r7
 80027ae:	d000      	beq.n	80027b2 <__aeabi_dsub+0x212>
 80027b0:	e71c      	b.n	80025ec <__aeabi_dsub+0x4c>
 80027b2:	4c4a      	ldr	r4, [pc, #296]	; (80028dc <__aeabi_dsub+0x33c>)
 80027b4:	46a4      	mov	ip, r4
 80027b6:	44b4      	add	ip, r6
 80027b8:	4664      	mov	r4, ip
 80027ba:	2c00      	cmp	r4, #0
 80027bc:	d100      	bne.n	80027c0 <__aeabi_dsub+0x220>
 80027be:	e0cf      	b.n	8002960 <__aeabi_dsub+0x3c0>
 80027c0:	1b94      	subs	r4, r2, r6
 80027c2:	46a4      	mov	ip, r4
 80027c4:	2e00      	cmp	r6, #0
 80027c6:	d100      	bne.n	80027ca <__aeabi_dsub+0x22a>
 80027c8:	e15c      	b.n	8002a84 <__aeabi_dsub+0x4e4>
 80027ca:	4e42      	ldr	r6, [pc, #264]	; (80028d4 <__aeabi_dsub+0x334>)
 80027cc:	42b2      	cmp	r2, r6
 80027ce:	d100      	bne.n	80027d2 <__aeabi_dsub+0x232>
 80027d0:	e1ec      	b.n	8002bac <__aeabi_dsub+0x60c>
 80027d2:	2680      	movs	r6, #128	; 0x80
 80027d4:	0436      	lsls	r6, r6, #16
 80027d6:	4333      	orrs	r3, r6
 80027d8:	4664      	mov	r4, ip
 80027da:	2c38      	cmp	r4, #56	; 0x38
 80027dc:	dd00      	ble.n	80027e0 <__aeabi_dsub+0x240>
 80027de:	e1b3      	b.n	8002b48 <__aeabi_dsub+0x5a8>
 80027e0:	2c1f      	cmp	r4, #31
 80027e2:	dd00      	ble.n	80027e6 <__aeabi_dsub+0x246>
 80027e4:	e238      	b.n	8002c58 <__aeabi_dsub+0x6b8>
 80027e6:	2620      	movs	r6, #32
 80027e8:	1b36      	subs	r6, r6, r4
 80027ea:	001c      	movs	r4, r3
 80027ec:	40b4      	lsls	r4, r6
 80027ee:	464f      	mov	r7, r9
 80027f0:	46a0      	mov	r8, r4
 80027f2:	4664      	mov	r4, ip
 80027f4:	40e7      	lsrs	r7, r4
 80027f6:	4644      	mov	r4, r8
 80027f8:	433c      	orrs	r4, r7
 80027fa:	464f      	mov	r7, r9
 80027fc:	40b7      	lsls	r7, r6
 80027fe:	003e      	movs	r6, r7
 8002800:	1e77      	subs	r7, r6, #1
 8002802:	41be      	sbcs	r6, r7
 8002804:	4334      	orrs	r4, r6
 8002806:	4666      	mov	r6, ip
 8002808:	40f3      	lsrs	r3, r6
 800280a:	18c9      	adds	r1, r1, r3
 800280c:	1824      	adds	r4, r4, r0
 800280e:	4284      	cmp	r4, r0
 8002810:	419b      	sbcs	r3, r3
 8002812:	425b      	negs	r3, r3
 8002814:	4698      	mov	r8, r3
 8002816:	0016      	movs	r6, r2
 8002818:	4488      	add	r8, r1
 800281a:	e04e      	b.n	80028ba <__aeabi_dsub+0x31a>
 800281c:	4a30      	ldr	r2, [pc, #192]	; (80028e0 <__aeabi_dsub+0x340>)
 800281e:	1c74      	adds	r4, r6, #1
 8002820:	4214      	tst	r4, r2
 8002822:	d000      	beq.n	8002826 <__aeabi_dsub+0x286>
 8002824:	e0d6      	b.n	80029d4 <__aeabi_dsub+0x434>
 8002826:	464a      	mov	r2, r9
 8002828:	431a      	orrs	r2, r3
 800282a:	2e00      	cmp	r6, #0
 800282c:	d000      	beq.n	8002830 <__aeabi_dsub+0x290>
 800282e:	e15b      	b.n	8002ae8 <__aeabi_dsub+0x548>
 8002830:	2a00      	cmp	r2, #0
 8002832:	d100      	bne.n	8002836 <__aeabi_dsub+0x296>
 8002834:	e1a5      	b.n	8002b82 <__aeabi_dsub+0x5e2>
 8002836:	000a      	movs	r2, r1
 8002838:	4302      	orrs	r2, r0
 800283a:	d000      	beq.n	800283e <__aeabi_dsub+0x29e>
 800283c:	e1bb      	b.n	8002bb6 <__aeabi_dsub+0x616>
 800283e:	464a      	mov	r2, r9
 8002840:	0759      	lsls	r1, r3, #29
 8002842:	08d2      	lsrs	r2, r2, #3
 8002844:	430a      	orrs	r2, r1
 8002846:	08db      	lsrs	r3, r3, #3
 8002848:	e027      	b.n	800289a <__aeabi_dsub+0x2fa>
 800284a:	000a      	movs	r2, r1
 800284c:	4302      	orrs	r2, r0
 800284e:	d100      	bne.n	8002852 <__aeabi_dsub+0x2b2>
 8002850:	e174      	b.n	8002b3c <__aeabi_dsub+0x59c>
 8002852:	0022      	movs	r2, r4
 8002854:	3a01      	subs	r2, #1
 8002856:	2c01      	cmp	r4, #1
 8002858:	d005      	beq.n	8002866 <__aeabi_dsub+0x2c6>
 800285a:	4c1e      	ldr	r4, [pc, #120]	; (80028d4 <__aeabi_dsub+0x334>)
 800285c:	45a4      	cmp	ip, r4
 800285e:	d100      	bne.n	8002862 <__aeabi_dsub+0x2c2>
 8002860:	e094      	b.n	800298c <__aeabi_dsub+0x3ec>
 8002862:	4694      	mov	ip, r2
 8002864:	e759      	b.n	800271a <__aeabi_dsub+0x17a>
 8002866:	4448      	add	r0, r9
 8002868:	4548      	cmp	r0, r9
 800286a:	4192      	sbcs	r2, r2
 800286c:	185b      	adds	r3, r3, r1
 800286e:	4698      	mov	r8, r3
 8002870:	0004      	movs	r4, r0
 8002872:	4252      	negs	r2, r2
 8002874:	4490      	add	r8, r2
 8002876:	4643      	mov	r3, r8
 8002878:	2602      	movs	r6, #2
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	d500      	bpl.n	8002880 <__aeabi_dsub+0x2e0>
 800287e:	e0c4      	b.n	8002a0a <__aeabi_dsub+0x46a>
 8002880:	3e01      	subs	r6, #1
 8002882:	0763      	lsls	r3, r4, #29
 8002884:	d000      	beq.n	8002888 <__aeabi_dsub+0x2e8>
 8002886:	e711      	b.n	80026ac <__aeabi_dsub+0x10c>
 8002888:	4643      	mov	r3, r8
 800288a:	46b4      	mov	ip, r6
 800288c:	0759      	lsls	r1, r3, #29
 800288e:	08e2      	lsrs	r2, r4, #3
 8002890:	430a      	orrs	r2, r1
 8002892:	08db      	lsrs	r3, r3, #3
 8002894:	490f      	ldr	r1, [pc, #60]	; (80028d4 <__aeabi_dsub+0x334>)
 8002896:	458c      	cmp	ip, r1
 8002898:	d040      	beq.n	800291c <__aeabi_dsub+0x37c>
 800289a:	4661      	mov	r1, ip
 800289c:	031b      	lsls	r3, r3, #12
 800289e:	0549      	lsls	r1, r1, #21
 80028a0:	0b1b      	lsrs	r3, r3, #12
 80028a2:	0d49      	lsrs	r1, r1, #21
 80028a4:	e720      	b.n	80026e8 <__aeabi_dsub+0x148>
 80028a6:	4301      	orrs	r1, r0
 80028a8:	000c      	movs	r4, r1
 80028aa:	1e61      	subs	r1, r4, #1
 80028ac:	418c      	sbcs	r4, r1
 80028ae:	444c      	add	r4, r9
 80028b0:	454c      	cmp	r4, r9
 80028b2:	4192      	sbcs	r2, r2
 80028b4:	4252      	negs	r2, r2
 80028b6:	4690      	mov	r8, r2
 80028b8:	4498      	add	r8, r3
 80028ba:	4643      	mov	r3, r8
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	d5e0      	bpl.n	8002882 <__aeabi_dsub+0x2e2>
 80028c0:	4b04      	ldr	r3, [pc, #16]	; (80028d4 <__aeabi_dsub+0x334>)
 80028c2:	3601      	adds	r6, #1
 80028c4:	429e      	cmp	r6, r3
 80028c6:	d000      	beq.n	80028ca <__aeabi_dsub+0x32a>
 80028c8:	e09f      	b.n	8002a0a <__aeabi_dsub+0x46a>
 80028ca:	0031      	movs	r1, r6
 80028cc:	2300      	movs	r3, #0
 80028ce:	2200      	movs	r2, #0
 80028d0:	e70a      	b.n	80026e8 <__aeabi_dsub+0x148>
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	000007ff 	.word	0x000007ff
 80028d8:	ff7fffff 	.word	0xff7fffff
 80028dc:	fffff801 	.word	0xfffff801
 80028e0:	000007fe 	.word	0x000007fe
 80028e4:	2a00      	cmp	r2, #0
 80028e6:	d100      	bne.n	80028ea <__aeabi_dsub+0x34a>
 80028e8:	e160      	b.n	8002bac <__aeabi_dsub+0x60c>
 80028ea:	000a      	movs	r2, r1
 80028ec:	4302      	orrs	r2, r0
 80028ee:	d04d      	beq.n	800298c <__aeabi_dsub+0x3ec>
 80028f0:	464a      	mov	r2, r9
 80028f2:	075c      	lsls	r4, r3, #29
 80028f4:	08d2      	lsrs	r2, r2, #3
 80028f6:	4322      	orrs	r2, r4
 80028f8:	2480      	movs	r4, #128	; 0x80
 80028fa:	08db      	lsrs	r3, r3, #3
 80028fc:	0324      	lsls	r4, r4, #12
 80028fe:	4223      	tst	r3, r4
 8002900:	d007      	beq.n	8002912 <__aeabi_dsub+0x372>
 8002902:	08ce      	lsrs	r6, r1, #3
 8002904:	4226      	tst	r6, r4
 8002906:	d104      	bne.n	8002912 <__aeabi_dsub+0x372>
 8002908:	465d      	mov	r5, fp
 800290a:	0033      	movs	r3, r6
 800290c:	08c2      	lsrs	r2, r0, #3
 800290e:	0749      	lsls	r1, r1, #29
 8002910:	430a      	orrs	r2, r1
 8002912:	0f51      	lsrs	r1, r2, #29
 8002914:	00d2      	lsls	r2, r2, #3
 8002916:	08d2      	lsrs	r2, r2, #3
 8002918:	0749      	lsls	r1, r1, #29
 800291a:	430a      	orrs	r2, r1
 800291c:	0011      	movs	r1, r2
 800291e:	4319      	orrs	r1, r3
 8002920:	d100      	bne.n	8002924 <__aeabi_dsub+0x384>
 8002922:	e1c8      	b.n	8002cb6 <__aeabi_dsub+0x716>
 8002924:	2180      	movs	r1, #128	; 0x80
 8002926:	0309      	lsls	r1, r1, #12
 8002928:	430b      	orrs	r3, r1
 800292a:	031b      	lsls	r3, r3, #12
 800292c:	49d5      	ldr	r1, [pc, #852]	; (8002c84 <__aeabi_dsub+0x6e4>)
 800292e:	0b1b      	lsrs	r3, r3, #12
 8002930:	e6da      	b.n	80026e8 <__aeabi_dsub+0x148>
 8002932:	49d5      	ldr	r1, [pc, #852]	; (8002c88 <__aeabi_dsub+0x6e8>)
 8002934:	1ab6      	subs	r6, r6, r2
 8002936:	400b      	ands	r3, r1
 8002938:	4698      	mov	r8, r3
 800293a:	e6b5      	b.n	80026a8 <__aeabi_dsub+0x108>
 800293c:	0020      	movs	r0, r4
 800293e:	f000 fa95 	bl	8002e6c <__clzsi2>
 8002942:	0002      	movs	r2, r0
 8002944:	3218      	adds	r2, #24
 8002946:	2a1f      	cmp	r2, #31
 8002948:	dc00      	bgt.n	800294c <__aeabi_dsub+0x3ac>
 800294a:	e68f      	b.n	800266c <__aeabi_dsub+0xcc>
 800294c:	0023      	movs	r3, r4
 800294e:	3808      	subs	r0, #8
 8002950:	4083      	lsls	r3, r0
 8002952:	2400      	movs	r4, #0
 8002954:	e692      	b.n	800267c <__aeabi_dsub+0xdc>
 8002956:	4308      	orrs	r0, r1
 8002958:	0002      	movs	r2, r0
 800295a:	1e50      	subs	r0, r2, #1
 800295c:	4182      	sbcs	r2, r0
 800295e:	e66d      	b.n	800263c <__aeabi_dsub+0x9c>
 8002960:	4cca      	ldr	r4, [pc, #808]	; (8002c8c <__aeabi_dsub+0x6ec>)
 8002962:	1c72      	adds	r2, r6, #1
 8002964:	4222      	tst	r2, r4
 8002966:	d000      	beq.n	800296a <__aeabi_dsub+0x3ca>
 8002968:	e0ad      	b.n	8002ac6 <__aeabi_dsub+0x526>
 800296a:	464a      	mov	r2, r9
 800296c:	431a      	orrs	r2, r3
 800296e:	2e00      	cmp	r6, #0
 8002970:	d1b8      	bne.n	80028e4 <__aeabi_dsub+0x344>
 8002972:	2a00      	cmp	r2, #0
 8002974:	d100      	bne.n	8002978 <__aeabi_dsub+0x3d8>
 8002976:	e158      	b.n	8002c2a <__aeabi_dsub+0x68a>
 8002978:	000a      	movs	r2, r1
 800297a:	4302      	orrs	r2, r0
 800297c:	d000      	beq.n	8002980 <__aeabi_dsub+0x3e0>
 800297e:	e159      	b.n	8002c34 <__aeabi_dsub+0x694>
 8002980:	464a      	mov	r2, r9
 8002982:	0759      	lsls	r1, r3, #29
 8002984:	08d2      	lsrs	r2, r2, #3
 8002986:	430a      	orrs	r2, r1
 8002988:	08db      	lsrs	r3, r3, #3
 800298a:	e786      	b.n	800289a <__aeabi_dsub+0x2fa>
 800298c:	464a      	mov	r2, r9
 800298e:	0759      	lsls	r1, r3, #29
 8002990:	08d2      	lsrs	r2, r2, #3
 8002992:	430a      	orrs	r2, r1
 8002994:	08db      	lsrs	r3, r3, #3
 8002996:	e7c1      	b.n	800291c <__aeabi_dsub+0x37c>
 8002998:	4dba      	ldr	r5, [pc, #744]	; (8002c84 <__aeabi_dsub+0x6e4>)
 800299a:	42aa      	cmp	r2, r5
 800299c:	d100      	bne.n	80029a0 <__aeabi_dsub+0x400>
 800299e:	e11e      	b.n	8002bde <__aeabi_dsub+0x63e>
 80029a0:	2580      	movs	r5, #128	; 0x80
 80029a2:	042d      	lsls	r5, r5, #16
 80029a4:	432b      	orrs	r3, r5
 80029a6:	4664      	mov	r4, ip
 80029a8:	2c38      	cmp	r4, #56	; 0x38
 80029aa:	dc5d      	bgt.n	8002a68 <__aeabi_dsub+0x4c8>
 80029ac:	2c1f      	cmp	r4, #31
 80029ae:	dd00      	ble.n	80029b2 <__aeabi_dsub+0x412>
 80029b0:	e0d0      	b.n	8002b54 <__aeabi_dsub+0x5b4>
 80029b2:	2520      	movs	r5, #32
 80029b4:	4667      	mov	r7, ip
 80029b6:	1b2d      	subs	r5, r5, r4
 80029b8:	464e      	mov	r6, r9
 80029ba:	001c      	movs	r4, r3
 80029bc:	40fe      	lsrs	r6, r7
 80029be:	40ac      	lsls	r4, r5
 80029c0:	4334      	orrs	r4, r6
 80029c2:	464e      	mov	r6, r9
 80029c4:	40ae      	lsls	r6, r5
 80029c6:	0035      	movs	r5, r6
 80029c8:	40fb      	lsrs	r3, r7
 80029ca:	1e6e      	subs	r6, r5, #1
 80029cc:	41b5      	sbcs	r5, r6
 80029ce:	1ac9      	subs	r1, r1, r3
 80029d0:	432c      	orrs	r4, r5
 80029d2:	e04e      	b.n	8002a72 <__aeabi_dsub+0x4d2>
 80029d4:	464a      	mov	r2, r9
 80029d6:	1a14      	subs	r4, r2, r0
 80029d8:	45a1      	cmp	r9, r4
 80029da:	4192      	sbcs	r2, r2
 80029dc:	4252      	negs	r2, r2
 80029de:	4690      	mov	r8, r2
 80029e0:	1a5f      	subs	r7, r3, r1
 80029e2:	003a      	movs	r2, r7
 80029e4:	4647      	mov	r7, r8
 80029e6:	1bd2      	subs	r2, r2, r7
 80029e8:	4690      	mov	r8, r2
 80029ea:	0212      	lsls	r2, r2, #8
 80029ec:	d500      	bpl.n	80029f0 <__aeabi_dsub+0x450>
 80029ee:	e08b      	b.n	8002b08 <__aeabi_dsub+0x568>
 80029f0:	4642      	mov	r2, r8
 80029f2:	4322      	orrs	r2, r4
 80029f4:	d000      	beq.n	80029f8 <__aeabi_dsub+0x458>
 80029f6:	e630      	b.n	800265a <__aeabi_dsub+0xba>
 80029f8:	2300      	movs	r3, #0
 80029fa:	2500      	movs	r5, #0
 80029fc:	e74d      	b.n	800289a <__aeabi_dsub+0x2fa>
 80029fe:	464a      	mov	r2, r9
 8002a00:	0759      	lsls	r1, r3, #29
 8002a02:	08d2      	lsrs	r2, r2, #3
 8002a04:	430a      	orrs	r2, r1
 8002a06:	08db      	lsrs	r3, r3, #3
 8002a08:	e744      	b.n	8002894 <__aeabi_dsub+0x2f4>
 8002a0a:	4642      	mov	r2, r8
 8002a0c:	4b9e      	ldr	r3, [pc, #632]	; (8002c88 <__aeabi_dsub+0x6e8>)
 8002a0e:	0861      	lsrs	r1, r4, #1
 8002a10:	401a      	ands	r2, r3
 8002a12:	0013      	movs	r3, r2
 8002a14:	2201      	movs	r2, #1
 8002a16:	4014      	ands	r4, r2
 8002a18:	430c      	orrs	r4, r1
 8002a1a:	07da      	lsls	r2, r3, #31
 8002a1c:	085b      	lsrs	r3, r3, #1
 8002a1e:	4698      	mov	r8, r3
 8002a20:	4314      	orrs	r4, r2
 8002a22:	e641      	b.n	80026a8 <__aeabi_dsub+0x108>
 8002a24:	001a      	movs	r2, r3
 8002a26:	3e1f      	subs	r6, #31
 8002a28:	40f2      	lsrs	r2, r6
 8002a2a:	0016      	movs	r6, r2
 8002a2c:	2920      	cmp	r1, #32
 8002a2e:	d003      	beq.n	8002a38 <__aeabi_dsub+0x498>
 8002a30:	2240      	movs	r2, #64	; 0x40
 8002a32:	1a51      	subs	r1, r2, r1
 8002a34:	408b      	lsls	r3, r1
 8002a36:	431c      	orrs	r4, r3
 8002a38:	1e62      	subs	r2, r4, #1
 8002a3a:	4194      	sbcs	r4, r2
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	4334      	orrs	r4, r6
 8002a40:	4698      	mov	r8, r3
 8002a42:	2600      	movs	r6, #0
 8002a44:	e71d      	b.n	8002882 <__aeabi_dsub+0x2e2>
 8002a46:	000c      	movs	r4, r1
 8002a48:	3a20      	subs	r2, #32
 8002a4a:	40d4      	lsrs	r4, r2
 8002a4c:	0022      	movs	r2, r4
 8002a4e:	4664      	mov	r4, ip
 8002a50:	2c20      	cmp	r4, #32
 8002a52:	d004      	beq.n	8002a5e <__aeabi_dsub+0x4be>
 8002a54:	2740      	movs	r7, #64	; 0x40
 8002a56:	1b3f      	subs	r7, r7, r4
 8002a58:	40b9      	lsls	r1, r7
 8002a5a:	4308      	orrs	r0, r1
 8002a5c:	4680      	mov	r8, r0
 8002a5e:	4644      	mov	r4, r8
 8002a60:	1e61      	subs	r1, r4, #1
 8002a62:	418c      	sbcs	r4, r1
 8002a64:	4322      	orrs	r2, r4
 8002a66:	e5e9      	b.n	800263c <__aeabi_dsub+0x9c>
 8002a68:	464c      	mov	r4, r9
 8002a6a:	4323      	orrs	r3, r4
 8002a6c:	001c      	movs	r4, r3
 8002a6e:	1e63      	subs	r3, r4, #1
 8002a70:	419c      	sbcs	r4, r3
 8002a72:	1b04      	subs	r4, r0, r4
 8002a74:	42a0      	cmp	r0, r4
 8002a76:	419b      	sbcs	r3, r3
 8002a78:	425b      	negs	r3, r3
 8002a7a:	1acb      	subs	r3, r1, r3
 8002a7c:	4698      	mov	r8, r3
 8002a7e:	465d      	mov	r5, fp
 8002a80:	0016      	movs	r6, r2
 8002a82:	e5e2      	b.n	800264a <__aeabi_dsub+0xaa>
 8002a84:	464e      	mov	r6, r9
 8002a86:	431e      	orrs	r6, r3
 8002a88:	d100      	bne.n	8002a8c <__aeabi_dsub+0x4ec>
 8002a8a:	e0ae      	b.n	8002bea <__aeabi_dsub+0x64a>
 8002a8c:	1e66      	subs	r6, r4, #1
 8002a8e:	2c01      	cmp	r4, #1
 8002a90:	d100      	bne.n	8002a94 <__aeabi_dsub+0x4f4>
 8002a92:	e0fd      	b.n	8002c90 <__aeabi_dsub+0x6f0>
 8002a94:	4f7b      	ldr	r7, [pc, #492]	; (8002c84 <__aeabi_dsub+0x6e4>)
 8002a96:	42bc      	cmp	r4, r7
 8002a98:	d100      	bne.n	8002a9c <__aeabi_dsub+0x4fc>
 8002a9a:	e107      	b.n	8002cac <__aeabi_dsub+0x70c>
 8002a9c:	46b4      	mov	ip, r6
 8002a9e:	e69b      	b.n	80027d8 <__aeabi_dsub+0x238>
 8002aa0:	4664      	mov	r4, ip
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	1b12      	subs	r2, r2, r4
 8002aa6:	000c      	movs	r4, r1
 8002aa8:	4094      	lsls	r4, r2
 8002aaa:	0007      	movs	r7, r0
 8002aac:	4090      	lsls	r0, r2
 8002aae:	46a0      	mov	r8, r4
 8002ab0:	4664      	mov	r4, ip
 8002ab2:	1e42      	subs	r2, r0, #1
 8002ab4:	4190      	sbcs	r0, r2
 8002ab6:	4662      	mov	r2, ip
 8002ab8:	40e7      	lsrs	r7, r4
 8002aba:	4644      	mov	r4, r8
 8002abc:	40d1      	lsrs	r1, r2
 8002abe:	433c      	orrs	r4, r7
 8002ac0:	4304      	orrs	r4, r0
 8002ac2:	185b      	adds	r3, r3, r1
 8002ac4:	e6f3      	b.n	80028ae <__aeabi_dsub+0x30e>
 8002ac6:	4c6f      	ldr	r4, [pc, #444]	; (8002c84 <__aeabi_dsub+0x6e4>)
 8002ac8:	42a2      	cmp	r2, r4
 8002aca:	d100      	bne.n	8002ace <__aeabi_dsub+0x52e>
 8002acc:	e0d5      	b.n	8002c7a <__aeabi_dsub+0x6da>
 8002ace:	4448      	add	r0, r9
 8002ad0:	185b      	adds	r3, r3, r1
 8002ad2:	4548      	cmp	r0, r9
 8002ad4:	4189      	sbcs	r1, r1
 8002ad6:	4249      	negs	r1, r1
 8002ad8:	185b      	adds	r3, r3, r1
 8002ada:	07dc      	lsls	r4, r3, #31
 8002adc:	0840      	lsrs	r0, r0, #1
 8002ade:	085b      	lsrs	r3, r3, #1
 8002ae0:	4698      	mov	r8, r3
 8002ae2:	0016      	movs	r6, r2
 8002ae4:	4304      	orrs	r4, r0
 8002ae6:	e6cc      	b.n	8002882 <__aeabi_dsub+0x2e2>
 8002ae8:	2a00      	cmp	r2, #0
 8002aea:	d000      	beq.n	8002aee <__aeabi_dsub+0x54e>
 8002aec:	e082      	b.n	8002bf4 <__aeabi_dsub+0x654>
 8002aee:	000a      	movs	r2, r1
 8002af0:	4302      	orrs	r2, r0
 8002af2:	d140      	bne.n	8002b76 <__aeabi_dsub+0x5d6>
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	2500      	movs	r5, #0
 8002af8:	031b      	lsls	r3, r3, #12
 8002afa:	e713      	b.n	8002924 <__aeabi_dsub+0x384>
 8002afc:	074b      	lsls	r3, r1, #29
 8002afe:	08c2      	lsrs	r2, r0, #3
 8002b00:	431a      	orrs	r2, r3
 8002b02:	465d      	mov	r5, fp
 8002b04:	08cb      	lsrs	r3, r1, #3
 8002b06:	e6c5      	b.n	8002894 <__aeabi_dsub+0x2f4>
 8002b08:	464a      	mov	r2, r9
 8002b0a:	1a84      	subs	r4, r0, r2
 8002b0c:	42a0      	cmp	r0, r4
 8002b0e:	4192      	sbcs	r2, r2
 8002b10:	1acb      	subs	r3, r1, r3
 8002b12:	4252      	negs	r2, r2
 8002b14:	1a9b      	subs	r3, r3, r2
 8002b16:	4698      	mov	r8, r3
 8002b18:	465d      	mov	r5, fp
 8002b1a:	e59e      	b.n	800265a <__aeabi_dsub+0xba>
 8002b1c:	464a      	mov	r2, r9
 8002b1e:	0759      	lsls	r1, r3, #29
 8002b20:	08d2      	lsrs	r2, r2, #3
 8002b22:	430a      	orrs	r2, r1
 8002b24:	08db      	lsrs	r3, r3, #3
 8002b26:	e6f9      	b.n	800291c <__aeabi_dsub+0x37c>
 8002b28:	464a      	mov	r2, r9
 8002b2a:	1a14      	subs	r4, r2, r0
 8002b2c:	45a1      	cmp	r9, r4
 8002b2e:	4192      	sbcs	r2, r2
 8002b30:	1a5b      	subs	r3, r3, r1
 8002b32:	4252      	negs	r2, r2
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	4698      	mov	r8, r3
 8002b38:	2601      	movs	r6, #1
 8002b3a:	e586      	b.n	800264a <__aeabi_dsub+0xaa>
 8002b3c:	464a      	mov	r2, r9
 8002b3e:	0759      	lsls	r1, r3, #29
 8002b40:	08d2      	lsrs	r2, r2, #3
 8002b42:	430a      	orrs	r2, r1
 8002b44:	08db      	lsrs	r3, r3, #3
 8002b46:	e6a5      	b.n	8002894 <__aeabi_dsub+0x2f4>
 8002b48:	464c      	mov	r4, r9
 8002b4a:	4323      	orrs	r3, r4
 8002b4c:	001c      	movs	r4, r3
 8002b4e:	1e63      	subs	r3, r4, #1
 8002b50:	419c      	sbcs	r4, r3
 8002b52:	e65b      	b.n	800280c <__aeabi_dsub+0x26c>
 8002b54:	4665      	mov	r5, ip
 8002b56:	001e      	movs	r6, r3
 8002b58:	3d20      	subs	r5, #32
 8002b5a:	40ee      	lsrs	r6, r5
 8002b5c:	2c20      	cmp	r4, #32
 8002b5e:	d005      	beq.n	8002b6c <__aeabi_dsub+0x5cc>
 8002b60:	2540      	movs	r5, #64	; 0x40
 8002b62:	1b2d      	subs	r5, r5, r4
 8002b64:	40ab      	lsls	r3, r5
 8002b66:	464c      	mov	r4, r9
 8002b68:	431c      	orrs	r4, r3
 8002b6a:	46a2      	mov	sl, r4
 8002b6c:	4654      	mov	r4, sl
 8002b6e:	1e63      	subs	r3, r4, #1
 8002b70:	419c      	sbcs	r4, r3
 8002b72:	4334      	orrs	r4, r6
 8002b74:	e77d      	b.n	8002a72 <__aeabi_dsub+0x4d2>
 8002b76:	074b      	lsls	r3, r1, #29
 8002b78:	08c2      	lsrs	r2, r0, #3
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	465d      	mov	r5, fp
 8002b7e:	08cb      	lsrs	r3, r1, #3
 8002b80:	e6cc      	b.n	800291c <__aeabi_dsub+0x37c>
 8002b82:	000a      	movs	r2, r1
 8002b84:	4302      	orrs	r2, r0
 8002b86:	d100      	bne.n	8002b8a <__aeabi_dsub+0x5ea>
 8002b88:	e736      	b.n	80029f8 <__aeabi_dsub+0x458>
 8002b8a:	074b      	lsls	r3, r1, #29
 8002b8c:	08c2      	lsrs	r2, r0, #3
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	465d      	mov	r5, fp
 8002b92:	08cb      	lsrs	r3, r1, #3
 8002b94:	e681      	b.n	800289a <__aeabi_dsub+0x2fa>
 8002b96:	464a      	mov	r2, r9
 8002b98:	1a84      	subs	r4, r0, r2
 8002b9a:	42a0      	cmp	r0, r4
 8002b9c:	4192      	sbcs	r2, r2
 8002b9e:	1acb      	subs	r3, r1, r3
 8002ba0:	4252      	negs	r2, r2
 8002ba2:	1a9b      	subs	r3, r3, r2
 8002ba4:	4698      	mov	r8, r3
 8002ba6:	465d      	mov	r5, fp
 8002ba8:	2601      	movs	r6, #1
 8002baa:	e54e      	b.n	800264a <__aeabi_dsub+0xaa>
 8002bac:	074b      	lsls	r3, r1, #29
 8002bae:	08c2      	lsrs	r2, r0, #3
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	08cb      	lsrs	r3, r1, #3
 8002bb4:	e6b2      	b.n	800291c <__aeabi_dsub+0x37c>
 8002bb6:	464a      	mov	r2, r9
 8002bb8:	1a14      	subs	r4, r2, r0
 8002bba:	45a1      	cmp	r9, r4
 8002bbc:	4192      	sbcs	r2, r2
 8002bbe:	1a5f      	subs	r7, r3, r1
 8002bc0:	4252      	negs	r2, r2
 8002bc2:	1aba      	subs	r2, r7, r2
 8002bc4:	4690      	mov	r8, r2
 8002bc6:	0212      	lsls	r2, r2, #8
 8002bc8:	d56b      	bpl.n	8002ca2 <__aeabi_dsub+0x702>
 8002bca:	464a      	mov	r2, r9
 8002bcc:	1a84      	subs	r4, r0, r2
 8002bce:	42a0      	cmp	r0, r4
 8002bd0:	4192      	sbcs	r2, r2
 8002bd2:	1acb      	subs	r3, r1, r3
 8002bd4:	4252      	negs	r2, r2
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	4698      	mov	r8, r3
 8002bda:	465d      	mov	r5, fp
 8002bdc:	e564      	b.n	80026a8 <__aeabi_dsub+0x108>
 8002bde:	074b      	lsls	r3, r1, #29
 8002be0:	08c2      	lsrs	r2, r0, #3
 8002be2:	431a      	orrs	r2, r3
 8002be4:	465d      	mov	r5, fp
 8002be6:	08cb      	lsrs	r3, r1, #3
 8002be8:	e698      	b.n	800291c <__aeabi_dsub+0x37c>
 8002bea:	074b      	lsls	r3, r1, #29
 8002bec:	08c2      	lsrs	r2, r0, #3
 8002bee:	431a      	orrs	r2, r3
 8002bf0:	08cb      	lsrs	r3, r1, #3
 8002bf2:	e64f      	b.n	8002894 <__aeabi_dsub+0x2f4>
 8002bf4:	000a      	movs	r2, r1
 8002bf6:	4302      	orrs	r2, r0
 8002bf8:	d090      	beq.n	8002b1c <__aeabi_dsub+0x57c>
 8002bfa:	464a      	mov	r2, r9
 8002bfc:	075c      	lsls	r4, r3, #29
 8002bfe:	08d2      	lsrs	r2, r2, #3
 8002c00:	4314      	orrs	r4, r2
 8002c02:	2280      	movs	r2, #128	; 0x80
 8002c04:	08db      	lsrs	r3, r3, #3
 8002c06:	0312      	lsls	r2, r2, #12
 8002c08:	4213      	tst	r3, r2
 8002c0a:	d008      	beq.n	8002c1e <__aeabi_dsub+0x67e>
 8002c0c:	08ce      	lsrs	r6, r1, #3
 8002c0e:	4216      	tst	r6, r2
 8002c10:	d105      	bne.n	8002c1e <__aeabi_dsub+0x67e>
 8002c12:	08c0      	lsrs	r0, r0, #3
 8002c14:	0749      	lsls	r1, r1, #29
 8002c16:	4308      	orrs	r0, r1
 8002c18:	0004      	movs	r4, r0
 8002c1a:	465d      	mov	r5, fp
 8002c1c:	0033      	movs	r3, r6
 8002c1e:	0f61      	lsrs	r1, r4, #29
 8002c20:	00e2      	lsls	r2, r4, #3
 8002c22:	0749      	lsls	r1, r1, #29
 8002c24:	08d2      	lsrs	r2, r2, #3
 8002c26:	430a      	orrs	r2, r1
 8002c28:	e678      	b.n	800291c <__aeabi_dsub+0x37c>
 8002c2a:	074b      	lsls	r3, r1, #29
 8002c2c:	08c2      	lsrs	r2, r0, #3
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	08cb      	lsrs	r3, r1, #3
 8002c32:	e632      	b.n	800289a <__aeabi_dsub+0x2fa>
 8002c34:	4448      	add	r0, r9
 8002c36:	185b      	adds	r3, r3, r1
 8002c38:	4548      	cmp	r0, r9
 8002c3a:	4192      	sbcs	r2, r2
 8002c3c:	4698      	mov	r8, r3
 8002c3e:	4252      	negs	r2, r2
 8002c40:	4490      	add	r8, r2
 8002c42:	4643      	mov	r3, r8
 8002c44:	0004      	movs	r4, r0
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	d400      	bmi.n	8002c4c <__aeabi_dsub+0x6ac>
 8002c4a:	e61a      	b.n	8002882 <__aeabi_dsub+0x2e2>
 8002c4c:	4642      	mov	r2, r8
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <__aeabi_dsub+0x6e8>)
 8002c50:	2601      	movs	r6, #1
 8002c52:	401a      	ands	r2, r3
 8002c54:	4690      	mov	r8, r2
 8002c56:	e614      	b.n	8002882 <__aeabi_dsub+0x2e2>
 8002c58:	4666      	mov	r6, ip
 8002c5a:	001f      	movs	r7, r3
 8002c5c:	3e20      	subs	r6, #32
 8002c5e:	40f7      	lsrs	r7, r6
 8002c60:	2c20      	cmp	r4, #32
 8002c62:	d005      	beq.n	8002c70 <__aeabi_dsub+0x6d0>
 8002c64:	2640      	movs	r6, #64	; 0x40
 8002c66:	1b36      	subs	r6, r6, r4
 8002c68:	40b3      	lsls	r3, r6
 8002c6a:	464c      	mov	r4, r9
 8002c6c:	431c      	orrs	r4, r3
 8002c6e:	46a2      	mov	sl, r4
 8002c70:	4654      	mov	r4, sl
 8002c72:	1e63      	subs	r3, r4, #1
 8002c74:	419c      	sbcs	r4, r3
 8002c76:	433c      	orrs	r4, r7
 8002c78:	e5c8      	b.n	800280c <__aeabi_dsub+0x26c>
 8002c7a:	0011      	movs	r1, r2
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	2200      	movs	r2, #0
 8002c80:	e532      	b.n	80026e8 <__aeabi_dsub+0x148>
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	000007ff 	.word	0x000007ff
 8002c88:	ff7fffff 	.word	0xff7fffff
 8002c8c:	000007fe 	.word	0x000007fe
 8002c90:	464a      	mov	r2, r9
 8002c92:	1814      	adds	r4, r2, r0
 8002c94:	4284      	cmp	r4, r0
 8002c96:	4192      	sbcs	r2, r2
 8002c98:	185b      	adds	r3, r3, r1
 8002c9a:	4698      	mov	r8, r3
 8002c9c:	4252      	negs	r2, r2
 8002c9e:	4490      	add	r8, r2
 8002ca0:	e5e9      	b.n	8002876 <__aeabi_dsub+0x2d6>
 8002ca2:	4642      	mov	r2, r8
 8002ca4:	4322      	orrs	r2, r4
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x70a>
 8002ca8:	e6a6      	b.n	80029f8 <__aeabi_dsub+0x458>
 8002caa:	e5ea      	b.n	8002882 <__aeabi_dsub+0x2e2>
 8002cac:	074b      	lsls	r3, r1, #29
 8002cae:	08c2      	lsrs	r2, r0, #3
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	08cb      	lsrs	r3, r1, #3
 8002cb4:	e632      	b.n	800291c <__aeabi_dsub+0x37c>
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	4901      	ldr	r1, [pc, #4]	; (8002cc0 <__aeabi_dsub+0x720>)
 8002cba:	0013      	movs	r3, r2
 8002cbc:	e514      	b.n	80026e8 <__aeabi_dsub+0x148>
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	000007ff 	.word	0x000007ff

08002cc4 <__aeabi_d2iz>:
 8002cc4:	000a      	movs	r2, r1
 8002cc6:	b530      	push	{r4, r5, lr}
 8002cc8:	4c13      	ldr	r4, [pc, #76]	; (8002d18 <__aeabi_d2iz+0x54>)
 8002cca:	0053      	lsls	r3, r2, #1
 8002ccc:	0309      	lsls	r1, r1, #12
 8002cce:	0005      	movs	r5, r0
 8002cd0:	0b09      	lsrs	r1, r1, #12
 8002cd2:	2000      	movs	r0, #0
 8002cd4:	0d5b      	lsrs	r3, r3, #21
 8002cd6:	0fd2      	lsrs	r2, r2, #31
 8002cd8:	42a3      	cmp	r3, r4
 8002cda:	dd04      	ble.n	8002ce6 <__aeabi_d2iz+0x22>
 8002cdc:	480f      	ldr	r0, [pc, #60]	; (8002d1c <__aeabi_d2iz+0x58>)
 8002cde:	4283      	cmp	r3, r0
 8002ce0:	dd02      	ble.n	8002ce8 <__aeabi_d2iz+0x24>
 8002ce2:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <__aeabi_d2iz+0x5c>)
 8002ce4:	18d0      	adds	r0, r2, r3
 8002ce6:	bd30      	pop	{r4, r5, pc}
 8002ce8:	2080      	movs	r0, #128	; 0x80
 8002cea:	0340      	lsls	r0, r0, #13
 8002cec:	4301      	orrs	r1, r0
 8002cee:	480d      	ldr	r0, [pc, #52]	; (8002d24 <__aeabi_d2iz+0x60>)
 8002cf0:	1ac0      	subs	r0, r0, r3
 8002cf2:	281f      	cmp	r0, #31
 8002cf4:	dd08      	ble.n	8002d08 <__aeabi_d2iz+0x44>
 8002cf6:	480c      	ldr	r0, [pc, #48]	; (8002d28 <__aeabi_d2iz+0x64>)
 8002cf8:	1ac3      	subs	r3, r0, r3
 8002cfa:	40d9      	lsrs	r1, r3
 8002cfc:	000b      	movs	r3, r1
 8002cfe:	4258      	negs	r0, r3
 8002d00:	2a00      	cmp	r2, #0
 8002d02:	d1f0      	bne.n	8002ce6 <__aeabi_d2iz+0x22>
 8002d04:	0018      	movs	r0, r3
 8002d06:	e7ee      	b.n	8002ce6 <__aeabi_d2iz+0x22>
 8002d08:	4c08      	ldr	r4, [pc, #32]	; (8002d2c <__aeabi_d2iz+0x68>)
 8002d0a:	40c5      	lsrs	r5, r0
 8002d0c:	46a4      	mov	ip, r4
 8002d0e:	4463      	add	r3, ip
 8002d10:	4099      	lsls	r1, r3
 8002d12:	000b      	movs	r3, r1
 8002d14:	432b      	orrs	r3, r5
 8002d16:	e7f2      	b.n	8002cfe <__aeabi_d2iz+0x3a>
 8002d18:	000003fe 	.word	0x000003fe
 8002d1c:	0000041d 	.word	0x0000041d
 8002d20:	7fffffff 	.word	0x7fffffff
 8002d24:	00000433 	.word	0x00000433
 8002d28:	00000413 	.word	0x00000413
 8002d2c:	fffffbed 	.word	0xfffffbed

08002d30 <__aeabi_i2d>:
 8002d30:	b570      	push	{r4, r5, r6, lr}
 8002d32:	2800      	cmp	r0, #0
 8002d34:	d016      	beq.n	8002d64 <__aeabi_i2d+0x34>
 8002d36:	17c3      	asrs	r3, r0, #31
 8002d38:	18c5      	adds	r5, r0, r3
 8002d3a:	405d      	eors	r5, r3
 8002d3c:	0fc4      	lsrs	r4, r0, #31
 8002d3e:	0028      	movs	r0, r5
 8002d40:	f000 f894 	bl	8002e6c <__clzsi2>
 8002d44:	4a11      	ldr	r2, [pc, #68]	; (8002d8c <__aeabi_i2d+0x5c>)
 8002d46:	1a12      	subs	r2, r2, r0
 8002d48:	280a      	cmp	r0, #10
 8002d4a:	dc16      	bgt.n	8002d7a <__aeabi_i2d+0x4a>
 8002d4c:	0003      	movs	r3, r0
 8002d4e:	002e      	movs	r6, r5
 8002d50:	3315      	adds	r3, #21
 8002d52:	409e      	lsls	r6, r3
 8002d54:	230b      	movs	r3, #11
 8002d56:	1a18      	subs	r0, r3, r0
 8002d58:	40c5      	lsrs	r5, r0
 8002d5a:	0553      	lsls	r3, r2, #21
 8002d5c:	032d      	lsls	r5, r5, #12
 8002d5e:	0b2d      	lsrs	r5, r5, #12
 8002d60:	0d5b      	lsrs	r3, r3, #21
 8002d62:	e003      	b.n	8002d6c <__aeabi_i2d+0x3c>
 8002d64:	2400      	movs	r4, #0
 8002d66:	2300      	movs	r3, #0
 8002d68:	2500      	movs	r5, #0
 8002d6a:	2600      	movs	r6, #0
 8002d6c:	051b      	lsls	r3, r3, #20
 8002d6e:	432b      	orrs	r3, r5
 8002d70:	07e4      	lsls	r4, r4, #31
 8002d72:	4323      	orrs	r3, r4
 8002d74:	0030      	movs	r0, r6
 8002d76:	0019      	movs	r1, r3
 8002d78:	bd70      	pop	{r4, r5, r6, pc}
 8002d7a:	380b      	subs	r0, #11
 8002d7c:	4085      	lsls	r5, r0
 8002d7e:	0553      	lsls	r3, r2, #21
 8002d80:	032d      	lsls	r5, r5, #12
 8002d82:	2600      	movs	r6, #0
 8002d84:	0b2d      	lsrs	r5, r5, #12
 8002d86:	0d5b      	lsrs	r3, r3, #21
 8002d88:	e7f0      	b.n	8002d6c <__aeabi_i2d+0x3c>
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	0000041e 	.word	0x0000041e

08002d90 <__aeabi_ui2d>:
 8002d90:	b510      	push	{r4, lr}
 8002d92:	1e04      	subs	r4, r0, #0
 8002d94:	d010      	beq.n	8002db8 <__aeabi_ui2d+0x28>
 8002d96:	f000 f869 	bl	8002e6c <__clzsi2>
 8002d9a:	4b0f      	ldr	r3, [pc, #60]	; (8002dd8 <__aeabi_ui2d+0x48>)
 8002d9c:	1a1b      	subs	r3, r3, r0
 8002d9e:	280a      	cmp	r0, #10
 8002da0:	dc11      	bgt.n	8002dc6 <__aeabi_ui2d+0x36>
 8002da2:	220b      	movs	r2, #11
 8002da4:	0021      	movs	r1, r4
 8002da6:	1a12      	subs	r2, r2, r0
 8002da8:	40d1      	lsrs	r1, r2
 8002daa:	3015      	adds	r0, #21
 8002dac:	030a      	lsls	r2, r1, #12
 8002dae:	055b      	lsls	r3, r3, #21
 8002db0:	4084      	lsls	r4, r0
 8002db2:	0b12      	lsrs	r2, r2, #12
 8002db4:	0d5b      	lsrs	r3, r3, #21
 8002db6:	e001      	b.n	8002dbc <__aeabi_ui2d+0x2c>
 8002db8:	2300      	movs	r3, #0
 8002dba:	2200      	movs	r2, #0
 8002dbc:	051b      	lsls	r3, r3, #20
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	0020      	movs	r0, r4
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	bd10      	pop	{r4, pc}
 8002dc6:	0022      	movs	r2, r4
 8002dc8:	380b      	subs	r0, #11
 8002dca:	4082      	lsls	r2, r0
 8002dcc:	055b      	lsls	r3, r3, #21
 8002dce:	0312      	lsls	r2, r2, #12
 8002dd0:	2400      	movs	r4, #0
 8002dd2:	0b12      	lsrs	r2, r2, #12
 8002dd4:	0d5b      	lsrs	r3, r3, #21
 8002dd6:	e7f1      	b.n	8002dbc <__aeabi_ui2d+0x2c>
 8002dd8:	0000041e 	.word	0x0000041e

08002ddc <__aeabi_f2d>:
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	0043      	lsls	r3, r0, #1
 8002de0:	0246      	lsls	r6, r0, #9
 8002de2:	0fc4      	lsrs	r4, r0, #31
 8002de4:	20fe      	movs	r0, #254	; 0xfe
 8002de6:	0e1b      	lsrs	r3, r3, #24
 8002de8:	1c59      	adds	r1, r3, #1
 8002dea:	0a75      	lsrs	r5, r6, #9
 8002dec:	4208      	tst	r0, r1
 8002dee:	d00c      	beq.n	8002e0a <__aeabi_f2d+0x2e>
 8002df0:	22e0      	movs	r2, #224	; 0xe0
 8002df2:	0092      	lsls	r2, r2, #2
 8002df4:	4694      	mov	ip, r2
 8002df6:	076d      	lsls	r5, r5, #29
 8002df8:	0b36      	lsrs	r6, r6, #12
 8002dfa:	4463      	add	r3, ip
 8002dfc:	051b      	lsls	r3, r3, #20
 8002dfe:	4333      	orrs	r3, r6
 8002e00:	07e4      	lsls	r4, r4, #31
 8002e02:	4323      	orrs	r3, r4
 8002e04:	0028      	movs	r0, r5
 8002e06:	0019      	movs	r1, r3
 8002e08:	bd70      	pop	{r4, r5, r6, pc}
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d114      	bne.n	8002e38 <__aeabi_f2d+0x5c>
 8002e0e:	2d00      	cmp	r5, #0
 8002e10:	d01b      	beq.n	8002e4a <__aeabi_f2d+0x6e>
 8002e12:	0028      	movs	r0, r5
 8002e14:	f000 f82a 	bl	8002e6c <__clzsi2>
 8002e18:	280a      	cmp	r0, #10
 8002e1a:	dc1c      	bgt.n	8002e56 <__aeabi_f2d+0x7a>
 8002e1c:	230b      	movs	r3, #11
 8002e1e:	002a      	movs	r2, r5
 8002e20:	1a1b      	subs	r3, r3, r0
 8002e22:	40da      	lsrs	r2, r3
 8002e24:	0003      	movs	r3, r0
 8002e26:	3315      	adds	r3, #21
 8002e28:	409d      	lsls	r5, r3
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <__aeabi_f2d+0x88>)
 8002e2c:	0312      	lsls	r2, r2, #12
 8002e2e:	1a1b      	subs	r3, r3, r0
 8002e30:	055b      	lsls	r3, r3, #21
 8002e32:	0b16      	lsrs	r6, r2, #12
 8002e34:	0d5b      	lsrs	r3, r3, #21
 8002e36:	e7e1      	b.n	8002dfc <__aeabi_f2d+0x20>
 8002e38:	2d00      	cmp	r5, #0
 8002e3a:	d009      	beq.n	8002e50 <__aeabi_f2d+0x74>
 8002e3c:	0b32      	lsrs	r2, r6, #12
 8002e3e:	2680      	movs	r6, #128	; 0x80
 8002e40:	0336      	lsls	r6, r6, #12
 8002e42:	4b09      	ldr	r3, [pc, #36]	; (8002e68 <__aeabi_f2d+0x8c>)
 8002e44:	076d      	lsls	r5, r5, #29
 8002e46:	4316      	orrs	r6, r2
 8002e48:	e7d8      	b.n	8002dfc <__aeabi_f2d+0x20>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	2600      	movs	r6, #0
 8002e4e:	e7d5      	b.n	8002dfc <__aeabi_f2d+0x20>
 8002e50:	2600      	movs	r6, #0
 8002e52:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <__aeabi_f2d+0x8c>)
 8002e54:	e7d2      	b.n	8002dfc <__aeabi_f2d+0x20>
 8002e56:	0003      	movs	r3, r0
 8002e58:	002a      	movs	r2, r5
 8002e5a:	3b0b      	subs	r3, #11
 8002e5c:	409a      	lsls	r2, r3
 8002e5e:	2500      	movs	r5, #0
 8002e60:	e7e3      	b.n	8002e2a <__aeabi_f2d+0x4e>
 8002e62:	46c0      	nop			; (mov r8, r8)
 8002e64:	00000389 	.word	0x00000389
 8002e68:	000007ff 	.word	0x000007ff

08002e6c <__clzsi2>:
 8002e6c:	211c      	movs	r1, #28
 8002e6e:	2301      	movs	r3, #1
 8002e70:	041b      	lsls	r3, r3, #16
 8002e72:	4298      	cmp	r0, r3
 8002e74:	d301      	bcc.n	8002e7a <__clzsi2+0xe>
 8002e76:	0c00      	lsrs	r0, r0, #16
 8002e78:	3910      	subs	r1, #16
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	4298      	cmp	r0, r3
 8002e7e:	d301      	bcc.n	8002e84 <__clzsi2+0x18>
 8002e80:	0a00      	lsrs	r0, r0, #8
 8002e82:	3908      	subs	r1, #8
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	4298      	cmp	r0, r3
 8002e88:	d301      	bcc.n	8002e8e <__clzsi2+0x22>
 8002e8a:	0900      	lsrs	r0, r0, #4
 8002e8c:	3904      	subs	r1, #4
 8002e8e:	a202      	add	r2, pc, #8	; (adr r2, 8002e98 <__clzsi2+0x2c>)
 8002e90:	5c10      	ldrb	r0, [r2, r0]
 8002e92:	1840      	adds	r0, r0, r1
 8002e94:	4770      	bx	lr
 8002e96:	46c0      	nop			; (mov r8, r8)
 8002e98:	02020304 	.word	0x02020304
 8002e9c:	01010101 	.word	0x01010101
	...

08002ea8 <__clzdi2>:
 8002ea8:	b510      	push	{r4, lr}
 8002eaa:	2900      	cmp	r1, #0
 8002eac:	d103      	bne.n	8002eb6 <__clzdi2+0xe>
 8002eae:	f7ff ffdd 	bl	8002e6c <__clzsi2>
 8002eb2:	3020      	adds	r0, #32
 8002eb4:	e002      	b.n	8002ebc <__clzdi2+0x14>
 8002eb6:	1c08      	adds	r0, r1, #0
 8002eb8:	f7ff ffd8 	bl	8002e6c <__clzsi2>
 8002ebc:	bd10      	pop	{r4, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)

08002ec0 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002ec0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002ec2:	f001 f84f 	bl	8003f64 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002ec6:	f000 f9a7 	bl	8003218 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8002eca:	bd10      	pop	{r4, pc}

08002ecc <MX_LoRaWAN_Process>:
void MX_LoRaWAN_Process(void)
{
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002ecc:	2001      	movs	r0, #1
{
 8002ece:	b510      	push	{r4, lr}
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8002ed0:	4240      	negs	r0, r0
 8002ed2:	f00c fd5d 	bl	800f990 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002ed6:	bd10      	pop	{r4, pc}

08002ed8 <OnTxTimerEvent>:

  /* USER CODE END SendTxData_2 */
}

static void OnTxTimerEvent(void *context)
{
 8002ed8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8002eda:	2100      	movs	r1, #0
 8002edc:	2002      	movs	r0, #2
 8002ede:	f00c fd29 	bl	800f934 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8002ee2:	4802      	ldr	r0, [pc, #8]	; (8002eec <OnTxTimerEvent+0x14>)
 8002ee4:	f00c ff20 	bl	800fd28 <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8002ee8:	bd10      	pop	{r4, pc}
 8002eea:	46c0      	nop			; (mov r8, r8)
 8002eec:	200001f8 	.word	0x200001f8

08002ef0 <OnMacProcessNotify>:

  /* USER CODE END OnJoinRequest_2 */
}

static void OnMacProcessNotify(void)
{
 8002ef0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	2001      	movs	r0, #1
 8002ef6:	f00c fd1d 	bl	800f934 <UTIL_SEQ_SetTask>
  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8002efa:	bd10      	pop	{r4, pc}

08002efc <OnRxTimerLedEvent>:
{
 8002efc:	b510      	push	{r4, lr}
  LED_Off(LED_GPIO_PORT,LED_BLUE) ;
 8002efe:	2120      	movs	r1, #32
 8002f00:	4801      	ldr	r0, [pc, #4]	; (8002f08 <OnRxTimerLedEvent+0xc>)
 8002f02:	f000 fc9c 	bl	800383e <Bsp_Led_Off>
}
 8002f06:	bd10      	pop	{r4, pc}
 8002f08:	50000400 	.word	0x50000400

08002f0c <OnTxTimerLedEvent>:
{
 8002f0c:	b510      	push	{r4, lr}
  LED_Off(LED_GPIO_PORT,LED_RED2);
 8002f0e:	2110      	movs	r1, #16
 8002f10:	4801      	ldr	r0, [pc, #4]	; (8002f18 <OnTxTimerLedEvent+0xc>)
 8002f12:	f000 fc94 	bl	800383e <Bsp_Led_Off>
}
 8002f16:	bd10      	pop	{r4, pc}
 8002f18:	50000400 	.word	0x50000400

08002f1c <SendTxData>:
{
 8002f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002f1e:	2600      	movs	r6, #0
{
 8002f20:	b08d      	sub	sp, #52	; 0x34
  EnvSensors_Read(&sensor_data);
 8002f22:	a806      	add	r0, sp, #24
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002f24:	9605      	str	r6, [sp, #20]
  EnvSensors_Read(&sensor_data);
 8002f26:	f001 f903 	bl	8004130 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8002f2a:	f000 faef 	bl	800350c <SYS_GetTemperatureLevel>
 8002f2e:	0005      	movs	r5, r0
  light = GetLightLevel();//@Murata add a light byte in packet
 8002f30:	f000 fc3c 	bl	80037ac <GetLightLevel>
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8002f34:	4935      	ldr	r1, [pc, #212]	; (800300c <SendTxData+0xf0>)
  light = GetLightLevel();//@Murata add a light byte in packet
 8002f36:	9003      	str	r0, [sp, #12]
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8002f38:	9806      	ldr	r0, [sp, #24]
 8002f3a:	f7fd fe17 	bl	8000b6c <__aeabi_fmul>
 8002f3e:	4934      	ldr	r1, [pc, #208]	; (8003010 <SendTxData+0xf4>)
 8002f40:	f7fd fc4a 	bl	80007d8 <__aeabi_fdiv>
 8002f44:	f7fd fb46 	bl	80005d4 <__aeabi_f2uiz>
  AppData.Port = LORAWAN_USER_APP_PORT;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	4c32      	ldr	r4, [pc, #200]	; (8003014 <SendTxData+0xf8>)
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8002f4c:	b287      	uxth	r7, r0
  AppData.Port = LORAWAN_USER_APP_PORT;
 8002f4e:	7023      	strb	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8002f50:	9808      	ldr	r0, [sp, #32]
 8002f52:	492f      	ldr	r1, [pc, #188]	; (8003010 <SendTxData+0xf4>)
 8002f54:	f7fd fe0a 	bl	8000b6c <__aeabi_fmul>
 8002f58:	f7fd fb3c 	bl	80005d4 <__aeabi_f2uiz>
  AppData.Buffer[i++] = AppLedStateOn;
 8002f5c:	4a2e      	ldr	r2, [pc, #184]	; (8003018 <SendTxData+0xfc>)
 8002f5e:	6863      	ldr	r3, [r4, #4]
 8002f60:	7e12      	ldrb	r2, [r2, #24]
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8002f62:	122d      	asrs	r5, r5, #8
  AppData.Buffer[i++] = AppLedStateOn;
 8002f64:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8002f66:	6863      	ldr	r3, [r4, #4]
 8002f68:	0a3a      	lsrs	r2, r7, #8
 8002f6a:	705a      	strb	r2, [r3, #1]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8002f6c:	6863      	ldr	r3, [r4, #4]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8002f6e:	b280      	uxth	r0, r0
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8002f70:	709f      	strb	r7, [r3, #2]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8002f72:	6863      	ldr	r3, [r4, #4]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8002f74:	0a02      	lsrs	r2, r0, #8
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8002f76:	70dd      	strb	r5, [r3, #3]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8002f78:	6863      	ldr	r3, [r4, #4]
 8002f7a:	711a      	strb	r2, [r3, #4]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8002f7c:	6863      	ldr	r3, [r4, #4]
  AppData.Buffer[i++] = (uint8_t)(light & 0xFF);//@Murata add a light byte in packet
 8002f7e:	9a03      	ldr	r2, [sp, #12]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8002f80:	7158      	strb	r0, [r3, #5]
  AppData.Buffer[i++] = (uint8_t)(light & 0xFF);//@Murata add a light byte in packet
 8002f82:	6863      	ldr	r3, [r4, #4]
 8002f84:	719a      	strb	r2, [r3, #6]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8002f86:	7a22      	ldrb	r2, [r4, #8]
 8002f88:	0033      	movs	r3, r6
 8002f8a:	2a08      	cmp	r2, #8
 8002f8c:	d001      	beq.n	8002f92 <SendTxData+0x76>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8002f8e:	2a01      	cmp	r2, #1
 8002f90:	d816      	bhi.n	8002fc0 <SendTxData+0xa4>
    AppData.Buffer[i++] = 0;
 8002f92:	6862      	ldr	r2, [r4, #4]
 8002f94:	71d3      	strb	r3, [r2, #7]
    AppData.Buffer[i++] = 0;
 8002f96:	6862      	ldr	r2, [r4, #4]
 8002f98:	7213      	strb	r3, [r2, #8]
    AppData.Buffer[i++] = 0;
 8002f9a:	7253      	strb	r3, [r2, #9]
    AppData.Buffer[i++] = 0;
 8002f9c:	7293      	strb	r3, [r2, #10]
 8002f9e:	230b      	movs	r3, #11
  AppData.BufferSize = i;
 8002fa0:	7063      	strb	r3, [r4, #1]
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	0020      	movs	r0, r4
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	aa05      	add	r2, sp, #20
 8002faa:	f005 ff23 	bl	8008df4 <LmHandlerSend>
 8002fae:	1e01      	subs	r1, r0, #0
 8002fb0:	d11d      	bne.n	8002fee <SendTxData+0xd2>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	4b19      	ldr	r3, [pc, #100]	; (800301c <SendTxData+0x100>)
 8002fb6:	0010      	movs	r0, r2
 8002fb8:	f00c fb8c 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
}
 8002fbc:	b00d      	add	sp, #52	; 0x34
 8002fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fc0:	6863      	ldr	r3, [r4, #4]
    latitude = sensor_data.latitude;
 8002fc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    longitude = sensor_data.longitude;
 8002fc4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002fc6:	9303      	str	r3, [sp, #12]
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8002fc8:	f001 f848 	bl	800405c <GetBatteryLevel>
 8002fcc:	9b03      	ldr	r3, [sp, #12]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8002fce:	143a      	asrs	r2, r7, #16
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8002fd0:	71d8      	strb	r0, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8002fd2:	6863      	ldr	r3, [r4, #4]
 8002fd4:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8002fd6:	123a      	asrs	r2, r7, #8
 8002fd8:	725a      	strb	r2, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8002fda:	142a      	asrs	r2, r5, #16
 8002fdc:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002fde:	122a      	asrs	r2, r5, #8
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8002fe0:	729f      	strb	r7, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8002fe2:	731a      	strb	r2, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8002fe4:	735d      	strb	r5, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8002fe6:	739e      	strb	r6, [r3, #14]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8002fe8:	73de      	strb	r6, [r3, #15]
 8002fea:	2310      	movs	r3, #16
 8002fec:	e7d8      	b.n	8002fa0 <SendTxData+0x84>
  else if (nextTxIn > 0)
 8002fee:	9805      	ldr	r0, [sp, #20]
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	d0e3      	beq.n	8002fbc <SendTxData+0xa0>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8002ff4:	21fa      	movs	r1, #250	; 0xfa
 8002ff6:	0089      	lsls	r1, r1, #2
 8002ff8:	f7fd f8b6 	bl	8000168 <__udivsi3>
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	9000      	str	r0, [sp, #0]
 8003000:	2100      	movs	r1, #0
 8003002:	0010      	movs	r0, r2
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <SendTxData+0x104>)
 8003006:	f00c fb65 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
}
 800300a:	e7d7      	b.n	8002fbc <SendTxData+0xa0>
 800300c:	42c80000 	.word	0x42c80000
 8003010:	41200000 	.word	0x41200000
 8003014:	20000000 	.word	0x20000000
 8003018:	200001f8 	.word	0x200001f8
 800301c:	080119b4 	.word	0x080119b4
 8003020:	080119c3 	.word	0x080119c3

08003024 <OnJoinTimerLedEvent>:
{
 8003024:	b510      	push	{r4, lr}
  LED_Toggle(LED_GPIO_PORT,LED_RED1) ;
 8003026:	2108      	movs	r1, #8
 8003028:	4801      	ldr	r0, [pc, #4]	; (8003030 <OnJoinTimerLedEvent+0xc>)
 800302a:	f000 fc0d 	bl	8003848 <Bsp_Led_Toggle>
}
 800302e:	bd10      	pop	{r4, pc}
 8003030:	50000400 	.word	0x50000400

08003034 <OnTxData>:
{
 8003034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003036:	1e04      	subs	r4, r0, #0
  if ((params != NULL) && (params->IsMcpsConfirm != 0))
 8003038:	d035      	beq.n	80030a6 <OnTxData+0x72>
 800303a:	7803      	ldrb	r3, [r0, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d032      	beq.n	80030a6 <OnTxData+0x72>
    LED_On(LED_GPIO_PORT,LED_RED2) ;
 8003040:	2110      	movs	r1, #16
 8003042:	481d      	ldr	r0, [pc, #116]	; (80030b8 <OnTxData+0x84>)
 8003044:	f000 fbf6 	bl	8003834 <Bsp_Led_On>
    UTIL_TIMER_Start(&TxLedTimer);
 8003048:	481c      	ldr	r0, [pc, #112]	; (80030bc <OnTxData+0x88>)
 800304a:	301c      	adds	r0, #28
 800304c:	f00c fe6c 	bl	800fd28 <UTIL_TIMER_Start>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8003050:	2200      	movs	r2, #0
 8003052:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <OnTxData+0x8c>)
 8003054:	0011      	movs	r1, r2
 8003056:	2002      	movs	r0, #2
 8003058:	f00c fb3c 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800305c:	2314      	movs	r3, #20
 800305e:	56e3      	ldrsb	r3, [r4, r3]
 8003060:	2200      	movs	r2, #0
 8003062:	9303      	str	r3, [sp, #12]
 8003064:	2304      	movs	r3, #4
 8003066:	56e3      	ldrsb	r3, [r4, r3]
 8003068:	0011      	movs	r1, r2
 800306a:	9302      	str	r3, [sp, #8]
 800306c:	7b23      	ldrb	r3, [r4, #12]
 800306e:	2003      	movs	r0, #3
 8003070:	9301      	str	r3, [sp, #4]
 8003072:	68a3      	ldr	r3, [r4, #8]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	4b13      	ldr	r3, [pc, #76]	; (80030c4 <OnTxData+0x90>)
 8003078:	f00c fb2c 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800307c:	2200      	movs	r2, #0
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <OnTxData+0x94>)
 8003080:	0011      	movs	r1, r2
 8003082:	2003      	movs	r0, #3
 8003084:	f00c fb26 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
    if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8003088:	78a3      	ldrb	r3, [r4, #2]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d10c      	bne.n	80030a8 <OnTxData+0x74>
      APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800308e:	78e2      	ldrb	r2, [r4, #3]
 8003090:	4b0e      	ldr	r3, [pc, #56]	; (80030cc <OnTxData+0x98>)
 8003092:	2a00      	cmp	r2, #0
 8003094:	d100      	bne.n	8003098 <OnTxData+0x64>
 8003096:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <OnTxData+0x9c>)
 8003098:	2200      	movs	r2, #0
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	0011      	movs	r1, r2
 800309e:	2003      	movs	r0, #3
 80030a0:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <OnTxData+0xa0>)
 80030a2:	f00c fb17 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
}
 80030a6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 80030a8:	2200      	movs	r2, #0
 80030aa:	4b0b      	ldr	r3, [pc, #44]	; (80030d8 <OnTxData+0xa4>)
 80030ac:	0011      	movs	r1, r2
 80030ae:	2003      	movs	r0, #3
 80030b0:	f00c fb10 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
}
 80030b4:	e7f7      	b.n	80030a6 <OnTxData+0x72>
 80030b6:	46c0      	nop			; (mov r8, r8)
 80030b8:	50000400 	.word	0x50000400
 80030bc:	200001f8 	.word	0x200001f8
 80030c0:	080119e6 	.word	0x080119e6
 80030c4:	08011a17 	.word	0x08011a17
 80030c8:	08011a48 	.word	0x08011a48
 80030cc:	080119e2 	.word	0x080119e2
 80030d0:	080119e1 	.word	0x080119e1
 80030d4:	08011a55 	.word	0x08011a55
 80030d8:	08011a66 	.word	0x08011a66

080030dc <OnRxData>:
{
 80030dc:	b530      	push	{r4, r5, lr}
 80030de:	0004      	movs	r4, r0
 80030e0:	000d      	movs	r5, r1
 80030e2:	b087      	sub	sp, #28
  if ((appData != NULL) && (params != NULL))
 80030e4:	2800      	cmp	r0, #0
 80030e6:	d036      	beq.n	8003156 <OnRxData+0x7a>
 80030e8:	2900      	cmp	r1, #0
 80030ea:	d034      	beq.n	8003156 <OnRxData+0x7a>
    LED_On(LED_GPIO_PORT,LED_BLUE);
 80030ec:	2120      	movs	r1, #32
 80030ee:	482a      	ldr	r0, [pc, #168]	; (8003198 <OnRxData+0xbc>)
 80030f0:	f000 fba0 	bl	8003834 <Bsp_Led_On>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 80030f4:	2200      	movs	r2, #0
 80030f6:	4b29      	ldr	r3, [pc, #164]	; (800319c <OnRxData+0xc0>)
 80030f8:	0011      	movs	r1, r2
 80030fa:	2002      	movs	r0, #2
 80030fc:	f00c faea 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8003100:	2304      	movs	r3, #4
 8003102:	56eb      	ldrsb	r3, [r5, r3]
 8003104:	4a26      	ldr	r2, [pc, #152]	; (80031a0 <OnRxData+0xc4>)
 8003106:	9305      	str	r3, [sp, #20]
 8003108:	2303      	movs	r3, #3
 800310a:	56eb      	ldrsb	r3, [r5, r3]
 800310c:	2003      	movs	r0, #3
 800310e:	9304      	str	r3, [sp, #16]
 8003110:	2302      	movs	r3, #2
 8003112:	56eb      	ldrsb	r3, [r5, r3]
 8003114:	9303      	str	r3, [sp, #12]
 8003116:	7823      	ldrb	r3, [r4, #0]
 8003118:	9302      	str	r3, [sp, #8]
 800311a:	230c      	movs	r3, #12
 800311c:	56eb      	ldrsb	r3, [r5, r3]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	589b      	ldr	r3, [r3, r2]
 8003122:	2200      	movs	r2, #0
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	68ab      	ldr	r3, [r5, #8]
 8003128:	0011      	movs	r1, r2
 800312a:	9300      	str	r3, [sp, #0]
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <OnRxData+0xc8>)
 800312e:	f00c fad1 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
    switch (appData->Port)
 8003132:	7823      	ldrb	r3, [r4, #0]
 8003134:	2b02      	cmp	r3, #2
 8003136:	d010      	beq.n	800315a <OnRxData+0x7e>
 8003138:	2b03      	cmp	r3, #3
 800313a:	d10c      	bne.n	8003156 <OnRxData+0x7a>
        if (appData->BufferSize == 1)
 800313c:	7863      	ldrb	r3, [r4, #1]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d109      	bne.n	8003156 <OnRxData+0x7a>
          switch (appData->Buffer[0])
 8003142:	6863      	ldr	r3, [r4, #4]
 8003144:	7818      	ldrb	r0, [r3, #0]
 8003146:	2801      	cmp	r0, #1
 8003148:	d003      	beq.n	8003152 <OnRxData+0x76>
 800314a:	2802      	cmp	r0, #2
 800314c:	d001      	beq.n	8003152 <OnRxData+0x76>
 800314e:	2800      	cmp	r0, #0
 8003150:	d101      	bne.n	8003156 <OnRxData+0x7a>
              LmHandlerRequestClass(CLASS_C);
 8003152:	f005 fda5 	bl	8008ca0 <LmHandlerRequestClass>
}
 8003156:	b007      	add	sp, #28
 8003158:	bd30      	pop	{r4, r5, pc}
        if (appData->BufferSize == 1)
 800315a:	7862      	ldrb	r2, [r4, #1]
 800315c:	2a01      	cmp	r2, #1
 800315e:	d1fa      	bne.n	8003156 <OnRxData+0x7a>
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8003160:	6863      	ldr	r3, [r4, #4]
 8003162:	7819      	ldrb	r1, [r3, #0]
 8003164:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <OnRxData+0xcc>)
 8003166:	4011      	ands	r1, r2
 8003168:	7619      	strb	r1, [r3, #24]
          if (AppLedStateOn == RESET)
 800316a:	d109      	bne.n	8003180 <OnRxData+0xa4>
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 800316c:	000a      	movs	r2, r1
 800316e:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <OnRxData+0xd0>)
 8003170:	2003      	movs	r0, #3
 8003172:	f00c faaf 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
            LED_Off(LED_GPIO_PORT,LED_RED1);
 8003176:	2108      	movs	r1, #8
 8003178:	4807      	ldr	r0, [pc, #28]	; (8003198 <OnRxData+0xbc>)
 800317a:	f000 fb60 	bl	800383e <Bsp_Led_Off>
 800317e:	e7ea      	b.n	8003156 <OnRxData+0x7a>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8003180:	2200      	movs	r2, #0
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <OnRxData+0xd4>)
 8003184:	0011      	movs	r1, r2
 8003186:	2003      	movs	r0, #3
 8003188:	f00c faa4 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
            LED_On(LED_GPIO_PORT,LED_RED1);
 800318c:	2108      	movs	r1, #8
 800318e:	4802      	ldr	r0, [pc, #8]	; (8003198 <OnRxData+0xbc>)
 8003190:	f000 fb50 	bl	8003834 <Bsp_Led_On>
}
 8003194:	e7df      	b.n	8003156 <OnRxData+0x7a>
 8003196:	46c0      	nop			; (mov r8, r8)
 8003198:	50000400 	.word	0x50000400
 800319c:	08011a74 	.word	0x08011a74
 80031a0:	080111ac 	.word	0x080111ac
 80031a4:	08011aa5 	.word	0x08011aa5
 80031a8:	200001f8 	.word	0x200001f8
 80031ac:	08011aec 	.word	0x08011aec
 80031b0:	08011af6 	.word	0x08011af6

080031b4 <OnJoinRequest>:
{
 80031b4:	b570      	push	{r4, r5, r6, lr}
 80031b6:	1e05      	subs	r5, r0, #0
  if (joinParams != NULL)
 80031b8:	d01a      	beq.n	80031f0 <OnJoinRequest+0x3c>
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 80031ba:	2401      	movs	r4, #1
 80031bc:	5704      	ldrsb	r4, [r0, r4]
 80031be:	2c00      	cmp	r4, #0
 80031c0:	d119      	bne.n	80031f6 <OnJoinRequest+0x42>
      UTIL_TIMER_Stop(&JoinLedTimer);
 80031c2:	480f      	ldr	r0, [pc, #60]	; (8003200 <OnJoinRequest+0x4c>)
 80031c4:	3034      	adds	r0, #52	; 0x34
 80031c6:	f00c fd5b 	bl	800fc80 <UTIL_TIMER_Stop>
      LED_Off(LED_GPIO_PORT,LED_RED1) ;
 80031ca:	2108      	movs	r1, #8
 80031cc:	480d      	ldr	r0, [pc, #52]	; (8003204 <OnJoinRequest+0x50>)
 80031ce:	f000 fb36 	bl	800383e <Bsp_Led_Off>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 80031d2:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <OnJoinRequest+0x54>)
 80031d4:	0022      	movs	r2, r4
 80031d6:	0021      	movs	r1, r4
 80031d8:	2002      	movs	r0, #2
 80031da:	f00c fa7b 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 80031de:	78ab      	ldrb	r3, [r5, #2]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d106      	bne.n	80031f2 <OnJoinRequest+0x3e>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 80031e4:	4b09      	ldr	r3, [pc, #36]	; (800320c <OnJoinRequest+0x58>)
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 80031e6:	0022      	movs	r2, r4
 80031e8:	0021      	movs	r1, r4
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 80031ea:	2002      	movs	r0, #2
 80031ec:	f00c fa72 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
}
 80031f0:	bd70      	pop	{r4, r5, r6, pc}
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 80031f2:	4b07      	ldr	r3, [pc, #28]	; (8003210 <OnJoinRequest+0x5c>)
 80031f4:	e7f7      	b.n	80031e6 <OnJoinRequest+0x32>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 80031f6:	2200      	movs	r2, #0
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <OnJoinRequest+0x60>)
 80031fa:	0011      	movs	r1, r2
 80031fc:	e7f5      	b.n	80031ea <OnJoinRequest+0x36>
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	200001f8 	.word	0x200001f8
 8003204:	50000400 	.word	0x50000400
 8003208:	08011aff 	.word	0x08011aff
 800320c:	08011b14 	.word	0x08011b14
 8003210:	08011b31 	.word	0x08011b31
 8003214:	08011b4e 	.word	0x08011b4e

08003218 <LoRaWAN_Init>:
{
 8003218:	b5f0      	push	{r4, r5, r6, r7, lr}
  LED_Init(LED_GPIO_PORT,LED_BLUE);
 800321a:	4c3f      	ldr	r4, [pc, #252]	; (8003318 <LoRaWAN_Init+0x100>)
{
 800321c:	b085      	sub	sp, #20
  LED_Init(LED_GPIO_PORT,LED_BLUE);
 800321e:	0020      	movs	r0, r4
 8003220:	2120      	movs	r1, #32
 8003222:	f000 faed 	bl	8003800 <Bsp_Led_Init>
  LED_Init(LED_GPIO_PORT,LED_RED1);
 8003226:	0020      	movs	r0, r4
 8003228:	2108      	movs	r1, #8
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800322a:	2701      	movs	r7, #1
  LED_Init(LED_GPIO_PORT,LED_RED1);
 800322c:	f000 fae8 	bl	8003800 <Bsp_Led_Init>
  LED_Init(LED_GPIO_PORT,LED_RED2);
 8003230:	0020      	movs	r0, r4
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8003232:	2400      	movs	r4, #0
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8003234:	2502      	movs	r5, #2
  LED_Init(LED_GPIO_PORT,LED_RED2);
 8003236:	2110      	movs	r1, #16
 8003238:	f000 fae2 	bl	8003800 <Bsp_Led_Init>
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 800323c:	0022      	movs	r2, r4
 800323e:	0021      	movs	r1, r4
 8003240:	4b36      	ldr	r3, [pc, #216]	; (800331c <LoRaWAN_Init+0x104>)
 8003242:	9402      	str	r4, [sp, #8]
 8003244:	9401      	str	r4, [sp, #4]
 8003246:	9700      	str	r7, [sp, #0]
 8003248:	2002      	movs	r0, #2
 800324a:	f00c fa43 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 800324e:	0022      	movs	r2, r4
 8003250:	0021      	movs	r1, r4
 8003252:	0028      	movs	r0, r5
 8003254:	4b32      	ldr	r3, [pc, #200]	; (8003320 <LoRaWAN_Init+0x108>)
 8003256:	9702      	str	r7, [sp, #8]
 8003258:	9501      	str	r5, [sp, #4]
 800325a:	9500      	str	r5, [sp, #0]
 800325c:	f00c fa3a 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8003260:	0022      	movs	r2, r4
 8003262:	0021      	movs	r1, r4
 8003264:	0028      	movs	r0, r5
 8003266:	4b2f      	ldr	r3, [pc, #188]	; (8003324 <LoRaWAN_Init+0x10c>)
 8003268:	9702      	str	r7, [sp, #8]
 800326a:	9401      	str	r4, [sp, #4]
 800326c:	9400      	str	r4, [sp, #0]
 800326e:	f00c fa31 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8003272:	2101      	movs	r1, #1
 8003274:	0022      	movs	r2, r4
 8003276:	4b2c      	ldr	r3, [pc, #176]	; (8003328 <LoRaWAN_Init+0x110>)
 8003278:	9400      	str	r4, [sp, #0]
 800327a:	4249      	negs	r1, r1
 800327c:	482b      	ldr	r0, [pc, #172]	; (800332c <LoRaWAN_Init+0x114>)
 800327e:	4e2c      	ldr	r6, [pc, #176]	; (8003330 <LoRaWAN_Init+0x118>)
 8003280:	f00c fc9e 	bl	800fbc0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8003284:	2101      	movs	r1, #1
 8003286:	0022      	movs	r2, r4
 8003288:	4b2a      	ldr	r3, [pc, #168]	; (8003334 <LoRaWAN_Init+0x11c>)
 800328a:	9400      	str	r4, [sp, #0]
 800328c:	4249      	negs	r1, r1
 800328e:	482a      	ldr	r0, [pc, #168]	; (8003338 <LoRaWAN_Init+0x120>)
 8003290:	f00c fc96 	bl	800fbc0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8003294:	2101      	movs	r1, #1
 8003296:	4b29      	ldr	r3, [pc, #164]	; (800333c <LoRaWAN_Init+0x124>)
 8003298:	003a      	movs	r2, r7
 800329a:	9400      	str	r4, [sp, #0]
 800329c:	4249      	negs	r1, r1
 800329e:	4828      	ldr	r0, [pc, #160]	; (8003340 <LoRaWAN_Init+0x128>)
 80032a0:	f00c fc8e 	bl	800fbc0 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 80032a4:	21fa      	movs	r1, #250	; 0xfa
 80032a6:	4821      	ldr	r0, [pc, #132]	; (800332c <LoRaWAN_Init+0x114>)
 80032a8:	0049      	lsls	r1, r1, #1
 80032aa:	f00c fd7f 	bl	800fdac <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 80032ae:	21fa      	movs	r1, #250	; 0xfa
 80032b0:	4821      	ldr	r0, [pc, #132]	; (8003338 <LoRaWAN_Init+0x120>)
 80032b2:	0049      	lsls	r1, r1, #1
 80032b4:	f00c fd7a 	bl	800fdac <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 80032b8:	21fa      	movs	r1, #250	; 0xfa
 80032ba:	4821      	ldr	r0, [pc, #132]	; (8003340 <LoRaWAN_Init+0x128>)
 80032bc:	0049      	lsls	r1, r1, #1
 80032be:	f00c fd75 	bl	800fdac <UTIL_TIMER_SetPeriod>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 80032c2:	0021      	movs	r1, r4
 80032c4:	0038      	movs	r0, r7
 80032c6:	4a1f      	ldr	r2, [pc, #124]	; (8003344 <LoRaWAN_Init+0x12c>)
 80032c8:	f00c fbc8 	bl	800fa5c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 80032cc:	0021      	movs	r1, r4
 80032ce:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <LoRaWAN_Init+0x130>)
 80032d0:	0028      	movs	r0, r5
 80032d2:	f00c fbc3 	bl	800fa5c <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 80032d6:	f000 f83f 	bl	8003358 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks);
 80032da:	481c      	ldr	r0, [pc, #112]	; (800334c <LoRaWAN_Init+0x134>)
 80032dc:	3010      	adds	r0, #16
 80032de:	f005 fe19 	bl	8008f14 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 80032e2:	481a      	ldr	r0, [pc, #104]	; (800334c <LoRaWAN_Init+0x134>)
 80032e4:	3008      	adds	r0, #8
 80032e6:	f005 fbff 	bl	8008ae8 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 80032ea:	4815      	ldr	r0, [pc, #84]	; (8003340 <LoRaWAN_Init+0x128>)
 80032ec:	f00c fd1c 	bl	800fd28 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType);
 80032f0:	0028      	movs	r0, r5
 80032f2:	f005 fd27 	bl	8008d44 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnTxTimerEvent, NULL);
 80032f6:	2101      	movs	r1, #1
 80032f8:	003a      	movs	r2, r7
 80032fa:	4b15      	ldr	r3, [pc, #84]	; (8003350 <LoRaWAN_Init+0x138>)
 80032fc:	0030      	movs	r0, r6
 80032fe:	9400      	str	r4, [sp, #0]
 8003300:	4249      	negs	r1, r1
 8003302:	f00c fc5d 	bl	800fbc0 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8003306:	4913      	ldr	r1, [pc, #76]	; (8003354 <LoRaWAN_Init+0x13c>)
 8003308:	0030      	movs	r0, r6
 800330a:	f00c fd4f 	bl	800fdac <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800330e:	0030      	movs	r0, r6
 8003310:	f00c fd0a 	bl	800fd28 <UTIL_TIMER_Start>
}
 8003314:	b005      	add	sp, #20
 8003316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003318:	50000400 	.word	0x50000400
 800331c:	08011b67 	.word	0x08011b67
 8003320:	08011b87 	.word	0x08011b87
 8003324:	08011ba7 	.word	0x08011ba7
 8003328:	08002f0d 	.word	0x08002f0d
 800332c:	20000214 	.word	0x20000214
 8003330:	200001f8 	.word	0x200001f8
 8003334:	08002efd 	.word	0x08002efd
 8003338:	20000244 	.word	0x20000244
 800333c:	08003025 	.word	0x08003025
 8003340:	2000022c 	.word	0x2000022c
 8003344:	08008c3d 	.word	0x08008c3d
 8003348:	08002f1d 	.word	0x08002f1d
 800334c:	20000000 	.word	0x20000000
 8003350:	08002ed9 	.word	0x08002ed9
 8003354:	00002710 	.word	0x00002710

08003358 <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 8003358:	2200      	movs	r2, #0
 800335a:	4b04      	ldr	r3, [pc, #16]	; (800336c <LoraInfo_Init+0x14>)
 800335c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800335e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 8003360:	3220      	adds	r2, #32
 8003362:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8003364:	3a1d      	subs	r2, #29
 8003366:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8003368:	4770      	bx	lr
 800336a:	46c0      	nop			; (mov r8, r8)
 800336c:	20000350 	.word	0x20000350

08003370 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8003370:	4800      	ldr	r0, [pc, #0]	; (8003374 <LoraInfo_GetPtr+0x4>)
 8003372:	4770      	bx	lr
 8003374:	20000350 	.word	0x20000350

08003378 <MX_ADC_Init>:
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
  hadc1.Init.LowPowerAutoWait      = DISABLE;
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8003378:	2107      	movs	r1, #7
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 800337a:	2201      	movs	r2, #1
{
 800337c:	b510      	push	{r4, lr}
  hadc1.Init.OversamplingMode      = DISABLE;
 800337e:	4c13      	ldr	r4, [pc, #76]	; (80033cc <MX_ADC_Init+0x54>)
 8003380:	2300      	movs	r3, #0
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 8003382:	63a1      	str	r1, [r4, #56]	; 0x38
  hadc1.Instance  = ADC1;
 8003384:	4912      	ldr	r1, [pc, #72]	; (80033d0 <MX_ADC_Init+0x58>)
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 8003386:	6362      	str	r2, [r4, #52]	; 0x34
  hadc1.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 8003388:	6122      	str	r2, [r4, #16]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ContinuousConvMode    = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800338a:	3203      	adds	r2, #3
  hadc1.Instance  = ADC1;
 800338c:	6021      	str	r1, [r4, #0]
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 800338e:	6162      	str	r2, [r4, #20]
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003390:	2180      	movs	r1, #128	; 0x80
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003392:	0022      	movs	r2, r4
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003394:	0609      	lsls	r1, r1, #24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003396:	322c      	adds	r2, #44	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003398:	0020      	movs	r0, r4
  hadc1.Init.ContinuousConvMode    = DISABLE;
 800339a:	8423      	strh	r3, [r4, #32]
  hadc1.Init.OversamplingMode      = DISABLE;
 800339c:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800339e:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 80033a0:	6061      	str	r1, [r4, #4]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 80033a2:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 80033a4:	60e3      	str	r3, [r4, #12]
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 80033a6:	61a3      	str	r3, [r4, #24]
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
 80033a8:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80033aa:	7013      	strb	r3, [r2, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80033ac:	f001 fc68 	bl	8004c80 <HAL_ADC_Init>
 80033b0:	2800      	cmp	r0, #0
 80033b2:	d001      	beq.n	80033b8 <MX_ADC_Init+0x40>
  {
    Error_Handler();
 80033b4:	f000 fac2 	bl	800393c <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80033b8:	2100      	movs	r1, #0
 80033ba:	0020      	movs	r0, r4
 80033bc:	f001 fe8e 	bl	80050dc <HAL_ADCEx_Calibration_Start>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	d001      	beq.n	80033c8 <MX_ADC_Init+0x50>
  {
    Error_Handler();
 80033c4:	f000 faba 	bl	800393c <Error_Handler>
  }
}
 80033c8:	bd10      	pop	{r4, pc}
 80033ca:	46c0      	nop			; (mov r8, r8)
 80033cc:	20001228 	.word	0x20001228
 80033d0:	40012400 	.word	0x40012400

080033d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 80033d4:	4b05      	ldr	r3, [pc, #20]	; (80033ec <HAL_ADC_MspInit+0x18>)
 80033d6:	6802      	ldr	r2, [r0, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d105      	bne.n	80033e8 <HAL_ADC_MspInit+0x14>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80033dc:	2380      	movs	r3, #128	; 0x80
 80033de:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <HAL_ADC_MspInit+0x1c>)
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80033e4:	430b      	orrs	r3, r1
 80033e6:	6353      	str	r3, [r2, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */

    /* USER CODE END ADC_MspInit 1 */
  }
}
 80033e8:	4770      	bx	lr
 80033ea:	46c0      	nop			; (mov r8, r8)
 80033ec:	40012400 	.word	0x40012400
 80033f0:	40021000 	.word	0x40021000

080033f4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 80033f4:	4b08      	ldr	r3, [pc, #32]	; (8003418 <HAL_ADC_MspDeInit+0x24>)
 80033f6:	6802      	ldr	r2, [r0, #0]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d10c      	bne.n	8003416 <HAL_ADC_MspDeInit+0x22>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 80033fc:	2280      	movs	r2, #128	; 0x80
 80033fe:	4b07      	ldr	r3, [pc, #28]	; (800341c <HAL_ADC_MspDeInit+0x28>)
 8003400:	0092      	lsls	r2, r2, #2
 8003402:	6a59      	ldr	r1, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 8003404:	4806      	ldr	r0, [pc, #24]	; (8003420 <HAL_ADC_MspDeInit+0x2c>)
    __HAL_RCC_ADC1_FORCE_RESET();
 8003406:	430a      	orrs	r2, r1
 8003408:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 800340a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800340c:	4001      	ands	r1, r0
 800340e:	6259      	str	r1, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8003410:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003412:	4002      	ands	r2, r0
 8003414:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8003416:	4770      	bx	lr
 8003418:	40012400 	.word	0x40012400
 800341c:	40021000 	.word	0x40021000
 8003420:	fffffdff 	.word	0xfffffdff

08003424 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8003424:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8003426:	2208      	movs	r2, #8
 8003428:	2100      	movs	r1, #0
{
 800342a:	0006      	movs	r6, r0
  ADC_ChannelConfTypeDef sConfig = {0};
 800342c:	4668      	mov	r0, sp
 800342e:	f00c fe80 	bl	8010132 <memset>

  MX_ADC_Init();
 8003432:	f7ff ffa1 	bl	8003378 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8003436:	2308      	movs	r3, #8
 8003438:	491f      	ldr	r1, [pc, #124]	; (80034b8 <ADC_ReadChannels+0x94>)
 800343a:	684a      	ldr	r2, [r1, #4]
 800343c:	421a      	tst	r2, r3
 800343e:	d0fc      	beq.n	800343a <ADC_ReadChannels+0x16>

  __HAL_RCC_ADC1_CLK_ENABLE();
 8003440:	2380      	movs	r3, #128	; 0x80
 8003442:	4d1e      	ldr	r5, [pc, #120]	; (80034bc <ADC_ReadChannels+0x98>)

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003444:	4c1e      	ldr	r4, [pc, #120]	; (80034c0 <ADC_ReadChannels+0x9c>)
  __HAL_RCC_ADC1_CLK_ENABLE();
 8003446:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	4313      	orrs	r3, r2
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800344c:	2100      	movs	r1, #0
  __HAL_RCC_ADC1_CLK_ENABLE();
 800344e:	636b      	str	r3, [r5, #52]	; 0x34
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8003450:	0020      	movs	r0, r4
 8003452:	f001 fe43 	bl	80050dc <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 8003456:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <ADC_ReadChannels+0xa0>)
  sConfig.Rank = ADC_RANK_NONE;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8003458:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_MASK;
 800345a:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_NONE;
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <ADC_ReadChannels+0xa4>)
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 800345e:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_NONE;
 8003460:	9301      	str	r3, [sp, #4]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8003462:	f001 fde7 	bl	8005034 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003466:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003468:	4669      	mov	r1, sp
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800346a:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800346c:	0020      	movs	r0, r4
  sConfig.Channel = channel;
 800346e:	9600      	str	r6, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003470:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003472:	f001 fddf 	bl	8005034 <HAL_ADC_ConfigChannel>
 8003476:	2800      	cmp	r0, #0
 8003478:	d001      	beq.n	800347e <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
 800347a:	f000 fa5f 	bl	800393c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 800347e:	0020      	movs	r0, r4
 8003480:	f001 fd2c 	bl	8004edc <HAL_ADC_Start>
 8003484:	2800      	cmp	r0, #0
 8003486:	d001      	beq.n	800348c <ADC_ReadChannels+0x68>
  {
    /* Start Error */
    Error_Handler();
 8003488:	f000 fa58 	bl	800393c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800348c:	2101      	movs	r1, #1
 800348e:	0020      	movs	r0, r4
 8003490:	4249      	negs	r1, r1
 8003492:	f001 fd6d 	bl	8004f70 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 8003496:	0020      	movs	r0, r4
 8003498:	f001 fd4c 	bl	8004f34 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 800349c:	0020      	movs	r0, r4
 800349e:	f001 fdc5 	bl	800502c <HAL_ADC_GetValue>
 80034a2:	0006      	movs	r6, r0

  HAL_ADC_DeInit(&hadc1);
 80034a4:	0020      	movs	r0, r4
 80034a6:	f001 fcc5 	bl	8004e34 <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 80034aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80034ac:	4a07      	ldr	r2, [pc, #28]	; (80034cc <ADC_ReadChannels+0xa8>)

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80034ae:	0030      	movs	r0, r6
  __HAL_RCC_ADC1_CLK_DISABLE();
 80034b0:	4013      	ands	r3, r2
 80034b2:	636b      	str	r3, [r5, #52]	; 0x34
}
 80034b4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80034b6:	46c0      	nop			; (mov r8, r8)
 80034b8:	40007000 	.word	0x40007000
 80034bc:	40021000 	.word	0x40021000
 80034c0:	20001228 	.word	0x20001228
 80034c4:	0007ffff 	.word	0x0007ffff
 80034c8:	00001001 	.word	0x00001001
 80034cc:	fffffdff 	.word	0xfffffdff

080034d0 <SYS_InitMeasurement>:
  hadc1.Instance = ADC1;
 80034d0:	4b01      	ldr	r3, [pc, #4]	; (80034d8 <SYS_InitMeasurement+0x8>)
 80034d2:	4a02      	ldr	r2, [pc, #8]	; (80034dc <SYS_InitMeasurement+0xc>)
 80034d4:	601a      	str	r2, [r3, #0]
}
 80034d6:	4770      	bx	lr
 80034d8:	20001228 	.word	0x20001228
 80034dc:	40012400 	.word	0x40012400

080034e0 <SYS_GetBatteryLevel>:
{
 80034e0:	b510      	push	{r4, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80034e2:	4807      	ldr	r0, [pc, #28]	; (8003500 <SYS_GetBatteryLevel+0x20>)
 80034e4:	f7ff ff9e 	bl	8003424 <ADC_ReadChannels>
 80034e8:	0001      	movs	r1, r0
    batteryLevelmV = 0;
 80034ea:	2000      	movs	r0, #0
  if (measuredLevel == 0)
 80034ec:	4281      	cmp	r1, r0
 80034ee:	d006      	beq.n	80034fe <SYS_GetBatteryLevel+0x1e>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 80034f0:	4b04      	ldr	r3, [pc, #16]	; (8003504 <SYS_GetBatteryLevel+0x24>)
 80034f2:	4805      	ldr	r0, [pc, #20]	; (8003508 <SYS_GetBatteryLevel+0x28>)
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	4358      	muls	r0, r3
 80034f8:	f7fc fe36 	bl	8000168 <__udivsi3>
 80034fc:	b280      	uxth	r0, r0
}
 80034fe:	bd10      	pop	{r4, pc}
 8003500:	44020000 	.word	0x44020000
 8003504:	1ff80078 	.word	0x1ff80078
 8003508:	00000bb8 	.word	0x00000bb8

0800350c <SYS_GetTemperatureLevel>:
{
 800350c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800350e:	f7ff ffe7 	bl	80034e0 <SYS_GetBatteryLevel>
 8003512:	0005      	movs	r5, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8003514:	480f      	ldr	r0, [pc, #60]	; (8003554 <SYS_GetTemperatureLevel+0x48>)
 8003516:	f7ff ff85 	bl	8003424 <ADC_ReadChannels>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 800351a:	4b0f      	ldr	r3, [pc, #60]	; (8003558 <SYS_GetTemperatureLevel+0x4c>)
 800351c:	4368      	muls	r0, r5
 800351e:	490f      	ldr	r1, [pc, #60]	; (800355c <SYS_GetTemperatureLevel+0x50>)
 8003520:	881c      	ldrh	r4, [r3, #0]
 8003522:	f7fc fe21 	bl	8000168 <__udivsi3>
 8003526:	1b03      	subs	r3, r0, r4
 8003528:	2050      	movs	r0, #80	; 0x50
 800352a:	4358      	muls	r0, r3
 800352c:	4b0c      	ldr	r3, [pc, #48]	; (8003560 <SYS_GetTemperatureLevel+0x54>)
 800352e:	0200      	lsls	r0, r0, #8
 8003530:	8819      	ldrh	r1, [r3, #0]
 8003532:	1b09      	subs	r1, r1, r4
 8003534:	f7fc fea2 	bl	800027c <__divsi3>
 8003538:	23f0      	movs	r3, #240	; 0xf0
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 800353a:	2201      	movs	r2, #1
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 800353c:	015b      	lsls	r3, r3, #5
 800353e:	18c0      	adds	r0, r0, r3
 8003540:	b204      	sxth	r4, r0
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 8003542:	1223      	asrs	r3, r4, #8
 8003544:	9300      	str	r3, [sp, #0]
 8003546:	2100      	movs	r1, #0
 8003548:	0010      	movs	r0, r2
 800354a:	4b06      	ldr	r3, [pc, #24]	; (8003564 <SYS_GetTemperatureLevel+0x58>)
 800354c:	f00c f8c2 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
}
 8003550:	0020      	movs	r0, r4
 8003552:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8003554:	48040000 	.word	0x48040000
 8003558:	1ff8007a 	.word	0x1ff8007a
 800355c:	00000bb8 	.word	0x00000bb8
 8003560:	1ff8007e 	.word	0x1ff8007e
 8003564:	08011bf9 	.word	0x08011bf9

08003568 <on_button_long_press_timeout_event>:

static bool button_state = SET;

/* Functions Definition ------------------------------------------------------*/
static void on_button_long_press_timeout_event(void* context)
{
 8003568:	b513      	push	{r0, r1, r4, lr}
    UTIL_TIMER_Stop(&button_long_press_timer);
 800356a:	4c07      	ldr	r4, [pc, #28]	; (8003588 <on_button_long_press_timeout_event+0x20>)
 800356c:	0020      	movs	r0, r4
 800356e:	f00c fb87 	bl	800fc80 <UTIL_TIMER_Stop>
    presstimes++;
 8003572:	69a3      	ldr	r3, [r4, #24]
    APP_LOG(TS_ON, VLEVEL_M, "Press time = %d\r\n",presstimes);
 8003574:	2201      	movs	r2, #1
    presstimes++;
 8003576:	3301      	adds	r3, #1
 8003578:	61a3      	str	r3, [r4, #24]
    APP_LOG(TS_ON, VLEVEL_M, "Press time = %d\r\n",presstimes);
 800357a:	2100      	movs	r1, #0
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	2002      	movs	r0, #2
 8003580:	4b02      	ldr	r3, [pc, #8]	; (800358c <on_button_long_press_timeout_event+0x24>)
 8003582:	f00c f8a7 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
}
 8003586:	bd13      	pop	{r0, r1, r4, pc}
 8003588:	20000360 	.word	0x20000360
 800358c:	08011c04 	.word	0x08011c04

08003590 <MX_BUTTON_Init>:

void MX_BUTTON_Init(void)
{
 8003590:	b570      	push	{r4, r5, r6, lr}
    presstimes = 0;
 8003592:	2600      	movs	r6, #0
    
    GPIO_InitTypeDef  GPIO_InitStruct;
    
    /*##-1- Enable peripherals and GPIO Clocks #################################*/
    __GPIOA_CLK_ENABLE();
 8003594:	2401      	movs	r4, #1
    presstimes = 0;
 8003596:	4d16      	ldr	r5, [pc, #88]	; (80035f0 <MX_BUTTON_Init+0x60>)
    __GPIOA_CLK_ENABLE();
 8003598:	4b16      	ldr	r3, [pc, #88]	; (80035f4 <MX_BUTTON_Init+0x64>)
    presstimes = 0;
 800359a:	61ae      	str	r6, [r5, #24]
    __GPIOA_CLK_ENABLE();
 800359c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
{
 800359e:	b088      	sub	sp, #32
    __GPIOA_CLK_ENABLE();
 80035a0:	4322      	orrs	r2, r4
 80035a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80035a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pin       = GPIO_PIN_7;
    GPIO_InitStruct.Mode      = GPIO_MODE_IT_RISING_FALLING;
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
    
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035a6:	20a0      	movs	r0, #160	; 0xa0
    __GPIOA_CLK_ENABLE();
 80035a8:	4023      	ands	r3, r4
 80035aa:	9302      	str	r3, [sp, #8]
 80035ac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin       = GPIO_PIN_7;
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode      = GPIO_MODE_IT_RISING_FALLING;
 80035b2:	4b11      	ldr	r3, [pc, #68]	; (80035f8 <MX_BUTTON_Init+0x68>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035b4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode      = GPIO_MODE_IT_RISING_FALLING;
 80035b6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80035b8:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ba:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80035bc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80035be:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035c0:	f001 ff86 	bl	80054d0 <HAL_GPIO_Init>

    /*##-3- Configure the NVIC ########################################*/
    HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 1);
 80035c4:	0022      	movs	r2, r4
 80035c6:	2103      	movs	r1, #3
 80035c8:	2007      	movs	r0, #7
 80035ca:	f001 fdd7 	bl	800517c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80035ce:	2007      	movs	r0, #7
 80035d0:	f001 fdfe 	bl	80051d0 <HAL_NVIC_EnableIRQ>
    UTIL_TIMER_Create(&button_long_press_timer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, on_button_long_press_timeout_event, NULL);
 80035d4:	0032      	movs	r2, r6
 80035d6:	4b09      	ldr	r3, [pc, #36]	; (80035fc <MX_BUTTON_Init+0x6c>)
 80035d8:	4261      	negs	r1, r4
 80035da:	0028      	movs	r0, r5
 80035dc:	9600      	str	r6, [sp, #0]
 80035de:	f00c faef 	bl	800fbc0 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&button_long_press_timer, FACTORY_NEW_BUTTON_TIMEOUT);
 80035e2:	2132      	movs	r1, #50	; 0x32
 80035e4:	0028      	movs	r0, r5
 80035e6:	f00c fbe1 	bl	800fdac <UTIL_TIMER_SetPeriod>
}
 80035ea:	b008      	add	sp, #32
 80035ec:	bd70      	pop	{r4, r5, r6, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	20000360 	.word	0x20000360
 80035f4:	40021000 	.word	0x40021000
 80035f8:	10310000 	.word	0x10310000
 80035fc:	08003569 	.word	0x08003569

08003600 <button_interrupt_handler>:

void button_interrupt_handler(void)
{
    /* GPIO7 will trigger interuppt twice on reset */
    /* EXTI line interrupt detected */
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET)
 8003600:	2180      	movs	r1, #128	; 0x80
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <button_interrupt_handler+0x44>)
{
 8003604:	b510      	push	{r4, lr}
    if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET)
 8003606:	695a      	ldr	r2, [r3, #20]
 8003608:	420a      	tst	r2, r1
 800360a:	d011      	beq.n	8003630 <button_interrupt_handler+0x30>
    {
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET && button_state ==GPIO_PIN_SET)
 800360c:	20a0      	movs	r0, #160	; 0xa0
        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 800360e:	6159      	str	r1, [r3, #20]
        if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET && button_state ==GPIO_PIN_SET)
 8003610:	05c0      	lsls	r0, r0, #23
 8003612:	f002 f89d 	bl	8005750 <HAL_GPIO_ReadPin>
 8003616:	4c0c      	ldr	r4, [pc, #48]	; (8003648 <button_interrupt_handler+0x48>)
 8003618:	2800      	cmp	r0, #0
 800361a:	d10a      	bne.n	8003632 <button_interrupt_handler+0x32>
 800361c:	7823      	ldrb	r3, [r4, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d007      	beq.n	8003632 <button_interrupt_handler+0x32>
        {
            UTIL_TIMER_Stop(&button_long_press_timer);
 8003622:	4c0a      	ldr	r4, [pc, #40]	; (800364c <button_interrupt_handler+0x4c>)
 8003624:	0020      	movs	r0, r4
 8003626:	f00c fb2b 	bl	800fc80 <UTIL_TIMER_Stop>
            UTIL_TIMER_Start(&button_long_press_timer);
 800362a:	0020      	movs	r0, r4
 800362c:	f00c fb7c 	bl	800fd28 <UTIL_TIMER_Start>
        {
            button_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
        }

    }
}
 8003630:	bd10      	pop	{r4, pc}
            button_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8003632:	20a0      	movs	r0, #160	; 0xa0
 8003634:	2180      	movs	r1, #128	; 0x80
 8003636:	05c0      	lsls	r0, r0, #23
 8003638:	f002 f88a 	bl	8005750 <HAL_GPIO_ReadPin>
 800363c:	1e43      	subs	r3, r0, #1
 800363e:	4198      	sbcs	r0, r3
 8003640:	7020      	strb	r0, [r4, #0]
}
 8003642:	e7f5      	b.n	8003630 <button_interrupt_handler+0x30>
 8003644:	40010400 	.word	0x40010400
 8003648:	20000030 	.word	0x20000030
 800364c:	20000360 	.word	0x20000360

08003650 <MX_I2C1_Init>:

HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef *hi2c)
{
 8003650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003652:	0004      	movs	r4, r0
  HAL_StatusTypeDef ret = HAL_OK;
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003654:	2002      	movs	r0, #2
 8003656:	4b1e      	ldr	r3, [pc, #120]	; (80036d0 <MX_I2C1_Init+0x80>)
{
 8003658:	b085      	sub	sp, #20
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800365a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();

  hi2c->Instance = I2C1;
  hi2c->Init.Timing = 0x40000A0B;
  hi2c->Init.OwnAddress1 = 0;
 800365c:	2600      	movs	r6, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800365e:	4301      	orrs	r1, r0
 8003660:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003664:	2701      	movs	r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003666:	4002      	ands	r2, r0
 8003668:	9201      	str	r2, [sp, #4]
 800366a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800366c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800366e:	1800      	adds	r0, r0, r0
 8003670:	4301      	orrs	r1, r0
 8003672:	62d9      	str	r1, [r3, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003674:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003678:	4002      	ands	r2, r0
 800367a:	9202      	str	r2, [sp, #8]
 800367c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800367e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c->Init.OwnAddress2 = 0;
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 8003680:	0020      	movs	r0, r4
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003682:	430a      	orrs	r2, r1
 8003684:	62da      	str	r2, [r3, #44]	; 0x2c
 8003686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  hi2c->Init.OwnAddress1 = 0;
 8003688:	60a6      	str	r6, [r4, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800368a:	400b      	ands	r3, r1
 800368c:	9303      	str	r3, [sp, #12]
 800368e:	9b03      	ldr	r3, [sp, #12]
  hi2c->Instance = I2C1;
 8003690:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <MX_I2C1_Init+0x84>)
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003692:	60e7      	str	r7, [r4, #12]
  hi2c->Instance = I2C1;
 8003694:	6023      	str	r3, [r4, #0]
  hi2c->Init.Timing = 0x40000A0B;
 8003696:	4b10      	ldr	r3, [pc, #64]	; (80036d8 <MX_I2C1_Init+0x88>)
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003698:	6126      	str	r6, [r4, #16]
  hi2c->Init.Timing = 0x40000A0B;
 800369a:	6063      	str	r3, [r4, #4]
  hi2c->Init.OwnAddress2 = 0;
 800369c:	6166      	str	r6, [r4, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800369e:	61a6      	str	r6, [r4, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036a0:	61e6      	str	r6, [r4, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036a2:	6226      	str	r6, [r4, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80036a4:	f002 f982 	bl	80059ac <HAL_I2C_Init>
  {
    ret = HAL_ERROR;
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036a8:	0031      	movs	r1, r6
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80036aa:	0005      	movs	r5, r0
  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036ac:	0020      	movs	r0, r4
 80036ae:	f002 fb9b 	bl	8005de8 <HAL_I2CEx_ConfigAnalogFilter>
 80036b2:	4305      	orrs	r5, r0
 80036b4:	b2ed      	uxtb	r5, r5
 80036b6:	1e68      	subs	r0, r5, #1
 80036b8:	4185      	sbcs	r5, r0
  {
    ret = HAL_ERROR;
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80036ba:	0031      	movs	r1, r6
 80036bc:	0020      	movs	r0, r4
    ret = HAL_ERROR;
 80036be:	b2ed      	uxtb	r5, r5
  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 80036c0:	f002 fbb8 	bl	8005e34 <HAL_I2CEx_ConfigDigitalFilter>
 80036c4:	42b0      	cmp	r0, r6
 80036c6:	d000      	beq.n	80036ca <MX_I2C1_Init+0x7a>
  {
    ret = HAL_ERROR;
 80036c8:	003d      	movs	r5, r7
  }

  return ret;
}
 80036ca:	0028      	movs	r0, r5
 80036cc:	b005      	add	sp, #20
 80036ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	40005400 	.word	0x40005400
 80036d8:	40000a0b 	.word	0x40000a0b

080036dc <HAL_I2C_MspInit>:
extern void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80036dc:	b510      	push	{r4, lr}
 80036de:	0004      	movs	r4, r0
 80036e0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e2:	2214      	movs	r2, #20
 80036e4:	2100      	movs	r1, #0
 80036e6:	a801      	add	r0, sp, #4
 80036e8:	f00c fd23 	bl	8010132 <memset>
  if(i2cHandle->Instance==I2C1)
 80036ec:	4b11      	ldr	r3, [pc, #68]	; (8003734 <HAL_I2C_MspInit+0x58>)
 80036ee:	6822      	ldr	r2, [r4, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d11c      	bne.n	800372e <HAL_I2C_MspInit+0x52>
  {
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036f4:	2002      	movs	r0, #2
 80036f6:	4b10      	ldr	r3, [pc, #64]	; (8003738 <HAL_I2C_MspInit+0x5c>)
 80036f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036fa:	4301      	orrs	r1, r0
 80036fc:	62d9      	str	r1, [r3, #44]	; 0x2c
 80036fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003700:	4002      	ands	r2, r0
 8003702:	9200      	str	r2, [sp, #0]
 8003704:	9a00      	ldr	r2, [sp, #0]
    /**I2C1 GPIO Configuration    
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL 
    */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003706:	2280      	movs	r2, #128	; 0x80
 8003708:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800370a:	0392      	lsls	r2, r2, #14
 800370c:	430a      	orrs	r2, r1
 800370e:	639a      	str	r2, [r3, #56]	; 0x38
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8003710:	23c0      	movs	r3, #192	; 0xc0
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003716:	2312      	movs	r3, #18
 8003718:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800371a:	3b11      	subs	r3, #17
 800371c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800371e:	181b      	adds	r3, r3, r0
 8003720:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003722:	4806      	ldr	r0, [pc, #24]	; (800373c <HAL_I2C_MspInit+0x60>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003724:	3301      	adds	r3, #1
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003726:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003728:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372a:	f001 fed1 	bl	80054d0 <HAL_GPIO_Init>
  }
}
 800372e:	b006      	add	sp, #24
 8003730:	bd10      	pop	{r4, pc}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	40005400 	.word	0x40005400
 8003738:	40021000 	.word	0x40021000
 800373c:	50000400 	.word	0x50000400

08003740 <BH1750_Send_Cmd>:

  }
} 

uint8_t BH1750_Send_Cmd(uint8_t cmd)
{
 8003740:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003742:	220f      	movs	r2, #15
    return HAL_I2C_Master_Transmit(&hi2c, BH1750_ADDR_WRITE, (uint8_t*)&cmd, 1, 0xFFFF);
 8003744:	4b05      	ldr	r3, [pc, #20]	; (800375c <BH1750_Send_Cmd+0x1c>)
{
 8003746:	446a      	add	r2, sp
 8003748:	7010      	strb	r0, [r2, #0]
    return HAL_I2C_Master_Transmit(&hi2c, BH1750_ADDR_WRITE, (uint8_t*)&cmd, 1, 0xFFFF);
 800374a:	2146      	movs	r1, #70	; 0x46
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	4804      	ldr	r0, [pc, #16]	; (8003760 <BH1750_Send_Cmd+0x20>)
 8003750:	2301      	movs	r3, #1
 8003752:	f002 f981 	bl	8005a58 <HAL_I2C_Master_Transmit>
}
 8003756:	b005      	add	sp, #20
 8003758:	bd00      	pop	{pc}
 800375a:	46c0      	nop			; (mov r8, r8)
 800375c:	0000ffff 	.word	0x0000ffff
 8003760:	200012cc 	.word	0x200012cc

08003764 <BH1750_Read_Dat>:

uint8_t BH1750_Read_Dat(uint8_t* dat)
{
 8003764:	b507      	push	{r0, r1, r2, lr}
    return HAL_I2C_Master_Receive(&hi2c, BH1750_ADDR_READ, dat, 2, 0xFFFF);
 8003766:	4b04      	ldr	r3, [pc, #16]	; (8003778 <BH1750_Read_Dat+0x14>)
{
 8003768:	0002      	movs	r2, r0
    return HAL_I2C_Master_Receive(&hi2c, BH1750_ADDR_READ, dat, 2, 0xFFFF);
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	2147      	movs	r1, #71	; 0x47
 800376e:	2302      	movs	r3, #2
 8003770:	4802      	ldr	r0, [pc, #8]	; (800377c <BH1750_Read_Dat+0x18>)
 8003772:	f002 fa03 	bl	8005b7c <HAL_I2C_Master_Receive>
}
 8003776:	bd0e      	pop	{r1, r2, r3, pc}
 8003778:	0000ffff 	.word	0x0000ffff
 800377c:	200012cc 	.word	0x200012cc

08003780 <BH1750_Dat_To_Lux>:
uint16_t BH1750_Dat_To_Lux(uint8_t* dat)
{
 8003780:	0003      	movs	r3, r0
 8003782:	b510      	push	{r4, lr}
    uint16_t lux = 0;
    lux = dat[0];
 8003784:	7800      	ldrb	r0, [r0, #0]
    lux <<= 8;
    lux += dat[1];
 8003786:	785b      	ldrb	r3, [r3, #1]
    lux <<= 8;
 8003788:	0200      	lsls	r0, r0, #8
    lux += dat[1];
 800378a:	18c0      	adds	r0, r0, r3
    lux = (int)(lux / 1.2);
 800378c:	b280      	uxth	r0, r0
 800378e:	f7ff facf 	bl	8002d30 <__aeabi_i2d>
 8003792:	4a04      	ldr	r2, [pc, #16]	; (80037a4 <BH1750_Dat_To_Lux+0x24>)
 8003794:	4b04      	ldr	r3, [pc, #16]	; (80037a8 <BH1750_Dat_To_Lux+0x28>)
 8003796:	f7fe f891 	bl	80018bc <__aeabi_ddiv>
 800379a:	f7ff fa93 	bl	8002cc4 <__aeabi_d2iz>

    return lux;
 800379e:	b280      	uxth	r0, r0
}
 80037a0:	bd10      	pop	{r4, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	33333333 	.word	0x33333333
 80037a8:	3ff33333 	.word	0x3ff33333

080037ac <GetLightLevel>:
uint8_t GetLightLevel(void)
{
    uint8_t dat[2] = {0};
 80037ac:	2300      	movs	r3, #0
{
 80037ae:	b530      	push	{r4, r5, lr}
 80037b0:	b085      	sub	sp, #20
    BH1750_Send_Cmd(POWER_ON_CMD);
 80037b2:	2001      	movs	r0, #1
    uint8_t dat[2] = {0};
 80037b4:	ac03      	add	r4, sp, #12
 80037b6:	8023      	strh	r3, [r4, #0]
    BH1750_Send_Cmd(POWER_ON_CMD);
 80037b8:	f7ff ffc2 	bl	8003740 <BH1750_Send_Cmd>
    if(HAL_OK == BH1750_Send_Cmd(CONT_H_MODE))
 80037bc:	2010      	movs	r0, #16
 80037be:	f7ff ffbf 	bl	8003740 <BH1750_Send_Cmd>
 80037c2:	2800      	cmp	r0, #0
 80037c4:	d002      	beq.n	80037cc <GetLightLevel+0x20>
            
            APP_LOG(TS_ON, VLEVEL_M, "Light= %d\r\n", BH1750_Dat_To_Lux(dat));
            return BH1750_Dat_To_Lux(dat);
        }
    }
    return 0;
 80037c6:	2000      	movs	r0, #0
}
 80037c8:	b005      	add	sp, #20
 80037ca:	bd30      	pop	{r4, r5, pc}
        HAL_Delay(200);
 80037cc:	20c8      	movs	r0, #200	; 0xc8
 80037ce:	f000 fca9 	bl	8004124 <HAL_Delay>
        if(HAL_OK == BH1750_Read_Dat(dat))
 80037d2:	0020      	movs	r0, r4
 80037d4:	f7ff ffc6 	bl	8003764 <BH1750_Read_Dat>
 80037d8:	1e05      	subs	r5, r0, #0
 80037da:	d1f4      	bne.n	80037c6 <GetLightLevel+0x1a>
            APP_LOG(TS_ON, VLEVEL_M, "Light= %d\r\n", BH1750_Dat_To_Lux(dat));
 80037dc:	0020      	movs	r0, r4
 80037de:	f7ff ffcf 	bl	8003780 <BH1750_Dat_To_Lux>
 80037e2:	2201      	movs	r2, #1
 80037e4:	0029      	movs	r1, r5
 80037e6:	4b05      	ldr	r3, [pc, #20]	; (80037fc <GetLightLevel+0x50>)
 80037e8:	9000      	str	r0, [sp, #0]
 80037ea:	2002      	movs	r0, #2
 80037ec:	f00b ff72 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
            return BH1750_Dat_To_Lux(dat);
 80037f0:	0020      	movs	r0, r4
 80037f2:	f7ff ffc5 	bl	8003780 <BH1750_Dat_To_Lux>
 80037f6:	b2c0      	uxtb	r0, r0
 80037f8:	e7e6      	b.n	80037c8 <GetLightLevel+0x1c>
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	08011c16 	.word	0x08011c16

08003800 <Bsp_Led_Init>:

void Bsp_Led_Init(GPIO_TypeDef* led_port, uint16_t led_pin)
{
 8003800:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LED_GPIO_CLK_ENABLE();
 8003802:	2502      	movs	r5, #2
 8003804:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <Bsp_Led_Init+0x30>)
{
 8003806:	b087      	sub	sp, #28
  LED_GPIO_CLK_ENABLE();
 8003808:	6ad4      	ldr	r4, [r2, #44]	; 0x2c
 800380a:	432c      	orrs	r4, r5
 800380c:	62d4      	str	r4, [r2, #44]	; 0x2c
 800380e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = led_pin;
 8003810:	9101      	str	r1, [sp, #4]
  LED_GPIO_CLK_ENABLE();
 8003812:	402b      	ands	r3, r5
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003818:	2301      	movs	r3, #1
 800381a:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  
  HAL_GPIO_Init(led_port, &GPIO_InitStruct);
 800381e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003820:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003822:	3303      	adds	r3, #3
 8003824:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(led_port, &GPIO_InitStruct);
 8003826:	f001 fe53 	bl	80054d0 <HAL_GPIO_Init>
  
}
 800382a:	b007      	add	sp, #28
 800382c:	bd30      	pop	{r4, r5, pc}
 800382e:	46c0      	nop			; (mov r8, r8)
 8003830:	40021000 	.word	0x40021000

08003834 <Bsp_Led_On>:

void Bsp_Led_On(GPIO_TypeDef* led_port,uint16_t led_pin)
{
 8003834:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(led_port, led_pin, GPIO_PIN_SET); 
 8003836:	2201      	movs	r2, #1
 8003838:	f001 ff90 	bl	800575c <HAL_GPIO_WritePin>
}
 800383c:	bd10      	pop	{r4, pc}

0800383e <Bsp_Led_Off>:

void Bsp_Led_Off( GPIO_TypeDef* led_port,uint16_t led_pin)
{
 800383e:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(led_port, led_pin, GPIO_PIN_RESET); 
 8003840:	2200      	movs	r2, #0
 8003842:	f001 ff8b 	bl	800575c <HAL_GPIO_WritePin>
}
 8003846:	bd10      	pop	{r4, pc}

08003848 <Bsp_Led_Toggle>:

void Bsp_Led_Toggle(GPIO_TypeDef* led_port,uint16_t led_pin)
{
 8003848:	b510      	push	{r4, lr}
  HAL_GPIO_TogglePin(led_port, led_pin);
 800384a:	f001 ff8d 	bl	8005768 <HAL_GPIO_TogglePin>
}
 800384e:	bd10      	pop	{r4, pc}

08003850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003850:	b510      	push	{r4, lr}
 8003852:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003854:	2220      	movs	r2, #32
 8003856:	2100      	movs	r1, #0
 8003858:	a808      	add	r0, sp, #32
 800385a:	f00c fc6a 	bl	8010132 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800385e:	2214      	movs	r2, #20
 8003860:	2100      	movs	r1, #0
 8003862:	a801      	add	r0, sp, #4
 8003864:	f00c fc65 	bl	8010132 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 8003868:	2300      	movs	r3, #0
 800386a:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 800386c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800386e:	2380      	movs	r3, #128	; 0x80
 8003870:	031b      	lsls	r3, r3, #12
 8003872:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8003874:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8003876:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8003878:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800387a:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800387c:	041b      	lsls	r3, r3, #16

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800387e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8003880:	9206      	str	r2, [sp, #24]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8003882:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003884:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 8003886:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8003888:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800388a:	f002 fbcf 	bl	800602c <HAL_RCC_OscConfig>
 800388e:	2800      	cmp	r0, #0
 8003890:	d000      	beq.n	8003894 <SystemClock_Config+0x44>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 8003892:	e7fe      	b.n	8003892 <SystemClock_Config+0x42>
  __HAL_RCC_PWR_CLK_ENABLE();
 8003894:	2380      	movs	r3, #128	; 0x80
 8003896:	4a11      	ldr	r2, [pc, #68]	; (80038dc <SystemClock_Config+0x8c>)
 8003898:	055b      	lsls	r3, r3, #21
 800389a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800389c:	430b      	orrs	r3, r1
 800389e:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80038a0:	4b0f      	ldr	r3, [pc, #60]	; (80038e0 <SystemClock_Config+0x90>)
 80038a2:	4910      	ldr	r1, [pc, #64]	; (80038e4 <SystemClock_Config+0x94>)
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	4011      	ands	r1, r2
 80038a8:	2280      	movs	r2, #128	; 0x80
 80038aa:	0112      	lsls	r2, r2, #4
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 80038b0:	6859      	ldr	r1, [r3, #4]
 80038b2:	000a      	movs	r2, r1
 80038b4:	4022      	ands	r2, r4
 80038b6:	4221      	tst	r1, r4
 80038b8:	d1fa      	bne.n	80038b0 <SystemClock_Config+0x60>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80038ba:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80038bc:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80038be:	9301      	str	r3, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80038c0:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038c2:	3b0c      	subs	r3, #12
 80038c4:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038c6:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80038c8:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038ca:	9205      	str	r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80038cc:	f002 fe3a 	bl	8006544 <HAL_RCC_ClockConfig>
 80038d0:	2800      	cmp	r0, #0
 80038d2:	d000      	beq.n	80038d6 <SystemClock_Config+0x86>
  while (1)
 80038d4:	e7fe      	b.n	80038d4 <SystemClock_Config+0x84>
}
 80038d6:	b014      	add	sp, #80	; 0x50
 80038d8:	bd10      	pop	{r4, pc}
 80038da:	46c0      	nop			; (mov r8, r8)
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40007000 	.word	0x40007000
 80038e4:	ffffe7ff 	.word	0xffffe7ff

080038e8 <main>:
{
 80038e8:	b510      	push	{r4, lr}
  HAL_Init();
 80038ea:	f001 f8eb 	bl	8004ac4 <HAL_Init>
  SystemClock_Config();
 80038ee:	f7ff ffaf 	bl	8003850 <SystemClock_Config>
  MX_LoRaWAN_Init();
 80038f2:	f7ff fae5 	bl	8002ec0 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 80038f6:	f7ff fae9 	bl	8002ecc <MX_LoRaWAN_Process>
	for(i=1; i<128; i++)
 80038fa:	2401      	movs	r4, #1
		ret = BSP_I2C1_IsReady((uint16_t)(i), 3);
 80038fc:	2103      	movs	r1, #3
 80038fe:	b2a0      	uxth	r0, r4
 8003900:	f000 ff28 	bl	8004754 <BSP_I2C1_IsReady>
	   	if (ret != HAL_OK) /* No ACK Received At That Address */
 8003904:	2800      	cmp	r0, #0
 8003906:	d00b      	beq.n	8003920 <main+0x38>
	   		printf("I2C device not found");
 8003908:	4808      	ldr	r0, [pc, #32]	; (800392c <main+0x44>)
 800390a:	f00c fc1b 	bl	8010144 <iprintf>
	for(i=1; i<128; i++)
 800390e:	3401      	adds	r4, #1
 8003910:	2c80      	cmp	r4, #128	; 0x80
 8003912:	d1f3      	bne.n	80038fc <main+0x14>
	printf("ADDRD: %u\n", addr);
 8003914:	4b06      	ldr	r3, [pc, #24]	; (8003930 <main+0x48>)
 8003916:	4807      	ldr	r0, [pc, #28]	; (8003934 <main+0x4c>)
 8003918:	6819      	ldr	r1, [r3, #0]
 800391a:	f00c fc13 	bl	8010144 <iprintf>
  {
 800391e:	e7ea      	b.n	80038f6 <main+0xe>
	   		printf("I2C device found");
 8003920:	4805      	ldr	r0, [pc, #20]	; (8003938 <main+0x50>)
 8003922:	f00c fc0f 	bl	8010144 <iprintf>
	   		addr = i;
 8003926:	4b02      	ldr	r3, [pc, #8]	; (8003930 <main+0x48>)
 8003928:	601c      	str	r4, [r3, #0]
 800392a:	e7f0      	b.n	800390e <main+0x26>
 800392c:	08011c22 	.word	0x08011c22
 8003930:	2000037c 	.word	0x2000037c
 8003934:	08011c48 	.word	0x08011c48
 8003938:	08011c37 	.word	0x08011c37

0800393c <Error_Handler>:
  while (1)
 800393c:	e7fe      	b.n	800393c <Error_Handler>
	...

08003940 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003940:	b530      	push	{r4, r5, lr}
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8003942:	2400      	movs	r4, #0
{
 8003944:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 8003946:	2214      	movs	r2, #20
 8003948:	2100      	movs	r1, #0
 800394a:	a801      	add	r0, sp, #4
 800394c:	f00c fbf1 	bl	8010132 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8003950:	2228      	movs	r2, #40	; 0x28
 8003952:	0021      	movs	r1, r4
 8003954:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 8003956:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8003958:	f00c fbeb 	bl	8010132 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800395c:	4d24      	ldr	r5, [pc, #144]	; (80039f0 <MX_RTC_Init+0xb0>)
 800395e:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <MX_RTC_Init+0xb4>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003960:	0028      	movs	r0, r5
  hrtc.Instance = RTC;
 8003962:	602b      	str	r3, [r5, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8003964:	231f      	movs	r3, #31
 8003966:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 8003968:	4b23      	ldr	r3, [pc, #140]	; (80039f8 <MX_RTC_Init+0xb8>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800396a:	606c      	str	r4, [r5, #4]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 800396c:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800396e:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003970:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003972:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003974:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003976:	f003 f879 	bl	8006a6c <HAL_RTC_Init>
 800397a:	42a0      	cmp	r0, r4
 800397c:	d001      	beq.n	8003982 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 800397e:	f7ff ffdd 	bl	800393c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8003982:	466b      	mov	r3, sp
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003984:	2200      	movs	r2, #0
 8003986:	0028      	movs	r0, r5
  sTime.Hours = 0;
 8003988:	809c      	strh	r4, [r3, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800398a:	a901      	add	r1, sp, #4
  sTime.Seconds = 0;
 800398c:	719c      	strb	r4, [r3, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800398e:	9404      	str	r4, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003990:	9405      	str	r4, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8003992:	f003 f8d3 	bl	8006b3c <HAL_RTC_SetTime>
 8003996:	2800      	cmp	r0, #0
 8003998:	d001      	beq.n	800399e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800399a:	f7ff ffcf 	bl	800393c <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800399e:	4b17      	ldr	r3, [pc, #92]	; (80039fc <MX_RTC_Init+0xbc>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80039a0:	2200      	movs	r2, #0
 80039a2:	4669      	mov	r1, sp
 80039a4:	0028      	movs	r0, r5
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80039a6:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80039a8:	f003 f94e 	bl	8006c48 <HAL_RTC_SetDate>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	d001      	beq.n	80039b4 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80039b0:	f7ff ffc4 	bl	800393c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80039b4:	2200      	movs	r2, #0
 80039b6:	466b      	mov	r3, sp
 80039b8:	831a      	strh	r2, [r3, #24]
  sAlarm.AlarmTime.Minutes = 0;
  sAlarm.AlarmTime.Seconds = 0;
 80039ba:	769a      	strb	r2, [r3, #26]
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 80039bc:	23a0      	movs	r3, #160	; 0xa0
 80039be:	051b      	lsls	r3, r3, #20
 80039c0:	930c      	str	r3, [sp, #48]	; 0x30
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 30;
 80039c2:	2319      	movs	r3, #25
 80039c4:	211e      	movs	r1, #30
 80039c6:	446b      	add	r3, sp
 80039c8:	77d9      	strb	r1, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 80039ca:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80039cc:	0028      	movs	r0, r5
  sAlarm.Alarm = RTC_ALARM_A;
 80039ce:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80039d0:	a906      	add	r1, sp, #24
  sAlarm.AlarmTime.SubSeconds = 0;
 80039d2:	9207      	str	r2, [sp, #28]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80039d4:	9209      	str	r2, [sp, #36]	; 0x24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80039d6:	920a      	str	r2, [sp, #40]	; 0x28
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80039d8:	920b      	str	r2, [sp, #44]	; 0x2c
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80039da:	920d      	str	r2, [sp, #52]	; 0x34
  sAlarm.Alarm = RTC_ALARM_A;
 80039dc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 80039de:	f003 f99f 	bl	8006d20 <HAL_RTC_SetAlarm_IT>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d001      	beq.n	80039ea <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 80039e6:	f7ff ffa9 	bl	800393c <Error_Handler>
  }

}
 80039ea:	b011      	add	sp, #68	; 0x44
 80039ec:	bd30      	pop	{r4, r5, pc}
 80039ee:	46c0      	nop			; (mov r8, r8)
 80039f0:	20001318 	.word	0x20001318
 80039f4:	40002800 	.word	0x40002800
 80039f8:	000003ff 	.word	0x000003ff
 80039fc:	00010101 	.word	0x00010101

08003a00 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8003a00:	b510      	push	{r4, lr}
 8003a02:	0004      	movs	r4, r0
 8003a04:	b08e      	sub	sp, #56	; 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a06:	2238      	movs	r2, #56	; 0x38
 8003a08:	2100      	movs	r1, #0
 8003a0a:	4668      	mov	r0, sp
 8003a0c:	f00c fb91 	bl	8010132 <memset>
  if (rtcHandle->Instance == RTC)
 8003a10:	4b11      	ldr	r3, [pc, #68]	; (8003a58 <HAL_RTC_MspInit+0x58>)
 8003a12:	6822      	ldr	r2, [r4, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d11c      	bne.n	8003a52 <HAL_RTC_MspInit+0x52>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8003a18:	2304      	movs	r3, #4
 8003a1a:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003a1c:	33fc      	adds	r3, #252	; 0xfc
 8003a1e:	9302      	str	r3, [sp, #8]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 8003a20:	2300      	movs	r3, #0
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a22:	4668      	mov	r0, sp
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 8003a24:	9305      	str	r3, [sp, #20]
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8003a26:	9301      	str	r3, [sp, #4]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003a28:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a2a:	f002 faff 	bl	800602c <HAL_RCC_OscConfig>
 8003a2e:	2800      	cmp	r0, #0
 8003a30:	d001      	beq.n	8003a36 <HAL_RTC_MspInit+0x36>
    {
      Error_Handler();
 8003a32:	f7ff ff83 	bl	800393c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a36:	2380      	movs	r3, #128	; 0x80
 8003a38:	4a08      	ldr	r2, [pc, #32]	; (8003a5c <HAL_RTC_MspInit+0x5c>)
 8003a3a:	02db      	lsls	r3, r3, #11
 8003a3c:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003a3e:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8003a44:	2200      	movs	r2, #0
 8003a46:	0011      	movs	r1, r2
 8003a48:	f001 fb98 	bl	800517c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8003a4c:	2002      	movs	r0, #2
 8003a4e:	f001 fbbf 	bl	80051d0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8003a52:	b00e      	add	sp, #56	; 0x38
 8003a54:	bd10      	pop	{r4, pc}
 8003a56:	46c0      	nop			; (mov r8, r8)
 8003a58:	40002800 	.word	0x40002800
 8003a5c:	40021000 	.word	0x40021000

08003a60 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 8003a60:	4b01      	ldr	r3, [pc, #4]	; (8003a68 <RTC_IF_GetTimerContext+0x8>)
 8003a62:	6818      	ldr	r0, [r3, #0]
}
 8003a64:	4770      	bx	lr
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	20000380 	.word	0x20000380

08003a6c <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 8003a6c:	2003      	movs	r0, #3
 8003a6e:	4770      	bx	lr

08003a70 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8003a70:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8003a72:	0e41      	lsrs	r1, r0, #25
 8003a74:	227d      	movs	r2, #125	; 0x7d
 8003a76:	2300      	movs	r3, #0
 8003a78:	01c0      	lsls	r0, r0, #7
 8003a7a:	f7fc fd63 	bl	8000544 <__aeabi_uldivmod>
}
 8003a7e:	bd10      	pop	{r4, pc}

08003a80 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 8003a80:	b510      	push	{r4, lr}
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8003a82:	227d      	movs	r2, #125	; 0x7d
 8003a84:	2300      	movs	r3, #0
 8003a86:	2100      	movs	r1, #0
 8003a88:	f7fc fd7c 	bl	8000584 <__aeabi_lmul>
 8003a8c:	0649      	lsls	r1, r1, #25
 8003a8e:	09c0      	lsrs	r0, r0, #7
 8003a90:	4308      	orrs	r0, r1
}
 8003a92:	bd10      	pop	{r4, pc}

08003a94 <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003a94:	4806      	ldr	r0, [pc, #24]	; (8003ab0 <RTC_IF_StopTimer+0x1c>)
 8003a96:	4b07      	ldr	r3, [pc, #28]	; (8003ab4 <RTC_IF_StopTimer+0x20>)
 8003a98:	6801      	ldr	r1, [r0, #0]
{
 8003a9a:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8003a9c:	68ca      	ldr	r2, [r1, #12]
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003aa4:	2180      	movs	r1, #128	; 0x80
 8003aa6:	0049      	lsls	r1, r1, #1
 8003aa8:	f002 ff18 	bl	80068dc <HAL_RTC_DeactivateAlarm>
}
 8003aac:	2000      	movs	r0, #0
 8003aae:	bd10      	pop	{r4, pc}
 8003ab0:	20001318 	.word	0x20001318
 8003ab4:	fffffe7f 	.word	0xfffffe7f

08003ab8 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 8003ab8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003aba:	4e25      	ldr	r6, [pc, #148]	; (8003b50 <RTC_GetCalendarValue+0x98>)
{
 8003abc:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003abe:	2200      	movs	r2, #0
 8003ac0:	0030      	movs	r0, r6
{
 8003ac2:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003ac4:	f003 fa0c 	bl	8006ee0 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8003ac8:	4f22      	ldr	r7, [pc, #136]	; (8003b54 <RTC_GetCalendarValue+0x9c>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 8003aca:	2200      	movs	r2, #0
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	0029      	movs	r1, r5
 8003ad0:	0030      	movs	r0, r6
 8003ad2:	9301      	str	r3, [sp, #4]
 8003ad4:	f003 fa2e 	bl	8006f34 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8003ad8:	2200      	movs	r2, #0
 8003ada:	0021      	movs	r1, r4
 8003adc:	0030      	movs	r0, r6
 8003ade:	f003 f9ff 	bl	8006ee0 <HAL_RTC_GetTime>
 8003ae2:	466b      	mov	r3, sp
 8003ae4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ae6:	889b      	ldrh	r3, [r3, #4]
 8003ae8:	b292      	uxth	r2, r2

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d1ec      	bne.n	8003ac8 <RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8003aee:	2103      	movs	r1, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8003af0:	78ea      	ldrb	r2, [r5, #3]
 8003af2:	4e19      	ldr	r6, [pc, #100]	; (8003b58 <RTC_GetCalendarValue+0xa0>)

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003af4:	786f      	ldrb	r7, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8003af6:	4356      	muls	r6, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8003af8:	400a      	ands	r2, r1
 8003afa:	4253      	negs	r3, r2
 8003afc:	4153      	adcs	r3, r2
 8003afe:	4a17      	ldr	r2, [pc, #92]	; (8003b5c <RTC_GetCalendarValue+0xa4>)
 8003b00:	425b      	negs	r3, r3
 8003b02:	4013      	ands	r3, r2
 8003b04:	4a16      	ldr	r2, [pc, #88]	; (8003b60 <RTC_GetCalendarValue+0xa8>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003b06:	3f01      	subs	r7, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8003b08:	189b      	adds	r3, r3, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003b0a:	223d      	movs	r2, #61	; 0x3d
 8003b0c:	437a      	muls	r2, r7
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8003b0e:	007f      	lsls	r7, r7, #1
 8003b10:	40fb      	lsrs	r3, r7
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003b12:	3201      	adds	r2, #1
 8003b14:	0fd0      	lsrs	r0, r2, #31
 8003b16:	1882      	adds	r2, r0, r2

  calendarValue += (RTC_DateStruct->Date - 1);
 8003b18:	78a8      	ldrb	r0, [r5, #2]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8003b1a:	3603      	adds	r6, #3
 8003b1c:	3801      	subs	r0, #1
 8003b1e:	08b6      	lsrs	r6, r6, #2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8003b20:	1052      	asrs	r2, r2, #1
 8003b22:	1986      	adds	r6, r0, r6
 8003b24:	1996      	adds	r6, r2, r6

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 8003b26:	480f      	ldr	r0, [pc, #60]	; (8003b64 <RTC_GetCalendarValue+0xac>)
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8003b28:	400b      	ands	r3, r1
  calendarValue += (RTC_DateStruct->Date - 1);
 8003b2a:	1af3      	subs	r3, r6, r3
  calendarValue *= SECONDS_IN_1DAY;
 8003b2c:	4343      	muls	r3, r0

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8003b2e:	20e1      	movs	r0, #225	; 0xe1
 8003b30:	7822      	ldrb	r2, [r4, #0]
 8003b32:	0100      	lsls	r0, r0, #4
 8003b34:	4350      	muls	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8003b36:	223c      	movs	r2, #60	; 0x3c
 8003b38:	7861      	ldrb	r1, [r4, #1]
 8003b3a:	434a      	muls	r2, r1
 8003b3c:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8003b3e:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8003b40:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8003b42:	18c0      	adds	r0, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8003b44:	6863      	ldr	r3, [r4, #4]
 8003b46:	0280      	lsls	r0, r0, #10
 8003b48:	1ac0      	subs	r0, r0, r3
 8003b4a:	4b07      	ldr	r3, [pc, #28]	; (8003b68 <RTC_GetCalendarValue+0xb0>)
 8003b4c:	18c0      	adds	r0, r0, r3

  return (calendarValue);
}
 8003b4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003b50:	20001318 	.word	0x20001318
 8003b54:	40002800 	.word	0x40002800
 8003b58:	000005b5 	.word	0x000005b5
 8003b5c:	ffaaaab0 	.word	0xffaaaab0
 8003b60:	0099aaa0 	.word	0x0099aaa0
 8003b64:	00015180 	.word	0x00015180
 8003b68:	000003ff 	.word	0x000003ff

08003b6c <RTC_IF_SetTimerContext>:
{
 8003b6c:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 8003b6e:	4c04      	ldr	r4, [pc, #16]	; (8003b80 <RTC_IF_SetTimerContext+0x14>)
 8003b70:	0020      	movs	r0, r4
 8003b72:	1d21      	adds	r1, r4, #4
 8003b74:	3018      	adds	r0, #24
 8003b76:	f7ff ff9f 	bl	8003ab8 <RTC_GetCalendarValue>
 8003b7a:	6020      	str	r0, [r4, #0]
}
 8003b7c:	bd10      	pop	{r4, pc}
 8003b7e:	46c0      	nop			; (mov r8, r8)
 8003b80:	20000380 	.word	0x20000380

08003b84 <RTC_IF_GetTimerElapsedTime>:
{
 8003b84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003b86:	4668      	mov	r0, sp
 8003b88:	a901      	add	r1, sp, #4
 8003b8a:	f7ff ff95 	bl	8003ab8 <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 8003b8e:	4b02      	ldr	r3, [pc, #8]	; (8003b98 <RTC_IF_GetTimerElapsedTime+0x14>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	1ac0      	subs	r0, r0, r3
}
 8003b94:	b007      	add	sp, #28
 8003b96:	bd00      	pop	{pc}
 8003b98:	20000380 	.word	0x20000380

08003b9c <RTC_IF_StartTimer>:
{
 8003b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b9e:	b087      	sub	sp, #28
 8003ba0:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8003ba2:	f7ff ffef 	bl	8003b84 <RTC_IF_GetTimerElapsedTime>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 8003ba6:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8003ba8:	1a30      	subs	r0, r6, r0
 8003baa:	2803      	cmp	r0, #3
 8003bac:	d800      	bhi.n	8003bb0 <RTC_IF_StartTimer+0x14>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8003bae:	2101      	movs	r1, #1
 8003bb0:	2002      	movs	r0, #2
 8003bb2:	f00b fe47 	bl	800f844 <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 8003bb6:	f00b fe71 	bl	800f89c <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8003bba:	4c41      	ldr	r4, [pc, #260]	; (8003cc0 <RTC_IF_StartTimer+0x124>)
 8003bbc:	7963      	ldrb	r3, [r4, #5]
 8003bbe:	68a7      	ldr	r7, [r4, #8]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	79a3      	ldrb	r3, [r4, #6]
 8003bc4:	7925      	ldrb	r5, [r4, #4]
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	79e3      	ldrb	r3, [r4, #7]
 8003bca:	9302      	str	r3, [sp, #8]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8003bcc:	7e63      	ldrb	r3, [r4, #25]
 8003bce:	9303      	str	r3, [sp, #12]
 8003bd0:	7ea3      	ldrb	r3, [r4, #26]
 8003bd2:	9304      	str	r3, [sp, #16]
 8003bd4:	7ee3      	ldrb	r3, [r4, #27]
 8003bd6:	9305      	str	r3, [sp, #20]
  RTC_IF_StopTimer();
 8003bd8:	f7ff ff5c 	bl	8003a94 <RTC_IF_StopTimer>
  rtcAlarmDays =  RTC_DateStruct.Date;
 8003bdc:	4669      	mov	r1, sp
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8003bde:	4a39      	ldr	r2, [pc, #228]	; (8003cc4 <RTC_IF_StartTimer+0x128>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003be0:	05b3      	lsls	r3, r6, #22
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8003be2:	1bd7      	subs	r7, r2, r7
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003be4:	0d9b      	lsrs	r3, r3, #22
  rtcAlarmDays =  RTC_DateStruct.Date;
 8003be6:	8a08      	ldrh	r0, [r1, #16]
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003be8:	18fb      	adds	r3, r7, r3
 8003bea:	9204      	str	r2, [sp, #16]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003bec:	4a36      	ldr	r2, [pc, #216]	; (8003cc8 <RTC_IF_StartTimer+0x12c>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8003bee:	b29b      	uxth	r3, r3
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 8003bf0:	0ab6      	lsrs	r6, r6, #10
  while (timeoutValue >= SECONDS_IN_1DAY)
 8003bf2:	4296      	cmp	r6, r2
 8003bf4:	d843      	bhi.n	8003c7e <RTC_IF_StartTimer+0xe2>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8003bf6:	22e1      	movs	r2, #225	; 0xe1
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8003bf8:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8003bfa:	0112      	lsls	r2, r2, #4
 8003bfc:	4296      	cmp	r6, r2
 8003bfe:	d243      	bcs.n	8003c88 <RTC_IF_StartTimer+0xec>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8003c00:	466a      	mov	r2, sp
 8003c02:	8817      	ldrh	r7, [r2, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8003c04:	2e3b      	cmp	r6, #59	; 0x3b
 8003c06:	d844      	bhi.n	8003c92 <RTC_IF_StartTimer+0xf6>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8003c08:	0a9a      	lsrs	r2, r3, #10
 8003c0a:	0291      	lsls	r1, r2, #10
 8003c0c:	1a5b      	subs	r3, r3, r1
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	9b01      	ldr	r3, [sp, #4]
 8003c14:	18d2      	adds	r2, r2, r3
 8003c16:	1996      	adds	r6, r2, r6
 8003c18:	b2b6      	uxth	r6, r6
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8003c1a:	2e3b      	cmp	r6, #59	; 0x3b
 8003c1c:	d83d      	bhi.n	8003c9a <RTC_IF_StartTimer+0xfe>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8003c1e:	2f3b      	cmp	r7, #59	; 0x3b
 8003c20:	d840      	bhi.n	8003ca4 <RTC_IF_StartTimer+0x108>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8003c22:	2d17      	cmp	r5, #23
 8003c24:	d843      	bhi.n	8003cae <RTC_IF_StartTimer+0x112>
  if (RTC_DateStruct.Year % 4 == 0)
 8003c26:	9a03      	ldr	r2, [sp, #12]
 8003c28:	9905      	ldr	r1, [sp, #20]
 8003c2a:	4b28      	ldr	r3, [pc, #160]	; (8003ccc <RTC_IF_StartTimer+0x130>)
 8003c2c:	3a01      	subs	r2, #1
 8003c2e:	0789      	lsls	r1, r1, #30
 8003c30:	d142      	bne.n	8003cb8 <RTC_IF_StartTimer+0x11c>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8003c32:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8003c34:	4288      	cmp	r0, r1
 8003c36:	d902      	bls.n	8003c3e <RTC_IF_StartTimer+0xa2>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8003c38:	f7fc fc06 	bl	8000448 <__aeabi_idivmod>
 8003c3c:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8003c3e:	9a00      	ldr	r2, [sp, #0]
 8003c40:	9b04      	ldr	r3, [sp, #16]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 8003c42:	7725      	strb	r5, [r4, #28]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	6223      	str	r3, [r4, #32]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 8003c48:	23a0      	movs	r3, #160	; 0xa0
 8003c4a:	051b      	lsls	r3, r3, #20
 8003c4c:	6363      	str	r3, [r4, #52]	; 0x34
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8003c4e:	0023      	movs	r3, r4
 8003c50:	333c      	adds	r3, #60	; 0x3c
 8003c52:	7018      	strb	r0, [r3, #0]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8003c54:	9b02      	ldr	r3, [sp, #8]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003c56:	2500      	movs	r5, #0
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8003c58:	77e3      	strb	r3, [r4, #31]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8003c5a:	0021      	movs	r1, r4
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8003c5c:	2380      	movs	r3, #128	; 0x80
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8003c5e:	002a      	movs	r2, r5
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8003c60:	005b      	lsls	r3, r3, #1
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8003c62:	311c      	adds	r1, #28
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8003c64:	481a      	ldr	r0, [pc, #104]	; (8003cd0 <RTC_IF_StartTimer+0x134>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8003c66:	77a6      	strb	r6, [r4, #30]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 8003c68:	7767      	strb	r7, [r4, #29]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8003c6a:	63a5      	str	r5, [r4, #56]	; 0x38
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 8003c6c:	6325      	str	r5, [r4, #48]	; 0x30
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8003c6e:	6423      	str	r3, [r4, #64]	; 0x40
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003c70:	62a5      	str	r5, [r4, #40]	; 0x28
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003c72:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8003c74:	f003 f854 	bl	8006d20 <HAL_RTC_SetAlarm_IT>
}
 8003c78:	0028      	movs	r0, r5
 8003c7a:	b007      	add	sp, #28
 8003c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 8003c7e:	4915      	ldr	r1, [pc, #84]	; (8003cd4 <RTC_IF_StartTimer+0x138>)
    rtcAlarmDays++;
 8003c80:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 8003c82:	1876      	adds	r6, r6, r1
    rtcAlarmDays++;
 8003c84:	b280      	uxth	r0, r0
 8003c86:	e7b4      	b.n	8003bf2 <RTC_IF_StartTimer+0x56>
    timeoutValue -= SECONDS_IN_1HOUR;
 8003c88:	4913      	ldr	r1, [pc, #76]	; (8003cd8 <RTC_IF_StartTimer+0x13c>)
    rtcAlarmHours++;
 8003c8a:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 8003c8c:	1876      	adds	r6, r6, r1
    rtcAlarmHours++;
 8003c8e:	b2ad      	uxth	r5, r5
 8003c90:	e7b4      	b.n	8003bfc <RTC_IF_StartTimer+0x60>
    rtcAlarmMinutes++;
 8003c92:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 8003c94:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 8003c96:	b2bf      	uxth	r7, r7
 8003c98:	e7b4      	b.n	8003c04 <RTC_IF_StartTimer+0x68>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8003c9a:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 8003c9c:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8003c9e:	b2b6      	uxth	r6, r6
    rtcAlarmMinutes++;
 8003ca0:	b2bf      	uxth	r7, r7
 8003ca2:	e7ba      	b.n	8003c1a <RTC_IF_StartTimer+0x7e>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8003ca4:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 8003ca6:	3501      	adds	r5, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8003ca8:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 8003caa:	b2ad      	uxth	r5, r5
 8003cac:	e7b7      	b.n	8003c1e <RTC_IF_StartTimer+0x82>
    rtcAlarmHours -= HOURS_IN_1DAY;
 8003cae:	3d18      	subs	r5, #24
    rtcAlarmDays++;
 8003cb0:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 8003cb2:	b2ad      	uxth	r5, r5
    rtcAlarmDays++;
 8003cb4:	b280      	uxth	r0, r0
 8003cb6:	e7b4      	b.n	8003c22 <RTC_IF_StartTimer+0x86>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8003cb8:	189b      	adds	r3, r3, r2
 8003cba:	7b19      	ldrb	r1, [r3, #12]
 8003cbc:	e7ba      	b.n	8003c34 <RTC_IF_StartTimer+0x98>
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	20000380 	.word	0x20000380
 8003cc4:	000003ff 	.word	0x000003ff
 8003cc8:	0001517f 	.word	0x0001517f
 8003ccc:	080111c4 	.word	0x080111c4
 8003cd0:	20001318 	.word	0x20001318
 8003cd4:	fffeae80 	.word	0xfffeae80
 8003cd8:	fffff1f0 	.word	0xfffff1f0

08003cdc <RTC_IF_GetTime>:
{
 8003cdc:	b530      	push	{r4, r5, lr}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	0005      	movs	r5, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003ce2:	a901      	add	r1, sp, #4
 8003ce4:	4668      	mov	r0, sp
 8003ce6:	f7ff fee7 	bl	8003ab8 <RTC_GetCalendarValue>
 8003cea:	0004      	movs	r4, r0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8003cec:	0580      	lsls	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8003cee:	227d      	movs	r2, #125	; 0x7d
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	2100      	movs	r1, #0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8003cf4:	0d80      	lsrs	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8003cf6:	f7fc fc45 	bl	8000584 <__aeabi_lmul>
 8003cfa:	09c0      	lsrs	r0, r0, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8003cfc:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 8003cfe:	0aa0      	lsrs	r0, r4, #10
}
 8003d00:	b007      	add	sp, #28
 8003d02:	bd30      	pop	{r4, r5, pc}

08003d04 <RTC_IF_BkUp_Write_Seconds>:
{
 8003d04:	b510      	push	{r4, lr}
 8003d06:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8003d08:	2100      	movs	r1, #0
 8003d0a:	4802      	ldr	r0, [pc, #8]	; (8003d14 <RTC_IF_BkUp_Write_Seconds+0x10>)
 8003d0c:	f003 f934 	bl	8006f78 <HAL_RTCEx_BKUPWrite>
}
 8003d10:	bd10      	pop	{r4, pc}
 8003d12:	46c0      	nop			; (mov r8, r8)
 8003d14:	20001318 	.word	0x20001318

08003d18 <RTC_IF_BkUp_Write_SubSeconds>:
{
 8003d18:	b510      	push	{r4, lr}
 8003d1a:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8003d1c:	2101      	movs	r1, #1
 8003d1e:	4802      	ldr	r0, [pc, #8]	; (8003d28 <RTC_IF_BkUp_Write_SubSeconds+0x10>)
 8003d20:	f003 f92a 	bl	8006f78 <HAL_RTCEx_BKUPWrite>
}
 8003d24:	bd10      	pop	{r4, pc}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	20001318 	.word	0x20001318

08003d2c <RTC_IF_BkUp_Read_Seconds>:
{
 8003d2c:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4801      	ldr	r0, [pc, #4]	; (8003d38 <RTC_IF_BkUp_Read_Seconds+0xc>)
 8003d32:	f003 f927 	bl	8006f84 <HAL_RTCEx_BKUPRead>
}
 8003d36:	bd10      	pop	{r4, pc}
 8003d38:	20001318 	.word	0x20001318

08003d3c <RTC_IF_BkUp_Read_SubSeconds>:
{
 8003d3c:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8003d3e:	2101      	movs	r1, #1
 8003d40:	4801      	ldr	r0, [pc, #4]	; (8003d48 <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 8003d42:	f003 f91f 	bl	8006f84 <HAL_RTCEx_BKUPRead>
}
 8003d46:	bd10      	pop	{r4, pc}
 8003d48:	20001318 	.word	0x20001318

08003d4c <RTC_IF_Init>:
{
 8003d4c:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 8003d4e:	4c11      	ldr	r4, [pc, #68]	; (8003d94 <RTC_IF_Init+0x48>)
{
 8003d50:	b08b      	sub	sp, #44	; 0x2c
  if (RTC_Initalized == false)
 8003d52:	3444      	adds	r4, #68	; 0x44
 8003d54:	7823      	ldrb	r3, [r4, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d119      	bne.n	8003d8e <RTC_IF_Init+0x42>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003d5a:	3320      	adds	r3, #32
 8003d5c:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003d5e:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d60:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003d62:	025b      	lsls	r3, r3, #9
 8003d64:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d66:	f002 fcdb 	bl	8006720 <HAL_RCCEx_PeriphCLKConfig>
 8003d6a:	2800      	cmp	r0, #0
 8003d6c:	d000      	beq.n	8003d70 <RTC_IF_Init+0x24>
      while (1);
 8003d6e:	e7fe      	b.n	8003d6e <RTC_IF_Init+0x22>
    MX_RTC_Init();
 8003d70:	f7ff fde6 	bl	8003940 <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8003d74:	2180      	movs	r1, #128	; 0x80
 8003d76:	4d08      	ldr	r5, [pc, #32]	; (8003d98 <RTC_IF_Init+0x4c>)
 8003d78:	0049      	lsls	r1, r1, #1
 8003d7a:	0028      	movs	r0, r5
 8003d7c:	f002 fdae 	bl	80068dc <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8003d80:	0028      	movs	r0, r5
 8003d82:	f003 f905 	bl	8006f90 <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 8003d86:	f7ff fef1 	bl	8003b6c <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	7023      	strb	r3, [r4, #0]
}
 8003d8e:	2000      	movs	r0, #0
 8003d90:	b00b      	add	sp, #44	; 0x2c
 8003d92:	bd30      	pop	{r4, r5, pc}
 8003d94:	20000380 	.word	0x20000380
 8003d98:	20001318 	.word	0x20001318

08003d9c <RTC_IF_GetTimerValue>:
{
 8003d9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = 0;
 8003d9e:	2000      	movs	r0, #0
  if (RTC_Initalized == true)
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <RTC_IF_GetTimerValue+0x1c>)
 8003da2:	3344      	adds	r3, #68	; 0x44
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	4283      	cmp	r3, r0
 8003da8:	d003      	beq.n	8003db2 <RTC_IF_GetTimerValue+0x16>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8003daa:	4668      	mov	r0, sp
 8003dac:	a901      	add	r1, sp, #4
 8003dae:	f7ff fe83 	bl	8003ab8 <RTC_GetCalendarValue>
}
 8003db2:	b007      	add	sp, #28
 8003db4:	bd00      	pop	{pc}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	20000380 	.word	0x20000380

08003dbc <RTC_IF_DelayMs>:
{
 8003dbc:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 8003dbe:	227d      	movs	r2, #125	; 0x7d
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	0e41      	lsrs	r1, r0, #25
 8003dc4:	01c0      	lsls	r0, r0, #7
 8003dc6:	f7fc fbbd 	bl	8000544 <__aeabi_uldivmod>
 8003dca:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 8003dcc:	f7ff ffe6 	bl	8003d9c <RTC_IF_GetTimerValue>
 8003dd0:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8003dd2:	f7ff ffe3 	bl	8003d9c <RTC_IF_GetTimerValue>
 8003dd6:	1b40      	subs	r0, r0, r5
 8003dd8:	42a0      	cmp	r0, r4
 8003dda:	d300      	bcc.n	8003dde <RTC_IF_DelayMs+0x22>
}
 8003ddc:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	e7f7      	b.n	8003dd2 <RTC_IF_DelayMs+0x16>

08003de2 <HAL_RTC_AlarmAEventCallback>:
{
 8003de2:	b510      	push	{r4, lr}
  UTIL_TIMER_IRQ_Handler();
 8003de4:	f00b fffe 	bl	800fde4 <UTIL_TIMER_IRQ_Handler>
}
 8003de8:	bd10      	pop	{r4, pc}

08003dea <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8003dea:	4770      	bx	lr

08003dec <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 8003dec:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dee:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003df2:	b672      	cpsid	i
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 8003df4:	f000 fd58 	bl	80048a8 <SX126x_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc1);
 8003df8:	4808      	ldr	r0, [pc, #32]	; (8003e1c <PWR_EnterStopMode+0x30>)
 8003dfa:	f7ff fafb 	bl	80033f4 <HAL_ADC_MspDeInit>
  UTIL_ADV_TRACE_IoDeInit();//@Murata DeInit the trace io when enter stop mode
 8003dfe:	f00b fc13 	bl	800f628 <UTIL_ADV_TRACE_IoDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8003e02:	2304      	movs	r3, #4
 8003e04:	4a06      	ldr	r2, [pc, #24]	; (8003e20 <PWR_EnterStopMode+0x34>)
 8003e06:	6811      	ldr	r1, [r2, #0]
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	6013      	str	r3, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e0c:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003e10:	2101      	movs	r1, #1
 8003e12:	0008      	movs	r0, r1
 8003e14:	f002 f872 	bl	8005efc <HAL_PWR_EnterSTOPMode>
}
 8003e18:	bd10      	pop	{r4, pc}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	20001228 	.word	0x20001228
 8003e20:	40007000 	.word	0x40007000

08003e24 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8003e24:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e26:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003e2a:	b672      	cpsid	i

  UTILS_ENTER_CRITICAL_SECTION();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <PWR_ExitStopMode+0x50>)
 8003e30:	6819      	ldr	r1, [r3, #0]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 8003e36:	2204      	movs	r2, #4
 8003e38:	6819      	ldr	r1, [r3, #0]
 8003e3a:	4211      	tst	r1, r2
 8003e3c:	d0fc      	beq.n	8003e38 <PWR_ExitStopMode+0x14>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8003e3e:	2280      	movs	r2, #128	; 0x80
 8003e40:	6819      	ldr	r1, [r3, #0]
 8003e42:	0452      	lsls	r2, r2, #17
 8003e44:	430a      	orrs	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 8003e48:	2280      	movs	r2, #128	; 0x80
 8003e4a:	0492      	lsls	r2, r2, #18
 8003e4c:	6819      	ldr	r1, [r3, #0]
 8003e4e:	4211      	tst	r1, r2
 8003e50:	d0fc      	beq.n	8003e4c <PWR_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8003e52:	2203      	movs	r2, #3
 8003e54:	68d9      	ldr	r1, [r3, #12]
 8003e56:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8003e58:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8003e5a:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8003e5c:	68da      	ldr	r2, [r3, #12]
 8003e5e:	400a      	ands	r2, r1
 8003e60:	2a0c      	cmp	r2, #12
 8003e62:	d1fb      	bne.n	8003e5c <PWR_ExitStopMode+0x38>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 8003e64:	f000 fc86 	bl	8004774 <SX126x_RADIO_IoInit>
  UTIL_ADV_TRACE_IoInit();//@Murata Init the trace io when exit stop mode
 8003e68:	f00b fbd6 	bl	800f618 <UTIL_ADV_TRACE_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6c:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();
}
 8003e70:	bd10      	pop	{r4, pc}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	40021000 	.word	0x40021000

08003e78 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8003e78:	b510      	push	{r4, lr}
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	2000      	movs	r0, #0
 8003e7e:	f002 f805 	bl	8005e8c <HAL_PWR_EnterSLEEPMode>
}
 8003e82:	bd10      	pop	{r4, pc}

08003e84 <PWR_ExitSleepMode>:
 8003e84:	4770      	bx	lr

08003e86 <PWR_ExitOffMode>:
 8003e86:	4770      	bx	lr

08003e88 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e88:	2380      	movs	r3, #128	; 0x80
 8003e8a:	4a09      	ldr	r2, [pc, #36]	; (8003eb0 <HAL_MspInit+0x28>)
 8003e8c:	055b      	lsls	r3, r3, #21
 8003e8e:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 8003e90:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e92:	430b      	orrs	r3, r1
 8003e94:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8003e96:	f001 fff1 	bl	8005e7c <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8003e9a:	f002 f875 	bl	8005f88 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8003e9e:	2308      	movs	r3, #8
 8003ea0:	4a04      	ldr	r2, [pc, #16]	; (8003eb4 <HAL_MspInit+0x2c>)
 8003ea2:	6811      	ldr	r1, [r2, #0]
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8003ea8:	f002 f864 	bl	8005f74 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eac:	bd10      	pop	{r4, pc}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	40021000 	.word	0x40021000
 8003eb4:	40022000 	.word	0x40022000

08003eb8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003eb8:	4770      	bx	lr

08003eba <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 8003eba:	46c0      	nop			; (mov r8, r8)
  while (1)
 8003ebc:	e7fd      	b.n	8003eba <HardFault_Handler>

08003ebe <SVC_Handler>:
 8003ebe:	4770      	bx	lr

08003ec0 <PendSV_Handler>:
 8003ec0:	4770      	bx	lr

08003ec2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ec2:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ec4:	f000 fe12 	bl	8004aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ec8:	bd10      	pop	{r4, pc}
	...

08003ecc <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 8003ecc:	b510      	push	{r4, lr}
   HAL_EXTI_IRQHandler(&H_EXTI_0);
 8003ece:	4802      	ldr	r0, [pc, #8]	; (8003ed8 <EXTI0_1_IRQHandler+0xc>)
 8003ed0:	f001 faec 	bl	80054ac <HAL_EXTI_IRQHandler>
}
 8003ed4:	bd10      	pop	{r4, pc}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	200014b0 	.word	0x200014b0

08003edc <EXTI2_3_IRQHandler>:
 8003edc:	4770      	bx	lr

08003ede <EXTI4_15_IRQHandler>:
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}

void EXTI4_15_IRQHandler(void)
{
 8003ede:	b510      	push	{r4, lr}
  button_interrupt_handler();
 8003ee0:	f7ff fb8e 	bl	8003600 <button_interrupt_handler>
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
#endif
}
 8003ee4:	bd10      	pop	{r4, pc}
	...

08003ee8 <DMA1_Channel4_5_6_7_IRQHandler>:

  /* USER CODE END DMA1_Channel2_3_IRQHandler 1 */
}
#else
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8003ee8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(husart2.hdmatx);
 8003eea:	4b02      	ldr	r3, [pc, #8]	; (8003ef4 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8003eec:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003eee:	f001 fa84 	bl	80053fa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8003ef2:	bd10      	pop	{r4, pc}
 8003ef4:	20001384 	.word	0x20001384

08003ef8 <USART2_IRQHandler>:
#else
  /**
    * @brief This function handles USART2 Interrupt.
    */
  void USART2_IRQHandler(void)
  {
 8003ef8:	b510      	push	{r4, lr}
    /* USER CODE BEGIN USART2_IRQn 0 */
  
    /* USER CODE END USART2_IRQn 0 */
    HAL_UART_IRQHandler(&husart2);
 8003efa:	4802      	ldr	r0, [pc, #8]	; (8003f04 <USART2_IRQHandler+0xc>)
 8003efc:	f003 fb14 	bl	8007528 <HAL_UART_IRQHandler>
    /* USER CODE BEGIN USART2_IRQn 1 */
  
    /* USER CODE END USART2_IRQn 1 */
  }
 8003f00:	bd10      	pop	{r4, pc}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	20001384 	.word	0x20001384

08003f08 <RTC_IRQHandler>:
#endif


void RTC_IRQHandler(void)
{
 8003f08:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003f0a:	4802      	ldr	r0, [pc, #8]	; (8003f14 <RTC_IRQHandler+0xc>)
 8003f0c:	f002 fd48 	bl	80069a0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8003f10:	bd10      	pop	{r4, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	20001318 	.word	0x20001318

08003f18 <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 8003f18:	b40c      	push	{r2, r3}
 8003f1a:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8003f1c:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 8003f1e:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8003f20:	4a03      	ldr	r2, [pc, #12]	; (8003f30 <tiny_snprintf_like.constprop.0+0x18>)
  va_start(vaArgs, strFormat);
 8003f22:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8003f24:	f00b ffa4 	bl	800fe70 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8003f28:	b003      	add	sp, #12
 8003f2a:	bc08      	pop	{r3}
 8003f2c:	b002      	add	sp, #8
 8003f2e:	4718      	bx	r3
 8003f30:	08011c53 	.word	0x08011c53

08003f34 <TimestampNow>:
{
 8003f34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003f36:	0004      	movs	r4, r0
  SysTime_t curtime = SysTimeGet();
 8003f38:	ae02      	add	r6, sp, #8
 8003f3a:	0030      	movs	r0, r6
{
 8003f3c:	000d      	movs	r5, r1
  SysTime_t curtime = SysTimeGet();
 8003f3e:	f00b fdf5 	bl	800fb2c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8003f42:	2204      	movs	r2, #4
 8003f44:	5eb3      	ldrsh	r3, [r6, r2]
 8003f46:	2110      	movs	r1, #16
 8003f48:	0020      	movs	r0, r4
 8003f4a:	4a05      	ldr	r2, [pc, #20]	; (8003f60 <TimestampNow+0x2c>)
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	9b02      	ldr	r3, [sp, #8]
 8003f50:	f7ff ffe2 	bl	8003f18 <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 8003f54:	0020      	movs	r0, r4
 8003f56:	f7fc f8d7 	bl	8000108 <strlen>
 8003f5a:	8028      	strh	r0, [r5, #0]
}
 8003f5c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	08011c53 	.word	0x08011c53

08003f64 <SystemApp_Init>:
{
 8003f64:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f66:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f68:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f6a:	2704      	movs	r7, #4
{
 8003f6c:	b08b      	sub	sp, #44	; 0x2c
  UTIL_TIMER_Init();
 8003f6e:	f00b fe1b 	bl	800fba8 <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f72:	2208      	movs	r2, #8
 8003f74:	2100      	movs	r1, #0
 8003f76:	a808      	add	r0, sp, #32
 8003f78:	f00c f8db 	bl	8010132 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f7c:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7e:	4c2e      	ldr	r4, [pc, #184]	; (8004038 <SystemApp_Init+0xd4>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f80:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f84:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f86:	432b      	orrs	r3, r5
 8003f88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f8a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8c:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f8e:	402b      	ands	r3, r5
 8003f90:	9301      	str	r3, [sp, #4]
 8003f92:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003f96:	4333      	orrs	r3, r6
 8003f98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003f9c:	4033      	ands	r3, r6
 8003f9e:	9302      	str	r3, [sp, #8]
 8003fa0:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003fa2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003fa4:	433b      	orrs	r3, r7
 8003fa6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003faa:	403b      	ands	r3, r7
 8003fac:	9303      	str	r3, [sp, #12]
 8003fae:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003fb0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003fb8:	4013      	ands	r3, r2
 8003fba:	9304      	str	r3, [sp, #16]
 8003fbc:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8003fc6:	4b1d      	ldr	r3, [pc, #116]	; (800403c <SystemApp_Init+0xd8>)
 8003fc8:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fca:	f001 fa81 	bl	80054d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8003fce:	4b1c      	ldr	r3, [pc, #112]	; (8004040 <SystemApp_Init+0xdc>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fd0:	a905      	add	r1, sp, #20
 8003fd2:	481c      	ldr	r0, [pc, #112]	; (8004044 <SystemApp_Init+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8003fd4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fd6:	f001 fa7b 	bl	80054d0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fda:	a905      	add	r1, sp, #20
 8003fdc:	481a      	ldr	r0, [pc, #104]	; (8004048 <SystemApp_Init+0xe4>)
 8003fde:	f001 fa77 	bl	80054d0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003fe2:	a905      	add	r1, sp, #20
 8003fe4:	4819      	ldr	r0, [pc, #100]	; (800404c <SystemApp_Init+0xe8>)
 8003fe6:	f001 fa73 	bl	80054d0 <HAL_GPIO_Init>
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8003fea:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8003fec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003fee:	43ab      	bics	r3, r5
 8003ff0:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8003ff2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ff4:	43b3      	bics	r3, r6
 8003ff6:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8003ff8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ffa:	43bb      	bics	r3, r7
 8003ffc:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8003ffe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004000:	4393      	bics	r3, r2
 8004002:	62e3      	str	r3, [r4, #44]	; 0x2c
  UTIL_ADV_TRACE_Init();
 8004004:	f00b faee 	bl	800f5e4 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8004008:	4811      	ldr	r0, [pc, #68]	; (8004050 <SystemApp_Init+0xec>)
 800400a:	f00b fb15 	bl	800f638 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 800400e:	0030      	movs	r0, r6
 8004010:	f00b fb18 	bl	800f644 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8004014:	f7ff fa5c 	bl	80034d0 <SYS_InitMeasurement>
  Sx_Board_Bus_Init();
 8004018:	f000 fcf9 	bl	8004a0e <SX126x_RADIO_Bus_Init>
  Sx_Board_IoInit();
 800401c:	f000 fbaa 	bl	8004774 <SX126x_RADIO_IoInit>
  EnvSensors_Init();
 8004020:	f000 f89c 	bl	800415c <EnvSensors_Init>
  MX_BUTTON_Init();
 8004024:	f7ff fab4 	bl	8003590 <MX_BUTTON_Init>
  UTIL_LPM_Init();
 8004028:	f00b fc04 	bl	800f834 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800402c:	0029      	movs	r1, r5
 800402e:	0028      	movs	r0, r5
 8004030:	f00b fc1e 	bl	800f870 <UTIL_LPM_SetOffMode>
}
 8004034:	b00b      	add	sp, #44	; 0x2c
 8004036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004038:	40021000 	.word	0x40021000
 800403c:	00009fff 	.word	0x00009fff
 8004040:	0000ffff 	.word	0x0000ffff
 8004044:	50000400 	.word	0x50000400
 8004048:	50000800 	.word	0x50000800
 800404c:	50001c00 	.word	0x50001c00
 8004050:	08003f35 	.word	0x08003f35

08004054 <UTIL_SEQ_Idle>:
{
 8004054:	b510      	push	{r4, lr}
  UTIL_LPM_EnterLowPower();
 8004056:	f00b fc33 	bl	800f8c0 <UTIL_LPM_EnterLowPower>
}
 800405a:	bd10      	pop	{r4, pc}

0800405c <GetBatteryLevel>:
{
 800405c:	b513      	push	{r0, r1, r4, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 800405e:	f7ff fa3f 	bl	80034e0 <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8004062:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <GetBatteryLevel+0x3c>)
    batteryLevel = LORAWAN_MAX_BAT;
 8004064:	24fe      	movs	r4, #254	; 0xfe
  if (batteryLevelmV > VDD_BAT)
 8004066:	4298      	cmp	r0, r3
 8004068:	d80d      	bhi.n	8004086 <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 800406a:	23e1      	movs	r3, #225	; 0xe1
    batteryLevel = 0;
 800406c:	2400      	movs	r4, #0
  else if (batteryLevelmV < VDD_MIN)
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4298      	cmp	r0, r3
 8004072:	d308      	bcc.n	8004086 <GetBatteryLevel+0x2a>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8004074:	4b09      	ldr	r3, [pc, #36]	; (800409c <GetBatteryLevel+0x40>)
 8004076:	2196      	movs	r1, #150	; 0x96
 8004078:	18c0      	adds	r0, r0, r3
 800407a:	23fe      	movs	r3, #254	; 0xfe
 800407c:	00c9      	lsls	r1, r1, #3
 800407e:	4358      	muls	r0, r3
 8004080:	f7fc f872 	bl	8000168 <__udivsi3>
 8004084:	b2c4      	uxtb	r4, r0
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8004086:	2201      	movs	r2, #1
 8004088:	2100      	movs	r1, #0
 800408a:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <GetBatteryLevel+0x44>)
 800408c:	9400      	str	r4, [sp, #0]
 800408e:	2002      	movs	r0, #2
 8004090:	f00b fb20 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
}
 8004094:	0020      	movs	r0, r4
 8004096:	bd16      	pop	{r1, r2, r4, pc}
 8004098:	00000bb8 	.word	0x00000bb8
 800409c:	fffff8f8 	.word	0xfffff8f8
 80040a0:	08011c5c 	.word	0x08011c5c

080040a4 <GetTemperatureLevel>:
{
 80040a4:	b510      	push	{r4, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 80040a6:	f7ff fa31 	bl	800350c <SYS_GetTemperatureLevel>
 80040aa:	0002      	movs	r2, r0
 80040ac:	17c0      	asrs	r0, r0, #31
 80040ae:	b2c0      	uxtb	r0, r0
 80040b0:	1880      	adds	r0, r0, r2
 80040b2:	1200      	asrs	r0, r0, #8
  return temperatureLevel;
 80040b4:	b280      	uxth	r0, r0
}
 80040b6:	bd10      	pop	{r4, pc}

080040b8 <GetUniqueId>:
{
 80040b8:	b570      	push	{r4, r5, r6, lr}
 80040ba:	0004      	movs	r4, r0
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 80040bc:	f000 fd22 	bl	8004b04 <HAL_GetUIDw0>
 80040c0:	0005      	movs	r5, r0
 80040c2:	f000 fd2b 	bl	8004b1c <HAL_GetUIDw2>
 80040c6:	182d      	adds	r5, r5, r0
  uint32_t ID_2_val = HAL_GetUIDw1();
 80040c8:	f000 fd22 	bl	8004b10 <HAL_GetUIDw1>
  id[7] = (ID_1_3_val) >> 24;
 80040cc:	0e2b      	lsrs	r3, r5, #24
 80040ce:	71e3      	strb	r3, [r4, #7]
  id[6] = (ID_1_3_val) >> 16;
 80040d0:	0c2b      	lsrs	r3, r5, #16
 80040d2:	71a3      	strb	r3, [r4, #6]
  id[5] = (ID_1_3_val) >> 8;
 80040d4:	0a2b      	lsrs	r3, r5, #8
 80040d6:	7163      	strb	r3, [r4, #5]
  id[3] = (ID_2_val) >> 24;
 80040d8:	0e03      	lsrs	r3, r0, #24
 80040da:	70e3      	strb	r3, [r4, #3]
  id[2] = (ID_2_val) >> 16;
 80040dc:	0c03      	lsrs	r3, r0, #16
 80040de:	70a3      	strb	r3, [r4, #2]
  id[1] = (ID_2_val) >> 8;
 80040e0:	0a03      	lsrs	r3, r0, #8
  id[4] = (ID_1_3_val);
 80040e2:	7125      	strb	r5, [r4, #4]
  id[1] = (ID_2_val) >> 8;
 80040e4:	7063      	strb	r3, [r4, #1]
  id[0] = (ID_2_val);
 80040e6:	7020      	strb	r0, [r4, #0]
}
 80040e8:	bd70      	pop	{r4, r5, r6, pc}

080040ea <GetDevAddr>:
{
 80040ea:	b510      	push	{r4, lr}
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 80040ec:	f000 fd0a 	bl	8004b04 <HAL_GetUIDw0>
 80040f0:	0004      	movs	r4, r0
 80040f2:	f000 fd0d 	bl	8004b10 <HAL_GetUIDw1>
 80040f6:	4044      	eors	r4, r0
 80040f8:	f000 fd10 	bl	8004b1c <HAL_GetUIDw2>
 80040fc:	4060      	eors	r0, r4
}
 80040fe:	bd10      	pop	{r4, pc}

08004100 <UTIL_ADV_TRACE_PreSendHook>:
{
 8004100:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8004102:	2101      	movs	r1, #1
 8004104:	2004      	movs	r0, #4
 8004106:	f00b fb9d 	bl	800f844 <UTIL_LPM_SetStopMode>
}
 800410a:	bd10      	pop	{r4, pc}

0800410c <UTIL_ADV_TRACE_PostSendHook>:
{
 800410c:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 800410e:	2100      	movs	r1, #0
 8004110:	2004      	movs	r0, #4
 8004112:	f00b fb97 	bl	800f844 <UTIL_LPM_SetStopMode>
}
 8004116:	bd10      	pop	{r4, pc}

08004118 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8004118:	2000      	movs	r0, #0
 800411a:	4770      	bx	lr

0800411c <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 800411c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 800411e:	f7ff fe3d 	bl	8003d9c <RTC_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8004122:	bd10      	pop	{r4, pc}

08004124 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8004124:	b507      	push	{r0, r1, r2, lr}
 8004126:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8004128:	9801      	ldr	r0, [sp, #4]
 800412a:	f7ff fe47 	bl	8003dbc <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 800412e:	bd07      	pop	{r0, r1, r2, pc}

08004130 <EnvSensors_Read>:
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <EnvSensors_Read+0x18>)
 8004132:	6083      	str	r3, [r0, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8004134:	4b05      	ldr	r3, [pc, #20]	; (800414c <EnvSensors_Read+0x1c>)
 8004136:	6043      	str	r3, [r0, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8004138:	4b05      	ldr	r3, [pc, #20]	; (8004150 <EnvSensors_Read+0x20>)
 800413a:	6003      	str	r3, [r0, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 800413c:	4b05      	ldr	r3, [pc, #20]	; (8004154 <EnvSensors_Read+0x24>)
 800413e:	60c3      	str	r3, [r0, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8004140:	4b05      	ldr	r3, [pc, #20]	; (8004158 <EnvSensors_Read+0x28>)
 8004142:	6103      	str	r3, [r0, #16]
  /* USER CODE BEGIN EnvSensors_Read_Last */

  /* USER CODE END EnvSensors_Read_Last */
}
 8004144:	4770      	bx	lr
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	42480000 	.word	0x42480000
 800414c:	41900000 	.word	0x41900000
 8004150:	447a0000 	.word	0x447a0000
 8004154:	003e090d 	.word	0x003e090d
 8004158:	000503ab 	.word	0x000503ab

0800415c <EnvSensors_Init>:

void  EnvSensors_Init(void)
{
 800415c:	b510      	push	{r4, lr}
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE BEGIN EnvSensors_Init_Last */
#ifdef MURATA_SENSOR_ENABLE
    MX_I2C1_Init(&hi2c);//@Murata Init the i2c
 800415e:	4802      	ldr	r0, [pc, #8]	; (8004168 <EnvSensors_Init+0xc>)
 8004160:	f7ff fa76 	bl	8003650 <MX_I2C1_Init>
#endif /* MURATA_SENSOR_ENABLE  */

  /* USER CODE END EnvSensors_Init_Last */
}
 8004164:	bd10      	pop	{r4, pc}
 8004166:	46c0      	nop			; (mov r8, r8)
 8004168:	200012cc 	.word	0x200012cc

0800416c <MX_USART2_Init>:
/* USART2 init function */

void MX_USART2_Init(void)
{

  husart2.Instance        = USART2;
 800416c:	480a      	ldr	r0, [pc, #40]	; (8004198 <MX_USART2_Init+0x2c>)
 800416e:	4b0b      	ldr	r3, [pc, #44]	; (800419c <MX_USART2_Init+0x30>)
{
 8004170:	b510      	push	{r4, lr}
  husart2.Instance        = USART2;
 8004172:	6003      	str	r3, [r0, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8004174:	23e1      	movs	r3, #225	; 0xe1
 8004176:	025b      	lsls	r3, r3, #9
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
  husart2.Init.StopBits   = UART_STOPBITS_1;
  husart2.Init.Parity     = UART_PARITY_NONE;
  husart2.Init.Mode       = UART_MODE_TX_RX;
 8004178:	220c      	movs	r2, #12
  husart2.Init.BaudRate   = USART_BAUDRATE;
 800417a:	6043      	str	r3, [r0, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 800417c:	2300      	movs	r3, #0
  husart2.Init.Mode       = UART_MODE_TX_RX;
 800417e:	6142      	str	r2, [r0, #20]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004180:	6083      	str	r3, [r0, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 8004182:	60c3      	str	r3, [r0, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 8004184:	6103      	str	r3, [r0, #16]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8004186:	6183      	str	r3, [r0, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 8004188:	f003 fd66 	bl	8007c58 <HAL_UART_Init>
 800418c:	2800      	cmp	r0, #0
 800418e:	d001      	beq.n	8004194 <MX_USART2_Init+0x28>
  {
    Error_Handler();
 8004190:	f7ff fbd4 	bl	800393c <Error_Handler>
  }
}
 8004194:	bd10      	pop	{r4, pc}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	20001384 	.word	0x20001384
 800419c:	40004400 	.word	0x40004400

080041a0 <HAL_UART_MspInit>:

#endif

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 80041a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041a2:	0005      	movs	r5, r0
 80041a4:	b095      	sub	sp, #84	; 0x54

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041a6:	2214      	movs	r2, #20
 80041a8:	2100      	movs	r1, #0
 80041aa:	a806      	add	r0, sp, #24
 80041ac:	f00b ffc1 	bl	8010132 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041b0:	2224      	movs	r2, #36	; 0x24
 80041b2:	2100      	movs	r1, #0
 80041b4:	a80b      	add	r0, sp, #44	; 0x2c
 80041b6:	f00b ffbc 	bl	8010132 <memset>
  if (uartHandle->Instance == USART1)
 80041ba:	682b      	ldr	r3, [r5, #0]
 80041bc:	4a4d      	ldr	r2, [pc, #308]	; (80042f4 <HAL_UART_MspInit+0x154>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d169      	bne.n	8004296 <HAL_UART_MspInit+0xf6>

    /* USER CODE END USART1_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 80041c2:	2201      	movs	r2, #1
 80041c4:	4b4c      	ldr	r3, [pc, #304]	; (80042f8 <HAL_UART_MspInit+0x158>)
 80041c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041c8:	4311      	orrs	r1, r2
 80041ca:	62d9      	str	r1, [r3, #44]	; 0x2c
 80041cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041ce:	4011      	ands	r1, r2
 80041d0:	9100      	str	r1, [sp, #0]
 80041d2:	9900      	ldr	r1, [sp, #0]
    USARTx_RX_GPIO_CLK_ENABLE();
 80041d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041d6:	4311      	orrs	r1, r2
 80041d8:	62d9      	str	r1, [r3, #44]	; 0x2c
 80041da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041dc:	4011      	ands	r1, r2
 80041de:	9101      	str	r1, [sp, #4]
 80041e0:	9901      	ldr	r1, [sp, #4]

    /* Enable USARTx clock */
    __USART1_CLK_ENABLE();
 80041e2:	2180      	movs	r1, #128	; 0x80
 80041e4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80041e6:	01c9      	lsls	r1, r1, #7
 80041e8:	4308      	orrs	r0, r1
 80041ea:	6358      	str	r0, [r3, #52]	; 0x34

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 80041ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041ee:	4310      	orrs	r0, r2
 80041f0:	6318      	str	r0, [r3, #48]	; 0x30
 80041f2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80041f4:	4010      	ands	r0, r2
 80041f6:	9002      	str	r0, [sp, #8]
 80041f8:	9802      	ldr	r0, [sp, #8]

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80041fa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80041fc:	4301      	orrs	r1, r0
 80041fe:	6359      	str	r1, [r3, #52]	; 0x34

    /* Select SYSTEM clock for USART1 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004200:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004202:	920b      	str	r2, [sp, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8004204:	920d      	str	r2, [sp, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004206:	f002 fa8b 	bl	8006720 <HAL_RCCEx_PeriphCLKConfig>
 800420a:	2800      	cmp	r0, #0
 800420c:	d001      	beq.n	8004212 <HAL_UART_MspInit+0x72>
    {
      Error_Handler();
 800420e:	f7ff fb95 	bl	800393c <Error_Handler>

    /**USART2 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
      */
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8004212:	2604      	movs	r6, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8004214:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004216:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004218:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800421a:	2702      	movs	r7, #2
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 800421c:	a906      	add	r1, sp, #24
 800421e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004220:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8004222:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004224:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004226:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8004228:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 800422a:	f001 f951 	bl	80054d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 800422e:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8004230:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8004232:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8004234:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004236:	3b05      	subs	r3, #5
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8004238:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800423a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800423c:	9707      	str	r7, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423e:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8004240:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8004242:	f001 f945 	bl	80054d0 <HAL_GPIO_Init>


    /* USART1 DMA Init */
    /* USART1_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8004246:	482d      	ldr	r0, [pc, #180]	; (80042fc <HAL_UART_MspInit+0x15c>)
 8004248:	4b2d      	ldr	r3, [pc, #180]	; (8004300 <HAL_UART_MspInit+0x160>)
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 800424a:	6046      	str	r6, [r0, #4]
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 800424c:	6003      	str	r3, [r0, #0]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800424e:	2310      	movs	r3, #16
 8004250:	6083      	str	r3, [r0, #8]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004252:	3370      	adds	r3, #112	; 0x70
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004254:	60c4      	str	r4, [r0, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8004256:	6103      	str	r3, [r0, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004258:	6144      	str	r4, [r0, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 800425a:	6184      	str	r4, [r0, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 800425c:	61c4      	str	r4, [r0, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 800425e:	6204      	str	r4, [r0, #32]

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8004260:	f000 ffd2 	bl	8005208 <HAL_DMA_Init>
 8004264:	42a0      	cmp	r0, r4
 8004266:	d001      	beq.n	800426c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004268:	f7ff fb68 	bl	800393c <Error_Handler>
    }


    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 800426c:	4b23      	ldr	r3, [pc, #140]	; (80042fc <HAL_UART_MspInit+0x15c>)

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 800426e:	2201      	movs	r2, #1
 8004270:	2100      	movs	r1, #0
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8004272:	66eb      	str	r3, [r5, #108]	; 0x6c
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8004274:	200b      	movs	r0, #11
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8004276:	629d      	str	r5, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8004278:	f000 ff80 	bl	800517c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 800427c:	200b      	movs	r0, #11
 800427e:	f000 ffa7 	bl	80051d0 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8004282:	201c      	movs	r0, #28
 8004284:	2201      	movs	r2, #1
 8004286:	2100      	movs	r1, #0
 8004288:	f000 ff78 	bl	800517c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 800428c:	201c      	movs	r0, #28
 800428e:	f000 ff9f 	bl	80051d0 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 8004292:	b015      	add	sp, #84	; 0x54
 8004294:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (uartHandle->Instance == USART2)
 8004296:	4a1b      	ldr	r2, [pc, #108]	; (8004304 <HAL_UART_MspInit+0x164>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d1fa      	bne.n	8004292 <HAL_UART_MspInit+0xf2>
    USARTx_TX_GPIO_CLK_ENABLE();
 800429c:	2201      	movs	r2, #1
 800429e:	4b16      	ldr	r3, [pc, #88]	; (80042f8 <HAL_UART_MspInit+0x158>)
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80042a0:	2604      	movs	r6, #4
    USARTx_TX_GPIO_CLK_ENABLE();
 80042a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042a4:	4311      	orrs	r1, r2
 80042a6:	62d9      	str	r1, [r3, #44]	; 0x2c
 80042a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042aa:	4011      	ands	r1, r2
 80042ac:	9103      	str	r1, [sp, #12]
 80042ae:	9903      	ldr	r1, [sp, #12]
    USARTx_RX_GPIO_CLK_ENABLE();
 80042b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042b2:	4311      	orrs	r1, r2
 80042b4:	62d9      	str	r1, [r3, #44]	; 0x2c
 80042b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042b8:	4011      	ands	r1, r2
 80042ba:	9104      	str	r1, [sp, #16]
 80042bc:	9904      	ldr	r1, [sp, #16]
    __USART2_CLK_ENABLE();
 80042be:	2180      	movs	r1, #128	; 0x80
 80042c0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80042c2:	0289      	lsls	r1, r1, #10
 80042c4:	4308      	orrs	r0, r1
 80042c6:	6398      	str	r0, [r3, #56]	; 0x38
    DMAx_CLK_ENABLE();
 80042c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042ca:	4310      	orrs	r0, r2
 80042cc:	6318      	str	r0, [r3, #48]	; 0x30
 80042ce:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042d0:	4002      	ands	r2, r0
 80042d2:	9205      	str	r2, [sp, #20]
 80042d4:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_USART2_CLK_ENABLE();
 80042d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042d8:	a80b      	add	r0, sp, #44	; 0x2c
    __HAL_RCC_USART2_CLK_ENABLE();
 80042da:	4311      	orrs	r1, r2
 80042dc:	6399      	str	r1, [r3, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80042de:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80042e0:	960e      	str	r6, [sp, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80042e2:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80042e4:	f002 fa1c 	bl	8006720 <HAL_RCCEx_PeriphCLKConfig>
 80042e8:	2800      	cmp	r0, #0
 80042ea:	d100      	bne.n	80042ee <HAL_UART_MspInit+0x14e>
 80042ec:	e792      	b.n	8004214 <HAL_UART_MspInit+0x74>
      Error_Handler();
 80042ee:	f7ff fb25 	bl	800393c <Error_Handler>
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 80042f2:	e78f      	b.n	8004214 <HAL_UART_MspInit+0x74>
 80042f4:	40013800 	.word	0x40013800
 80042f8:	40021000 	.word	0x40021000
 80042fc:	2000133c 	.word	0x2000133c
 8004300:	40020080 	.word	0x40020080
 8004304:	40004400 	.word	0x40004400

08004308 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{
  if (uartHandle->Instance == USART1)
 8004308:	6803      	ldr	r3, [r0, #0]
 800430a:	4a14      	ldr	r2, [pc, #80]	; (800435c <HAL_UART_MspDeInit+0x54>)
{
 800430c:	b510      	push	{r4, lr}
 800430e:	0004      	movs	r4, r0
  if (uartHandle->Instance == USART1)
 8004310:	4293      	cmp	r3, r2
 8004312:	d110      	bne.n	8004336 <HAL_UART_MspDeInit+0x2e>

    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8004314:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_DISABLE();
 8004316:	4a12      	ldr	r2, [pc, #72]	; (8004360 <HAL_UART_MspDeInit+0x58>)
 8004318:	4912      	ldr	r1, [pc, #72]	; (8004364 <HAL_UART_MspDeInit+0x5c>)
 800431a:	6b53      	ldr	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 800431c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART1_CLK_DISABLE();
 800431e:	400b      	ands	r3, r1
 8004320:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8004322:	210c      	movs	r1, #12
 8004324:	f001 f994 	bl	8005650 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004328:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800432a:	f000 ffb1 	bl	8005290 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800432e:	201b      	movs	r0, #27

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004330:	f000 ff5a 	bl	80051e8 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8004334:	bd10      	pop	{r4, pc}
  else if (uartHandle->Instance == USART2)
 8004336:	4a0c      	ldr	r2, [pc, #48]	; (8004368 <HAL_UART_MspDeInit+0x60>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d1fb      	bne.n	8004334 <HAL_UART_MspDeInit+0x2c>
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 800433c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 800433e:	4a08      	ldr	r2, [pc, #32]	; (8004360 <HAL_UART_MspDeInit+0x58>)
 8004340:	490a      	ldr	r1, [pc, #40]	; (800436c <HAL_UART_MspDeInit+0x64>)
 8004342:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8004344:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 8004346:	400b      	ands	r3, r1
 8004348:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 800434a:	210c      	movs	r1, #12
 800434c:	f001 f980 	bl	8005650 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8004350:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8004352:	f000 ff9d 	bl	8005290 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8004356:	201c      	movs	r0, #28
 8004358:	e7ea      	b.n	8004330 <HAL_UART_MspDeInit+0x28>
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	40013800 	.word	0x40013800
 8004360:	40021000 	.word	0x40021000
 8004364:	ffffbfff 	.word	0xffffbfff
 8004368:	40004400 	.word	0x40004400
 800436c:	fffdffff 	.word	0xfffdffff

08004370 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8004370:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8004372:	4b03      	ldr	r3, [pc, #12]	; (8004380 <vcom_Init+0x10>)
 8004374:	6018      	str	r0, [r3, #0]
#ifdef USE_USART1
    MX_USART1_Init();
#else
    MX_USART2_Init();
 8004376:	f7ff fef9 	bl	800416c <MX_USART2_Init>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800437a:	2000      	movs	r0, #0
 800437c:	bd10      	pop	{r4, pc}
 800437e:	46c0      	nop			; (mov r8, r8)
 8004380:	200003c8 	.word	0x200003c8

08004384 <vcom_DeInit>:

#ifdef USE_USART1
  __HAL_RCC_USART1_FORCE_RESET();
  __HAL_RCC_USART1_RELEASE_RESET();
#else
  __HAL_RCC_USART2_FORCE_RESET();
 8004384:	2280      	movs	r2, #128	; 0x80
 8004386:	4b09      	ldr	r3, [pc, #36]	; (80043ac <vcom_DeInit+0x28>)
 8004388:	0292      	lsls	r2, r2, #10
 800438a:	6a99      	ldr	r1, [r3, #40]	; 0x28
{
 800438c:	b510      	push	{r4, lr}
  __HAL_RCC_USART2_FORCE_RESET();
 800438e:	430a      	orrs	r2, r1
 8004390:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 8004392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004394:	4906      	ldr	r1, [pc, #24]	; (80043b0 <vcom_DeInit+0x2c>)
#endif

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 8004396:	4807      	ldr	r0, [pc, #28]	; (80043b4 <vcom_DeInit+0x30>)
  __HAL_RCC_USART2_RELEASE_RESET();
 8004398:	400a      	ands	r2, r1
 800439a:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_UART_MspDeInit(&UartHandle);
 800439c:	f7ff ffb4 	bl	8004308 <HAL_UART_MspDeInit>
  /* USER CODE BEGIN 1 */
#ifdef USE_USART1
    HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);

#else
    HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80043a0:	200b      	movs	r0, #11
 80043a2:	f000 ff21 	bl	80051e8 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 80043a6:	2000      	movs	r0, #0
 80043a8:	bd10      	pop	{r4, pc}
 80043aa:	46c0      	nop			; (mov r8, r8)
 80043ac:	40021000 	.word	0x40021000
 80043b0:	fffdffff 	.word	0xfffdffff
 80043b4:	20001384 	.word	0x20001384

080043b8 <vcom_IoInit>:
UTIL_ADV_TRACE_Status_t vcom_IoInit(void)
{
 80043b8:	b530      	push	{r4, r5, lr}
    /* at that point, MCU has been awoken. Wake Up based on RXNE flag successful */
    HAL_UARTEx_DisableStopMode(&UartHandle);
 80043ba:	4c1b      	ldr	r4, [pc, #108]	; (8004428 <vcom_IoInit+0x70>)
{
 80043bc:	b089      	sub	sp, #36	; 0x24
    HAL_UARTEx_DisableStopMode(&UartHandle);
 80043be:	0020      	movs	r0, r4
 80043c0:	f003 fd50 	bl	8007e64 <HAL_UARTEx_DisableStopMode>

    /* Disable the UART Wake UP from stop mode Interrupt */
    __HAL_UART_DISABLE_IT(&UartHandle, UART_IT_WUF);
 80043c4:	6822      	ldr	r2, [r4, #0]
 80043c6:	4919      	ldr	r1, [pc, #100]	; (800442c <vcom_IoInit+0x74>)
 80043c8:	6893      	ldr	r3, [r2, #8]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
    GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;

    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 80043ca:	25a0      	movs	r5, #160	; 0xa0
    __HAL_UART_DISABLE_IT(&UartHandle, UART_IT_WUF);
 80043cc:	400b      	ands	r3, r1
 80043ce:	6093      	str	r3, [r2, #8]
    __HAL_DMA_ENABLE(UartHandle.hdmatx);
 80043d0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    GPIO_InitStruct.Pin       = USARTx_TX_Pin;
 80043d2:	2404      	movs	r4, #4
    __HAL_DMA_ENABLE(UartHandle.hdmatx);
 80043d4:	6819      	ldr	r1, [r3, #0]
 80043d6:	2301      	movs	r3, #1
 80043d8:	680a      	ldr	r2, [r1, #0]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 80043da:	05ed      	lsls	r5, r5, #23
    __HAL_DMA_ENABLE(UartHandle.hdmatx);
 80043dc:	431a      	orrs	r2, r3
 80043de:	600a      	str	r2, [r1, #0]
    USARTx_TX_GPIO_CLK_ENABLE();
 80043e0:	4a13      	ldr	r2, [pc, #76]	; (8004430 <vcom_IoInit+0x78>)
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 80043e2:	0028      	movs	r0, r5
    USARTx_TX_GPIO_CLK_ENABLE();
 80043e4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043e6:	4319      	orrs	r1, r3
 80043e8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80043ea:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043ec:	4019      	ands	r1, r3
 80043ee:	9101      	str	r1, [sp, #4]
 80043f0:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 80043f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043f4:	4319      	orrs	r1, r3
 80043f6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80043f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 80043fa:	a903      	add	r1, sp, #12
    USARTx_RX_GPIO_CLK_ENABLE();
 80043fc:	401a      	ands	r2, r3
 80043fe:	9202      	str	r2, [sp, #8]
 8004400:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004402:	2202      	movs	r2, #2
    GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8004404:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8004406:	189b      	adds	r3, r3, r2
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8004408:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800440a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin       = USARTx_TX_Pin;
 800440c:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 800440e:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8004410:	f001 f85e 	bl	80054d0 <HAL_GPIO_Init>

    /* UART RX GPIO pin configuration  */
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8004414:	2308      	movs	r3, #8
    GPIO_InitStruct.Alternate = USARTx_RX_AF;

    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8004416:	0028      	movs	r0, r5
 8004418:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 800441a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800441c:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 800441e:	f001 f857 	bl	80054d0 <HAL_GPIO_Init>
		
    return UTIL_ADV_TRACE_OK;
}
 8004422:	2000      	movs	r0, #0
 8004424:	b009      	add	sp, #36	; 0x24
 8004426:	bd30      	pop	{r4, r5, pc}
 8004428:	20001384 	.word	0x20001384
 800442c:	ffbfffff 	.word	0xffbfffff
 8004430:	40021000 	.word	0x40021000

08004434 <vcom_IoDeInit>:
 *****************************************************************************/

UTIL_ADV_TRACE_Status_t vcom_IoDeInit(void)
{
    /* make sure that no UART transfer is on-going */
    while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8004434:	2280      	movs	r2, #128	; 0x80
{
 8004436:	b510      	push	{r4, lr}
    while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8004438:	4c24      	ldr	r4, [pc, #144]	; (80044cc <vcom_IoDeInit+0x98>)
{
 800443a:	b08a      	sub	sp, #40	; 0x28
    while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	0252      	lsls	r2, r2, #9
 8004440:	69d9      	ldr	r1, [r3, #28]
 8004442:	4211      	tst	r1, r2
 8004444:	d1fc      	bne.n	8004440 <vcom_IoDeInit+0xc>

    /* make sure that UART is ready to receive
    * (test carried out again later in HAL_UARTEx_StopModeWakeUpSourceConfig) */
    while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8004446:	2280      	movs	r2, #128	; 0x80
 8004448:	03d2      	lsls	r2, r2, #15
 800444a:	69d9      	ldr	r1, [r3, #28]
 800444c:	4211      	tst	r1, r2
 800444e:	d0fc      	beq.n	800444a <vcom_IoDeInit+0x16>

    /* disable dma */
    __HAL_DMA_DISABLE(UartHandle.hdmatx);
 8004450:	2101      	movs	r1, #1
 8004452:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    UART_WakeUpTypeDef wakeup =
    {
        .WakeUpEvent = UART_WAKEUP_ON_STARTBIT
    };

    if (HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, wakeup) != HAL_OK)
 8004454:	0020      	movs	r0, r4
    __HAL_DMA_DISABLE(UartHandle.hdmatx);
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	6813      	ldr	r3, [r2, #0]
 800445a:	438b      	bics	r3, r1
    UART_WakeUpTypeDef wakeup =
 800445c:	2180      	movs	r1, #128	; 0x80
    __HAL_DMA_DISABLE(UartHandle.hdmatx);
 800445e:	6013      	str	r3, [r2, #0]
    UART_WakeUpTypeDef wakeup =
 8004460:	2200      	movs	r2, #0
 8004462:	0389      	lsls	r1, r1, #14
 8004464:	9204      	str	r2, [sp, #16]
 8004466:	9103      	str	r1, [sp, #12]
    if (HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, wakeup) != HAL_OK)
 8004468:	f003 fca8 	bl	8007dbc <HAL_UARTEx_StopModeWakeUpSourceConfig>
 800446c:	2800      	cmp	r0, #0
 800446e:	d001      	beq.n	8004474 <vcom_IoDeInit+0x40>
    {
        Error_Handler();
 8004470:	f7ff fa64 	bl	800393c <Error_Handler>
    }

    /* Enable the UART Wake UP from stop mode Interrupt */
    __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8004474:	2380      	movs	r3, #128	; 0x80
 8004476:	6822      	ldr	r2, [r4, #0]
 8004478:	03db      	lsls	r3, r3, #15
 800447a:	6891      	ldr	r1, [r2, #8]

    /* enable MCU wake-up by UART */
    HAL_UARTEx_EnableStopMode(&UartHandle);
 800447c:	0020      	movs	r0, r4
    __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 800447e:	430b      	orrs	r3, r1
 8004480:	6093      	str	r3, [r2, #8]
    HAL_UARTEx_EnableStopMode(&UartHandle);
 8004482:	f003 fcdf 	bl	8007e44 <HAL_UARTEx_EnableStopMode>

    /* Disable USARTx */
    GPIO_InitTypeDef GPIO_InitStructure = {0};
 8004486:	2208      	movs	r2, #8
 8004488:	2100      	movs	r1, #0
 800448a:	a808      	add	r0, sp, #32
 800448c:	f00b fe51 	bl	8010132 <memset>

    USARTx_TX_GPIO_CLK_ENABLE();
 8004490:	2201      	movs	r2, #1
 8004492:	4b0f      	ldr	r3, [pc, #60]	; (80044d0 <vcom_IoDeInit+0x9c>)

    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStructure.Pull = GPIO_NOPULL;
  
    GPIO_InitStructure.Pin =  USARTx_TX_Pin ;
    HAL_GPIO_Init(  USARTx_TX_GPIO_Port, &GPIO_InitStructure );
 8004494:	20a0      	movs	r0, #160	; 0xa0
    USARTx_TX_GPIO_CLK_ENABLE();
 8004496:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004498:	2400      	movs	r4, #0
    USARTx_TX_GPIO_CLK_ENABLE();
 800449a:	4311      	orrs	r1, r2
 800449c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800449e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(  USARTx_TX_GPIO_Port, &GPIO_InitStructure );
 80044a0:	05c0      	lsls	r0, r0, #23
    USARTx_TX_GPIO_CLK_ENABLE();
 80044a2:	4011      	ands	r1, r2
 80044a4:	9101      	str	r1, [sp, #4]
 80044a6:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 80044a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044aa:	4311      	orrs	r1, r2
 80044ac:	62d9      	str	r1, [r3, #44]	; 0x2c
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(  USARTx_TX_GPIO_Port, &GPIO_InitStructure );
 80044b0:	a905      	add	r1, sp, #20
    USARTx_RX_GPIO_CLK_ENABLE();
 80044b2:	401a      	ands	r2, r3
 80044b4:	9202      	str	r2, [sp, #8]
 80044b6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 80044b8:	2303      	movs	r3, #3
 80044ba:	9306      	str	r3, [sp, #24]
    GPIO_InitStructure.Pin =  USARTx_TX_Pin ;
 80044bc:	3301      	adds	r3, #1
    GPIO_InitStructure.Pull = GPIO_NOPULL;
 80044be:	9407      	str	r4, [sp, #28]
    GPIO_InitStructure.Pin =  USARTx_TX_Pin ;
 80044c0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(  USARTx_TX_GPIO_Port, &GPIO_InitStructure );
 80044c2:	f001 f805 	bl	80054d0 <HAL_GPIO_Init>

    return UTIL_ADV_TRACE_OK;
}
 80044c6:	0020      	movs	r0, r4
 80044c8:	b00a      	add	sp, #40	; 0x28
 80044ca:	bd10      	pop	{r4, pc}
 80044cc:	20001384 	.word	0x20001384
 80044d0:	40021000 	.word	0x40021000

080044d4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80044d4:	b510      	push	{r4, lr}
 80044d6:	000a      	movs	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 80044d8:	0001      	movs	r1, r0
 80044da:	4802      	ldr	r0, [pc, #8]	; (80044e4 <vcom_Trace_DMA+0x10>)
 80044dc:	f002 ff7a 	bl	80073d4 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80044e0:	2000      	movs	r0, #0
 80044e2:	bd10      	pop	{r4, pc}
 80044e4:	20001384 	.word	0x20001384

080044e8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80044e8:	b513      	push	{r0, r1, r4, lr}

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80044ea:	2180      	movs	r1, #128	; 0x80
  RxCpltCallback = RxCb;
 80044ec:	4b10      	ldr	r3, [pc, #64]	; (8004530 <vcom_ReceiveInit+0x48>)

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 80044ee:	4c11      	ldr	r4, [pc, #68]	; (8004534 <vcom_ReceiveInit+0x4c>)
  RxCpltCallback = RxCb;
 80044f0:	6058      	str	r0, [r3, #4]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 80044f2:	9a01      	ldr	r2, [sp, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80044f4:	0389      	lsls	r1, r1, #14
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 80044f6:	0020      	movs	r0, r4
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80044f8:	9100      	str	r1, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 80044fa:	f003 fc5f 	bl	8007dbc <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 80044fe:	2280      	movs	r2, #128	; 0x80
 8004500:	6823      	ldr	r3, [r4, #0]
 8004502:	0252      	lsls	r2, r2, #9
 8004504:	69d9      	ldr	r1, [r3, #28]
 8004506:	4211      	tst	r1, r2
 8004508:	d1fc      	bne.n	8004504 <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 800450a:	2280      	movs	r2, #128	; 0x80
 800450c:	03d2      	lsls	r2, r2, #15
 800450e:	69d9      	ldr	r1, [r3, #28]
 8004510:	4211      	tst	r1, r2
 8004512:	d0fc      	beq.n	800450e <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8004514:	6899      	ldr	r1, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8004516:	0020      	movs	r0, r4
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);
 8004518:	430a      	orrs	r2, r1
 800451a:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&UartHandle);
 800451c:	f003 fc92 	bl	8007e44 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, &charRx, 1);
 8004520:	2201      	movs	r2, #1
 8004522:	0020      	movs	r0, r4
 8004524:	4904      	ldr	r1, [pc, #16]	; (8004538 <vcom_ReceiveInit+0x50>)
 8004526:	f003 fc13 	bl	8007d50 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 800452a:	2000      	movs	r0, #0
 800452c:	bd16      	pop	{r1, r2, r4, pc}
 800452e:	46c0      	nop			; (mov r8, r8)
 8004530:	200003c8 	.word	0x200003c8
 8004534:	20001384 	.word	0x20001384
 8004538:	20001408 	.word	0x20001408

0800453c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800453c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 800453e:	4b02      	ldr	r3, [pc, #8]	; (8004548 <HAL_UART_TxCpltCallback+0xc>)
 8004540:	2000      	movs	r0, #0
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8004546:	bd10      	pop	{r4, pc}
 8004548:	200003c8 	.word	0x200003c8

0800454c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 800454c:	4b09      	ldr	r3, [pc, #36]	; (8004574 <HAL_UART_RxCpltCallback+0x28>)
{
 800454e:	b570      	push	{r4, r5, r6, lr}
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8004550:	685b      	ldr	r3, [r3, #4]
{
 8004552:	0004      	movs	r4, r0
 8004554:	4d08      	ldr	r5, [pc, #32]	; (8004578 <HAL_UART_RxCpltCallback+0x2c>)
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8004556:	2b00      	cmp	r3, #0
 8004558:	d006      	beq.n	8004568 <HAL_UART_RxCpltCallback+0x1c>
 800455a:	1d02      	adds	r2, r0, #4
 800455c:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800455e:	2a00      	cmp	r2, #0
 8004560:	d102      	bne.n	8004568 <HAL_UART_RxCpltCallback+0x1c>
  {
    RxCpltCallback(&charRx, 1, 0);
 8004562:	2101      	movs	r1, #1
 8004564:	0028      	movs	r0, r5
 8004566:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, &charRx, 1);
 8004568:	0029      	movs	r1, r5
 800456a:	2201      	movs	r2, #1
 800456c:	0020      	movs	r0, r4
 800456e:	f003 fbef 	bl	8007d50 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8004572:	bd70      	pop	{r4, r5, r6, pc}
 8004574:	200003c8 	.word	0x200003c8
 8004578:	20001408 	.word	0x20001408

0800457c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800457c:	480d      	ldr	r0, [pc, #52]	; (80045b4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800457e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004580:	480d      	ldr	r0, [pc, #52]	; (80045b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004582:	490e      	ldr	r1, [pc, #56]	; (80045bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004584:	4a0e      	ldr	r2, [pc, #56]	; (80045c0 <LoopForever+0xe>)
  movs r3, #0
 8004586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004588:	e002      	b.n	8004590 <LoopCopyDataInit>

0800458a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800458a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800458c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800458e:	3304      	adds	r3, #4

08004590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004594:	d3f9      	bcc.n	800458a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004596:	4a0b      	ldr	r2, [pc, #44]	; (80045c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004598:	4c0b      	ldr	r4, [pc, #44]	; (80045c8 <LoopForever+0x16>)
  movs r3, #0
 800459a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800459c:	e001      	b.n	80045a2 <LoopFillZerobss>

0800459e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800459e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045a0:	3204      	adds	r2, #4

080045a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045a4:	d3fb      	bcc.n	800459e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80045a6:	f000 fa5f 	bl	8004a68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045aa:	f00b fd95 	bl	80100d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045ae:	f7ff f99b 	bl	80038e8 <main>

080045b2 <LoopForever>:

LoopForever:
    b LoopForever
 80045b2:	e7fe      	b.n	80045b2 <LoopForever>
   ldr   r0, =_estack
 80045b4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80045b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045bc:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80045c0:	080120fc 	.word	0x080120fc
  ldr r2, =_sbss
 80045c4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80045c8:	20001660 	.word	0x20001660

080045cc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045cc:	e7fe      	b.n	80045cc <ADC1_COMP_IRQHandler>

080045ce <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045ce:	b570      	push	{r4, r5, r6, lr}
 80045d0:	000e      	movs	r6, r1
 80045d2:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045d4:	2500      	movs	r5, #0
 80045d6:	42a5      	cmp	r5, r4
 80045d8:	db01      	blt.n	80045de <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80045da:	0020      	movs	r0, r4
 80045dc:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80045de:	e000      	b.n	80045e2 <_read+0x14>
 80045e0:	bf00      	nop
 80045e2:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045e4:	3501      	adds	r5, #1
 80045e6:	e7f6      	b.n	80045d6 <_read+0x8>

080045e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045e8:	b570      	push	{r4, r5, r6, lr}
 80045ea:	000e      	movs	r6, r1
 80045ec:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045ee:	2500      	movs	r5, #0
 80045f0:	42a5      	cmp	r5, r4
 80045f2:	db01      	blt.n	80045f8 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80045f4:	0020      	movs	r0, r4
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80045f8:	5d70      	ldrb	r0, [r6, r5]
 80045fa:	e000      	b.n	80045fe <_write+0x16>
 80045fc:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045fe:	3501      	adds	r5, #1
 8004600:	e7f6      	b.n	80045f0 <_write+0x8>
	...

08004604 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004604:	4a0a      	ldr	r2, [pc, #40]	; (8004630 <_sbrk+0x2c>)
{
 8004606:	0003      	movs	r3, r0
	if (heap_end == 0)
 8004608:	6811      	ldr	r1, [r2, #0]
{
 800460a:	b510      	push	{r4, lr}
	if (heap_end == 0)
 800460c:	2900      	cmp	r1, #0
 800460e:	d101      	bne.n	8004614 <_sbrk+0x10>
		heap_end = &end;
 8004610:	4908      	ldr	r1, [pc, #32]	; (8004634 <_sbrk+0x30>)
 8004612:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8004614:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8004616:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8004618:	18c3      	adds	r3, r0, r3
 800461a:	428b      	cmp	r3, r1
 800461c:	d906      	bls.n	800462c <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800461e:	f00b fd55 	bl	80100cc <__errno>
 8004622:	230c      	movs	r3, #12
 8004624:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004626:	2001      	movs	r0, #1
 8004628:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800462a:	bd10      	pop	{r4, pc}
	heap_end += incr;
 800462c:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 800462e:	e7fc      	b.n	800462a <_sbrk+0x26>
 8004630:	200003d0 	.word	0x200003d0
 8004634:	20001660 	.word	0x20001660

08004638 <_close>:

int _close(int file)
{
	return -1;
 8004638:	2001      	movs	r0, #1
}
 800463a:	4240      	negs	r0, r0
 800463c:	4770      	bx	lr

0800463e <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800463e:	2380      	movs	r3, #128	; 0x80
 8004640:	019b      	lsls	r3, r3, #6
	return 0;
}
 8004642:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8004644:	604b      	str	r3, [r1, #4]
}
 8004646:	4770      	bx	lr

08004648 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8004648:	2001      	movs	r0, #1
 800464a:	4770      	bx	lr

0800464c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800464c:	2000      	movs	r0, #0
 800464e:	4770      	bx	lr

08004650 <BSP_SPI2_SendRecv>:
  */
int32_t BSP_SPI2_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8004650:	23fa      	movs	r3, #250	; 0xfa
{
 8004652:	b513      	push	{r0, r1, r4, lr}
  if (HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8004654:	009b      	lsls	r3, r3, #2
{
 8004656:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi2, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	0013      	movs	r3, r2
 800465c:	000a      	movs	r2, r1
 800465e:	0001      	movs	r1, r0
 8004660:	4804      	ldr	r0, [pc, #16]	; (8004674 <BSP_SPI2_SendRecv+0x24>)
 8004662:	f002 fda3 	bl	80071ac <HAL_SPI_TransmitReceive>
 8004666:	2800      	cmp	r0, #0
 8004668:	d101      	bne.n	800466e <BSP_SPI2_SendRecv+0x1e>
  {
    ret = len;
 800466a:	0020      	movs	r0, r4
  }
  return ret;
}
 800466c:	bd16      	pop	{r1, r2, r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800466e:	2006      	movs	r0, #6
 8004670:	4240      	negs	r0, r0
  return ret;
 8004672:	e7fb      	b.n	800466c <BSP_SPI2_SendRecv+0x1c>
 8004674:	2000140c 	.word	0x2000140c

08004678 <MX_SPI2_Init>:
/* SPI2 init function */

__weak HAL_StatusTypeDef MX_SPI2_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI2;
 8004678:	4b14      	ldr	r3, [pc, #80]	; (80046cc <MX_SPI2_Init+0x54>)
{
 800467a:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI2;
 800467c:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 800467e:	2382      	movs	r3, #130	; 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8004680:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8004682:	005b      	lsls	r3, r3, #1
 8004684:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8004686:	33fc      	adds	r3, #252	; 0xfc
 8004688:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800468a:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800468c:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800468e:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8004690:	6145      	str	r5, [r0, #20]
{
 8004692:	0004      	movs	r4, r0
  /* SPI2 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8004694:	f002 f834 	bl	8006700 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI2_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 8004698:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 800469a:	4a0d      	ldr	r2, [pc, #52]	; (80046d0 <MX_SPI2_Init+0x58>)
  {
    presc = baudrate[divisor];
 800469c:	490d      	ldr	r1, [pc, #52]	; (80046d4 <MX_SPI2_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 800469e:	4290      	cmp	r0, r2
 80046a0:	d80d      	bhi.n	80046be <MX_SPI2_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80046a2:	2300      	movs	r3, #0
 80046a4:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80046a6:	6263      	str	r3, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046a8:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 80046aa:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 80046ac:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 80046ae:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80046b0:	0020      	movs	r0, r4
 80046b2:	f002 fd19 	bl	80070e8 <HAL_SPI_Init>
 80046b6:	1e43      	subs	r3, r0, #1
 80046b8:	4198      	sbcs	r0, r3
  return ret;
 80046ba:	b2c0      	uxtb	r0, r0
}
 80046bc:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 80046be:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 80046c0:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 80046c2:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 80046c4:	2b08      	cmp	r3, #8
 80046c6:	d0ec      	beq.n	80046a2 <MX_SPI2_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 80046c8:	0840      	lsrs	r0, r0, #1
 80046ca:	e7e8      	b.n	800469e <MX_SPI2_Init+0x26>
 80046cc:	40003800 	.word	0x40003800
 80046d0:	00989680 	.word	0x00989680
 80046d4:	0801124c 	.word	0x0801124c

080046d8 <BSP_SPI2_Init>:
{
 80046d8:	b570      	push	{r4, r5, r6, lr}
  hspi2.Instance  = SPI2;
 80046da:	4d1a      	ldr	r5, [pc, #104]	; (8004744 <BSP_SPI2_Init+0x6c>)
 80046dc:	4b1a      	ldr	r3, [pc, #104]	; (8004748 <BSP_SPI2_Init+0x70>)
  if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 80046de:	0028      	movs	r0, r5
{
 80046e0:	b086      	sub	sp, #24
  hspi2.Instance  = SPI2;
 80046e2:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi2) == HAL_SPI_STATE_RESET)
 80046e4:	f002 fe57 	bl	8007396 <HAL_SPI_GetState>
 80046e8:	1e04      	subs	r4, r0, #0
 80046ea:	d002      	beq.n	80046f2 <BSP_SPI2_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 80046ec:	2000      	movs	r0, #0
}
 80046ee:	b006      	add	sp, #24
 80046f0:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_RCC_SPI2_CLK_ENABLE();
 80046f2:	2680      	movs	r6, #128	; 0x80
 80046f4:	4a15      	ldr	r2, [pc, #84]	; (800474c <BSP_SPI2_Init+0x74>)
 80046f6:	01f6      	lsls	r6, r6, #7
 80046f8:	6b93      	ldr	r3, [r2, #56]	; 0x38
  HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80046fa:	a901      	add	r1, sp, #4
  __HAL_RCC_SPI2_CLK_ENABLE();
 80046fc:	4333      	orrs	r3, r6
 80046fe:	6393      	str	r3, [r2, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004700:	2302      	movs	r3, #2
 8004702:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004704:	3301      	adds	r3, #1
 8004706:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8004708:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800470a:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 800470c:	021b      	lsls	r3, r3, #8
  GPIO_InitStruct.Alternate = BUS_SPI2_MOSI_GPIO_AF;
 800470e:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004710:	480f      	ldr	r0, [pc, #60]	; (8004750 <BSP_SPI2_Init+0x78>)
  GPIO_InitStruct.Pin = BUS_SPI2_MOSI_GPIO_PIN;
 8004712:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI2_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004714:	f000 fedc 	bl	80054d0 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004718:	480d      	ldr	r0, [pc, #52]	; (8004750 <BSP_SPI2_Init+0x78>)
 800471a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI2_MISO_GPIO_AF;
 800471c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI2_MISO_GPIO_PIN;
 800471e:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(BUS_SPI2_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004720:	f000 fed6 	bl	80054d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8004724:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004726:	480a      	ldr	r0, [pc, #40]	; (8004750 <BSP_SPI2_Init+0x78>)
  GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 8004728:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 800472a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI2_SCK_GPIO_AF;
 800472c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI2_SCK_GPIO_PIN;
 800472e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004730:	f000 fece 	bl	80054d0 <HAL_GPIO_Init>
    if (MX_SPI2_Init(&hspi2) != HAL_OK)
 8004734:	0028      	movs	r0, r5
 8004736:	f7ff ff9f 	bl	8004678 <MX_SPI2_Init>
 800473a:	2800      	cmp	r0, #0
 800473c:	d0d6      	beq.n	80046ec <BSP_SPI2_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 800473e:	2008      	movs	r0, #8
 8004740:	4240      	negs	r0, r0
  return ret;
 8004742:	e7d4      	b.n	80046ee <BSP_SPI2_Init+0x16>
 8004744:	2000140c 	.word	0x2000140c
 8004748:	40003800 	.word	0x40003800
 800474c:	40021000 	.word	0x40021000
 8004750:	50000400 	.word	0x50000400

08004754 <BSP_I2C1_IsReady>:
  */
int32_t BSP_I2C1_IsReady(uint16_t DevAddr, uint32_t Trials)
{
  int32_t ret = BSP_ERROR_NONE;

  if (HAL_I2C_IsDeviceReady(&hi2c1, DevAddr, Trials, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8004754:	2380      	movs	r3, #128	; 0x80
{
 8004756:	000a      	movs	r2, r1
  if (HAL_I2C_IsDeviceReady(&hi2c1, DevAddr, Trials, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8004758:	015b      	lsls	r3, r3, #5
 800475a:	0001      	movs	r1, r0
{
 800475c:	b510      	push	{r4, lr}
  if (HAL_I2C_IsDeviceReady(&hi2c1, DevAddr, Trials, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800475e:	4804      	ldr	r0, [pc, #16]	; (8004770 <BSP_I2C1_IsReady+0x1c>)
 8004760:	f001 fa9e 	bl	8005ca0 <HAL_I2C_IsDeviceReady>
  int32_t ret = BSP_ERROR_NONE;
 8004764:	2300      	movs	r3, #0
  if (HAL_I2C_IsDeviceReady(&hi2c1, DevAddr, Trials, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8004766:	4298      	cmp	r0, r3
 8004768:	d000      	beq.n	800476c <BSP_I2C1_IsReady+0x18>
  {
    ret = BSP_ERROR_BUSY;
 800476a:	3b03      	subs	r3, #3
  }

  return ret;
}
 800476c:	0018      	movs	r0, r3
 800476e:	bd10      	pop	{r4, pc}
 8004770:	20001464 	.word	0x20001464

08004774 <SX126x_RADIO_IoInit>:
static void SX126x_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void SX126x_RADIO_SPI_IoDeInit(void);
/* Exported functions --------------------------------------------------------*/

void SX126x_RADIO_IoInit(void)
{
 8004774:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 8004776:	2600      	movs	r6, #0
  SPI_HandleTypeDef dummy_hspi;

  /* DIO IO Init */

//   Set DioIrqHandler port in IT_RISING mode
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8004778:	2202      	movs	r2, #2
{
 800477a:	b093      	sub	sp, #76	; 0x4c
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 800477c:	4c46      	ldr	r4, [pc, #280]	; (8004898 <SX126x_RADIO_IoInit+0x124>)
  GPIO_InitTypeDef initStruct = {0};
 800477e:	960c      	str	r6, [sp, #48]	; 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8004780:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Mode = GPIO_MODE_IT_RISING;
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Speed = GPIO_SPEED_HIGH;
  initStruct.Pin = RADIO_DIO_1_PIN;
 8004782:	2501      	movs	r5, #1
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8004784:	4313      	orrs	r3, r2
 8004786:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004788:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 800478a:	4f44      	ldr	r7, [pc, #272]	; (800489c <SX126x_RADIO_IoInit+0x128>)
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 800478c:	4013      	ands	r3, r2
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	9b01      	ldr	r3, [sp, #4]
  initStruct.Mode = GPIO_MODE_IT_RISING;
 8004792:	4b43      	ldr	r3, [pc, #268]	; (80048a0 <SX126x_RADIO_IoInit+0x12c>)
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8004794:	0038      	movs	r0, r7
  initStruct.Mode = GPIO_MODE_IT_RISING;
 8004796:	9309      	str	r3, [sp, #36]	; 0x24
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004798:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 800479a:	a908      	add	r1, sp, #32
  initStruct.Speed = GPIO_SPEED_HIGH;
 800479c:	930b      	str	r3, [sp, #44]	; 0x2c
  initStruct.Pull = GPIO_NOPULL;
 800479e:	960a      	str	r6, [sp, #40]	; 0x28
  initStruct.Pin = RADIO_DIO_1_PIN;
 80047a0:	9508      	str	r5, [sp, #32]
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 80047a2:	f000 fe95 	bl	80054d0 <HAL_GPIO_Init>

  /* Radio IO Init */
  RADIO_DEV_SEL_CLK_ENABLE();
 80047a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Mode = GPIO_MODE_INPUT;
  initStruct.Pull = GPIO_NOPULL;
  //initStruct.Pin = DEVICE_SEL_PIN;
  //HAL_GPIO_Init(DEVICE_SEL_PORT, &initStruct);
  initStruct.Pin = RADIO_BUSY_PIN;
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 80047a8:	a908      	add	r1, sp, #32
  RADIO_DEV_SEL_CLK_ENABLE();
 80047aa:	432b      	orrs	r3, r5
 80047ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 80047ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 80047b0:	483c      	ldr	r0, [pc, #240]	; (80048a4 <SX126x_RADIO_IoInit+0x130>)
  RADIO_DEV_SEL_CLK_ENABLE();
 80047b2:	402b      	ands	r3, r5
 80047b4:	9302      	str	r3, [sp, #8]
 80047b6:	9b02      	ldr	r3, [sp, #8]
  RADIO_BUSY_CLK_ENABLE();
 80047b8:	2304      	movs	r3, #4
 80047ba:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80047bc:	431a      	orrs	r2, r3
 80047be:	62e2      	str	r2, [r4, #44]	; 0x2c
 80047c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  initStruct.Pin = RADIO_BUSY_PIN;
 80047c2:	9308      	str	r3, [sp, #32]
  RADIO_BUSY_CLK_ENABLE();
 80047c4:	401a      	ands	r2, r3
 80047c6:	9203      	str	r2, [sp, #12]
 80047c8:	9a03      	ldr	r2, [sp, #12]
  initStruct.Mode = GPIO_MODE_INPUT;
 80047ca:	9609      	str	r6, [sp, #36]	; 0x24
  initStruct.Pull = GPIO_NOPULL;
 80047cc:	960a      	str	r6, [sp, #40]	; 0x28
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 80047ce:	f000 fe7f 	bl	80054d0 <HAL_GPIO_Init>

  /* Antenna IO Init */
  RADIO_ANT_SWITCH_RX_CLK_ENABLE();
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
  initStruct.Pin = RADIO_ANT_SWITCH_RX_PIN;
 80047d2:	2180      	movs	r1, #128	; 0x80
  RADIO_ANT_SWITCH_RX_CLK_ENABLE();
 80047d4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_ANT_SWITCH_RX_PORT, &initStruct);
 80047d6:	a808      	add	r0, sp, #32
  RADIO_ANT_SWITCH_RX_CLK_ENABLE();
 80047d8:	432b      	orrs	r3, r5
 80047da:	62e3      	str	r3, [r4, #44]	; 0x2c
  initStruct.Pin = RADIO_ANT_SWITCH_RX_PIN;
 80047dc:	0209      	lsls	r1, r1, #8
  RADIO_ANT_SWITCH_RX_CLK_ENABLE();
 80047de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Pin = RADIO_ANT_SWITCH_RX_PIN;
 80047e0:	9108      	str	r1, [sp, #32]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_RX_PORT, &initStruct);
 80047e2:	0001      	movs	r1, r0
 80047e4:	20a0      	movs	r0, #160	; 0xa0
  RADIO_ANT_SWITCH_RX_CLK_ENABLE();
 80047e6:	402b      	ands	r3, r5
 80047e8:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_RX_PORT, &initStruct);
 80047ea:	05c0      	lsls	r0, r0, #23
  RADIO_ANT_SWITCH_RX_CLK_ENABLE();
 80047ec:	9b04      	ldr	r3, [sp, #16]
  initStruct.Pull = GPIO_NOPULL;
 80047ee:	960a      	str	r6, [sp, #40]	; 0x28
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047f0:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(RADIO_ANT_SWITCH_RX_PORT, &initStruct);
 80047f2:	f000 fe6d 	bl	80054d0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_ANT_SWITCH_RX_PORT, RADIO_ANT_SWITCH_RX_PIN, GPIO_PIN_RESET);
 80047f6:	2180      	movs	r1, #128	; 0x80
 80047f8:	20a0      	movs	r0, #160	; 0xa0
 80047fa:	0032      	movs	r2, r6
 80047fc:	0209      	lsls	r1, r1, #8
 80047fe:	05c0      	lsls	r0, r0, #23
 8004800:	f000 ffac 	bl	800575c <HAL_GPIO_WritePin>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8004804:	2202      	movs	r2, #2
 8004806:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8004808:	2180      	movs	r1, #128	; 0x80
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 800480a:	4313      	orrs	r3, r2
 800480c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800480e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8004810:	0209      	lsls	r1, r1, #8
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8004812:	4013      	ands	r3, r2
 8004814:	9305      	str	r3, [sp, #20]
 8004816:	9b05      	ldr	r3, [sp, #20]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8004818:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800481a:	0038      	movs	r0, r7
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 800481c:	4313      	orrs	r3, r2
 800481e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004820:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004822:	4013      	ands	r3, r2
 8004824:	9306      	str	r3, [sp, #24]
 8004826:	9b06      	ldr	r3, [sp, #24]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8004828:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800482a:	4313      	orrs	r3, r2
 800482c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800482e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8004830:	910d      	str	r1, [sp, #52]	; 0x34
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8004832:	4013      	ands	r3, r2
 8004834:	9307      	str	r3, [sp, #28]
 8004836:	9b07      	ldr	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004838:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800483a:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483c:	920e      	str	r2, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800483e:	920f      	str	r2, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004840:	9310      	str	r3, [sp, #64]	; 0x40
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8004842:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004844:	f000 fe44 	bl	80054d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8004848:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800484a:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800484c:	01db      	lsls	r3, r3, #7
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800484e:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8004850:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8004852:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004854:	f000 fe3c 	bl	80054d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8004858:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 800485a:	0038      	movs	r0, r7
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 800485c:	019b      	lsls	r3, r3, #6
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 800485e:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8004860:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8004862:	9611      	str	r6, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004864:	f000 fe34 	bl	80054d0 <HAL_GPIO_Init>
  RADIO_NSS_CLK_ENABLE();
 8004868:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 800486a:	0038      	movs	r0, r7
  RADIO_NSS_CLK_ENABLE();
 800486c:	432b      	orrs	r3, r5
 800486e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004870:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Pin = RADIO_NSS_PIN;
 8004872:	2480      	movs	r4, #128	; 0x80
  RADIO_NSS_CLK_ENABLE();
 8004874:	402b      	ands	r3, r5
 8004876:	930d      	str	r3, [sp, #52]	; 0x34
  initStruct.Pin = RADIO_NSS_PIN;
 8004878:	0164      	lsls	r4, r4, #5
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 800487a:	a908      	add	r1, sp, #32
  RADIO_NSS_CLK_ENABLE();
 800487c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800487e:	9509      	str	r5, [sp, #36]	; 0x24
  initStruct.Pull = GPIO_NOPULL;
 8004880:	960a      	str	r6, [sp, #40]	; 0x28
  initStruct.Pin = RADIO_NSS_PIN;
 8004882:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 8004884:	f000 fe24 	bl	80054d0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN,  GPIO_PIN_SET);
 8004888:	002a      	movs	r2, r5
 800488a:	0021      	movs	r1, r4
 800488c:	0038      	movs	r0, r7
 800488e:	f000 ff65 	bl	800575c <HAL_GPIO_WritePin>
}
 8004892:	b013      	add	sp, #76	; 0x4c
 8004894:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	40021000 	.word	0x40021000
 800489c:	50000400 	.word	0x50000400
 80048a0:	10110000 	.word	0x10110000
 80048a4:	50000800 	.word	0x50000800

080048a8 <SX126x_RADIO_IoDeInit>:
{
 80048a8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048aa:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80048ac:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80048ae:	2680      	movs	r6, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80048b0:	2580      	movs	r5, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80048b2:	4c14      	ldr	r4, [pc, #80]	; (8004904 <SX126x_RADIO_IoDeInit+0x5c>)
{
 80048b4:	b087      	sub	sp, #28
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80048b6:	0020      	movs	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80048b8:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80048ba:	023f      	lsls	r7, r7, #8
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80048bc:	18db      	adds	r3, r3, r3
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80048be:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80048c0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80048c2:	01f6      	lsls	r6, r6, #7
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80048c4:	9701      	str	r7, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80048c6:	f000 fe03 	bl	80054d0 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80048ca:	0020      	movs	r0, r4
 80048cc:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80048ce:	01ad      	lsls	r5, r5, #6
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80048d0:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80048d2:	f000 fdfd 	bl	80054d0 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80048d6:	0020      	movs	r0, r4
 80048d8:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80048da:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80048dc:	f000 fdf8 	bl	80054d0 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 80048e0:	0039      	movs	r1, r7
 80048e2:	0020      	movs	r0, r4
 80048e4:	2200      	movs	r2, #0
 80048e6:	f000 ff39 	bl	800575c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 80048ea:	0031      	movs	r1, r6
 80048ec:	0020      	movs	r0, r4
 80048ee:	2200      	movs	r2, #0
 80048f0:	f000 ff34 	bl	800575c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 80048f4:	2200      	movs	r2, #0
 80048f6:	0029      	movs	r1, r5
 80048f8:	0020      	movs	r0, r4
 80048fa:	f000 ff2f 	bl	800575c <HAL_GPIO_WritePin>
}
 80048fe:	b007      	add	sp, #28
 8004900:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004902:	46c0      	nop			; (mov r8, r8)
 8004904:	50000400 	.word	0x50000400

08004908 <SX126x_RADIO_IoIrqInit>:
  HAL_EXTI_GetHandle(&hRADIO_DIO_exti[0], RADIO_DIO_1_EXTI_LINE);
 8004908:	21c0      	movs	r1, #192	; 0xc0
{
 800490a:	b570      	push	{r4, r5, r6, lr}
 800490c:	0004      	movs	r4, r0
  HAL_EXTI_GetHandle(&hRADIO_DIO_exti[0], RADIO_DIO_1_EXTI_LINE);
 800490e:	4d09      	ldr	r5, [pc, #36]	; (8004934 <SX126x_RADIO_IoIrqInit+0x2c>)
 8004910:	04c9      	lsls	r1, r1, #19
 8004912:	0028      	movs	r0, r5
 8004914:	f000 fdc3 	bl	800549e <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[0], HAL_EXTI_COMMON_CB_ID, irqHandlers[0]);
 8004918:	0028      	movs	r0, r5
 800491a:	6822      	ldr	r2, [r4, #0]
 800491c:	2100      	movs	r1, #0
 800491e:	f000 fdb7 	bl	8005490 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(RADIO_DIO_1_IRQn, RADIO_DIO_1_IT_PRIO, 0x00);
 8004922:	2200      	movs	r2, #0
 8004924:	2005      	movs	r0, #5
 8004926:	0011      	movs	r1, r2
 8004928:	f000 fc28 	bl	800517c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RADIO_DIO_1_IRQn);
 800492c:	2005      	movs	r0, #5
 800492e:	f000 fc4f 	bl	80051d0 <HAL_NVIC_EnableIRQ>
}
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	200014b0 	.word	0x200014b0

08004938 <SX126x_RADIO_GetWakeUpTime>:
}
 8004938:	2005      	movs	r0, #5
 800493a:	4770      	bx	lr

0800493c <SX126x_RADIO_Reset>:
{
 800493c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = { 0 };
 800493e:	2714      	movs	r7, #20
{
 8004940:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 8004942:	003a      	movs	r2, r7
 8004944:	2100      	movs	r1, #0
 8004946:	a801      	add	r0, sp, #4
 8004948:	f00b fbf3 	bl	8010132 <memset>
  RADIO_RESET_CLK_ENABLE();
 800494c:	2004      	movs	r0, #4
 800494e:	4a18      	ldr	r2, [pc, #96]	; (80049b0 <SX126x_RADIO_Reset+0x74>)
  initStruct.Pull = GPIO_NOPULL;
 8004950:	2600      	movs	r6, #0
  RADIO_RESET_CLK_ENABLE();
 8004952:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  initStruct.Pin = RADIO_RESET_PIN;
 8004954:	2502      	movs	r5, #2
  RADIO_RESET_CLK_ENABLE();
 8004956:	4301      	orrs	r1, r0
 8004958:	62d1      	str	r1, [r2, #44]	; 0x2c
 800495a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 800495c:	4c15      	ldr	r4, [pc, #84]	; (80049b4 <SX126x_RADIO_Reset+0x78>)
  RADIO_RESET_CLK_ENABLE();
 800495e:	4003      	ands	r3, r0
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	9b00      	ldr	r3, [sp, #0]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004964:	2301      	movs	r3, #1
  HAL_Delay(10);
 8004966:	3006      	adds	r0, #6
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004968:	9302      	str	r3, [sp, #8]
  initStruct.Speed = GPIO_SPEED_HIGH;
 800496a:	3302      	adds	r3, #2
 800496c:	9304      	str	r3, [sp, #16]
  initStruct.Pull = GPIO_NOPULL;
 800496e:	9603      	str	r6, [sp, #12]
  HAL_Delay(10);
 8004970:	f7ff fbd8 	bl	8004124 <HAL_Delay>
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8004974:	0020      	movs	r0, r4
 8004976:	a901      	add	r1, sp, #4
  initStruct.Pin = RADIO_RESET_PIN;
 8004978:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 800497a:	f000 fda9 	bl	80054d0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 800497e:	0032      	movs	r2, r6
 8004980:	0029      	movs	r1, r5
 8004982:	0020      	movs	r0, r4
 8004984:	f000 feea 	bl	800575c <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8004988:	0038      	movs	r0, r7
 800498a:	f7ff fbcb 	bl	8004124 <HAL_Delay>
  initStruct.Mode = GPIO_MODE_ANALOG;
 800498e:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8004990:	0020      	movs	r0, r4
 8004992:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_MODE_ANALOG;
 8004994:	9302      	str	r3, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 8004996:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8004998:	f000 fd9a 	bl	80054d0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);  // internal pull-up
 800499c:	0032      	movs	r2, r6
 800499e:	0029      	movs	r1, r5
 80049a0:	0020      	movs	r0, r4
 80049a2:	f000 fedb 	bl	800575c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80049a6:	200a      	movs	r0, #10
 80049a8:	f7ff fbbc 	bl	8004124 <HAL_Delay>
}
 80049ac:	b007      	add	sp, #28
 80049ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b0:	40021000 	.word	0x40021000
 80049b4:	50000400 	.word	0x50000400

080049b8 <SX126x_RADIO_WaitOnBusy>:
{
 80049b8:	b510      	push	{r4, lr}
  while (HAL_GPIO_ReadPin(RADIO_BUSY_PORT, RADIO_BUSY_PIN) == 1);
 80049ba:	2104      	movs	r1, #4
 80049bc:	4802      	ldr	r0, [pc, #8]	; (80049c8 <SX126x_RADIO_WaitOnBusy+0x10>)
 80049be:	f000 fec7 	bl	8005750 <HAL_GPIO_ReadPin>
 80049c2:	2801      	cmp	r0, #1
 80049c4:	d0f9      	beq.n	80049ba <SX126x_RADIO_WaitOnBusy+0x2>
}
 80049c6:	bd10      	pop	{r4, pc}
 80049c8:	50000800 	.word	0x50000800

080049cc <SX126x_RADIO_ChipSelect>:
{
 80049cc:	0002      	movs	r2, r0
 80049ce:	b510      	push	{r4, lr}
  if (state == 0)
 80049d0:	2800      	cmp	r0, #0
 80049d2:	d105      	bne.n	80049e0 <SX126x_RADIO_ChipSelect+0x14>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 80049d4:	2180      	movs	r1, #128	; 0x80
 80049d6:	4803      	ldr	r0, [pc, #12]	; (80049e4 <SX126x_RADIO_ChipSelect+0x18>)
 80049d8:	0149      	lsls	r1, r1, #5
 80049da:	f000 febf 	bl	800575c <HAL_GPIO_WritePin>
}
 80049de:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 80049e0:	2201      	movs	r2, #1
 80049e2:	e7f7      	b.n	80049d4 <SX126x_RADIO_ChipSelect+0x8>
 80049e4:	50000400 	.word	0x50000400

080049e8 <SX126x_RADIO_GetPaSelect>:
}
 80049e8:	2002      	movs	r0, #2
 80049ea:	4770      	bx	lr

080049ec <SX126x_RADIO_SetAntSw>:
{
 80049ec:	0002      	movs	r2, r0
 80049ee:	b510      	push	{r4, lr}
  switch (state)
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d106      	bne.n	8004a02 <SX126x_RADIO_SetAntSw+0x16>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_RX_PORT, RADIO_ANT_SWITCH_RX_PIN, GPIO_PIN_SET);
 80049f4:	2180      	movs	r1, #128	; 0x80
 80049f6:	20a0      	movs	r0, #160	; 0xa0
 80049f8:	0209      	lsls	r1, r1, #8
 80049fa:	05c0      	lsls	r0, r0, #23
 80049fc:	f000 feae 	bl	800575c <HAL_GPIO_WritePin>
}
 8004a00:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_RX_PORT, RADIO_ANT_SWITCH_RX_PIN, GPIO_PIN_SET);
 8004a02:	2201      	movs	r2, #1
 8004a04:	e7f6      	b.n	80049f4 <SX126x_RADIO_SetAntSw+0x8>

08004a06 <SX126x_RADIO_BoardIsTcxo>:
}
 8004a06:	2001      	movs	r0, #1
 8004a08:	4770      	bx	lr

08004a0a <SX126x_RADIO_BoardSetLedTx>:
}
 8004a0a:	4770      	bx	lr

08004a0c <SX126x_RADIO_BoardSetLedRx>:
 8004a0c:	4770      	bx	lr

08004a0e <SX126x_RADIO_Bus_Init>:
{
 8004a0e:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 8004a10:	f7ff fe62 	bl	80046d8 <BSP_SPI2_Init>
}
 8004a14:	bd10      	pop	{r4, pc}

08004a16 <SX126x_RADIO_SendRecv>:
{
 8004a16:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8004a18:	240e      	movs	r4, #14
{
 8004a1a:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8004a1c:	446c      	add	r4, sp
{
 8004a1e:	80d8      	strh	r0, [r3, #6]
 8004a20:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8004a22:	2201      	movs	r2, #1
 8004a24:	0021      	movs	r1, r4
 8004a26:	0018      	movs	r0, r3
 8004a28:	f7ff fe12 	bl	8004650 <BSP_SPI2_SendRecv>
  return rxData;
 8004a2c:	8820      	ldrh	r0, [r4, #0]
}
 8004a2e:	b004      	add	sp, #16
 8004a30:	bd10      	pop	{r4, pc}
	...

08004a34 <SX126x_RADIO_WakeUp>:
{
 8004a34:	b570      	push	{r4, r5, r6, lr}
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 8004a36:	2580      	movs	r5, #128	; 0x80
 8004a38:	4c0a      	ldr	r4, [pc, #40]	; (8004a64 <SX126x_RADIO_WakeUp+0x30>)
 8004a3a:	016d      	lsls	r5, r5, #5
 8004a3c:	0029      	movs	r1, r5
 8004a3e:	2200      	movs	r2, #0
 8004a40:	0020      	movs	r0, r4
 8004a42:	f000 fe8b 	bl	800575c <HAL_GPIO_WritePin>
  SX126x_RADIO_SendRecv(RADIO_GET_STATUS);
 8004a46:	20c0      	movs	r0, #192	; 0xc0
 8004a48:	f7ff ffe5 	bl	8004a16 <SX126x_RADIO_SendRecv>
  SX126x_RADIO_SendRecv(0);
 8004a4c:	2000      	movs	r0, #0
 8004a4e:	f7ff ffe2 	bl	8004a16 <SX126x_RADIO_SendRecv>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8004a52:	0029      	movs	r1, r5
 8004a54:	2201      	movs	r2, #1
 8004a56:	0020      	movs	r0, r4
 8004a58:	f000 fe80 	bl	800575c <HAL_GPIO_WritePin>
  SX126x_RADIO_WaitOnBusy();
 8004a5c:	f7ff ffac 	bl	80049b8 <SX126x_RADIO_WaitOnBusy>
}
 8004a60:	bd70      	pop	{r4, r5, r6, pc}
 8004a62:	46c0      	nop			; (mov r8, r8)
 8004a64:	50000400 	.word	0x50000400

08004a68 <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8004a68:	2280      	movs	r2, #128	; 0x80
 8004a6a:	4b10      	ldr	r3, [pc, #64]	; (8004aac <SystemInit+0x44>)
 8004a6c:	0052      	lsls	r2, r2, #1
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	490e      	ldr	r1, [pc, #56]	; (8004ab0 <SystemInit+0x48>)
 8004a78:	400a      	ands	r2, r1
 8004a7a:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	490d      	ldr	r1, [pc, #52]	; (8004ab4 <SystemInit+0x4c>)
 8004a80:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004a82:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8004a84:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	438a      	bics	r2, r1
 8004a8a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	490a      	ldr	r1, [pc, #40]	; (8004ab8 <SystemInit+0x50>)
 8004a90:	400a      	ands	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	4909      	ldr	r1, [pc, #36]	; (8004abc <SystemInit+0x54>)
 8004a98:	400a      	ands	r2, r1
 8004a9a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004aa0:	2280      	movs	r2, #128	; 0x80
 8004aa2:	4b07      	ldr	r3, [pc, #28]	; (8004ac0 <SystemInit+0x58>)
 8004aa4:	0512      	lsls	r2, r2, #20
 8004aa6:	609a      	str	r2, [r3, #8]
#endif
}
 8004aa8:	4770      	bx	lr
 8004aaa:	46c0      	nop			; (mov r8, r8)
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	88ff400c 	.word	0x88ff400c
 8004ab4:	fef6fff6 	.word	0xfef6fff6
 8004ab8:	fffbffff 	.word	0xfffbffff
 8004abc:	ff02ffff 	.word	0xff02ffff
 8004ac0:	e000ed00 	.word	0xe000ed00

08004ac4 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	4a08      	ldr	r2, [pc, #32]	; (8004ae8 <HAL_Init+0x24>)
{
 8004ac8:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004aca:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004acc:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004ad2:	f7ff fb21 	bl	8004118 <HAL_InitTick>
 8004ad6:	1e04      	subs	r4, r0, #0
 8004ad8:	d103      	bne.n	8004ae2 <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004ada:	f7ff f9d5 	bl	8003e88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8004ade:	0020      	movs	r0, r4
 8004ae0:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8004ae2:	2401      	movs	r4, #1
 8004ae4:	e7fb      	b.n	8004ade <HAL_Init+0x1a>
 8004ae6:	46c0      	nop			; (mov r8, r8)
 8004ae8:	40022000 	.word	0x40022000

08004aec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004aec:	4a03      	ldr	r2, [pc, #12]	; (8004afc <HAL_IncTick+0x10>)
 8004aee:	4b04      	ldr	r3, [pc, #16]	; (8004b00 <HAL_IncTick+0x14>)
 8004af0:	6811      	ldr	r1, [r2, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	185b      	adds	r3, r3, r1
 8004af6:	6013      	str	r3, [r2, #0]
}
 8004af8:	4770      	bx	lr
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	200014b8 	.word	0x200014b8
 8004b00:	20000038 	.word	0x20000038

08004b04 <HAL_GetUIDw0>:
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8004b04:	4b01      	ldr	r3, [pc, #4]	; (8004b0c <HAL_GetUIDw0+0x8>)
 8004b06:	6818      	ldr	r0, [r3, #0]
}
 8004b08:	4770      	bx	lr
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	1ff80050 	.word	0x1ff80050

08004b10 <HAL_GetUIDw1>:
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 8004b10:	4b01      	ldr	r3, [pc, #4]	; (8004b18 <HAL_GetUIDw1+0x8>)
 8004b12:	6818      	ldr	r0, [r3, #0]
}
 8004b14:	4770      	bx	lr
 8004b16:	46c0      	nop			; (mov r8, r8)
 8004b18:	1ff80054 	.word	0x1ff80054

08004b1c <HAL_GetUIDw2>:
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8004b1c:	4b01      	ldr	r3, [pc, #4]	; (8004b24 <HAL_GetUIDw2+0x8>)
 8004b1e:	6818      	ldr	r0, [r3, #0]
}
 8004b20:	4770      	bx	lr
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	1ff80064 	.word	0x1ff80064

08004b28 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004b28:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <ADC_DelayMicroSecond+0x24>)
{
 8004b2a:	b513      	push	{r0, r1, r4, lr}
 8004b2c:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004b2e:	4908      	ldr	r1, [pc, #32]	; (8004b50 <ADC_DelayMicroSecond+0x28>)
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	f7fb fb19 	bl	8000168 <__udivsi3>
 8004b36:	4344      	muls	r4, r0
 8004b38:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8004b3a:	9b01      	ldr	r3, [sp, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d100      	bne.n	8004b42 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8004b40:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8004b42:	9b01      	ldr	r3, [sp, #4]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	9301      	str	r3, [sp, #4]
 8004b48:	e7f7      	b.n	8004b3a <ADC_DelayMicroSecond+0x12>
 8004b4a:	46c0      	nop			; (mov r8, r8)
 8004b4c:	20000034 	.word	0x20000034
 8004b50:	000f4240 	.word	0x000f4240

08004b54 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004b54:	2103      	movs	r1, #3
 8004b56:	6803      	ldr	r3, [r0, #0]
{
 8004b58:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004b5a:	689a      	ldr	r2, [r3, #8]
{
 8004b5c:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004b5e:	400a      	ands	r2, r1
 8004b60:	2a01      	cmp	r2, #1
 8004b62:	d104      	bne.n	8004b6e <ADC_Enable+0x1a>
 8004b64:	6819      	ldr	r1, [r3, #0]
 8004b66:	4211      	tst	r1, r2
 8004b68:	d001      	beq.n	8004b6e <ADC_Enable+0x1a>
  return HAL_OK;
 8004b6a:	2000      	movs	r0, #0
}
 8004b6c:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004b6e:	6899      	ldr	r1, [r3, #8]
 8004b70:	4a13      	ldr	r2, [pc, #76]	; (8004bc0 <ADC_Enable+0x6c>)
 8004b72:	4211      	tst	r1, r2
 8004b74:	d008      	beq.n	8004b88 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b76:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b78:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b7a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b82:	4303      	orrs	r3, r0
 8004b84:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8004b86:	e7f1      	b.n	8004b6c <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8004b88:	2501      	movs	r5, #1
 8004b8a:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004b8c:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8004b8e:	432a      	orrs	r2, r5
 8004b90:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8004b92:	f7ff ffc9 	bl	8004b28 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8004b96:	f7ff fac1 	bl	800411c <HAL_GetTick>
 8004b9a:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b9c:	6823      	ldr	r3, [r4, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	422b      	tst	r3, r5
 8004ba2:	d1e2      	bne.n	8004b6a <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ba4:	f7ff faba 	bl	800411c <HAL_GetTick>
 8004ba8:	1b80      	subs	r0, r0, r6
 8004baa:	280a      	cmp	r0, #10
 8004bac:	d9f6      	bls.n	8004b9c <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bae:	2310      	movs	r3, #16
 8004bb0:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8004bb2:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004bba:	431d      	orrs	r5, r3
 8004bbc:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004bbe:	e7d5      	b.n	8004b6c <ADC_Enable+0x18>
 8004bc0:	80000017 	.word	0x80000017

08004bc4 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004bc4:	2103      	movs	r1, #3
 8004bc6:	6803      	ldr	r3, [r0, #0]
{
 8004bc8:	b570      	push	{r4, r5, r6, lr}
 8004bca:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004bcc:	6898      	ldr	r0, [r3, #8]
 8004bce:	4008      	ands	r0, r1
 8004bd0:	2801      	cmp	r0, #1
 8004bd2:	d001      	beq.n	8004bd8 <ADC_Disable+0x14>
  return HAL_OK;
 8004bd4:	2000      	movs	r0, #0
}
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	4202      	tst	r2, r0
 8004bdc:	d0fa      	beq.n	8004bd4 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004bde:	2205      	movs	r2, #5
 8004be0:	689d      	ldr	r5, [r3, #8]
 8004be2:	4015      	ands	r5, r2
 8004be4:	2d01      	cmp	r5, #1
 8004be6:	d119      	bne.n	8004c1c <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8004be8:	6898      	ldr	r0, [r3, #8]
 8004bea:	3a03      	subs	r2, #3
 8004bec:	4302      	orrs	r2, r0
 8004bee:	609a      	str	r2, [r3, #8]
 8004bf0:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8004bf2:	f7ff fa93 	bl	800411c <HAL_GetTick>
 8004bf6:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	422b      	tst	r3, r5
 8004bfe:	d0e9      	beq.n	8004bd4 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c00:	f7ff fa8c 	bl	800411c <HAL_GetTick>
 8004c04:	1b80      	subs	r0, r0, r6
 8004c06:	280a      	cmp	r0, #10
 8004c08:	d9f6      	bls.n	8004bf8 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c0a:	2310      	movs	r3, #16
 8004c0c:	6d62      	ldr	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c0e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c10:	4313      	orrs	r3, r2
 8004c12:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c14:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c16:	431d      	orrs	r5, r3
 8004c18:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004c1a:	e7dc      	b.n	8004bd6 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c1c:	2310      	movs	r3, #16
 8004c1e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004c20:	4313      	orrs	r3, r2
 8004c22:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c26:	4303      	orrs	r3, r0
 8004c28:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8004c2a:	e7d4      	b.n	8004bd6 <ADC_Disable+0x12>

08004c2c <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004c2c:	2204      	movs	r2, #4
 8004c2e:	6803      	ldr	r3, [r0, #0]
{
 8004c30:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004c32:	6899      	ldr	r1, [r3, #8]
{
 8004c34:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004c36:	4211      	tst	r1, r2
 8004c38:	d101      	bne.n	8004c3e <ADC_ConversionStop+0x12>
  return HAL_OK;
 8004c3a:	2000      	movs	r0, #0
}
 8004c3c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004c3e:	6899      	ldr	r1, [r3, #8]
 8004c40:	4211      	tst	r1, r2
 8004c42:	d006      	beq.n	8004c52 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8004c44:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004c46:	0792      	lsls	r2, r2, #30
 8004c48:	d403      	bmi.n	8004c52 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8004c4a:	2210      	movs	r2, #16
 8004c4c:	6899      	ldr	r1, [r3, #8]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004c52:	f7ff fa63 	bl	800411c <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004c56:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8004c58:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004c5a:	6823      	ldr	r3, [r4, #0]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	4233      	tst	r3, r6
 8004c60:	d0eb      	beq.n	8004c3a <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004c62:	f7ff fa5b 	bl	800411c <HAL_GetTick>
 8004c66:	1b40      	subs	r0, r0, r5
 8004c68:	280a      	cmp	r0, #10
 8004c6a:	d9f6      	bls.n	8004c5a <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c6c:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c6e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c70:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004c72:	4313      	orrs	r3, r2
 8004c74:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c76:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004c78:	4303      	orrs	r3, r0
 8004c7a:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004c7c:	e7de      	b.n	8004c3c <ADC_ConversionStop+0x10>
	...

08004c80 <HAL_ADC_Init>:
{
 8004c80:	b570      	push	{r4, r5, r6, lr}
 8004c82:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004c84:	2001      	movs	r0, #1
  if(hadc == NULL)
 8004c86:	2c00      	cmp	r4, #0
 8004c88:	d01b      	beq.n	8004cc2 <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004c8a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d106      	bne.n	8004c9e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8004c90:	0022      	movs	r2, r4
 8004c92:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8004c94:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8004c96:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8004c98:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8004c9a:	f7fe fb9b 	bl	80033d4 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004c9e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004ca0:	06db      	lsls	r3, r3, #27
 8004ca2:	d406      	bmi.n	8004cb2 <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	2204      	movs	r2, #4
 8004ca8:	6899      	ldr	r1, [r3, #8]
 8004caa:	0008      	movs	r0, r1
 8004cac:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8004cae:	4211      	tst	r1, r2
 8004cb0:	d008      	beq.n	8004cc4 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cb2:	2310      	movs	r3, #16
 8004cb4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8004cb6:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	3450      	adds	r4, #80	; 0x50
 8004cc0:	7023      	strb	r3, [r4, #0]
}
 8004cc2:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8004cc4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004cc6:	4955      	ldr	r1, [pc, #340]	; (8004e1c <HAL_ADC_Init+0x19c>)
 8004cc8:	4011      	ands	r1, r2
 8004cca:	2202      	movs	r2, #2
 8004ccc:	430a      	orrs	r2, r1
 8004cce:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004cd0:	2203      	movs	r2, #3
 8004cd2:	6899      	ldr	r1, [r3, #8]
 8004cd4:	4011      	ands	r1, r2
 8004cd6:	4a52      	ldr	r2, [pc, #328]	; (8004e20 <HAL_ADC_Init+0x1a0>)
 8004cd8:	2901      	cmp	r1, #1
 8004cda:	d102      	bne.n	8004ce2 <HAL_ADC_Init+0x62>
 8004cdc:	681d      	ldr	r5, [r3, #0]
 8004cde:	420d      	tst	r5, r1
 8004ce0:	d119      	bne.n	8004d16 <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004ce2:	2680      	movs	r6, #128	; 0x80
 8004ce4:	6861      	ldr	r1, [r4, #4]
 8004ce6:	05f6      	lsls	r6, r6, #23
 8004ce8:	004d      	lsls	r5, r1, #1
 8004cea:	086d      	lsrs	r5, r5, #1
 8004cec:	42b5      	cmp	r5, r6
 8004cee:	d003      	beq.n	8004cf8 <HAL_ADC_Init+0x78>
 8004cf0:	2580      	movs	r5, #128	; 0x80
 8004cf2:	062d      	lsls	r5, r5, #24
 8004cf4:	42a9      	cmp	r1, r5
 8004cf6:	d176      	bne.n	8004de6 <HAL_ADC_Init+0x166>
 8004cf8:	691d      	ldr	r5, [r3, #16]
 8004cfa:	00ad      	lsls	r5, r5, #2
 8004cfc:	08ad      	lsrs	r5, r5, #2
 8004cfe:	611d      	str	r5, [r3, #16]
 8004d00:	691d      	ldr	r5, [r3, #16]
 8004d02:	4329      	orrs	r1, r5
 8004d04:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004d06:	2518      	movs	r5, #24
 8004d08:	68d9      	ldr	r1, [r3, #12]
 8004d0a:	43a9      	bics	r1, r5
 8004d0c:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8004d0e:	68d9      	ldr	r1, [r3, #12]
 8004d10:	68a5      	ldr	r5, [r4, #8]
 8004d12:	4329      	orrs	r1, r5
 8004d14:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004d16:	6811      	ldr	r1, [r2, #0]
 8004d18:	4d42      	ldr	r5, [pc, #264]	; (8004e24 <HAL_ADC_Init+0x1a4>)
 8004d1a:	4029      	ands	r1, r5
 8004d1c:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8004d1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d20:	6815      	ldr	r5, [r2, #0]
 8004d22:	0649      	lsls	r1, r1, #25
 8004d24:	4329      	orrs	r1, r5
 8004d26:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004d28:	2280      	movs	r2, #128	; 0x80
 8004d2a:	6899      	ldr	r1, [r3, #8]
 8004d2c:	0552      	lsls	r2, r2, #21
 8004d2e:	4211      	tst	r1, r2
 8004d30:	d102      	bne.n	8004d38 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8004d32:	6899      	ldr	r1, [r3, #8]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004d38:	68da      	ldr	r2, [r3, #12]
 8004d3a:	493b      	ldr	r1, [pc, #236]	; (8004e28 <HAL_ADC_Init+0x1a8>)
 8004d3c:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004d3e:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004d40:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004d42:	68dd      	ldr	r5, [r3, #12]
 8004d44:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004d46:	2902      	cmp	r1, #2
 8004d48:	d100      	bne.n	8004d4c <HAL_ADC_Init+0xcc>
 8004d4a:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004d4c:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004d4e:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004d50:	4332      	orrs	r2, r6
 8004d52:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004d54:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004d56:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004d58:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004d5a:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004d5c:	69e5      	ldr	r5, [r4, #28]
 8004d5e:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004d60:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004d62:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004d64:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004d66:	0025      	movs	r5, r4
 8004d68:	352c      	adds	r5, #44	; 0x2c
 8004d6a:	782d      	ldrb	r5, [r5, #0]
 8004d6c:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004d6e:	432a      	orrs	r2, r5
 8004d70:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d72:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004d74:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004d76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004d78:	30ff      	adds	r0, #255	; 0xff
 8004d7a:	4282      	cmp	r2, r0
 8004d7c:	d004      	beq.n	8004d88 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8004d7e:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8004d80:	68d8      	ldr	r0, [r3, #12]
 8004d82:	432a      	orrs	r2, r5
 8004d84:	4302      	orrs	r2, r0
 8004d86:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004d88:	1ca2      	adds	r2, r4, #2
 8004d8a:	7fd2      	ldrb	r2, [r2, #31]
 8004d8c:	2a01      	cmp	r2, #1
 8004d8e:	d106      	bne.n	8004d9e <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8004d90:	2900      	cmp	r1, #0
 8004d92:	d134      	bne.n	8004dfe <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8004d94:	2280      	movs	r2, #128	; 0x80
 8004d96:	68d9      	ldr	r1, [r3, #12]
 8004d98:	0252      	lsls	r2, r2, #9
 8004d9a:	430a      	orrs	r2, r1
 8004d9c:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8004d9e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004da0:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8004da2:	2901      	cmp	r1, #1
 8004da4:	d133      	bne.n	8004e0e <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004da6:	4821      	ldr	r0, [pc, #132]	; (8004e2c <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004da8:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8004daa:	4002      	ands	r2, r0
 8004dac:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004dae:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004db0:	6918      	ldr	r0, [r3, #16]
 8004db2:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8004db4:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8004db6:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8004db8:	4302      	orrs	r2, r0
 8004dba:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	4311      	orrs	r1, r2
 8004dc0:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004dc2:	2107      	movs	r1, #7
 8004dc4:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8004dc6:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8004dc8:	438a      	bics	r2, r1
 8004dca:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8004dcc:	695a      	ldr	r2, [r3, #20]
 8004dce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8004dd4:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8004dd6:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8004dd8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004dda:	4393      	bics	r3, r2
 8004ddc:	001a      	movs	r2, r3
 8004dde:	2301      	movs	r3, #1
 8004de0:	4313      	orrs	r3, r2
 8004de2:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8004de4:	e76d      	b.n	8004cc2 <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004de6:	691d      	ldr	r5, [r3, #16]
 8004de8:	4e11      	ldr	r6, [pc, #68]	; (8004e30 <HAL_ADC_Init+0x1b0>)
 8004dea:	00ad      	lsls	r5, r5, #2
 8004dec:	08ad      	lsrs	r5, r5, #2
 8004dee:	611d      	str	r5, [r3, #16]
 8004df0:	6815      	ldr	r5, [r2, #0]
 8004df2:	4035      	ands	r5, r6
 8004df4:	6015      	str	r5, [r2, #0]
 8004df6:	6815      	ldr	r5, [r2, #0]
 8004df8:	4329      	orrs	r1, r5
 8004dfa:	6011      	str	r1, [r2, #0]
 8004dfc:	e783      	b.n	8004d06 <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004dfe:	2120      	movs	r1, #32
 8004e00:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e02:	4301      	orrs	r1, r0
 8004e04:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e06:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	65a2      	str	r2, [r4, #88]	; 0x58
 8004e0c:	e7c7      	b.n	8004d9e <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8004e0e:	2101      	movs	r1, #1
 8004e10:	420a      	tst	r2, r1
 8004e12:	d0d6      	beq.n	8004dc2 <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004e14:	691a      	ldr	r2, [r3, #16]
 8004e16:	438a      	bics	r2, r1
 8004e18:	611a      	str	r2, [r3, #16]
 8004e1a:	e7d2      	b.n	8004dc2 <HAL_ADC_Init+0x142>
 8004e1c:	fffffefd 	.word	0xfffffefd
 8004e20:	40012708 	.word	0x40012708
 8004e24:	fdffffff 	.word	0xfdffffff
 8004e28:	fffe0219 	.word	0xfffe0219
 8004e2c:	fffffc03 	.word	0xfffffc03
 8004e30:	ffc3ffff 	.word	0xffc3ffff

08004e34 <HAL_ADC_DeInit>:
{
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004e38:	2501      	movs	r5, #1
  if(hadc == NULL)
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	d011      	beq.n	8004e62 <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8004e3e:	2302      	movs	r3, #2
 8004e40:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8004e42:	4313      	orrs	r3, r2
 8004e44:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004e46:	f7ff fef1 	bl	8004c2c <ADC_ConversionStop>
 8004e4a:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8004e4c:	d137      	bne.n	8004ebe <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 8004e4e:	0020      	movs	r0, r4
 8004e50:	f7ff feb8 	bl	8004bc4 <ADC_Disable>
 8004e54:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 8004e56:	2801      	cmp	r0, #1
 8004e58:	d105      	bne.n	8004e66 <HAL_ADC_DeInit+0x32>
{
 8004e5a:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	3450      	adds	r4, #80	; 0x50
 8004e60:	7023      	strb	r3, [r4, #0]
}
 8004e62:	0028      	movs	r0, r5
 8004e64:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 8004e66:	2301      	movs	r3, #1
 8004e68:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8004e6a:	6823      	ldr	r3, [r4, #0]
 8004e6c:	4915      	ldr	r1, [pc, #84]	; (8004ec4 <HAL_ADC_DeInit+0x90>)
 8004e6e:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 8004e70:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8004e72:	400a      	ands	r2, r1
 8004e74:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8004e76:	4a14      	ldr	r2, [pc, #80]	; (8004ec8 <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8004e78:	4914      	ldr	r1, [pc, #80]	; (8004ecc <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8004e7a:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8004e7c:	689a      	ldr	r2, [r3, #8]
 8004e7e:	400a      	ands	r2, r1
 8004e80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	4912      	ldr	r1, [pc, #72]	; (8004ed0 <HAL_ADC_DeInit+0x9c>)
 8004e86:	400a      	ands	r2, r1
 8004e88:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	4911      	ldr	r1, [pc, #68]	; (8004ed4 <HAL_ADC_DeInit+0xa0>)
 8004e8e:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8004e90:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8004e92:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	438a      	bics	r2, r1
 8004e98:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8004e9a:	6a1a      	ldr	r2, [r3, #32]
 8004e9c:	490e      	ldr	r1, [pc, #56]	; (8004ed8 <HAL_ADC_DeInit+0xa4>)
 8004e9e:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8004ea0:	217f      	movs	r1, #127	; 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8004ea2:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8004ea4:	33b4      	adds	r3, #180	; 0xb4
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	438a      	bics	r2, r1
 8004eaa:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	438a      	bics	r2, r1
 8004eb0:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 8004eb2:	f7fe fa9f 	bl	80033f4 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 8004eba:	6563      	str	r3, [r4, #84]	; 0x54
 8004ebc:	e7ce      	b.n	8004e5c <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 8004ebe:	2801      	cmp	r0, #1
 8004ec0:	d0cb      	beq.n	8004e5a <HAL_ADC_DeInit+0x26>
 8004ec2:	e7d2      	b.n	8004e6a <HAL_ADC_DeInit+0x36>
 8004ec4:	fffff760 	.word	0xfffff760
 8004ec8:	0000089f 	.word	0x0000089f
 8004ecc:	efffffff 	.word	0xefffffff
 8004ed0:	833e0200 	.word	0x833e0200
 8004ed4:	3ffffc02 	.word	0x3ffffc02
 8004ed8:	f000f000 	.word	0xf000f000

08004edc <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004edc:	6803      	ldr	r3, [r0, #0]
{
 8004ede:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004ee0:	689b      	ldr	r3, [r3, #8]
{
 8004ee2:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8004ee4:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004ee6:	075b      	lsls	r3, r3, #29
 8004ee8:	d41a      	bmi.n	8004f20 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8004eea:	0025      	movs	r5, r4
 8004eec:	3550      	adds	r5, #80	; 0x50
 8004eee:	782b      	ldrb	r3, [r5, #0]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d015      	beq.n	8004f20 <HAL_ADC_Start+0x44>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004ef8:	69e3      	ldr	r3, [r4, #28]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d111      	bne.n	8004f22 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8004efe:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f00:	4a0b      	ldr	r2, [pc, #44]	; (8004f30 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8004f02:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8004f04:	401a      	ands	r2, r3
 8004f06:	2380      	movs	r3, #128	; 0x80
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004f0c:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8004f0e:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8004f10:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8004f12:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004f14:	6823      	ldr	r3, [r4, #0]
 8004f16:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004f18:	6899      	ldr	r1, [r3, #8]
 8004f1a:	3a18      	subs	r2, #24
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	609a      	str	r2, [r3, #8]
}
 8004f20:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8004f22:	0020      	movs	r0, r4
 8004f24:	f7ff fe16 	bl	8004b54 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	d0e8      	beq.n	8004efe <HAL_ADC_Start+0x22>
 8004f2c:	e7f8      	b.n	8004f20 <HAL_ADC_Start+0x44>
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	fffff0fe 	.word	0xfffff0fe

08004f34 <HAL_ADC_Stop>:
{
 8004f34:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8004f36:	0006      	movs	r6, r0
 8004f38:	3650      	adds	r6, #80	; 0x50
 8004f3a:	7833      	ldrb	r3, [r6, #0]
{
 8004f3c:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8004f3e:	2002      	movs	r0, #2
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d012      	beq.n	8004f6a <HAL_ADC_Stop+0x36>
 8004f44:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004f46:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8004f48:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004f4a:	f7ff fe6f 	bl	8004c2c <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8004f4e:	2800      	cmp	r0, #0
 8004f50:	d109      	bne.n	8004f66 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8004f52:	0020      	movs	r0, r4
 8004f54:	f7ff fe36 	bl	8004bc4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	d104      	bne.n	8004f66 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8004f5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004f5e:	4a03      	ldr	r2, [pc, #12]	; (8004f6c <HAL_ADC_Stop+0x38>)
 8004f60:	4013      	ands	r3, r2
 8004f62:	431d      	orrs	r5, r3
 8004f64:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8004f66:	2300      	movs	r3, #0
 8004f68:	7033      	strb	r3, [r6, #0]
}
 8004f6a:	bd70      	pop	{r4, r5, r6, pc}
 8004f6c:	fffffefe 	.word	0xfffffefe

08004f70 <HAL_ADC_PollForConversion>:
{
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004f72:	6946      	ldr	r6, [r0, #20]
{
 8004f74:	0004      	movs	r4, r0
 8004f76:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004f78:	2e08      	cmp	r6, #8
 8004f7a:	d00d      	beq.n	8004f98 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004f7c:	6803      	ldr	r3, [r0, #0]
 8004f7e:	2001      	movs	r0, #1
 8004f80:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8004f82:	260c      	movs	r6, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004f84:	4203      	tst	r3, r0
 8004f86:	d007      	beq.n	8004f98 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f88:	2320      	movs	r3, #32
 8004f8a:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8004f8c:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8004f92:	2300      	movs	r3, #0
 8004f94:	7023      	strb	r3, [r4, #0]
}
 8004f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8004f98:	f7ff f8c0 	bl	800411c <HAL_GetTick>
 8004f9c:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4216      	tst	r6, r2
 8004fa4:	d024      	beq.n	8004ff0 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004fa6:	2280      	movs	r2, #128	; 0x80
 8004fa8:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004faa:	0092      	lsls	r2, r2, #2
 8004fac:	430a      	orrs	r2, r1
 8004fae:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004fb0:	22c0      	movs	r2, #192	; 0xc0
 8004fb2:	68d9      	ldr	r1, [r3, #12]
 8004fb4:	0112      	lsls	r2, r2, #4
 8004fb6:	4211      	tst	r1, r2
 8004fb8:	d113      	bne.n	8004fe2 <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004fba:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004fbc:	7fd2      	ldrb	r2, [r2, #31]
 8004fbe:	2a00      	cmp	r2, #0
 8004fc0:	d10f      	bne.n	8004fe2 <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	0712      	lsls	r2, r2, #28
 8004fc6:	d50c      	bpl.n	8004fe2 <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004fc8:	689a      	ldr	r2, [r3, #8]
 8004fca:	0752      	lsls	r2, r2, #29
 8004fcc:	d423      	bmi.n	8005016 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004fce:	210c      	movs	r1, #12
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	438a      	bics	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8004fd6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004fd8:	4913      	ldr	r1, [pc, #76]	; (8005028 <HAL_ADC_PollForConversion+0xb8>)
 8004fda:	4011      	ands	r1, r2
 8004fdc:	2201      	movs	r2, #1
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 8004fe2:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004fe4:	69a2      	ldr	r2, [r4, #24]
 8004fe6:	4282      	cmp	r2, r0
 8004fe8:	d1d5      	bne.n	8004f96 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004fea:	220c      	movs	r2, #12
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e7d2      	b.n	8004f96 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8004ff0:	1c6a      	adds	r2, r5, #1
 8004ff2:	d0d5      	beq.n	8004fa0 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004ff4:	2d00      	cmp	r5, #0
 8004ff6:	d108      	bne.n	800500a <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ff8:	2304      	movs	r3, #4
 8004ffa:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8004ffc:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004ffe:	4313      	orrs	r3, r2
 8005000:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8005002:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8005004:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8005006:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8005008:	e7c5      	b.n	8004f96 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800500a:	f7ff f887 	bl	800411c <HAL_GetTick>
 800500e:	1bc0      	subs	r0, r0, r7
 8005010:	42a8      	cmp	r0, r5
 8005012:	d9c4      	bls.n	8004f9e <HAL_ADC_PollForConversion+0x2e>
 8005014:	e7f0      	b.n	8004ff8 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005016:	2220      	movs	r2, #32
 8005018:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800501a:	430a      	orrs	r2, r1
 800501c:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800501e:	2201      	movs	r2, #1
 8005020:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005022:	430a      	orrs	r2, r1
 8005024:	65a2      	str	r2, [r4, #88]	; 0x58
 8005026:	e7dc      	b.n	8004fe2 <HAL_ADC_PollForConversion+0x72>
 8005028:	fffffefe 	.word	0xfffffefe

0800502c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800502c:	6803      	ldr	r3, [r0, #0]
 800502e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8005030:	4770      	bx	lr
	...

08005034 <HAL_ADC_ConfigChannel>:
{
 8005034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8005036:	0004      	movs	r4, r0
 8005038:	3450      	adds	r4, #80	; 0x50
 800503a:	7822      	ldrb	r2, [r4, #0]
{
 800503c:	0003      	movs	r3, r0
 800503e:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8005040:	2002      	movs	r0, #2
 8005042:	2a01      	cmp	r2, #1
 8005044:	d00b      	beq.n	800505e <HAL_ADC_ConfigChannel+0x2a>
 8005046:	3801      	subs	r0, #1
 8005048:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	6891      	ldr	r1, [r2, #8]
 800504e:	0749      	lsls	r1, r1, #29
 8005050:	d506      	bpl.n	8005060 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005052:	2220      	movs	r2, #32
 8005054:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005056:	430a      	orrs	r2, r1
 8005058:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 800505a:	2300      	movs	r3, #0
 800505c:	7023      	strb	r3, [r4, #0]
}
 800505e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sConfig->Rank != ADC_RANK_NONE)
 8005060:	2380      	movs	r3, #128	; 0x80
 8005062:	6828      	ldr	r0, [r5, #0]
 8005064:	4e19      	ldr	r6, [pc, #100]	; (80050cc <HAL_ADC_ConfigChannel+0x98>)
 8005066:	686f      	ldr	r7, [r5, #4]
 8005068:	0341      	lsls	r1, r0, #13
 800506a:	02db      	lsls	r3, r3, #11
 800506c:	0b49      	lsrs	r1, r1, #13
 800506e:	4003      	ands	r3, r0
 8005070:	42b7      	cmp	r7, r6
 8005072:	d019      	beq.n	80050a8 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8005074:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8005076:	4301      	orrs	r1, r0
 8005078:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800507a:	2b00      	cmp	r3, #0
 800507c:	d008      	beq.n	8005090 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 800507e:	2380      	movs	r3, #128	; 0x80
 8005080:	4a13      	ldr	r2, [pc, #76]	; (80050d0 <HAL_ADC_ConfigChannel+0x9c>)
 8005082:	041b      	lsls	r3, r3, #16
 8005084:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8005086:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8005088:	430b      	orrs	r3, r1
 800508a:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800508c:	f7ff fd4c 	bl	8004b28 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8005090:	682b      	ldr	r3, [r5, #0]
 8005092:	039b      	lsls	r3, r3, #14
 8005094:	d505      	bpl.n	80050a2 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8005096:	2380      	movs	r3, #128	; 0x80
 8005098:	4a0d      	ldr	r2, [pc, #52]	; (80050d0 <HAL_ADC_ConfigChannel+0x9c>)
 800509a:	03db      	lsls	r3, r3, #15
 800509c:	6811      	ldr	r1, [r2, #0]
 800509e:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80050a0:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 80050a2:	2000      	movs	r0, #0
 80050a4:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80050a6:	e7da      	b.n	800505e <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80050a8:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80050aa:	438d      	bics	r5, r1
 80050ac:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d004      	beq.n	80050bc <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80050b2:	4a07      	ldr	r2, [pc, #28]	; (80050d0 <HAL_ADC_ConfigChannel+0x9c>)
 80050b4:	4907      	ldr	r1, [pc, #28]	; (80050d4 <HAL_ADC_ConfigChannel+0xa0>)
 80050b6:	6813      	ldr	r3, [r2, #0]
 80050b8:	400b      	ands	r3, r1
 80050ba:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80050bc:	0383      	lsls	r3, r0, #14
 80050be:	d5f0      	bpl.n	80050a2 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80050c0:	4a03      	ldr	r2, [pc, #12]	; (80050d0 <HAL_ADC_ConfigChannel+0x9c>)
 80050c2:	4905      	ldr	r1, [pc, #20]	; (80050d8 <HAL_ADC_ConfigChannel+0xa4>)
 80050c4:	6813      	ldr	r3, [r2, #0]
 80050c6:	400b      	ands	r3, r1
 80050c8:	e7ea      	b.n	80050a0 <HAL_ADC_ConfigChannel+0x6c>
 80050ca:	46c0      	nop			; (mov r8, r8)
 80050cc:	00001001 	.word	0x00001001
 80050d0:	40012708 	.word	0x40012708
 80050d4:	ff7fffff 	.word	0xff7fffff
 80050d8:	ffbfffff 	.word	0xffbfffff

080050dc <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80050dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80050de:	0005      	movs	r5, r0
 80050e0:	3550      	adds	r5, #80	; 0x50
 80050e2:	782b      	ldrb	r3, [r5, #0]
{
 80050e4:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80050e6:	2002      	movs	r0, #2
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d044      	beq.n	8005176 <HAL_ADCEx_Calibration_Start+0x9a>
 80050ec:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80050ee:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 80050f0:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	6898      	ldr	r0, [r3, #8]
 80050f6:	4010      	ands	r0, r2
 80050f8:	2801      	cmp	r0, #1
 80050fa:	d109      	bne.n	8005110 <HAL_ADCEx_Calibration_Start+0x34>
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	4202      	tst	r2, r0
 8005100:	d006      	beq.n	8005110 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005102:	2320      	movs	r3, #32
 8005104:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005106:	4313      	orrs	r3, r2
 8005108:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800510a:	2300      	movs	r3, #0
 800510c:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 800510e:	e032      	b.n	8005176 <HAL_ADCEx_Calibration_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State, 
 8005110:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005112:	4919      	ldr	r1, [pc, #100]	; (8005178 <HAL_ADCEx_Calibration_Start+0x9c>)
 8005114:	4011      	ands	r1, r2
 8005116:	2202      	movs	r2, #2
 8005118:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800511a:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 800511c:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800511e:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005120:	68da      	ldr	r2, [r3, #12]
 8005122:	438a      	bics	r2, r1
 8005124:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8005126:	2280      	movs	r2, #128	; 0x80
 8005128:	6899      	ldr	r1, [r3, #8]
 800512a:	0612      	lsls	r2, r2, #24
 800512c:	430a      	orrs	r2, r1
 800512e:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8005130:	f7fe fff4 	bl	800411c <HAL_GetTick>
 8005134:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8005136:	6823      	ldr	r3, [r4, #0]
 8005138:	689a      	ldr	r2, [r3, #8]
 800513a:	2a00      	cmp	r2, #0
 800513c:	db0c      	blt.n	8005158 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800513e:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8005140:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8005142:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8005144:	430e      	orrs	r6, r1
 8005146:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8005148:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800514a:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 800514c:	4393      	bics	r3, r2
 800514e:	001a      	movs	r2, r3
 8005150:	2301      	movs	r3, #1
 8005152:	4313      	orrs	r3, r2
 8005154:	6563      	str	r3, [r4, #84]	; 0x54
 8005156:	e7d8      	b.n	800510a <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005158:	f7fe ffe0 	bl	800411c <HAL_GetTick>
 800515c:	1bc0      	subs	r0, r0, r7
 800515e:	280a      	cmp	r0, #10
 8005160:	d9e9      	bls.n	8005136 <HAL_ADCEx_Calibration_Start+0x5a>
        ADC_STATE_CLR_SET(hadc->State,
 8005162:	2212      	movs	r2, #18
 8005164:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8005166:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8005168:	4393      	bics	r3, r2
 800516a:	001a      	movs	r2, r3
 800516c:	2310      	movs	r3, #16
 800516e:	4313      	orrs	r3, r2
 8005170:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8005172:	2300      	movs	r3, #0
 8005174:	702b      	strb	r3, [r5, #0]
}
 8005176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005178:	fffffefd 	.word	0xfffffefd

0800517c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800517c:	b530      	push	{r4, r5, lr}
 800517e:	25ff      	movs	r5, #255	; 0xff
 8005180:	2403      	movs	r4, #3
 8005182:	002a      	movs	r2, r5
 8005184:	4004      	ands	r4, r0
 8005186:	00e4      	lsls	r4, r4, #3
 8005188:	40a2      	lsls	r2, r4
 800518a:	0189      	lsls	r1, r1, #6
 800518c:	4029      	ands	r1, r5
 800518e:	43d2      	mvns	r2, r2
 8005190:	40a1      	lsls	r1, r4
 8005192:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8005194:	2800      	cmp	r0, #0
 8005196:	db0a      	blt.n	80051ae <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005198:	24c0      	movs	r4, #192	; 0xc0
 800519a:	4b0b      	ldr	r3, [pc, #44]	; (80051c8 <HAL_NVIC_SetPriority+0x4c>)
 800519c:	0880      	lsrs	r0, r0, #2
 800519e:	0080      	lsls	r0, r0, #2
 80051a0:	18c0      	adds	r0, r0, r3
 80051a2:	00a4      	lsls	r4, r4, #2
 80051a4:	5903      	ldr	r3, [r0, r4]
 80051a6:	401a      	ands	r2, r3
 80051a8:	4311      	orrs	r1, r2
 80051aa:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80051ac:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80051ae:	200f      	movs	r0, #15
 80051b0:	4003      	ands	r3, r0
 80051b2:	3b08      	subs	r3, #8
 80051b4:	4805      	ldr	r0, [pc, #20]	; (80051cc <HAL_NVIC_SetPriority+0x50>)
 80051b6:	089b      	lsrs	r3, r3, #2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	181b      	adds	r3, r3, r0
 80051bc:	69d8      	ldr	r0, [r3, #28]
 80051be:	4002      	ands	r2, r0
 80051c0:	4311      	orrs	r1, r2
 80051c2:	61d9      	str	r1, [r3, #28]
 80051c4:	e7f2      	b.n	80051ac <HAL_NVIC_SetPriority+0x30>
 80051c6:	46c0      	nop			; (mov r8, r8)
 80051c8:	e000e100 	.word	0xe000e100
 80051cc:	e000ed00 	.word	0xe000ed00

080051d0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80051d0:	2800      	cmp	r0, #0
 80051d2:	db05      	blt.n	80051e0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051d4:	231f      	movs	r3, #31
 80051d6:	4018      	ands	r0, r3
 80051d8:	3b1e      	subs	r3, #30
 80051da:	4083      	lsls	r3, r0
 80051dc:	4a01      	ldr	r2, [pc, #4]	; (80051e4 <HAL_NVIC_EnableIRQ+0x14>)
 80051de:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80051e0:	4770      	bx	lr
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	e000e100 	.word	0xe000e100

080051e8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80051e8:	2800      	cmp	r0, #0
 80051ea:	db09      	blt.n	8005200 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051ec:	231f      	movs	r3, #31
 80051ee:	4018      	ands	r0, r3
 80051f0:	3b1e      	subs	r3, #30
 80051f2:	4083      	lsls	r3, r0
 80051f4:	4a03      	ldr	r2, [pc, #12]	; (8005204 <HAL_NVIC_DisableIRQ+0x1c>)
 80051f6:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80051f8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80051fc:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8005200:	4770      	bx	lr
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	e000e104 	.word	0xe000e104

08005208 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800520a:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 800520c:	2001      	movs	r0, #1
  if(hdma == NULL)
 800520e:	2c00      	cmp	r4, #0
 8005210:	d035      	beq.n	800527e <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005212:	6825      	ldr	r5, [r4, #0]
 8005214:	4b1a      	ldr	r3, [pc, #104]	; (8005280 <HAL_DMA_Init+0x78>)
 8005216:	2114      	movs	r1, #20
 8005218:	18e8      	adds	r0, r5, r3
 800521a:	f7fa ffa5 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 800521e:	4b19      	ldr	r3, [pc, #100]	; (8005284 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005220:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8005222:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005224:	2302      	movs	r3, #2
 8005226:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005228:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 800522a:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800522c:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800522e:	4b16      	ldr	r3, [pc, #88]	; (8005288 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005230:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005232:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8005234:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005236:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8005238:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800523a:	433b      	orrs	r3, r7
 800523c:	6967      	ldr	r7, [r4, #20]
 800523e:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005240:	69a7      	ldr	r7, [r4, #24]
 8005242:	433b      	orrs	r3, r7
 8005244:	69e7      	ldr	r7, [r4, #28]
 8005246:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8005248:	6a27      	ldr	r7, [r4, #32]
 800524a:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 800524c:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800524e:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005250:	2380      	movs	r3, #128	; 0x80
 8005252:	01db      	lsls	r3, r3, #7
 8005254:	4299      	cmp	r1, r3
 8005256:	d00c      	beq.n	8005272 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005258:	251c      	movs	r5, #28
 800525a:	4028      	ands	r0, r5
 800525c:	3d0d      	subs	r5, #13
 800525e:	4085      	lsls	r5, r0
 8005260:	490a      	ldr	r1, [pc, #40]	; (800528c <HAL_DMA_Init+0x84>)
 8005262:	680b      	ldr	r3, [r1, #0]
 8005264:	43ab      	bics	r3, r5
 8005266:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005268:	6863      	ldr	r3, [r4, #4]
 800526a:	680d      	ldr	r5, [r1, #0]
 800526c:	4083      	lsls	r3, r0
 800526e:	432b      	orrs	r3, r5
 8005270:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005272:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005274:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005276:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005278:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800527a:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 800527c:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 800527e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005280:	bffdfff8 	.word	0xbffdfff8
 8005284:	40020000 	.word	0x40020000
 8005288:	ffff800f 	.word	0xffff800f
 800528c:	400200a8 	.word	0x400200a8

08005290 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005290:	b570      	push	{r4, r5, r6, lr}
 8005292:	2501      	movs	r5, #1
 8005294:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 8005296:	0028      	movs	r0, r5
  if (NULL == hdma )
 8005298:	2c00      	cmp	r4, #0
 800529a:	d021      	beq.n	80052e0 <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800529c:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800529e:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 80052a0:	6833      	ldr	r3, [r6, #0]
 80052a2:	43ab      	bics	r3, r5
 80052a4:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80052a6:	4b0f      	ldr	r3, [pc, #60]	; (80052e4 <HAL_DMA_DeInit+0x54>)
 80052a8:	18f0      	adds	r0, r6, r3
 80052aa:	f7fa ff5d 	bl	8000168 <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80052ae:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80052b0:	0083      	lsls	r3, r0, #2
 80052b2:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80052b4:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 80052b6:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80052b8:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80052ba:	390d      	subs	r1, #13
 80052bc:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 80052be:	4a0a      	ldr	r2, [pc, #40]	; (80052e8 <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80052c0:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 80052c2:	6422      	str	r2, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 80052c4:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80052c6:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80052c8:	4d08      	ldr	r5, [pc, #32]	; (80052ec <HAL_DMA_DeInit+0x5c>)
 80052ca:	682a      	ldr	r2, [r5, #0]
 80052cc:	438a      	bics	r2, r1
 80052ce:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 80052d0:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80052d2:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80052d4:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80052d6:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80052d8:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80052da:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 80052dc:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 80052de:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 80052e0:	bd70      	pop	{r4, r5, r6, pc}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	bffdfff8 	.word	0xbffdfff8
 80052e8:	40020000 	.word	0x40020000
 80052ec:	400200a8 	.word	0x400200a8

080052f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80052f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80052f2:	1d45      	adds	r5, r0, #5
{
 80052f4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 80052f6:	7feb      	ldrb	r3, [r5, #31]
{
 80052f8:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80052fa:	2002      	movs	r0, #2
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d029      	beq.n	8005354 <HAL_DMA_Start_IT+0x64>
 8005300:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8005302:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8005304:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8005306:	7ffb      	ldrb	r3, [r7, #31]
 8005308:	2600      	movs	r6, #0
 800530a:	469c      	mov	ip, r3
 800530c:	4660      	mov	r0, ip
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2801      	cmp	r0, #1
 8005312:	d12a      	bne.n	800536a <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005314:	3001      	adds	r0, #1
 8005316:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005318:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800531a:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800531c:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 800531e:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005320:	361c      	adds	r6, #28
 8005322:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 8005324:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005326:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 8005328:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800532a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800532c:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800532e:	9b01      	ldr	r3, [sp, #4]
 8005330:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005332:	68a3      	ldr	r3, [r4, #8]
 8005334:	2b10      	cmp	r3, #16
 8005336:	d10e      	bne.n	8005356 <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005338:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800533a:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800533c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00c      	beq.n	800535c <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005342:	230e      	movs	r3, #14
 8005344:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005346:	4313      	orrs	r3, r2
 8005348:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 800534a:	2301      	movs	r3, #1
 800534c:	6802      	ldr	r2, [r0, #0]
 800534e:	4313      	orrs	r3, r2
 8005350:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005352:	2000      	movs	r0, #0
}
 8005354:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8005356:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8005358:	60c2      	str	r2, [r0, #12]
 800535a:	e7ef      	b.n	800533c <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800535c:	2204      	movs	r2, #4
 800535e:	6803      	ldr	r3, [r0, #0]
 8005360:	4393      	bics	r3, r2
 8005362:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005364:	6802      	ldr	r2, [r0, #0]
 8005366:	230a      	movs	r3, #10
 8005368:	e7ed      	b.n	8005346 <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 800536a:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 800536c:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 800536e:	e7f1      	b.n	8005354 <HAL_DMA_Start_IT+0x64>

08005370 <HAL_DMA_Abort>:
{
 8005370:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005372:	1d85      	adds	r5, r0, #6
 8005374:	7feb      	ldrb	r3, [r5, #31]
 8005376:	1d44      	adds	r4, r0, #5
 8005378:	2b02      	cmp	r3, #2
 800537a:	d005      	beq.n	8005388 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800537c:	2304      	movs	r3, #4
 800537e:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8005380:	2300      	movs	r3, #0
    return HAL_ERROR;
 8005382:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8005384:	77e3      	strb	r3, [r4, #31]
}
 8005386:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005388:	210e      	movs	r1, #14
 800538a:	6803      	ldr	r3, [r0, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	438a      	bics	r2, r1
 8005390:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005392:	2201      	movs	r2, #1
 8005394:	6819      	ldr	r1, [r3, #0]
 8005396:	4391      	bics	r1, r2
 8005398:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800539a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800539c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800539e:	201c      	movs	r0, #28
 80053a0:	4003      	ands	r3, r0
 80053a2:	0010      	movs	r0, r2
 80053a4:	4098      	lsls	r0, r3
 80053a6:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 80053a8:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 80053aa:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 80053ac:	77e0      	strb	r0, [r4, #31]
    return status;
 80053ae:	e7ea      	b.n	8005386 <HAL_DMA_Abort+0x16>

080053b0 <HAL_DMA_Abort_IT>:
{
 80053b0:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80053b2:	1d84      	adds	r4, r0, #6
 80053b4:	7fe3      	ldrb	r3, [r4, #31]
 80053b6:	2b02      	cmp	r3, #2
 80053b8:	d004      	beq.n	80053c4 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80053ba:	2304      	movs	r3, #4
 80053bc:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 80053be:	3b03      	subs	r3, #3
}
 80053c0:	0018      	movs	r0, r3
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053c4:	210e      	movs	r1, #14
 80053c6:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80053c8:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	438a      	bics	r2, r1
 80053ce:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80053d0:	2201      	movs	r2, #1
 80053d2:	6819      	ldr	r1, [r3, #0]
 80053d4:	4391      	bics	r1, r2
 80053d6:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80053d8:	231c      	movs	r3, #28
 80053da:	402b      	ands	r3, r5
 80053dc:	0015      	movs	r5, r2
 80053de:	409d      	lsls	r5, r3
 80053e0:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 80053e2:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80053e4:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80053e6:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80053e8:	2400      	movs	r4, #0
 80053ea:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 80053ec:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 80053ee:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 80053f0:	42a2      	cmp	r2, r4
 80053f2:	d0e5      	beq.n	80053c0 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 80053f4:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 80053f6:	0023      	movs	r3, r4
 80053f8:	e7e2      	b.n	80053c0 <HAL_DMA_Abort_IT+0x10>

080053fa <HAL_DMA_IRQHandler>:
{
 80053fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80053fc:	221c      	movs	r2, #28
 80053fe:	2704      	movs	r7, #4
 8005400:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005402:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8005404:	4032      	ands	r2, r6
 8005406:	003e      	movs	r6, r7
 8005408:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800540a:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800540c:	6803      	ldr	r3, [r0, #0]
 800540e:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8005410:	4235      	tst	r5, r6
 8005412:	d00d      	beq.n	8005430 <HAL_DMA_IRQHandler+0x36>
 8005414:	423c      	tst	r4, r7
 8005416:	d00b      	beq.n	8005430 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	0692      	lsls	r2, r2, #26
 800541c:	d402      	bmi.n	8005424 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	43ba      	bics	r2, r7
 8005422:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8005424:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8005426:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8005428:	2b00      	cmp	r3, #0
 800542a:	d019      	beq.n	8005460 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 800542c:	4798      	blx	r3
  return;
 800542e:	e017      	b.n	8005460 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8005430:	2702      	movs	r7, #2
 8005432:	003e      	movs	r6, r7
 8005434:	4096      	lsls	r6, r2
 8005436:	4235      	tst	r5, r6
 8005438:	d013      	beq.n	8005462 <HAL_DMA_IRQHandler+0x68>
 800543a:	423c      	tst	r4, r7
 800543c:	d011      	beq.n	8005462 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	0692      	lsls	r2, r2, #26
 8005442:	d406      	bmi.n	8005452 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005444:	240a      	movs	r4, #10
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	43a2      	bics	r2, r4
 800544a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800544c:	2201      	movs	r2, #1
 800544e:	1d83      	adds	r3, r0, #6
 8005450:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8005452:	2200      	movs	r2, #0
 8005454:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8005456:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8005458:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 800545a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 800545c:	4293      	cmp	r3, r2
 800545e:	d1e5      	bne.n	800542c <HAL_DMA_IRQHandler+0x32>
}
 8005460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8005462:	2608      	movs	r6, #8
 8005464:	0037      	movs	r7, r6
 8005466:	4097      	lsls	r7, r2
 8005468:	423d      	tst	r5, r7
 800546a:	d0f9      	beq.n	8005460 <HAL_DMA_IRQHandler+0x66>
 800546c:	4234      	tst	r4, r6
 800546e:	d0f7      	beq.n	8005460 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005470:	250e      	movs	r5, #14
 8005472:	681c      	ldr	r4, [r3, #0]
 8005474:	43ac      	bics	r4, r5
 8005476:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005478:	2301      	movs	r3, #1
 800547a:	001c      	movs	r4, r3
 800547c:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 800547e:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005480:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005482:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8005484:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8005486:	2200      	movs	r2, #0
 8005488:	1d43      	adds	r3, r0, #5
 800548a:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 800548c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800548e:	e7e5      	b.n	800545c <HAL_DMA_IRQHandler+0x62>

08005490 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005490:	0003      	movs	r3, r0
 8005492:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8005494:	d101      	bne.n	800549a <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005496:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8005498:	4770      	bx	lr
      status = HAL_ERROR;
 800549a:	2001      	movs	r0, #1
 800549c:	e7fc      	b.n	8005498 <HAL_EXTI_RegisterCallback+0x8>

0800549e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800549e:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 80054a0:	2001      	movs	r0, #1
  if (hexti == NULL)
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 80054a6:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 80054a8:	6019      	str	r1, [r3, #0]
  }
}
 80054aa:	4770      	bx	lr

080054ac <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80054ac:	221f      	movs	r2, #31
 80054ae:	6803      	ldr	r3, [r0, #0]
{
 80054b0:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80054b2:	401a      	ands	r2, r3
 80054b4:	2301      	movs	r3, #1
 80054b6:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 80054b8:	4a04      	ldr	r2, [pc, #16]	; (80054cc <HAL_EXTI_IRQHandler+0x20>)
 80054ba:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 80054bc:	420b      	tst	r3, r1
 80054be:	d004      	beq.n	80054ca <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 80054c0:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80054c2:	6843      	ldr	r3, [r0, #4]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d000      	beq.n	80054ca <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 80054c8:	4798      	blx	r3
    }
  }
}
 80054ca:	bd10      	pop	{r4, pc}
 80054cc:	40010400 	.word	0x40010400

080054d0 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80054d0:	4a57      	ldr	r2, [pc, #348]	; (8005630 <HAL_GPIO_Init+0x160>)
{
 80054d2:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80054d4:	1882      	adds	r2, r0, r2
 80054d6:	1e54      	subs	r4, r2, #1
 80054d8:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 80054da:	2300      	movs	r3, #0
{
 80054dc:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80054de:	3205      	adds	r2, #5
{
 80054e0:	9102      	str	r1, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80054e2:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80054e4:	9a02      	ldr	r2, [sp, #8]
 80054e6:	6812      	ldr	r2, [r2, #0]
 80054e8:	0014      	movs	r4, r2
 80054ea:	40dc      	lsrs	r4, r3
 80054ec:	d101      	bne.n	80054f2 <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 80054ee:	b007      	add	sp, #28
 80054f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80054f2:	2101      	movs	r1, #1
 80054f4:	000d      	movs	r5, r1
 80054f6:	0014      	movs	r4, r2
 80054f8:	409d      	lsls	r5, r3
 80054fa:	402c      	ands	r4, r5
 80054fc:	9401      	str	r4, [sp, #4]
    if (iocurrent)
 80054fe:	422a      	tst	r2, r5
 8005500:	d100      	bne.n	8005504 <HAL_GPIO_Init+0x34>
 8005502:	e093      	b.n	800562c <HAL_GPIO_Init+0x15c>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005504:	9a02      	ldr	r2, [sp, #8]
 8005506:	005f      	lsls	r7, r3, #1
 8005508:	6854      	ldr	r4, [r2, #4]
 800550a:	2210      	movs	r2, #16
 800550c:	0026      	movs	r6, r4
 800550e:	4396      	bics	r6, r2
 8005510:	3a0d      	subs	r2, #13
 8005512:	40ba      	lsls	r2, r7
 8005514:	43d2      	mvns	r2, r2
 8005516:	9203      	str	r2, [sp, #12]
 8005518:	0032      	movs	r2, r6
 800551a:	3a01      	subs	r2, #1
 800551c:	9604      	str	r6, [sp, #16]
 800551e:	428a      	cmp	r2, r1
 8005520:	d80f      	bhi.n	8005542 <HAL_GPIO_Init+0x72>
        temp = GPIOx->OSPEEDR;
 8005522:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005524:	9a03      	ldr	r2, [sp, #12]
 8005526:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005528:	9a02      	ldr	r2, [sp, #8]
 800552a:	68d2      	ldr	r2, [r2, #12]
 800552c:	40ba      	lsls	r2, r7
 800552e:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 8005530:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8005532:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005534:	43aa      	bics	r2, r5
 8005536:	0015      	movs	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005538:	0922      	lsrs	r2, r4, #4
 800553a:	400a      	ands	r2, r1
 800553c:	409a      	lsls	r2, r3
 800553e:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8005540:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8005542:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005544:	9a03      	ldr	r2, [sp, #12]
 8005546:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005548:	9a02      	ldr	r2, [sp, #8]
 800554a:	6892      	ldr	r2, [r2, #8]
 800554c:	40ba      	lsls	r2, r7
 800554e:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8005550:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005552:	9a04      	ldr	r2, [sp, #16]
 8005554:	2a02      	cmp	r2, #2
 8005556:	d10e      	bne.n	8005576 <HAL_GPIO_Init+0xa6>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005558:	2507      	movs	r5, #7
 800555a:	210f      	movs	r1, #15
 800555c:	401d      	ands	r5, r3
 800555e:	00ad      	lsls	r5, r5, #2
 8005560:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 8005562:	08da      	lsrs	r2, r3, #3
 8005564:	0092      	lsls	r2, r2, #2
 8005566:	1882      	adds	r2, r0, r2
 8005568:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800556a:	438e      	bics	r6, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800556c:	9902      	ldr	r1, [sp, #8]
 800556e:	6909      	ldr	r1, [r1, #16]
 8005570:	40a9      	lsls	r1, r5
 8005572:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 8005574:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8005576:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005578:	9a03      	ldr	r2, [sp, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800557a:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800557c:	402a      	ands	r2, r5
 800557e:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005580:	0022      	movs	r2, r4
 8005582:	4032      	ands	r2, r6
 8005584:	40ba      	lsls	r2, r7
 8005586:	4315      	orrs	r5, r2
      GPIOx->MODER = temp;
 8005588:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800558a:	00e2      	lsls	r2, r4, #3
 800558c:	d54e      	bpl.n	800562c <HAL_GPIO_Init+0x15c>
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800558e:	001f      	movs	r7, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005590:	2101      	movs	r1, #1
 8005592:	4d28      	ldr	r5, [pc, #160]	; (8005634 <HAL_GPIO_Init+0x164>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8005594:	4037      	ands	r7, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005596:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005598:	468c      	mov	ip, r1
 800559a:	430a      	orrs	r2, r1
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800559c:	00b9      	lsls	r1, r7, #2
 800559e:	270f      	movs	r7, #15
 80055a0:	408f      	lsls	r7, r1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055a2:	636a      	str	r2, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80055a4:	4a24      	ldr	r2, [pc, #144]	; (8005638 <HAL_GPIO_Init+0x168>)
 80055a6:	089d      	lsrs	r5, r3, #2
 80055a8:	00ad      	lsls	r5, r5, #2
 80055aa:	18ad      	adds	r5, r5, r2
 80055ac:	68aa      	ldr	r2, [r5, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80055ae:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80055b0:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80055b2:	9203      	str	r2, [sp, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80055b4:	05ff      	lsls	r7, r7, #23
 80055b6:	2200      	movs	r2, #0
 80055b8:	42b8      	cmp	r0, r7
 80055ba:	d010      	beq.n	80055de <HAL_GPIO_Init+0x10e>
 80055bc:	4f1f      	ldr	r7, [pc, #124]	; (800563c <HAL_GPIO_Init+0x16c>)
 80055be:	4662      	mov	r2, ip
 80055c0:	42b8      	cmp	r0, r7
 80055c2:	d00c      	beq.n	80055de <HAL_GPIO_Init+0x10e>
 80055c4:	4f1e      	ldr	r7, [pc, #120]	; (8005640 <HAL_GPIO_Init+0x170>)
 80055c6:	1892      	adds	r2, r2, r2
 80055c8:	42b8      	cmp	r0, r7
 80055ca:	d008      	beq.n	80055de <HAL_GPIO_Init+0x10e>
 80055cc:	4f1d      	ldr	r7, [pc, #116]	; (8005644 <HAL_GPIO_Init+0x174>)
 80055ce:	0032      	movs	r2, r6
 80055d0:	42b8      	cmp	r0, r7
 80055d2:	d004      	beq.n	80055de <HAL_GPIO_Init+0x10e>
 80055d4:	4e1c      	ldr	r6, [pc, #112]	; (8005648 <HAL_GPIO_Init+0x178>)
 80055d6:	4462      	add	r2, ip
 80055d8:	42b0      	cmp	r0, r6
 80055da:	d000      	beq.n	80055de <HAL_GPIO_Init+0x10e>
 80055dc:	9a05      	ldr	r2, [sp, #20]
 80055de:	408a      	lsls	r2, r1
 80055e0:	9903      	ldr	r1, [sp, #12]
 80055e2:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 80055e4:	9901      	ldr	r1, [sp, #4]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055e6:	60aa      	str	r2, [r5, #8]
          temp |= iocurrent;
 80055e8:	000e      	movs	r6, r1
        temp = EXTI->IMR;
 80055ea:	4a18      	ldr	r2, [pc, #96]	; (800564c <HAL_GPIO_Init+0x17c>)
        temp &= ~((uint32_t)iocurrent);
 80055ec:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80055ee:	6817      	ldr	r7, [r2, #0]
          temp |= iocurrent;
 80055f0:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80055f2:	03e1      	lsls	r1, r4, #15
 80055f4:	d401      	bmi.n	80055fa <HAL_GPIO_Init+0x12a>
        temp &= ~((uint32_t)iocurrent);
 80055f6:	003e      	movs	r6, r7
 80055f8:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80055fa:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 80055fc:	6857      	ldr	r7, [r2, #4]
          temp |= iocurrent;
 80055fe:	9e01      	ldr	r6, [sp, #4]
 8005600:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005602:	03a1      	lsls	r1, r4, #14
 8005604:	d401      	bmi.n	800560a <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 8005606:	003e      	movs	r6, r7
 8005608:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 800560a:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 800560c:	6897      	ldr	r7, [r2, #8]
          temp |= iocurrent;
 800560e:	9e01      	ldr	r6, [sp, #4]
 8005610:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005612:	02e1      	lsls	r1, r4, #11
 8005614:	d401      	bmi.n	800561a <HAL_GPIO_Init+0x14a>
        temp &= ~((uint32_t)iocurrent);
 8005616:	003e      	movs	r6, r7
 8005618:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 800561a:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 800561c:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 800561e:	9f01      	ldr	r7, [sp, #4]
 8005620:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005622:	02a1      	lsls	r1, r4, #10
 8005624:	d401      	bmi.n	800562a <HAL_GPIO_Init+0x15a>
        temp &= ~((uint32_t)iocurrent);
 8005626:	402e      	ands	r6, r5
 8005628:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 800562a:	60d7      	str	r7, [r2, #12]
    position++;
 800562c:	3301      	adds	r3, #1
 800562e:	e759      	b.n	80054e4 <HAL_GPIO_Init+0x14>
 8005630:	afffe400 	.word	0xafffe400
 8005634:	40021000 	.word	0x40021000
 8005638:	40010000 	.word	0x40010000
 800563c:	50000400 	.word	0x50000400
 8005640:	50000800 	.word	0x50000800
 8005644:	50000c00 	.word	0x50000c00
 8005648:	50001000 	.word	0x50001000
 800564c:	40010400 	.word	0x40010400

08005650 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005650:	b5f0      	push	{r4, r5, r6, r7, lr}
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005652:	4a38      	ldr	r2, [pc, #224]	; (8005734 <HAL_GPIO_DeInit+0xe4>)
{
 8005654:	b087      	sub	sp, #28
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005656:	1882      	adds	r2, r0, r2
{
 8005658:	9102      	str	r1, [sp, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800565a:	1e51      	subs	r1, r2, #1
 800565c:	418a      	sbcs	r2, r1
  uint32_t position = 0x00U;
 800565e:	2300      	movs	r3, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8005660:	3205      	adds	r2, #5
 8005662:	9205      	str	r2, [sp, #20]
  while ((GPIO_Pin >> position) != 0)
 8005664:	9a02      	ldr	r2, [sp, #8]
 8005666:	40da      	lsrs	r2, r3
 8005668:	d101      	bne.n	800566e <HAL_GPIO_DeInit+0x1e>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 800566a:	b007      	add	sp, #28
 800566c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 800566e:	2701      	movs	r7, #1
 8005670:	003a      	movs	r2, r7
 8005672:	409a      	lsls	r2, r3
 8005674:	9c02      	ldr	r4, [sp, #8]
 8005676:	9201      	str	r2, [sp, #4]
 8005678:	4014      	ands	r4, r2
    if (iocurrent)
 800567a:	9901      	ldr	r1, [sp, #4]
 800567c:	9a02      	ldr	r2, [sp, #8]
 800567e:	420a      	tst	r2, r1
 8005680:	d056      	beq.n	8005730 <HAL_GPIO_DeInit+0xe0>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005682:	4a2d      	ldr	r2, [pc, #180]	; (8005738 <HAL_GPIO_DeInit+0xe8>)
 8005684:	0899      	lsrs	r1, r3, #2
 8005686:	0089      	lsls	r1, r1, #2
 8005688:	1889      	adds	r1, r1, r2
 800568a:	688a      	ldr	r2, [r1, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800568c:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 800568e:	0016      	movs	r6, r2
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8005690:	2203      	movs	r2, #3
 8005692:	4015      	ands	r5, r2
 8005694:	00ad      	lsls	r5, r5, #2
 8005696:	320c      	adds	r2, #12
 8005698:	40aa      	lsls	r2, r5
 800569a:	9203      	str	r2, [sp, #12]
 800569c:	4032      	ands	r2, r6
 800569e:	9204      	str	r2, [sp, #16]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80056a0:	22a0      	movs	r2, #160	; 0xa0
 80056a2:	05d2      	lsls	r2, r2, #23
 80056a4:	4694      	mov	ip, r2
 80056a6:	2200      	movs	r2, #0
 80056a8:	4560      	cmp	r0, ip
 80056aa:	d011      	beq.n	80056d0 <HAL_GPIO_DeInit+0x80>
 80056ac:	4a23      	ldr	r2, [pc, #140]	; (800573c <HAL_GPIO_DeInit+0xec>)
 80056ae:	4694      	mov	ip, r2
 80056b0:	003a      	movs	r2, r7
 80056b2:	4560      	cmp	r0, ip
 80056b4:	d00c      	beq.n	80056d0 <HAL_GPIO_DeInit+0x80>
 80056b6:	4f22      	ldr	r7, [pc, #136]	; (8005740 <HAL_GPIO_DeInit+0xf0>)
 80056b8:	1892      	adds	r2, r2, r2
 80056ba:	42b8      	cmp	r0, r7
 80056bc:	d008      	beq.n	80056d0 <HAL_GPIO_DeInit+0x80>
 80056be:	4f21      	ldr	r7, [pc, #132]	; (8005744 <HAL_GPIO_DeInit+0xf4>)
 80056c0:	3201      	adds	r2, #1
 80056c2:	42b8      	cmp	r0, r7
 80056c4:	d004      	beq.n	80056d0 <HAL_GPIO_DeInit+0x80>
 80056c6:	4e20      	ldr	r6, [pc, #128]	; (8005748 <HAL_GPIO_DeInit+0xf8>)
 80056c8:	3201      	adds	r2, #1
 80056ca:	42b0      	cmp	r0, r6
 80056cc:	d000      	beq.n	80056d0 <HAL_GPIO_DeInit+0x80>
 80056ce:	9a05      	ldr	r2, [sp, #20]
 80056d0:	40aa      	lsls	r2, r5
 80056d2:	9d04      	ldr	r5, [sp, #16]
 80056d4:	42aa      	cmp	r2, r5
 80056d6:	d110      	bne.n	80056fa <HAL_GPIO_DeInit+0xaa>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80056d8:	4a1c      	ldr	r2, [pc, #112]	; (800574c <HAL_GPIO_DeInit+0xfc>)
 80056da:	6815      	ldr	r5, [r2, #0]
 80056dc:	43a5      	bics	r5, r4
 80056de:	6015      	str	r5, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80056e0:	6855      	ldr	r5, [r2, #4]
 80056e2:	43a5      	bics	r5, r4
 80056e4:	6055      	str	r5, [r2, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80056e6:	6895      	ldr	r5, [r2, #8]
 80056e8:	43a5      	bics	r5, r4
 80056ea:	6095      	str	r5, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80056ec:	68d5      	ldr	r5, [r2, #12]
 80056ee:	43a5      	bics	r5, r4
 80056f0:	60d5      	str	r5, [r2, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80056f2:	688a      	ldr	r2, [r1, #8]
 80056f4:	9c03      	ldr	r4, [sp, #12]
 80056f6:	43a2      	bics	r2, r4
 80056f8:	608a      	str	r2, [r1, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80056fa:	2103      	movs	r1, #3
 80056fc:	005c      	lsls	r4, r3, #1
 80056fe:	40a1      	lsls	r1, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005700:	2407      	movs	r4, #7
 8005702:	260f      	movs	r6, #15
 8005704:	401c      	ands	r4, r3
 8005706:	00a4      	lsls	r4, r4, #2
 8005708:	40a6      	lsls	r6, r4
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800570a:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800570c:	9c01      	ldr	r4, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800570e:	430a      	orrs	r2, r1
 8005710:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005712:	08da      	lsrs	r2, r3, #3
 8005714:	0092      	lsls	r2, r2, #2
 8005716:	1882      	adds	r2, r0, r2
 8005718:	6a15      	ldr	r5, [r2, #32]
 800571a:	43b5      	bics	r5, r6
 800571c:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800571e:	68c2      	ldr	r2, [r0, #12]
 8005720:	438a      	bics	r2, r1
 8005722:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8005724:	6842      	ldr	r2, [r0, #4]
 8005726:	43a2      	bics	r2, r4
 8005728:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800572a:	6882      	ldr	r2, [r0, #8]
 800572c:	438a      	bics	r2, r1
 800572e:	6082      	str	r2, [r0, #8]
    position++;
 8005730:	3301      	adds	r3, #1
 8005732:	e797      	b.n	8005664 <HAL_GPIO_DeInit+0x14>
 8005734:	afffe400 	.word	0xafffe400
 8005738:	40010000 	.word	0x40010000
 800573c:	50000400 	.word	0x50000400
 8005740:	50000800 	.word	0x50000800
 8005744:	50000c00 	.word	0x50000c00
 8005748:	50001000 	.word	0x50001000
 800574c:	40010400 	.word	0x40010400

08005750 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005750:	6900      	ldr	r0, [r0, #16]
 8005752:	4008      	ands	r0, r1
 8005754:	1e41      	subs	r1, r0, #1
 8005756:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8005758:	b2c0      	uxtb	r0, r0
}
 800575a:	4770      	bx	lr

0800575c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800575c:	2a00      	cmp	r2, #0
 800575e:	d001      	beq.n	8005764 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005760:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8005762:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8005764:	6281      	str	r1, [r0, #40]	; 0x28
}
 8005766:	e7fc      	b.n	8005762 <HAL_GPIO_WritePin+0x6>

08005768 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005768:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800576a:	0013      	movs	r3, r2
 800576c:	400b      	ands	r3, r1
 800576e:	041b      	lsls	r3, r3, #16
 8005770:	4391      	bics	r1, r2
 8005772:	4319      	orrs	r1, r3
 8005774:	6181      	str	r1, [r0, #24]
}
 8005776:	4770      	bx	lr

08005778 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005778:	6803      	ldr	r3, [r0, #0]
 800577a:	699a      	ldr	r2, [r3, #24]
 800577c:	0792      	lsls	r2, r2, #30
 800577e:	d501      	bpl.n	8005784 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005780:	2200      	movs	r2, #0
 8005782:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005784:	2201      	movs	r2, #1
 8005786:	6999      	ldr	r1, [r3, #24]
 8005788:	4211      	tst	r1, r2
 800578a:	d102      	bne.n	8005792 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800578c:	6999      	ldr	r1, [r3, #24]
 800578e:	430a      	orrs	r2, r1
 8005790:	619a      	str	r2, [r3, #24]
  }
}
 8005792:	4770      	bx	lr

08005794 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005794:	b530      	push	{r4, r5, lr}
 8005796:	9c03      	ldr	r4, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8005798:	0412      	lsls	r2, r2, #16
 800579a:	6800      	ldr	r0, [r0, #0]
 800579c:	4322      	orrs	r2, r4
 800579e:	431a      	orrs	r2, r3
 80057a0:	4b05      	ldr	r3, [pc, #20]	; (80057b8 <I2C_TransferConfig+0x24>)
 80057a2:	6845      	ldr	r5, [r0, #4]
 80057a4:	0589      	lsls	r1, r1, #22
 80057a6:	0d64      	lsrs	r4, r4, #21
 80057a8:	0d89      	lsrs	r1, r1, #22
 80057aa:	431c      	orrs	r4, r3
 80057ac:	43a5      	bics	r5, r4
 80057ae:	430a      	orrs	r2, r1
 80057b0:	432a      	orrs	r2, r5
 80057b2:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80057b4:	bd30      	pop	{r4, r5, pc}
 80057b6:	46c0      	nop			; (mov r8, r8)
 80057b8:	03ff63ff 	.word	0x03ff63ff

080057bc <I2C_IsAcknowledgeFailed>:
{
 80057bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057be:	6803      	ldr	r3, [r0, #0]
{
 80057c0:	0016      	movs	r6, r2
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057c2:	699a      	ldr	r2, [r3, #24]
{
 80057c4:	0004      	movs	r4, r0
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057c6:	2310      	movs	r3, #16
 80057c8:	0010      	movs	r0, r2
{
 80057ca:	000d      	movs	r5, r1
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80057cc:	2720      	movs	r7, #32
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057ce:	4018      	ands	r0, r3
 80057d0:	421a      	tst	r2, r3
 80057d2:	d118      	bne.n	8005806 <I2C_IsAcknowledgeFailed+0x4a>
}
 80057d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (Timeout != HAL_MAX_DELAY)
 80057d6:	1c6a      	adds	r2, r5, #1
 80057d8:	d016      	beq.n	8005808 <I2C_IsAcknowledgeFailed+0x4c>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057da:	f7fe fc9f 	bl	800411c <HAL_GetTick>
 80057de:	1b80      	subs	r0, r0, r6
 80057e0:	42a8      	cmp	r0, r5
 80057e2:	d801      	bhi.n	80057e8 <I2C_IsAcknowledgeFailed+0x2c>
 80057e4:	2d00      	cmp	r5, #0
 80057e6:	d10e      	bne.n	8005806 <I2C_IsAcknowledgeFailed+0x4a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80057e8:	2220      	movs	r2, #32
 80057ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80057ec:	4313      	orrs	r3, r2
 80057ee:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80057f0:	0023      	movs	r3, r4
 80057f2:	3341      	adds	r3, #65	; 0x41
 80057f4:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057f6:	0022      	movs	r2, r4
 80057f8:	2300      	movs	r3, #0
 80057fa:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 80057fc:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057fe:	7013      	strb	r3, [r2, #0]
    return HAL_ERROR;
 8005800:	2001      	movs	r0, #1
    __HAL_UNLOCK(hi2c);
 8005802:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8005804:	e7e6      	b.n	80057d4 <I2C_IsAcknowledgeFailed+0x18>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	699a      	ldr	r2, [r3, #24]
 800580a:	423a      	tst	r2, r7
 800580c:	d0e3      	beq.n	80057d6 <I2C_IsAcknowledgeFailed+0x1a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800580e:	2210      	movs	r2, #16
    I2C_Flush_TXDR(hi2c);
 8005810:	0020      	movs	r0, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005812:	61da      	str	r2, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005814:	61df      	str	r7, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8005816:	f7ff ffaf 	bl	8005778 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800581a:	6822      	ldr	r2, [r4, #0]
 800581c:	4905      	ldr	r1, [pc, #20]	; (8005834 <I2C_IsAcknowledgeFailed+0x78>)
 800581e:	6853      	ldr	r3, [r2, #4]
 8005820:	400b      	ands	r3, r1
 8005822:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005824:	2304      	movs	r3, #4
 8005826:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005828:	4313      	orrs	r3, r2
 800582a:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800582c:	0023      	movs	r3, r4
 800582e:	3341      	adds	r3, #65	; 0x41
 8005830:	701f      	strb	r7, [r3, #0]
 8005832:	e7e0      	b.n	80057f6 <I2C_IsAcknowledgeFailed+0x3a>
 8005834:	fe00e800 	.word	0xfe00e800

08005838 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	0004      	movs	r4, r0
 800583c:	000d      	movs	r5, r1
 800583e:	0016      	movs	r6, r2
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005840:	2720      	movs	r7, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005842:	2204      	movs	r2, #4
 8005844:	6823      	ldr	r3, [r4, #0]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	4213      	tst	r3, r2
 800584a:	d111      	bne.n	8005870 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800584c:	0032      	movs	r2, r6
 800584e:	0029      	movs	r1, r5
 8005850:	0020      	movs	r0, r4
 8005852:	f7ff ffb3 	bl	80057bc <I2C_IsAcknowledgeFailed>
 8005856:	2800      	cmp	r0, #0
 8005858:	d119      	bne.n	800588e <I2C_WaitOnRXNEFlagUntilTimeout+0x56>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	423a      	tst	r2, r7
 8005860:	d017      	beq.n	8005892 <I2C_WaitOnRXNEFlagUntilTimeout+0x5a>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005862:	2104      	movs	r1, #4
 8005864:	699a      	ldr	r2, [r3, #24]
 8005866:	420a      	tst	r2, r1
 8005868:	d004      	beq.n	8005874 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
 800586a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800586c:	2a00      	cmp	r2, #0
 800586e:	d001      	beq.n	8005874 <I2C_WaitOnRXNEFlagUntilTimeout+0x3c>
        return HAL_OK;
 8005870:	2000      	movs	r0, #0
}
 8005872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005874:	61df      	str	r7, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8005876:	685a      	ldr	r2, [r3, #4]
 8005878:	490e      	ldr	r1, [pc, #56]	; (80058b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x7c>)
 800587a:	400a      	ands	r2, r1
 800587c:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800587e:	0022      	movs	r2, r4
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005880:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8005882:	3241      	adds	r2, #65	; 0x41
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005884:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005886:	7017      	strb	r7, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8005888:	3440      	adds	r4, #64	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800588a:	7053      	strb	r3, [r2, #1]
      __HAL_UNLOCK(hi2c);
 800588c:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 800588e:	2001      	movs	r0, #1
 8005890:	e7ef      	b.n	8005872 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005892:	f7fe fc43 	bl	800411c <HAL_GetTick>
 8005896:	1b80      	subs	r0, r0, r6
 8005898:	42a8      	cmp	r0, r5
 800589a:	d801      	bhi.n	80058a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
 800589c:	2d00      	cmp	r5, #0
 800589e:	d1d0      	bne.n	8005842 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058a0:	2220      	movs	r2, #32
 80058a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80058a4:	4313      	orrs	r3, r2
 80058a6:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80058a8:	0023      	movs	r3, r4
 80058aa:	3341      	adds	r3, #65	; 0x41
 80058ac:	701a      	strb	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 80058ae:	3440      	adds	r4, #64	; 0x40
 80058b0:	2300      	movs	r3, #0
 80058b2:	e7eb      	b.n	800588c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80058b4:	fe00e800 	.word	0xfe00e800

080058b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80058b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ba:	0004      	movs	r4, r0
 80058bc:	000d      	movs	r5, r1
 80058be:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80058c0:	2720      	movs	r7, #32
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	423b      	tst	r3, r7
 80058c8:	d001      	beq.n	80058ce <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80058ca:	2000      	movs	r0, #0
}
 80058cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80058ce:	0032      	movs	r2, r6
 80058d0:	0029      	movs	r1, r5
 80058d2:	0020      	movs	r0, r4
 80058d4:	f7ff ff72 	bl	80057bc <I2C_IsAcknowledgeFailed>
 80058d8:	2800      	cmp	r0, #0
 80058da:	d113      	bne.n	8005904 <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058dc:	f7fe fc1e 	bl	800411c <HAL_GetTick>
 80058e0:	1b80      	subs	r0, r0, r6
 80058e2:	42a8      	cmp	r0, r5
 80058e4:	d801      	bhi.n	80058ea <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 80058e6:	2d00      	cmp	r5, #0
 80058e8:	d1eb      	bne.n	80058c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80058ea:	2220      	movs	r2, #32
 80058ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80058ee:	4313      	orrs	r3, r2
 80058f0:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80058f2:	0023      	movs	r3, r4
 80058f4:	3341      	adds	r3, #65	; 0x41
 80058f6:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80058f8:	0022      	movs	r2, r4
 80058fa:	2300      	movs	r3, #0
 80058fc:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80058fe:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005900:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8005902:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 8005904:	2001      	movs	r0, #1
 8005906:	e7e1      	b.n	80058cc <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

08005908 <I2C_WaitOnFlagUntilTimeout>:
{
 8005908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800590a:	0004      	movs	r4, r0
 800590c:	000e      	movs	r6, r1
 800590e:	0017      	movs	r7, r2
 8005910:	001d      	movs	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005912:	6822      	ldr	r2, [r4, #0]
 8005914:	6993      	ldr	r3, [r2, #24]
 8005916:	4033      	ands	r3, r6
 8005918:	1b9b      	subs	r3, r3, r6
 800591a:	4259      	negs	r1, r3
 800591c:	414b      	adcs	r3, r1
 800591e:	42bb      	cmp	r3, r7
 8005920:	d001      	beq.n	8005926 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 8005922:	2000      	movs	r0, #0
 8005924:	e017      	b.n	8005956 <I2C_WaitOnFlagUntilTimeout+0x4e>
    if (Timeout != HAL_MAX_DELAY)
 8005926:	1c6b      	adds	r3, r5, #1
 8005928:	d0f4      	beq.n	8005914 <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592a:	f7fe fbf7 	bl	800411c <HAL_GetTick>
 800592e:	9b06      	ldr	r3, [sp, #24]
 8005930:	1ac0      	subs	r0, r0, r3
 8005932:	42a8      	cmp	r0, r5
 8005934:	d801      	bhi.n	800593a <I2C_WaitOnFlagUntilTimeout+0x32>
 8005936:	2d00      	cmp	r5, #0
 8005938:	d1eb      	bne.n	8005912 <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800593a:	2220      	movs	r2, #32
 800593c:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 800593e:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005940:	4313      	orrs	r3, r2
 8005942:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005944:	0023      	movs	r3, r4
 8005946:	3341      	adds	r3, #65	; 0x41
 8005948:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800594a:	0022      	movs	r2, r4
 800594c:	2300      	movs	r3, #0
 800594e:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 8005950:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005952:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 8005954:	7023      	strb	r3, [r4, #0]
}
 8005956:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005958 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800595a:	0004      	movs	r4, r0
 800595c:	000d      	movs	r5, r1
 800595e:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005960:	2702      	movs	r7, #2
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	423b      	tst	r3, r7
 8005968:	d001      	beq.n	800596e <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 800596a:	2000      	movs	r0, #0
}
 800596c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800596e:	0032      	movs	r2, r6
 8005970:	0029      	movs	r1, r5
 8005972:	0020      	movs	r0, r4
 8005974:	f7ff ff22 	bl	80057bc <I2C_IsAcknowledgeFailed>
 8005978:	2800      	cmp	r0, #0
 800597a:	d115      	bne.n	80059a8 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800597c:	1c6b      	adds	r3, r5, #1
 800597e:	d0f0      	beq.n	8005962 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005980:	f7fe fbcc 	bl	800411c <HAL_GetTick>
 8005984:	1b80      	subs	r0, r0, r6
 8005986:	42a8      	cmp	r0, r5
 8005988:	d801      	bhi.n	800598e <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 800598a:	2d00      	cmp	r5, #0
 800598c:	d1e9      	bne.n	8005962 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800598e:	2220      	movs	r2, #32
 8005990:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005992:	4313      	orrs	r3, r2
 8005994:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005996:	0023      	movs	r3, r4
 8005998:	3341      	adds	r3, #65	; 0x41
 800599a:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800599c:	0022      	movs	r2, r4
 800599e:	2300      	movs	r3, #0
 80059a0:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 80059a2:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80059a4:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 80059a6:	7023      	strb	r3, [r4, #0]
      return HAL_ERROR;
 80059a8:	2001      	movs	r0, #1
 80059aa:	e7df      	b.n	800596c <I2C_WaitOnTXISFlagUntilTimeout+0x14>

080059ac <HAL_I2C_Init>:
{
 80059ac:	b570      	push	{r4, r5, r6, lr}
 80059ae:	0004      	movs	r4, r0
    return HAL_ERROR;
 80059b0:	2001      	movs	r0, #1
  if (hi2c == NULL)
 80059b2:	2c00      	cmp	r4, #0
 80059b4:	d03f      	beq.n	8005a36 <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80059b6:	0025      	movs	r5, r4
 80059b8:	3541      	adds	r5, #65	; 0x41
 80059ba:	782b      	ldrb	r3, [r5, #0]
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d105      	bne.n	80059ce <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 80059c2:	0023      	movs	r3, r4
 80059c4:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 80059c6:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 80059c8:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 80059ca:	f7fd fe87 	bl	80036dc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80059ce:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 80059d0:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80059d2:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80059d4:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059d6:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68a6      	ldr	r6, [r4, #8]
 80059dc:	438a      	bics	r2, r1
 80059de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80059e0:	6861      	ldr	r1, [r4, #4]
 80059e2:	4a1a      	ldr	r2, [pc, #104]	; (8005a4c <HAL_I2C_Init+0xa0>)
 80059e4:	400a      	ands	r2, r1
 80059e6:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80059e8:	6899      	ldr	r1, [r3, #8]
 80059ea:	4a19      	ldr	r2, [pc, #100]	; (8005a50 <HAL_I2C_Init+0xa4>)
 80059ec:	4011      	ands	r1, r2
 80059ee:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059f0:	2801      	cmp	r0, #1
 80059f2:	d121      	bne.n	8005a38 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80059f4:	2180      	movs	r1, #128	; 0x80
 80059f6:	0209      	lsls	r1, r1, #8
 80059f8:	4331      	orrs	r1, r6
 80059fa:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80059fc:	6858      	ldr	r0, [r3, #4]
 80059fe:	4915      	ldr	r1, [pc, #84]	; (8005a54 <HAL_I2C_Init+0xa8>)
 8005a00:	4301      	orrs	r1, r0
 8005a02:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a04:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a06:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005a08:	400a      	ands	r2, r1
 8005a0a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8005a0c:	6961      	ldr	r1, [r4, #20]
 8005a0e:	6922      	ldr	r2, [r4, #16]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	69a1      	ldr	r1, [r4, #24]
 8005a14:	0209      	lsls	r1, r1, #8
 8005a16:	430a      	orrs	r2, r1
 8005a18:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005a1a:	6a21      	ldr	r1, [r4, #32]
 8005a1c:	69e2      	ldr	r2, [r4, #28]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8005a22:	2201      	movs	r2, #1
 8005a24:	6819      	ldr	r1, [r3, #0]
 8005a26:	430a      	orrs	r2, r1
 8005a28:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005a2a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a2c:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005a2e:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a30:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a32:	3442      	adds	r4, #66	; 0x42
 8005a34:	7020      	strb	r0, [r4, #0]
}
 8005a36:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005a38:	2184      	movs	r1, #132	; 0x84
 8005a3a:	0209      	lsls	r1, r1, #8
 8005a3c:	4331      	orrs	r1, r6
 8005a3e:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a40:	2802      	cmp	r0, #2
 8005a42:	d1db      	bne.n	80059fc <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005a44:	2180      	movs	r1, #128	; 0x80
 8005a46:	0109      	lsls	r1, r1, #4
 8005a48:	6059      	str	r1, [r3, #4]
 8005a4a:	e7d7      	b.n	80059fc <HAL_I2C_Init+0x50>
 8005a4c:	f0ffffff 	.word	0xf0ffffff
 8005a50:	ffff7fff 	.word	0xffff7fff
 8005a54:	02008000 	.word	0x02008000

08005a58 <HAL_I2C_Master_Transmit>:
{
 8005a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a5e:	0003      	movs	r3, r0
 8005a60:	3341      	adds	r3, #65	; 0x41
{
 8005a62:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a64:	9303      	str	r3, [sp, #12]
 8005a66:	781b      	ldrb	r3, [r3, #0]
{
 8005a68:	0004      	movs	r4, r0
 8005a6a:	000f      	movs	r7, r1
    return HAL_BUSY;
 8005a6c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a6e:	2b20      	cmp	r3, #32
 8005a70:	d114      	bne.n	8005a9c <HAL_I2C_Master_Transmit+0x44>
    __HAL_LOCK(hi2c);
 8005a72:	0023      	movs	r3, r4
 8005a74:	3340      	adds	r3, #64	; 0x40
 8005a76:	781a      	ldrb	r2, [r3, #0]
 8005a78:	2a01      	cmp	r2, #1
 8005a7a:	d00f      	beq.n	8005a9c <HAL_I2C_Master_Transmit+0x44>
 8005a7c:	2601      	movs	r6, #1
 8005a7e:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8005a80:	f7fe fb4c 	bl	800411c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a84:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8005a86:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a88:	9000      	str	r0, [sp, #0]
 8005a8a:	2319      	movs	r3, #25
 8005a8c:	0032      	movs	r2, r6
 8005a8e:	0020      	movs	r0, r4
 8005a90:	0209      	lsls	r1, r1, #8
 8005a92:	f7ff ff39 	bl	8005908 <I2C_WaitOnFlagUntilTimeout>
 8005a96:	2800      	cmp	r0, #0
 8005a98:	d002      	beq.n	8005aa0 <HAL_I2C_Master_Transmit+0x48>
      return HAL_ERROR;
 8005a9a:	2001      	movs	r0, #1
}
 8005a9c:	b007      	add	sp, #28
 8005a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005aa0:	2321      	movs	r3, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005aa2:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005aa4:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005aa6:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005aa8:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005aaa:	3b11      	subs	r3, #17
 8005aac:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8005aae:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ab0:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005ab2:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005ab4:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8005ab6:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8005ab8:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aba:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005abc:	4b2d      	ldr	r3, [pc, #180]	; (8005b74 <HAL_I2C_Master_Transmit+0x11c>)
 8005abe:	2aff      	cmp	r2, #255	; 0xff
 8005ac0:	d920      	bls.n	8005b04 <HAL_I2C_Master_Transmit+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ac2:	22ff      	movs	r2, #255	; 0xff
 8005ac4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	2380      	movs	r3, #128	; 0x80
 8005aca:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005acc:	0039      	movs	r1, r7
 8005ace:	0020      	movs	r0, r4
 8005ad0:	f7ff fe60 	bl	8005794 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005ad4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ad6:	002a      	movs	r2, r5
 8005ad8:	0020      	movs	r0, r4
 8005ada:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d119      	bne.n	8005b14 <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ae0:	f7ff feea 	bl	80058b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005ae4:	2800      	cmp	r0, #0
 8005ae6:	d1d8      	bne.n	8005a9a <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ae8:	2120      	movs	r1, #32
 8005aea:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8005aec:	4d22      	ldr	r5, [pc, #136]	; (8005b78 <HAL_I2C_Master_Transmit+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005aee:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005af0:	685a      	ldr	r2, [r3, #4]
 8005af2:	402a      	ands	r2, r5
 8005af4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005af6:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8005af8:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8005afa:	3341      	adds	r3, #65	; 0x41
 8005afc:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005afe:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8005b00:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8005b02:	e7cb      	b.n	8005a9c <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8005b04:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005b06:	b292      	uxth	r2, r2
 8005b08:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005b0a:	b2d2      	uxtb	r2, r2
 8005b0c:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b0e:	2380      	movs	r3, #128	; 0x80
 8005b10:	049b      	lsls	r3, r3, #18
 8005b12:	e7db      	b.n	8005acc <HAL_I2C_Master_Transmit+0x74>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b14:	f7ff ff20 	bl	8005958 <I2C_WaitOnTXISFlagUntilTimeout>
 8005b18:	2800      	cmp	r0, #0
 8005b1a:	d1be      	bne.n	8005a9a <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b1e:	6822      	ldr	r2, [r4, #0]
 8005b20:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8005b22:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005b24:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005b26:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005b28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005b2a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005b32:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b34:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005b36:	b292      	uxth	r2, r2
 8005b38:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d0ca      	beq.n	8005ad4 <HAL_I2C_Master_Transmit+0x7c>
 8005b3e:	2a00      	cmp	r2, #0
 8005b40:	d1c8      	bne.n	8005ad4 <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b42:	2180      	movs	r1, #128	; 0x80
 8005b44:	0020      	movs	r0, r4
 8005b46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005b48:	9500      	str	r5, [sp, #0]
 8005b4a:	f7ff fedd 	bl	8005908 <I2C_WaitOnFlagUntilTimeout>
 8005b4e:	2800      	cmp	r0, #0
 8005b50:	d1a3      	bne.n	8005a9a <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b52:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b54:	2bff      	cmp	r3, #255	; 0xff
 8005b56:	d906      	bls.n	8005b66 <HAL_I2C_Master_Transmit+0x10e>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b58:	23ff      	movs	r3, #255	; 0xff
 8005b5a:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005b5c:	2380      	movs	r3, #128	; 0x80
 8005b5e:	22ff      	movs	r2, #255	; 0xff
 8005b60:	9000      	str	r0, [sp, #0]
 8005b62:	045b      	lsls	r3, r3, #17
 8005b64:	e7b2      	b.n	8005acc <HAL_I2C_Master_Transmit+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8005b66:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005b68:	b292      	uxth	r2, r2
 8005b6a:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	9000      	str	r0, [sp, #0]
 8005b70:	e7cd      	b.n	8005b0e <HAL_I2C_Master_Transmit+0xb6>
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	80002000 	.word	0x80002000
 8005b78:	fe00e800 	.word	0xfe00e800

08005b7c <HAL_I2C_Master_Receive>:
{
 8005b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	9305      	str	r3, [sp, #20]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b82:	0003      	movs	r3, r0
 8005b84:	3341      	adds	r3, #65	; 0x41
{
 8005b86:	9204      	str	r2, [sp, #16]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b88:	9303      	str	r3, [sp, #12]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
{
 8005b8c:	0004      	movs	r4, r0
 8005b8e:	000f      	movs	r7, r1
    return HAL_BUSY;
 8005b90:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b92:	2b20      	cmp	r3, #32
 8005b94:	d114      	bne.n	8005bc0 <HAL_I2C_Master_Receive+0x44>
    __HAL_LOCK(hi2c);
 8005b96:	0023      	movs	r3, r4
 8005b98:	3340      	adds	r3, #64	; 0x40
 8005b9a:	781a      	ldrb	r2, [r3, #0]
 8005b9c:	2a01      	cmp	r2, #1
 8005b9e:	d00f      	beq.n	8005bc0 <HAL_I2C_Master_Receive+0x44>
 8005ba0:	2601      	movs	r6, #1
 8005ba2:	701e      	strb	r6, [r3, #0]
    tickstart = HAL_GetTick();
 8005ba4:	f7fe faba 	bl	800411c <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ba8:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8005baa:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005bac:	9000      	str	r0, [sp, #0]
 8005bae:	2319      	movs	r3, #25
 8005bb0:	0032      	movs	r2, r6
 8005bb2:	0020      	movs	r0, r4
 8005bb4:	0209      	lsls	r1, r1, #8
 8005bb6:	f7ff fea7 	bl	8005908 <I2C_WaitOnFlagUntilTimeout>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	d002      	beq.n	8005bc4 <HAL_I2C_Master_Receive+0x48>
      return HAL_ERROR;
 8005bbe:	2001      	movs	r0, #1
}
 8005bc0:	b007      	add	sp, #28
 8005bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bc4:	2322      	movs	r3, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bc6:	0026      	movs	r6, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bc8:	9a03      	ldr	r2, [sp, #12]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bca:	3642      	adds	r6, #66	; 0x42
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bcc:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bce:	3b12      	subs	r3, #18
 8005bd0:	7033      	strb	r3, [r6, #0]
    hi2c->pBuffPtr  = pData;
 8005bd2:	9b04      	ldr	r3, [sp, #16]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bd4:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 8005bd6:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005bd8:	9b05      	ldr	r3, [sp, #20]
    hi2c->XferISR   = NULL;
 8005bda:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8005bdc:	8563      	strh	r3, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bde:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005be0:	4b2d      	ldr	r3, [pc, #180]	; (8005c98 <HAL_I2C_Master_Receive+0x11c>)
 8005be2:	2aff      	cmp	r2, #255	; 0xff
 8005be4:	d920      	bls.n	8005c28 <HAL_I2C_Master_Receive+0xac>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005be6:	22ff      	movs	r2, #255	; 0xff
 8005be8:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	2380      	movs	r3, #128	; 0x80
 8005bee:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005bf0:	0039      	movs	r1, r7
 8005bf2:	0020      	movs	r0, r4
 8005bf4:	f7ff fdce 	bl	8005794 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005bf8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bfa:	002a      	movs	r2, r5
 8005bfc:	0020      	movs	r0, r4
 8005bfe:	990c      	ldr	r1, [sp, #48]	; 0x30
    while (hi2c->XferCount > 0U)
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d119      	bne.n	8005c38 <HAL_I2C_Master_Receive+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c04:	f7ff fe58 	bl	80058b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c08:	2800      	cmp	r0, #0
 8005c0a:	d1d8      	bne.n	8005bbe <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c0c:	2120      	movs	r1, #32
 8005c0e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8005c10:	4d22      	ldr	r5, [pc, #136]	; (8005c9c <HAL_I2C_Master_Receive+0x120>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c12:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	402a      	ands	r2, r5
 8005c18:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005c1a:	0023      	movs	r3, r4
    __HAL_UNLOCK(hi2c);
 8005c1c:	3440      	adds	r4, #64	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8005c1e:	3341      	adds	r3, #65	; 0x41
 8005c20:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c22:	7030      	strb	r0, [r6, #0]
    __HAL_UNLOCK(hi2c);
 8005c24:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8005c26:	e7cb      	b.n	8005bc0 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8005c28:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005c2a:	b292      	uxth	r2, r2
 8005c2c:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005c2e:	b2d2      	uxtb	r2, r2
 8005c30:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c32:	2380      	movs	r3, #128	; 0x80
 8005c34:	049b      	lsls	r3, r3, #18
 8005c36:	e7db      	b.n	8005bf0 <HAL_I2C_Master_Receive+0x74>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c38:	f7ff fdfe 	bl	8005838 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	d1be      	bne.n	8005bbe <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c40:	6823      	ldr	r3, [r4, #0]
 8005c42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c46:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8005c48:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8005c4a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005c50:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005c52:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8005c54:	3b01      	subs	r3, #1
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c5a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005c5c:	b292      	uxth	r2, r2
 8005c5e:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0c9      	beq.n	8005bf8 <HAL_I2C_Master_Receive+0x7c>
 8005c64:	2a00      	cmp	r2, #0
 8005c66:	d1c7      	bne.n	8005bf8 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c68:	2180      	movs	r1, #128	; 0x80
 8005c6a:	0020      	movs	r0, r4
 8005c6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c6e:	9500      	str	r5, [sp, #0]
 8005c70:	f7ff fe4a 	bl	8005908 <I2C_WaitOnFlagUntilTimeout>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d1a2      	bne.n	8005bbe <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c7a:	2bff      	cmp	r3, #255	; 0xff
 8005c7c:	d906      	bls.n	8005c8c <HAL_I2C_Master_Receive+0x110>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c7e:	23ff      	movs	r3, #255	; 0xff
 8005c80:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c82:	2380      	movs	r3, #128	; 0x80
 8005c84:	22ff      	movs	r2, #255	; 0xff
 8005c86:	9000      	str	r0, [sp, #0]
 8005c88:	045b      	lsls	r3, r3, #17
 8005c8a:	e7b1      	b.n	8005bf0 <HAL_I2C_Master_Receive+0x74>
          hi2c->XferSize = hi2c->XferCount;
 8005c8c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005c8e:	b292      	uxth	r2, r2
 8005c90:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	9000      	str	r0, [sp, #0]
 8005c96:	e7cc      	b.n	8005c32 <HAL_I2C_Master_Receive+0xb6>
 8005c98:	80002400 	.word	0x80002400
 8005c9c:	fe00e800 	.word	0xfe00e800

08005ca0 <HAL_I2C_IsDeviceReady>:
{
 8005ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ca2:	b089      	sub	sp, #36	; 0x24
 8005ca4:	9205      	str	r2, [sp, #20]
 8005ca6:	001e      	movs	r6, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ca8:	0002      	movs	r2, r0
  __IO uint32_t I2C_Trials = 0UL;
 8005caa:	2300      	movs	r3, #0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cac:	3241      	adds	r2, #65	; 0x41
  __IO uint32_t I2C_Trials = 0UL;
 8005cae:	9307      	str	r3, [sp, #28]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cb0:	7813      	ldrb	r3, [r2, #0]
{
 8005cb2:	0004      	movs	r4, r0
    return HAL_BUSY;
 8005cb4:	2502      	movs	r5, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cb6:	2b20      	cmp	r3, #32
 8005cb8:	d15c      	bne.n	8005d74 <HAL_I2C_IsDeviceReady+0xd4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8005cba:	6803      	ldr	r3, [r0, #0]
 8005cbc:	6998      	ldr	r0, [r3, #24]
 8005cbe:	2380      	movs	r3, #128	; 0x80
 8005cc0:	0007      	movs	r7, r0
 8005cc2:	021b      	lsls	r3, r3, #8
 8005cc4:	401f      	ands	r7, r3
 8005cc6:	4218      	tst	r0, r3
 8005cc8:	d154      	bne.n	8005d74 <HAL_I2C_IsDeviceReady+0xd4>
    __HAL_LOCK(hi2c);
 8005cca:	0020      	movs	r0, r4
 8005ccc:	3040      	adds	r0, #64	; 0x40
 8005cce:	7803      	ldrb	r3, [r0, #0]
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d04f      	beq.n	8005d74 <HAL_I2C_IsDeviceReady+0xd4>
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	7003      	strb	r3, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005cd8:	2024      	movs	r0, #36	; 0x24
 8005cda:	0589      	lsls	r1, r1, #22
 8005cdc:	7010      	strb	r0, [r2, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005cde:	0d8a      	lsrs	r2, r1, #22
 8005ce0:	6467      	str	r7, [r4, #68]	; 0x44
 8005ce2:	9204      	str	r2, [sp, #16]
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005ce4:	9303      	str	r3, [sp, #12]
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005ce6:	68e3      	ldr	r3, [r4, #12]
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d12b      	bne.n	8005d44 <HAL_I2C_IsDeviceReady+0xa4>
 8005cec:	4b3d      	ldr	r3, [pc, #244]	; (8005de4 <HAL_I2C_IsDeviceReady+0x144>)
 8005cee:	9a04      	ldr	r2, [sp, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	6822      	ldr	r2, [r4, #0]
 8005cf4:	6053      	str	r3, [r2, #4]
      tickstart = HAL_GetTick();
 8005cf6:	f7fe fa11 	bl	800411c <HAL_GetTick>
 8005cfa:	9002      	str	r0, [sp, #8]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	9a03      	ldr	r2, [sp, #12]
 8005d00:	699d      	ldr	r5, [r3, #24]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005d02:	699b      	ldr	r3, [r3, #24]
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d04:	096d      	lsrs	r5, r5, #5
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005d06:	091b      	lsrs	r3, r3, #4
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d08:	4015      	ands	r5, r2
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005d0a:	4013      	ands	r3, r2
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8005d0c:	431d      	orrs	r5, r3
 8005d0e:	d01c      	beq.n	8005d4a <HAL_I2C_IsDeviceReady+0xaa>
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8005d10:	6823      	ldr	r3, [r4, #0]
 8005d12:	2710      	movs	r7, #16
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	001a      	movs	r2, r3
 8005d18:	403a      	ands	r2, r7
 8005d1a:	423b      	tst	r3, r7
 8005d1c:	d12d      	bne.n	8005d7a <HAL_I2C_IsDeviceReady+0xda>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005d1e:	9b02      	ldr	r3, [sp, #8]
 8005d20:	2120      	movs	r1, #32
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	0020      	movs	r0, r4
 8005d26:	0033      	movs	r3, r6
 8005d28:	f7ff fdee 	bl	8005908 <I2C_WaitOnFlagUntilTimeout>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	d121      	bne.n	8005d74 <HAL_I2C_IsDeviceReady+0xd4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d30:	2320      	movs	r3, #32
 8005d32:	6822      	ldr	r2, [r4, #0]
        return HAL_OK;
 8005d34:	0005      	movs	r5, r0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d36:	61d3      	str	r3, [r2, #28]
        hi2c->State = HAL_I2C_STATE_READY;
 8005d38:	0022      	movs	r2, r4
        __HAL_UNLOCK(hi2c);
 8005d3a:	3440      	adds	r4, #64	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 8005d3c:	3241      	adds	r2, #65	; 0x41
 8005d3e:	7013      	strb	r3, [r2, #0]
        __HAL_UNLOCK(hi2c);
 8005d40:	7020      	strb	r0, [r4, #0]
        return HAL_OK;
 8005d42:	e017      	b.n	8005d74 <HAL_I2C_IsDeviceReady+0xd4>
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8005d44:	23a0      	movs	r3, #160	; 0xa0
 8005d46:	019b      	lsls	r3, r3, #6
 8005d48:	e7d1      	b.n	8005cee <HAL_I2C_IsDeviceReady+0x4e>
        if (Timeout != HAL_MAX_DELAY)
 8005d4a:	1c73      	adds	r3, r6, #1
 8005d4c:	d0d6      	beq.n	8005cfc <HAL_I2C_IsDeviceReady+0x5c>
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005d4e:	f7fe f9e5 	bl	800411c <HAL_GetTick>
 8005d52:	9b02      	ldr	r3, [sp, #8]
 8005d54:	1ac0      	subs	r0, r0, r3
 8005d56:	42b0      	cmp	r0, r6
 8005d58:	d801      	bhi.n	8005d5e <HAL_I2C_IsDeviceReady+0xbe>
 8005d5a:	2e00      	cmp	r6, #0
 8005d5c:	d1ce      	bne.n	8005cfc <HAL_I2C_IsDeviceReady+0x5c>
            hi2c->State = HAL_I2C_STATE_READY;
 8005d5e:	0022      	movs	r2, r4
 8005d60:	2320      	movs	r3, #32
 8005d62:	3241      	adds	r2, #65	; 0x41
 8005d64:	7013      	strb	r3, [r2, #0]
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d66:	6c62      	ldr	r2, [r4, #68]	; 0x44
            return HAL_ERROR;
 8005d68:	2501      	movs	r5, #1
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	6463      	str	r3, [r4, #68]	; 0x44
            __HAL_UNLOCK(hi2c);
 8005d6e:	2300      	movs	r3, #0
 8005d70:	3440      	adds	r4, #64	; 0x40
 8005d72:	7023      	strb	r3, [r4, #0]
}
 8005d74:	0028      	movs	r0, r5
 8005d76:	b009      	add	sp, #36	; 0x24
 8005d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005d7a:	9b02      	ldr	r3, [sp, #8]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	2120      	movs	r1, #32
 8005d82:	0033      	movs	r3, r6
 8005d84:	0020      	movs	r0, r4
 8005d86:	f7ff fdbf 	bl	8005908 <I2C_WaitOnFlagUntilTimeout>
 8005d8a:	1e02      	subs	r2, r0, #0
 8005d8c:	d1f2      	bne.n	8005d74 <HAL_I2C_IsDeviceReady+0xd4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d8e:	6823      	ldr	r3, [r4, #0]
      if (I2C_Trials == Trials)
 8005d90:	9805      	ldr	r0, [sp, #20]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d92:	61df      	str	r7, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d94:	2720      	movs	r7, #32
 8005d96:	61df      	str	r7, [r3, #28]
      if (I2C_Trials == Trials)
 8005d98:	9907      	ldr	r1, [sp, #28]
 8005d9a:	4281      	cmp	r1, r0
 8005d9c:	d10f      	bne.n	8005dbe <HAL_I2C_IsDeviceReady+0x11e>
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005d9e:	2180      	movs	r1, #128	; 0x80
 8005da0:	6858      	ldr	r0, [r3, #4]
 8005da2:	01c9      	lsls	r1, r1, #7
 8005da4:	4301      	orrs	r1, r0
 8005da6:	6059      	str	r1, [r3, #4]
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8005da8:	9b02      	ldr	r3, [sp, #8]
 8005daa:	0039      	movs	r1, r7
 8005dac:	9300      	str	r3, [sp, #0]
 8005dae:	0020      	movs	r0, r4
 8005db0:	0033      	movs	r3, r6
 8005db2:	f7ff fda9 	bl	8005908 <I2C_WaitOnFlagUntilTimeout>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	d1dc      	bne.n	8005d74 <HAL_I2C_IsDeviceReady+0xd4>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	61df      	str	r7, [r3, #28]
      I2C_Trials++;
 8005dbe:	9b07      	ldr	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8005dc0:	9a05      	ldr	r2, [sp, #20]
      I2C_Trials++;
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	9307      	str	r3, [sp, #28]
    } while (I2C_Trials < Trials);
 8005dc6:	9b07      	ldr	r3, [sp, #28]
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d200      	bcs.n	8005dce <HAL_I2C_IsDeviceReady+0x12e>
 8005dcc:	e78b      	b.n	8005ce6 <HAL_I2C_IsDeviceReady+0x46>
    hi2c->State = HAL_I2C_STATE_READY;
 8005dce:	0022      	movs	r2, r4
 8005dd0:	2320      	movs	r3, #32
 8005dd2:	3241      	adds	r2, #65	; 0x41
 8005dd4:	7013      	strb	r3, [r2, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dd6:	6c62      	ldr	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8005dd8:	3440      	adds	r4, #64	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(hi2c);
 8005dde:	2300      	movs	r3, #0
 8005de0:	7023      	strb	r3, [r4, #0]
    return HAL_ERROR;
 8005de2:	e7c7      	b.n	8005d74 <HAL_I2C_IsDeviceReady+0xd4>
 8005de4:	02002000 	.word	0x02002000

08005de8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005de8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dea:	0004      	movs	r4, r0
 8005dec:	3441      	adds	r4, #65	; 0x41
 8005dee:	7822      	ldrb	r2, [r4, #0]
{
 8005df0:	0003      	movs	r3, r0
 8005df2:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8005df4:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005df6:	b2d6      	uxtb	r6, r2
 8005df8:	2a20      	cmp	r2, #32
 8005dfa:	d118      	bne.n	8005e2e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8005dfc:	001d      	movs	r5, r3
 8005dfe:	3540      	adds	r5, #64	; 0x40
 8005e00:	782a      	ldrb	r2, [r5, #0]
 8005e02:	2a01      	cmp	r2, #1
 8005e04:	d013      	beq.n	8005e2e <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e06:	2224      	movs	r2, #36	; 0x24
 8005e08:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	3a23      	subs	r2, #35	; 0x23
 8005e0e:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e10:	4807      	ldr	r0, [pc, #28]	; (8005e30 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 8005e12:	4391      	bics	r1, r2
 8005e14:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e16:	6819      	ldr	r1, [r3, #0]
 8005e18:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8005e1a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005e1c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8005e1e:	6819      	ldr	r1, [r3, #0]
 8005e20:	4339      	orrs	r1, r7
 8005e22:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8005e24:	6819      	ldr	r1, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005e2a:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8005e2c:	7028      	strb	r0, [r5, #0]
  }
}
 8005e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e30:	ffffefff 	.word	0xffffefff

08005e34 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e34:	0002      	movs	r2, r0
{
 8005e36:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e38:	3241      	adds	r2, #65	; 0x41
 8005e3a:	7814      	ldrb	r4, [r2, #0]
{
 8005e3c:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e3e:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8005e40:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e42:	2c20      	cmp	r4, #32
 8005e44:	d117      	bne.n	8005e76 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 8005e46:	001c      	movs	r4, r3
 8005e48:	3440      	adds	r4, #64	; 0x40
 8005e4a:	7826      	ldrb	r6, [r4, #0]
 8005e4c:	2e01      	cmp	r6, #1
 8005e4e:	d012      	beq.n	8005e76 <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e50:	3022      	adds	r0, #34	; 0x22
 8005e52:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	3823      	subs	r0, #35	; 0x23
 8005e58:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8005e5a:	4f07      	ldr	r7, [pc, #28]	; (8005e78 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8005e5c:	4386      	bics	r6, r0
 8005e5e:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8005e60:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 8005e62:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 8005e64:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 8005e66:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8005e68:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8005e6a:	6819      	ldr	r1, [r3, #0]
 8005e6c:	4308      	orrs	r0, r1
 8005e6e:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8005e70:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8005e72:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 8005e74:	7020      	strb	r0, [r4, #0]
  }
}
 8005e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e78:	fffff0ff 	.word	0xfffff0ff

08005e7c <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8005e7c:	2110      	movs	r1, #16
 8005e7e:	4a02      	ldr	r2, [pc, #8]	; (8005e88 <HAL_PWR_DisablePVD+0xc>)
 8005e80:	6813      	ldr	r3, [r2, #0]
 8005e82:	438b      	bics	r3, r1
 8005e84:	6013      	str	r3, [r2, #0]
}
 8005e86:	4770      	bx	lr
 8005e88:	40007000 	.word	0x40007000

08005e8c <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005e8c:	4b17      	ldr	r3, [pc, #92]	; (8005eec <HAL_PWR_EnterSLEEPMode+0x60>)
{
 8005e8e:	b5f0      	push	{r4, r5, r6, r7, lr}
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005e90:	4a17      	ldr	r2, [pc, #92]	; (8005ef0 <HAL_PWR_EnterSLEEPMode+0x64>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005e92:	681e      	ldr	r6, [r3, #0]
{
 8005e94:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005e96:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005e98:	6a17      	ldr	r7, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005e9a:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005e9c:	2201      	movs	r2, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005e9e:	0080      	lsls	r0, r0, #2
 8005ea0:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005ea2:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8005ea4:	4206      	tst	r6, r0
 8005ea6:	d005      	beq.n	8005eb4 <HAL_PWR_EnterSLEEPMode+0x28>
 8005ea8:	2a00      	cmp	r2, #0
 8005eaa:	d003      	beq.n	8005eb4 <HAL_PWR_EnterSLEEPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8005eac:	6818      	ldr	r0, [r3, #0]
 8005eae:	4e11      	ldr	r6, [pc, #68]	; (8005ef4 <HAL_PWR_EnterSLEEPMode+0x68>)
 8005eb0:	4030      	ands	r0, r6
 8005eb2:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005eb4:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8005eb6:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005eb8:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8005eba:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005ebc:	4d0e      	ldr	r5, [pc, #56]	; (8005ef8 <HAL_PWR_EnterSLEEPMode+0x6c>)
  PWR->CR = tmpreg;
 8005ebe:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005ec0:	6928      	ldr	r0, [r5, #16]
 8005ec2:	3601      	adds	r6, #1
 8005ec4:	43b0      	bics	r0, r6
 8005ec6:	6128      	str	r0, [r5, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8005ec8:	2901      	cmp	r1, #1
 8005eca:	d10b      	bne.n	8005ee4 <HAL_PWR_EnterSLEEPMode+0x58>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005ecc:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8005ece:	2c00      	cmp	r4, #0
 8005ed0:	d006      	beq.n	8005ee0 <HAL_PWR_EnterSLEEPMode+0x54>
 8005ed2:	2a00      	cmp	r2, #0
 8005ed4:	d004      	beq.n	8005ee0 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8005ed6:	2280      	movs	r2, #128	; 0x80
 8005ed8:	6819      	ldr	r1, [r3, #0]
 8005eda:	0092      	lsls	r2, r2, #2
 8005edc:	430a      	orrs	r2, r1
 8005ede:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 8005ee0:	46c0      	nop			; (mov r8, r8)

}
 8005ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8005ee4:	bf40      	sev
    __WFE();
 8005ee6:	bf20      	wfe
    __WFE();
 8005ee8:	bf20      	wfe
 8005eea:	e7f0      	b.n	8005ece <HAL_PWR_EnterSLEEPMode+0x42>
 8005eec:	40007000 	.word	0x40007000
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	fffffdff 	.word	0xfffffdff
 8005ef8:	e000ed00 	.word	0xe000ed00

08005efc <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005efc:	4b19      	ldr	r3, [pc, #100]	; (8005f64 <HAL_PWR_EnterSTOPMode+0x68>)
{
 8005efe:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005f00:	681e      	ldr	r6, [r3, #0]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005f02:	4c19      	ldr	r4, [pc, #100]	; (8005f68 <HAL_PWR_EnterSTOPMode+0x6c>)
{
 8005f04:	0002      	movs	r2, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005f06:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005f08:	6a27      	ldr	r7, [r4, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005f0a:	0035      	movs	r5, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005f0c:	2401      	movs	r4, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005f0e:	0080      	lsls	r0, r0, #2
 8005f10:	4005      	ands	r5, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005f12:	403c      	ands	r4, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8005f14:	4206      	tst	r6, r0
 8005f16:	d005      	beq.n	8005f24 <HAL_PWR_EnterSTOPMode+0x28>
 8005f18:	2c00      	cmp	r4, #0
 8005f1a:	d003      	beq.n	8005f24 <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	4e13      	ldr	r6, [pc, #76]	; (8005f6c <HAL_PWR_EnterSTOPMode+0x70>)
 8005f20:	4030      	ands	r0, r6
 8005f22:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005f24:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8005f26:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005f28:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8005f2a:	4310      	orrs	r0, r2

  /* Store the new value */
  PWR->CR = tmpreg;
 8005f2c:	6018      	str	r0, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005f2e:	2004      	movs	r0, #4
 8005f30:	4a0f      	ldr	r2, [pc, #60]	; (8005f70 <HAL_PWR_EnterSTOPMode+0x74>)
 8005f32:	6916      	ldr	r6, [r2, #16]
 8005f34:	4330      	orrs	r0, r6
 8005f36:	6110      	str	r0, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8005f38:	2901      	cmp	r1, #1
 8005f3a:	d10e      	bne.n	8005f5a <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005f3c:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005f3e:	2004      	movs	r0, #4
 8005f40:	6911      	ldr	r1, [r2, #16]
 8005f42:	4381      	bics	r1, r0
 8005f44:	6111      	str	r1, [r2, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8005f46:	2d00      	cmp	r5, #0
 8005f48:	d006      	beq.n	8005f58 <HAL_PWR_EnterSTOPMode+0x5c>
 8005f4a:	2c00      	cmp	r4, #0
 8005f4c:	d004      	beq.n	8005f58 <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 8005f4e:	2280      	movs	r2, #128	; 0x80
 8005f50:	6819      	ldr	r1, [r3, #0]
 8005f52:	0092      	lsls	r2, r2, #2
 8005f54:	430a      	orrs	r2, r1
 8005f56:	601a      	str	r2, [r3, #0]
  }
}
 8005f58:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8005f5a:	bf40      	sev
    __WFE();
 8005f5c:	bf20      	wfe
    __WFE();
 8005f5e:	bf20      	wfe
 8005f60:	e7ed      	b.n	8005f3e <HAL_PWR_EnterSTOPMode+0x42>
 8005f62:	46c0      	nop			; (mov r8, r8)
 8005f64:	40007000 	.word	0x40007000
 8005f68:	40010000 	.word	0x40010000
 8005f6c:	fffffdff 	.word	0xfffffdff
 8005f70:	e000ed00 	.word	0xe000ed00

08005f74 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8005f74:	2380      	movs	r3, #128	; 0x80
 8005f76:	4a03      	ldr	r2, [pc, #12]	; (8005f84 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	6811      	ldr	r1, [r2, #0]
 8005f7c:	430b      	orrs	r3, r1
 8005f7e:	6013      	str	r3, [r2, #0]
}
 8005f80:	4770      	bx	lr
 8005f82:	46c0      	nop			; (mov r8, r8)
 8005f84:	40007000 	.word	0x40007000

08005f88 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8005f88:	2380      	movs	r3, #128	; 0x80
 8005f8a:	4a03      	ldr	r2, [pc, #12]	; (8005f98 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	6811      	ldr	r1, [r2, #0]
 8005f90:	430b      	orrs	r3, r1
 8005f92:	6013      	str	r3, [r2, #0]
}
 8005f94:	4770      	bx	lr
 8005f96:	46c0      	nop			; (mov r8, r8)
 8005f98:	40007000 	.word	0x40007000

08005f9c <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005f9c:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8005f9e:	4b1d      	ldr	r3, [pc, #116]	; (8006014 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8005fa0:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8005fa2:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8005fa4:	4022      	ands	r2, r4
 8005fa6:	2a08      	cmp	r2, #8
 8005fa8:	d031      	beq.n	800600e <HAL_RCC_GetSysClockFreq+0x72>
 8005faa:	2a0c      	cmp	r2, #12
 8005fac:	d009      	beq.n	8005fc2 <HAL_RCC_GetSysClockFreq+0x26>
 8005fae:	2a04      	cmp	r2, #4
 8005fb0:	d125      	bne.n	8005ffe <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005fb2:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8005fb4:	4b18      	ldr	r3, [pc, #96]	; (8006018 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005fb6:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8005fb8:	17c0      	asrs	r0, r0, #31
 8005fba:	4018      	ands	r0, r3
 8005fbc:	4b17      	ldr	r3, [pc, #92]	; (800601c <HAL_RCC_GetSysClockFreq+0x80>)
 8005fbe:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8005fc0:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005fc2:	02a2      	lsls	r2, r4, #10
 8005fc4:	4816      	ldr	r0, [pc, #88]	; (8006020 <HAL_RCC_GetSysClockFreq+0x84>)
 8005fc6:	0f12      	lsrs	r2, r2, #28
 8005fc8:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fca:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005fcc:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fce:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005fd0:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fd2:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005fd4:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005fd6:	4211      	tst	r1, r2
 8005fd8:	d009      	beq.n	8005fee <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005fda:	4a12      	ldr	r2, [pc, #72]	; (8006024 <HAL_RCC_GetSysClockFreq+0x88>)
 8005fdc:	2300      	movs	r3, #0
 8005fde:	2100      	movs	r1, #0
 8005fe0:	f7fa fad0 	bl	8000584 <__aeabi_lmul>
 8005fe4:	0022      	movs	r2, r4
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	f7fa faac 	bl	8000544 <__aeabi_uldivmod>
 8005fec:	e7e8      	b.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	2310      	movs	r3, #16
 8005ff2:	421a      	tst	r2, r3
 8005ff4:	d001      	beq.n	8005ffa <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005ff6:	4a0c      	ldr	r2, [pc, #48]	; (8006028 <HAL_RCC_GetSysClockFreq+0x8c>)
 8005ff8:	e7f0      	b.n	8005fdc <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005ffa:	4a08      	ldr	r2, [pc, #32]	; (800601c <HAL_RCC_GetSysClockFreq+0x80>)
 8005ffc:	e7ee      	b.n	8005fdc <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005ffe:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006000:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006002:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006004:	041b      	lsls	r3, r3, #16
 8006006:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006008:	3301      	adds	r3, #1
 800600a:	4098      	lsls	r0, r3
  return sysclockfreq;
 800600c:	e7d8      	b.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 800600e:	4805      	ldr	r0, [pc, #20]	; (8006024 <HAL_RCC_GetSysClockFreq+0x88>)
 8006010:	e7d6      	b.n	8005fc0 <HAL_RCC_GetSysClockFreq+0x24>
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	40021000 	.word	0x40021000
 8006018:	ff48e500 	.word	0xff48e500
 800601c:	00f42400 	.word	0x00f42400
 8006020:	0801126c 	.word	0x0801126c
 8006024:	007a1200 	.word	0x007a1200
 8006028:	003d0900 	.word	0x003d0900

0800602c <HAL_RCC_OscConfig>:
{
 800602c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800602e:	0005      	movs	r5, r0
 8006030:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8006032:	2800      	cmp	r0, #0
 8006034:	d059      	beq.n	80060ea <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006036:	230c      	movs	r3, #12
 8006038:	4cb8      	ldr	r4, [pc, #736]	; (800631c <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800603a:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800603c:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800603e:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006040:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006042:	2380      	movs	r3, #128	; 0x80
 8006044:	025b      	lsls	r3, r3, #9
 8006046:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006048:	07d2      	lsls	r2, r2, #31
 800604a:	d442      	bmi.n	80060d2 <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	079b      	lsls	r3, r3, #30
 8006050:	d500      	bpl.n	8006054 <HAL_RCC_OscConfig+0x28>
 8006052:	e08b      	b.n	800616c <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	06db      	lsls	r3, r3, #27
 8006058:	d529      	bpl.n	80060ae <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800605a:	2e00      	cmp	r6, #0
 800605c:	d000      	beq.n	8006060 <HAL_RCC_OscConfig+0x34>
 800605e:	e0e4      	b.n	800622a <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006060:	6823      	ldr	r3, [r4, #0]
 8006062:	059b      	lsls	r3, r3, #22
 8006064:	d502      	bpl.n	800606c <HAL_RCC_OscConfig+0x40>
 8006066:	69eb      	ldr	r3, [r5, #28]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d03e      	beq.n	80060ea <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800606c:	6862      	ldr	r2, [r4, #4]
 800606e:	49ac      	ldr	r1, [pc, #688]	; (8006320 <HAL_RCC_OscConfig+0x2f4>)
 8006070:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006072:	400a      	ands	r2, r1
 8006074:	431a      	orrs	r2, r3
 8006076:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006078:	6861      	ldr	r1, [r4, #4]
 800607a:	6a2a      	ldr	r2, [r5, #32]
 800607c:	0209      	lsls	r1, r1, #8
 800607e:	0a09      	lsrs	r1, r1, #8
 8006080:	0612      	lsls	r2, r2, #24
 8006082:	430a      	orrs	r2, r1
 8006084:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8006086:	2280      	movs	r2, #128	; 0x80
 8006088:	0b5b      	lsrs	r3, r3, #13
 800608a:	3301      	adds	r3, #1
 800608c:	0212      	lsls	r2, r2, #8
 800608e:	409a      	lsls	r2, r3
 8006090:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8006092:	68e1      	ldr	r1, [r4, #12]
 8006094:	060a      	lsls	r2, r1, #24
 8006096:	49a3      	ldr	r1, [pc, #652]	; (8006324 <HAL_RCC_OscConfig+0x2f8>)
 8006098:	0f12      	lsrs	r2, r2, #28
 800609a:	5c8a      	ldrb	r2, [r1, r2]
 800609c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800609e:	4aa2      	ldr	r2, [pc, #648]	; (8006328 <HAL_RCC_OscConfig+0x2fc>)
 80060a0:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 80060a2:	4ba2      	ldr	r3, [pc, #648]	; (800632c <HAL_RCC_OscConfig+0x300>)
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	f7fe f837 	bl	8004118 <HAL_InitTick>
        if(status != HAL_OK)
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d134      	bne.n	8006118 <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060ae:	682b      	ldr	r3, [r5, #0]
 80060b0:	071b      	lsls	r3, r3, #28
 80060b2:	d500      	bpl.n	80060b6 <HAL_RCC_OscConfig+0x8a>
 80060b4:	e0f0      	b.n	8006298 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060b6:	682b      	ldr	r3, [r5, #0]
 80060b8:	075b      	lsls	r3, r3, #29
 80060ba:	d500      	bpl.n	80060be <HAL_RCC_OscConfig+0x92>
 80060bc:	e112      	b.n	80062e4 <HAL_RCC_OscConfig+0x2b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80060be:	682b      	ldr	r3, [r5, #0]
 80060c0:	069b      	lsls	r3, r3, #26
 80060c2:	d500      	bpl.n	80060c6 <HAL_RCC_OscConfig+0x9a>
 80060c4:	e199      	b.n	80063fa <HAL_RCC_OscConfig+0x3ce>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d000      	beq.n	80060ce <HAL_RCC_OscConfig+0xa2>
 80060cc:	e1c8      	b.n	8006460 <HAL_RCC_OscConfig+0x434>
  return HAL_OK;
 80060ce:	2000      	movs	r0, #0
 80060d0:	e022      	b.n	8006118 <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060d2:	2e08      	cmp	r6, #8
 80060d4:	d003      	beq.n	80060de <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80060d6:	2e0c      	cmp	r6, #12
 80060d8:	d109      	bne.n	80060ee <HAL_RCC_OscConfig+0xc2>
 80060da:	2f00      	cmp	r7, #0
 80060dc:	d007      	beq.n	80060ee <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060de:	6823      	ldr	r3, [r4, #0]
 80060e0:	039b      	lsls	r3, r3, #14
 80060e2:	d5b3      	bpl.n	800604c <HAL_RCC_OscConfig+0x20>
 80060e4:	686b      	ldr	r3, [r5, #4]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1b0      	bne.n	800604c <HAL_RCC_OscConfig+0x20>
          return HAL_ERROR;
 80060ea:	2001      	movs	r0, #1
 80060ec:	e014      	b.n	8006118 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060ee:	686a      	ldr	r2, [r5, #4]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d113      	bne.n	800611c <HAL_RCC_OscConfig+0xf0>
 80060f4:	6822      	ldr	r2, [r4, #0]
 80060f6:	4313      	orrs	r3, r2
 80060f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80060fa:	f7fe f80f 	bl	800411c <HAL_GetTick>
 80060fe:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006100:	2280      	movs	r2, #128	; 0x80
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	0292      	lsls	r2, r2, #10
 8006106:	4213      	tst	r3, r2
 8006108:	d1a0      	bne.n	800604c <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800610a:	f7fe f807 	bl	800411c <HAL_GetTick>
 800610e:	9b01      	ldr	r3, [sp, #4]
 8006110:	1ac0      	subs	r0, r0, r3
 8006112:	2864      	cmp	r0, #100	; 0x64
 8006114:	d9f4      	bls.n	8006100 <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 8006116:	2003      	movs	r0, #3
}
 8006118:	b007      	add	sp, #28
 800611a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800611c:	21a0      	movs	r1, #160	; 0xa0
 800611e:	02c9      	lsls	r1, r1, #11
 8006120:	428a      	cmp	r2, r1
 8006122:	d105      	bne.n	8006130 <HAL_RCC_OscConfig+0x104>
 8006124:	2280      	movs	r2, #128	; 0x80
 8006126:	6821      	ldr	r1, [r4, #0]
 8006128:	02d2      	lsls	r2, r2, #11
 800612a:	430a      	orrs	r2, r1
 800612c:	6022      	str	r2, [r4, #0]
 800612e:	e7e1      	b.n	80060f4 <HAL_RCC_OscConfig+0xc8>
 8006130:	6821      	ldr	r1, [r4, #0]
 8006132:	487f      	ldr	r0, [pc, #508]	; (8006330 <HAL_RCC_OscConfig+0x304>)
 8006134:	4001      	ands	r1, r0
 8006136:	6021      	str	r1, [r4, #0]
 8006138:	6821      	ldr	r1, [r4, #0]
 800613a:	400b      	ands	r3, r1
 800613c:	9305      	str	r3, [sp, #20]
 800613e:	9b05      	ldr	r3, [sp, #20]
 8006140:	497c      	ldr	r1, [pc, #496]	; (8006334 <HAL_RCC_OscConfig+0x308>)
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	400b      	ands	r3, r1
 8006146:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006148:	2a00      	cmp	r2, #0
 800614a:	d1d6      	bne.n	80060fa <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 800614c:	f7fd ffe6 	bl	800411c <HAL_GetTick>
 8006150:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006152:	2280      	movs	r2, #128	; 0x80
 8006154:	6823      	ldr	r3, [r4, #0]
 8006156:	0292      	lsls	r2, r2, #10
 8006158:	4213      	tst	r3, r2
 800615a:	d100      	bne.n	800615e <HAL_RCC_OscConfig+0x132>
 800615c:	e776      	b.n	800604c <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800615e:	f7fd ffdd 	bl	800411c <HAL_GetTick>
 8006162:	9b01      	ldr	r3, [sp, #4]
 8006164:	1ac0      	subs	r0, r0, r3
 8006166:	2864      	cmp	r0, #100	; 0x64
 8006168:	d9f3      	bls.n	8006152 <HAL_RCC_OscConfig+0x126>
 800616a:	e7d4      	b.n	8006116 <HAL_RCC_OscConfig+0xea>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800616c:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800616e:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8006170:	4213      	tst	r3, r2
 8006172:	d003      	beq.n	800617c <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006174:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8006176:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8006178:	4311      	orrs	r1, r2
 800617a:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800617c:	2e04      	cmp	r6, #4
 800617e:	d003      	beq.n	8006188 <HAL_RCC_OscConfig+0x15c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006180:	2e0c      	cmp	r6, #12
 8006182:	d124      	bne.n	80061ce <HAL_RCC_OscConfig+0x1a2>
 8006184:	2f00      	cmp	r7, #0
 8006186:	d122      	bne.n	80061ce <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8006188:	6822      	ldr	r2, [r4, #0]
 800618a:	0752      	lsls	r2, r2, #29
 800618c:	d501      	bpl.n	8006192 <HAL_RCC_OscConfig+0x166>
 800618e:	2b00      	cmp	r3, #0
 8006190:	d0ab      	beq.n	80060ea <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006192:	6861      	ldr	r1, [r4, #4]
 8006194:	692a      	ldr	r2, [r5, #16]
 8006196:	4868      	ldr	r0, [pc, #416]	; (8006338 <HAL_RCC_OscConfig+0x30c>)
 8006198:	0212      	lsls	r2, r2, #8
 800619a:	4001      	ands	r1, r0
 800619c:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800619e:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061a0:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80061a2:	6822      	ldr	r2, [r4, #0]
 80061a4:	438a      	bics	r2, r1
 80061a6:	4313      	orrs	r3, r2
 80061a8:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061aa:	f7ff fef7 	bl	8005f9c <HAL_RCC_GetSysClockFreq>
 80061ae:	68e3      	ldr	r3, [r4, #12]
 80061b0:	4a5c      	ldr	r2, [pc, #368]	; (8006324 <HAL_RCC_OscConfig+0x2f8>)
 80061b2:	061b      	lsls	r3, r3, #24
 80061b4:	0f1b      	lsrs	r3, r3, #28
 80061b6:	5cd3      	ldrb	r3, [r2, r3]
 80061b8:	40d8      	lsrs	r0, r3
 80061ba:	4b5b      	ldr	r3, [pc, #364]	; (8006328 <HAL_RCC_OscConfig+0x2fc>)
 80061bc:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 80061be:	4b5b      	ldr	r3, [pc, #364]	; (800632c <HAL_RCC_OscConfig+0x300>)
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	f7fd ffa9 	bl	8004118 <HAL_InitTick>
      if(status != HAL_OK)
 80061c6:	2800      	cmp	r0, #0
 80061c8:	d100      	bne.n	80061cc <HAL_RCC_OscConfig+0x1a0>
 80061ca:	e743      	b.n	8006054 <HAL_RCC_OscConfig+0x28>
 80061cc:	e7a4      	b.n	8006118 <HAL_RCC_OscConfig+0xec>
      if(hsi_state != RCC_HSI_OFF)
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d019      	beq.n	8006206 <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80061d2:	2109      	movs	r1, #9
 80061d4:	6822      	ldr	r2, [r4, #0]
 80061d6:	438a      	bics	r2, r1
 80061d8:	4313      	orrs	r3, r2
 80061da:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80061dc:	f7fd ff9e 	bl	800411c <HAL_GetTick>
 80061e0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061e2:	2204      	movs	r2, #4
 80061e4:	6823      	ldr	r3, [r4, #0]
 80061e6:	4213      	tst	r3, r2
 80061e8:	d007      	beq.n	80061fa <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061ea:	6862      	ldr	r2, [r4, #4]
 80061ec:	692b      	ldr	r3, [r5, #16]
 80061ee:	4952      	ldr	r1, [pc, #328]	; (8006338 <HAL_RCC_OscConfig+0x30c>)
 80061f0:	021b      	lsls	r3, r3, #8
 80061f2:	400a      	ands	r2, r1
 80061f4:	4313      	orrs	r3, r2
 80061f6:	6063      	str	r3, [r4, #4]
 80061f8:	e72c      	b.n	8006054 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061fa:	f7fd ff8f 	bl	800411c <HAL_GetTick>
 80061fe:	1bc0      	subs	r0, r0, r7
 8006200:	2802      	cmp	r0, #2
 8006202:	d9ee      	bls.n	80061e2 <HAL_RCC_OscConfig+0x1b6>
 8006204:	e787      	b.n	8006116 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 8006206:	2201      	movs	r2, #1
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	4393      	bics	r3, r2
 800620c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800620e:	f7fd ff85 	bl	800411c <HAL_GetTick>
 8006212:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006214:	2204      	movs	r2, #4
 8006216:	6823      	ldr	r3, [r4, #0]
 8006218:	4213      	tst	r3, r2
 800621a:	d100      	bne.n	800621e <HAL_RCC_OscConfig+0x1f2>
 800621c:	e71a      	b.n	8006054 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800621e:	f7fd ff7d 	bl	800411c <HAL_GetTick>
 8006222:	1bc0      	subs	r0, r0, r7
 8006224:	2802      	cmp	r0, #2
 8006226:	d9f5      	bls.n	8006214 <HAL_RCC_OscConfig+0x1e8>
 8006228:	e775      	b.n	8006116 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800622a:	69eb      	ldr	r3, [r5, #28]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d020      	beq.n	8006272 <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 8006230:	2380      	movs	r3, #128	; 0x80
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	4313      	orrs	r3, r2
 8006238:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800623a:	f7fd ff6f 	bl	800411c <HAL_GetTick>
 800623e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006240:	2280      	movs	r2, #128	; 0x80
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	0092      	lsls	r2, r2, #2
 8006246:	4213      	tst	r3, r2
 8006248:	d00d      	beq.n	8006266 <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800624a:	6863      	ldr	r3, [r4, #4]
 800624c:	4a34      	ldr	r2, [pc, #208]	; (8006320 <HAL_RCC_OscConfig+0x2f4>)
 800624e:	4013      	ands	r3, r2
 8006250:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8006252:	4313      	orrs	r3, r2
 8006254:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006256:	6862      	ldr	r2, [r4, #4]
 8006258:	6a2b      	ldr	r3, [r5, #32]
 800625a:	0212      	lsls	r2, r2, #8
 800625c:	061b      	lsls	r3, r3, #24
 800625e:	0a12      	lsrs	r2, r2, #8
 8006260:	4313      	orrs	r3, r2
 8006262:	6063      	str	r3, [r4, #4]
 8006264:	e723      	b.n	80060ae <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006266:	f7fd ff59 	bl	800411c <HAL_GetTick>
 800626a:	1bc0      	subs	r0, r0, r7
 800626c:	2802      	cmp	r0, #2
 800626e:	d9e7      	bls.n	8006240 <HAL_RCC_OscConfig+0x214>
 8006270:	e751      	b.n	8006116 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	4a31      	ldr	r2, [pc, #196]	; (800633c <HAL_RCC_OscConfig+0x310>)
 8006276:	4013      	ands	r3, r2
 8006278:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800627a:	f7fd ff4f 	bl	800411c <HAL_GetTick>
 800627e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8006280:	2280      	movs	r2, #128	; 0x80
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	0092      	lsls	r2, r2, #2
 8006286:	4213      	tst	r3, r2
 8006288:	d100      	bne.n	800628c <HAL_RCC_OscConfig+0x260>
 800628a:	e710      	b.n	80060ae <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800628c:	f7fd ff46 	bl	800411c <HAL_GetTick>
 8006290:	1bc0      	subs	r0, r0, r7
 8006292:	2802      	cmp	r0, #2
 8006294:	d9f4      	bls.n	8006280 <HAL_RCC_OscConfig+0x254>
 8006296:	e73e      	b.n	8006116 <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006298:	696a      	ldr	r2, [r5, #20]
 800629a:	2301      	movs	r3, #1
 800629c:	2a00      	cmp	r2, #0
 800629e:	d010      	beq.n	80062c2 <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 80062a0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80062a2:	4313      	orrs	r3, r2
 80062a4:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80062a6:	f7fd ff39 	bl	800411c <HAL_GetTick>
 80062aa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062ac:	2202      	movs	r2, #2
 80062ae:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80062b0:	4213      	tst	r3, r2
 80062b2:	d000      	beq.n	80062b6 <HAL_RCC_OscConfig+0x28a>
 80062b4:	e6ff      	b.n	80060b6 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062b6:	f7fd ff31 	bl	800411c <HAL_GetTick>
 80062ba:	1bc0      	subs	r0, r0, r7
 80062bc:	2802      	cmp	r0, #2
 80062be:	d9f5      	bls.n	80062ac <HAL_RCC_OscConfig+0x280>
 80062c0:	e729      	b.n	8006116 <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 80062c2:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80062c4:	439a      	bics	r2, r3
 80062c6:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80062c8:	f7fd ff28 	bl	800411c <HAL_GetTick>
 80062cc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80062ce:	2202      	movs	r2, #2
 80062d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80062d2:	4213      	tst	r3, r2
 80062d4:	d100      	bne.n	80062d8 <HAL_RCC_OscConfig+0x2ac>
 80062d6:	e6ee      	b.n	80060b6 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062d8:	f7fd ff20 	bl	800411c <HAL_GetTick>
 80062dc:	1bc0      	subs	r0, r0, r7
 80062de:	2802      	cmp	r0, #2
 80062e0:	d9f5      	bls.n	80062ce <HAL_RCC_OscConfig+0x2a2>
 80062e2:	e718      	b.n	8006116 <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062e4:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80062e6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80062ea:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80062ec:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062ee:	421a      	tst	r2, r3
 80062f0:	d104      	bne.n	80062fc <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80062f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80062f4:	4313      	orrs	r3, r2
 80062f6:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80062f8:	2301      	movs	r3, #1
 80062fa:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062fc:	2280      	movs	r2, #128	; 0x80
 80062fe:	4f10      	ldr	r7, [pc, #64]	; (8006340 <HAL_RCC_OscConfig+0x314>)
 8006300:	0052      	lsls	r2, r2, #1
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	4213      	tst	r3, r2
 8006306:	d01d      	beq.n	8006344 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006308:	2280      	movs	r2, #128	; 0x80
 800630a:	68ab      	ldr	r3, [r5, #8]
 800630c:	0052      	lsls	r2, r2, #1
 800630e:	4293      	cmp	r3, r2
 8006310:	d12e      	bne.n	8006370 <HAL_RCC_OscConfig+0x344>
 8006312:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006314:	4313      	orrs	r3, r2
 8006316:	6523      	str	r3, [r4, #80]	; 0x50
 8006318:	e04f      	b.n	80063ba <HAL_RCC_OscConfig+0x38e>
 800631a:	46c0      	nop			; (mov r8, r8)
 800631c:	40021000 	.word	0x40021000
 8006320:	ffff1fff 	.word	0xffff1fff
 8006324:	08011275 	.word	0x08011275
 8006328:	20000034 	.word	0x20000034
 800632c:	2000003c 	.word	0x2000003c
 8006330:	fffeffff 	.word	0xfffeffff
 8006334:	fffbffff 	.word	0xfffbffff
 8006338:	ffffe0ff 	.word	0xffffe0ff
 800633c:	fffffeff 	.word	0xfffffeff
 8006340:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006344:	2280      	movs	r2, #128	; 0x80
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	0052      	lsls	r2, r2, #1
 800634a:	4313      	orrs	r3, r2
 800634c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800634e:	f7fd fee5 	bl	800411c <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006352:	2380      	movs	r3, #128	; 0x80
 8006354:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8006356:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006358:	9303      	str	r3, [sp, #12]
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	9a03      	ldr	r2, [sp, #12]
 800635e:	4213      	tst	r3, r2
 8006360:	d1d2      	bne.n	8006308 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006362:	f7fd fedb 	bl	800411c <HAL_GetTick>
 8006366:	9b02      	ldr	r3, [sp, #8]
 8006368:	1ac0      	subs	r0, r0, r3
 800636a:	2864      	cmp	r0, #100	; 0x64
 800636c:	d9f5      	bls.n	800635a <HAL_RCC_OscConfig+0x32e>
 800636e:	e6d2      	b.n	8006116 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006370:	2b00      	cmp	r3, #0
 8006372:	d116      	bne.n	80063a2 <HAL_RCC_OscConfig+0x376>
 8006374:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006376:	4a6b      	ldr	r2, [pc, #428]	; (8006524 <HAL_RCC_OscConfig+0x4f8>)
 8006378:	4013      	ands	r3, r2
 800637a:	6523      	str	r3, [r4, #80]	; 0x50
 800637c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800637e:	4a6a      	ldr	r2, [pc, #424]	; (8006528 <HAL_RCC_OscConfig+0x4fc>)
 8006380:	4013      	ands	r3, r2
 8006382:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8006384:	f7fd feca 	bl	800411c <HAL_GetTick>
 8006388:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800638a:	2280      	movs	r2, #128	; 0x80
 800638c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800638e:	0092      	lsls	r2, r2, #2
 8006390:	4213      	tst	r3, r2
 8006392:	d01a      	beq.n	80063ca <HAL_RCC_OscConfig+0x39e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006394:	f7fd fec2 	bl	800411c <HAL_GetTick>
 8006398:	4b64      	ldr	r3, [pc, #400]	; (800652c <HAL_RCC_OscConfig+0x500>)
 800639a:	1bc0      	subs	r0, r0, r7
 800639c:	4298      	cmp	r0, r3
 800639e:	d9f4      	bls.n	800638a <HAL_RCC_OscConfig+0x35e>
 80063a0:	e6b9      	b.n	8006116 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063a2:	21a0      	movs	r1, #160	; 0xa0
 80063a4:	00c9      	lsls	r1, r1, #3
 80063a6:	428b      	cmp	r3, r1
 80063a8:	d118      	bne.n	80063dc <HAL_RCC_OscConfig+0x3b0>
 80063aa:	2380      	movs	r3, #128	; 0x80
 80063ac:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80063ae:	00db      	lsls	r3, r3, #3
 80063b0:	430b      	orrs	r3, r1
 80063b2:	6523      	str	r3, [r4, #80]	; 0x50
 80063b4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063b6:	431a      	orrs	r2, r3
 80063b8:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80063ba:	f7fd feaf 	bl	800411c <HAL_GetTick>
 80063be:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80063c0:	2280      	movs	r2, #128	; 0x80
 80063c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063c4:	0092      	lsls	r2, r2, #2
 80063c6:	4213      	tst	r3, r2
 80063c8:	d010      	beq.n	80063ec <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 80063ca:	9b01      	ldr	r3, [sp, #4]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d000      	beq.n	80063d2 <HAL_RCC_OscConfig+0x3a6>
 80063d0:	e675      	b.n	80060be <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 80063d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80063d4:	4a56      	ldr	r2, [pc, #344]	; (8006530 <HAL_RCC_OscConfig+0x504>)
 80063d6:	4013      	ands	r3, r2
 80063d8:	63a3      	str	r3, [r4, #56]	; 0x38
 80063da:	e670      	b.n	80060be <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80063dc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063de:	4a51      	ldr	r2, [pc, #324]	; (8006524 <HAL_RCC_OscConfig+0x4f8>)
 80063e0:	4013      	ands	r3, r2
 80063e2:	6523      	str	r3, [r4, #80]	; 0x50
 80063e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80063e6:	4a50      	ldr	r2, [pc, #320]	; (8006528 <HAL_RCC_OscConfig+0x4fc>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	e794      	b.n	8006316 <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063ec:	f7fd fe96 	bl	800411c <HAL_GetTick>
 80063f0:	4b4e      	ldr	r3, [pc, #312]	; (800652c <HAL_RCC_OscConfig+0x500>)
 80063f2:	1bc0      	subs	r0, r0, r7
 80063f4:	4298      	cmp	r0, r3
 80063f6:	d9e3      	bls.n	80063c0 <HAL_RCC_OscConfig+0x394>
 80063f8:	e68d      	b.n	8006116 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80063fa:	69a9      	ldr	r1, [r5, #24]
 80063fc:	2301      	movs	r3, #1
 80063fe:	4a4d      	ldr	r2, [pc, #308]	; (8006534 <HAL_RCC_OscConfig+0x508>)
 8006400:	2900      	cmp	r1, #0
 8006402:	d018      	beq.n	8006436 <HAL_RCC_OscConfig+0x40a>
        __HAL_RCC_HSI48_ENABLE();
 8006404:	68a1      	ldr	r1, [r4, #8]
 8006406:	4319      	orrs	r1, r3
 8006408:	60a1      	str	r1, [r4, #8]
 800640a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800640c:	430b      	orrs	r3, r1
 800640e:	6363      	str	r3, [r4, #52]	; 0x34
 8006410:	2380      	movs	r3, #128	; 0x80
 8006412:	6a11      	ldr	r1, [r2, #32]
 8006414:	019b      	lsls	r3, r3, #6
 8006416:	430b      	orrs	r3, r1
 8006418:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800641a:	f7fd fe7f 	bl	800411c <HAL_GetTick>
 800641e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006420:	2202      	movs	r2, #2
 8006422:	68a3      	ldr	r3, [r4, #8]
 8006424:	4213      	tst	r3, r2
 8006426:	d000      	beq.n	800642a <HAL_RCC_OscConfig+0x3fe>
 8006428:	e64d      	b.n	80060c6 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800642a:	f7fd fe77 	bl	800411c <HAL_GetTick>
 800642e:	1bc0      	subs	r0, r0, r7
 8006430:	2802      	cmp	r0, #2
 8006432:	d9f5      	bls.n	8006420 <HAL_RCC_OscConfig+0x3f4>
 8006434:	e66f      	b.n	8006116 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 8006436:	68a1      	ldr	r1, [r4, #8]
 8006438:	4399      	bics	r1, r3
 800643a:	60a1      	str	r1, [r4, #8]
 800643c:	6a13      	ldr	r3, [r2, #32]
 800643e:	493e      	ldr	r1, [pc, #248]	; (8006538 <HAL_RCC_OscConfig+0x50c>)
 8006440:	400b      	ands	r3, r1
 8006442:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8006444:	f7fd fe6a 	bl	800411c <HAL_GetTick>
 8006448:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800644a:	2202      	movs	r2, #2
 800644c:	68a3      	ldr	r3, [r4, #8]
 800644e:	4213      	tst	r3, r2
 8006450:	d100      	bne.n	8006454 <HAL_RCC_OscConfig+0x428>
 8006452:	e638      	b.n	80060c6 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006454:	f7fd fe62 	bl	800411c <HAL_GetTick>
 8006458:	1bc0      	subs	r0, r0, r7
 800645a:	2802      	cmp	r0, #2
 800645c:	d9f5      	bls.n	800644a <HAL_RCC_OscConfig+0x41e>
 800645e:	e65a      	b.n	8006116 <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006460:	2e0c      	cmp	r6, #12
 8006462:	d043      	beq.n	80064ec <HAL_RCC_OscConfig+0x4c0>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006464:	4a35      	ldr	r2, [pc, #212]	; (800653c <HAL_RCC_OscConfig+0x510>)
 8006466:	2b02      	cmp	r3, #2
 8006468:	d12e      	bne.n	80064c8 <HAL_RCC_OscConfig+0x49c>
        __HAL_RCC_PLL_DISABLE();
 800646a:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800646c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800646e:	4013      	ands	r3, r2
 8006470:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006472:	f7fd fe53 	bl	800411c <HAL_GetTick>
 8006476:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006478:	04bf      	lsls	r7, r7, #18
 800647a:	6823      	ldr	r3, [r4, #0]
 800647c:	423b      	tst	r3, r7
 800647e:	d11d      	bne.n	80064bc <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006480:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8006482:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006484:	68e2      	ldr	r2, [r4, #12]
 8006486:	430b      	orrs	r3, r1
 8006488:	492d      	ldr	r1, [pc, #180]	; (8006540 <HAL_RCC_OscConfig+0x514>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800648a:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800648c:	400a      	ands	r2, r1
 800648e:	4313      	orrs	r3, r2
 8006490:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006492:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006494:	4313      	orrs	r3, r2
 8006496:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8006498:	2380      	movs	r3, #128	; 0x80
 800649a:	6822      	ldr	r2, [r4, #0]
 800649c:	045b      	lsls	r3, r3, #17
 800649e:	4313      	orrs	r3, r2
 80064a0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80064a2:	f7fd fe3b 	bl	800411c <HAL_GetTick>
 80064a6:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80064a8:	6823      	ldr	r3, [r4, #0]
 80064aa:	4233      	tst	r3, r6
 80064ac:	d000      	beq.n	80064b0 <HAL_RCC_OscConfig+0x484>
 80064ae:	e60e      	b.n	80060ce <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064b0:	f7fd fe34 	bl	800411c <HAL_GetTick>
 80064b4:	1b40      	subs	r0, r0, r5
 80064b6:	2802      	cmp	r0, #2
 80064b8:	d9f6      	bls.n	80064a8 <HAL_RCC_OscConfig+0x47c>
 80064ba:	e62c      	b.n	8006116 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064bc:	f7fd fe2e 	bl	800411c <HAL_GetTick>
 80064c0:	1b80      	subs	r0, r0, r6
 80064c2:	2802      	cmp	r0, #2
 80064c4:	d9d9      	bls.n	800647a <HAL_RCC_OscConfig+0x44e>
 80064c6:	e626      	b.n	8006116 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 80064c8:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80064ca:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80064cc:	4013      	ands	r3, r2
 80064ce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80064d0:	f7fd fe24 	bl	800411c <HAL_GetTick>
 80064d4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80064d6:	04b6      	lsls	r6, r6, #18
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	4233      	tst	r3, r6
 80064dc:	d100      	bne.n	80064e0 <HAL_RCC_OscConfig+0x4b4>
 80064de:	e5f6      	b.n	80060ce <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064e0:	f7fd fe1c 	bl	800411c <HAL_GetTick>
 80064e4:	1b40      	subs	r0, r0, r5
 80064e6:	2802      	cmp	r0, #2
 80064e8:	d9f6      	bls.n	80064d8 <HAL_RCC_OscConfig+0x4ac>
 80064ea:	e614      	b.n	8006116 <HAL_RCC_OscConfig+0xea>
        return HAL_ERROR;
 80064ec:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d100      	bne.n	80064f4 <HAL_RCC_OscConfig+0x4c8>
 80064f2:	e611      	b.n	8006118 <HAL_RCC_OscConfig+0xec>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064f4:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80064f6:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064f8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80064fa:	0252      	lsls	r2, r2, #9
 80064fc:	401a      	ands	r2, r3
 80064fe:	428a      	cmp	r2, r1
 8006500:	d000      	beq.n	8006504 <HAL_RCC_OscConfig+0x4d8>
 8006502:	e5f2      	b.n	80060ea <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006504:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006506:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006508:	0392      	lsls	r2, r2, #14
 800650a:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800650c:	428a      	cmp	r2, r1
 800650e:	d000      	beq.n	8006512 <HAL_RCC_OscConfig+0x4e6>
 8006510:	e5eb      	b.n	80060ea <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006512:	22c0      	movs	r2, #192	; 0xc0
 8006514:	0412      	lsls	r2, r2, #16
 8006516:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006518:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800651a:	4293      	cmp	r3, r2
 800651c:	d100      	bne.n	8006520 <HAL_RCC_OscConfig+0x4f4>
 800651e:	e5d6      	b.n	80060ce <HAL_RCC_OscConfig+0xa2>
 8006520:	e5e3      	b.n	80060ea <HAL_RCC_OscConfig+0xbe>
 8006522:	46c0      	nop			; (mov r8, r8)
 8006524:	fffffeff 	.word	0xfffffeff
 8006528:	fffffbff 	.word	0xfffffbff
 800652c:	00001388 	.word	0x00001388
 8006530:	efffffff 	.word	0xefffffff
 8006534:	40010000 	.word	0x40010000
 8006538:	ffffdfff 	.word	0xffffdfff
 800653c:	feffffff 	.word	0xfeffffff
 8006540:	ff02ffff 	.word	0xff02ffff

08006544 <HAL_RCC_ClockConfig>:
{
 8006544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006546:	1e04      	subs	r4, r0, #0
 8006548:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 800654a:	d101      	bne.n	8006550 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 800654c:	2001      	movs	r0, #1
}
 800654e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006550:	2601      	movs	r6, #1
 8006552:	4d5b      	ldr	r5, [pc, #364]	; (80066c0 <HAL_RCC_ClockConfig+0x17c>)
 8006554:	9a01      	ldr	r2, [sp, #4]
 8006556:	682b      	ldr	r3, [r5, #0]
 8006558:	4033      	ands	r3, r6
 800655a:	4293      	cmp	r3, r2
 800655c:	d331      	bcc.n	80065c2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800655e:	6822      	ldr	r2, [r4, #0]
 8006560:	0793      	lsls	r3, r2, #30
 8006562:	d443      	bmi.n	80065ec <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006564:	07d3      	lsls	r3, r2, #31
 8006566:	d449      	bmi.n	80065fc <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006568:	2601      	movs	r6, #1
 800656a:	682b      	ldr	r3, [r5, #0]
 800656c:	9a01      	ldr	r2, [sp, #4]
 800656e:	4033      	ands	r3, r6
 8006570:	4293      	cmp	r3, r2
 8006572:	d909      	bls.n	8006588 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006574:	682b      	ldr	r3, [r5, #0]
 8006576:	43b3      	bics	r3, r6
 8006578:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800657a:	f7fd fdcf 	bl	800411c <HAL_GetTick>
 800657e:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	4233      	tst	r3, r6
 8006584:	d000      	beq.n	8006588 <HAL_RCC_ClockConfig+0x44>
 8006586:	e08c      	b.n	80066a2 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006588:	6822      	ldr	r2, [r4, #0]
 800658a:	4d4e      	ldr	r5, [pc, #312]	; (80066c4 <HAL_RCC_ClockConfig+0x180>)
 800658c:	0753      	lsls	r3, r2, #29
 800658e:	d500      	bpl.n	8006592 <HAL_RCC_ClockConfig+0x4e>
 8006590:	e08f      	b.n	80066b2 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006592:	0713      	lsls	r3, r2, #28
 8006594:	d506      	bpl.n	80065a4 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006596:	68ea      	ldr	r2, [r5, #12]
 8006598:	6923      	ldr	r3, [r4, #16]
 800659a:	494b      	ldr	r1, [pc, #300]	; (80066c8 <HAL_RCC_ClockConfig+0x184>)
 800659c:	00db      	lsls	r3, r3, #3
 800659e:	400a      	ands	r2, r1
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80065a4:	f7ff fcfa 	bl	8005f9c <HAL_RCC_GetSysClockFreq>
 80065a8:	68eb      	ldr	r3, [r5, #12]
 80065aa:	4a48      	ldr	r2, [pc, #288]	; (80066cc <HAL_RCC_ClockConfig+0x188>)
 80065ac:	061b      	lsls	r3, r3, #24
 80065ae:	0f1b      	lsrs	r3, r3, #28
 80065b0:	5cd3      	ldrb	r3, [r2, r3]
 80065b2:	40d8      	lsrs	r0, r3
 80065b4:	4b46      	ldr	r3, [pc, #280]	; (80066d0 <HAL_RCC_ClockConfig+0x18c>)
 80065b6:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80065b8:	4b46      	ldr	r3, [pc, #280]	; (80066d4 <HAL_RCC_ClockConfig+0x190>)
 80065ba:	6818      	ldr	r0, [r3, #0]
 80065bc:	f7fd fdac 	bl	8004118 <HAL_InitTick>
  if(status != HAL_OK)
 80065c0:	e7c5      	b.n	800654e <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065c2:	682b      	ldr	r3, [r5, #0]
 80065c4:	9a01      	ldr	r2, [sp, #4]
 80065c6:	43b3      	bics	r3, r6
 80065c8:	4313      	orrs	r3, r2
 80065ca:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80065cc:	f7fd fda6 	bl	800411c <HAL_GetTick>
 80065d0:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065d2:	682b      	ldr	r3, [r5, #0]
 80065d4:	9a01      	ldr	r2, [sp, #4]
 80065d6:	4033      	ands	r3, r6
 80065d8:	4293      	cmp	r3, r2
 80065da:	d0c0      	beq.n	800655e <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065dc:	f7fd fd9e 	bl	800411c <HAL_GetTick>
 80065e0:	4b3d      	ldr	r3, [pc, #244]	; (80066d8 <HAL_RCC_ClockConfig+0x194>)
 80065e2:	1bc0      	subs	r0, r0, r7
 80065e4:	4298      	cmp	r0, r3
 80065e6:	d9f4      	bls.n	80065d2 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80065e8:	2003      	movs	r0, #3
 80065ea:	e7b0      	b.n	800654e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065ec:	20f0      	movs	r0, #240	; 0xf0
 80065ee:	4935      	ldr	r1, [pc, #212]	; (80066c4 <HAL_RCC_ClockConfig+0x180>)
 80065f0:	68cb      	ldr	r3, [r1, #12]
 80065f2:	4383      	bics	r3, r0
 80065f4:	68a0      	ldr	r0, [r4, #8]
 80065f6:	4303      	orrs	r3, r0
 80065f8:	60cb      	str	r3, [r1, #12]
 80065fa:	e7b3      	b.n	8006564 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065fc:	4e31      	ldr	r6, [pc, #196]	; (80066c4 <HAL_RCC_ClockConfig+0x180>)
 80065fe:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006600:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006602:	2a02      	cmp	r2, #2
 8006604:	d118      	bne.n	8006638 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006606:	039b      	lsls	r3, r3, #14
 8006608:	d5a0      	bpl.n	800654c <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800660a:	2103      	movs	r1, #3
 800660c:	68f3      	ldr	r3, [r6, #12]
 800660e:	438b      	bics	r3, r1
 8006610:	4313      	orrs	r3, r2
 8006612:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8006614:	f7fd fd82 	bl	800411c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006618:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800661a:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800661c:	2b02      	cmp	r3, #2
 800661e:	d118      	bne.n	8006652 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006620:	220c      	movs	r2, #12
 8006622:	68f3      	ldr	r3, [r6, #12]
 8006624:	4013      	ands	r3, r2
 8006626:	2b08      	cmp	r3, #8
 8006628:	d09e      	beq.n	8006568 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800662a:	f7fd fd77 	bl	800411c <HAL_GetTick>
 800662e:	4b2a      	ldr	r3, [pc, #168]	; (80066d8 <HAL_RCC_ClockConfig+0x194>)
 8006630:	1bc0      	subs	r0, r0, r7
 8006632:	4298      	cmp	r0, r3
 8006634:	d9f4      	bls.n	8006620 <HAL_RCC_ClockConfig+0xdc>
 8006636:	e7d7      	b.n	80065e8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006638:	2a03      	cmp	r2, #3
 800663a:	d102      	bne.n	8006642 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800663c:	019b      	lsls	r3, r3, #6
 800663e:	d4e4      	bmi.n	800660a <HAL_RCC_ClockConfig+0xc6>
 8006640:	e784      	b.n	800654c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006642:	2a01      	cmp	r2, #1
 8006644:	d102      	bne.n	800664c <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006646:	075b      	lsls	r3, r3, #29
 8006648:	d4df      	bmi.n	800660a <HAL_RCC_ClockConfig+0xc6>
 800664a:	e77f      	b.n	800654c <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800664c:	059b      	lsls	r3, r3, #22
 800664e:	d4dc      	bmi.n	800660a <HAL_RCC_ClockConfig+0xc6>
 8006650:	e77c      	b.n	800654c <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006652:	2b03      	cmp	r3, #3
 8006654:	d10b      	bne.n	800666e <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006656:	220c      	movs	r2, #12
 8006658:	68f3      	ldr	r3, [r6, #12]
 800665a:	4013      	ands	r3, r2
 800665c:	4293      	cmp	r3, r2
 800665e:	d083      	beq.n	8006568 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006660:	f7fd fd5c 	bl	800411c <HAL_GetTick>
 8006664:	4b1c      	ldr	r3, [pc, #112]	; (80066d8 <HAL_RCC_ClockConfig+0x194>)
 8006666:	1bc0      	subs	r0, r0, r7
 8006668:	4298      	cmp	r0, r3
 800666a:	d9f4      	bls.n	8006656 <HAL_RCC_ClockConfig+0x112>
 800666c:	e7bc      	b.n	80065e8 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800666e:	2b01      	cmp	r3, #1
 8006670:	d011      	beq.n	8006696 <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006672:	220c      	movs	r2, #12
 8006674:	68f3      	ldr	r3, [r6, #12]
 8006676:	4213      	tst	r3, r2
 8006678:	d100      	bne.n	800667c <HAL_RCC_ClockConfig+0x138>
 800667a:	e775      	b.n	8006568 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800667c:	f7fd fd4e 	bl	800411c <HAL_GetTick>
 8006680:	4b15      	ldr	r3, [pc, #84]	; (80066d8 <HAL_RCC_ClockConfig+0x194>)
 8006682:	1bc0      	subs	r0, r0, r7
 8006684:	4298      	cmp	r0, r3
 8006686:	d9f4      	bls.n	8006672 <HAL_RCC_ClockConfig+0x12e>
 8006688:	e7ae      	b.n	80065e8 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800668a:	f7fd fd47 	bl	800411c <HAL_GetTick>
 800668e:	4b12      	ldr	r3, [pc, #72]	; (80066d8 <HAL_RCC_ClockConfig+0x194>)
 8006690:	1bc0      	subs	r0, r0, r7
 8006692:	4298      	cmp	r0, r3
 8006694:	d8a8      	bhi.n	80065e8 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006696:	220c      	movs	r2, #12
 8006698:	68f3      	ldr	r3, [r6, #12]
 800669a:	4013      	ands	r3, r2
 800669c:	2b04      	cmp	r3, #4
 800669e:	d1f4      	bne.n	800668a <HAL_RCC_ClockConfig+0x146>
 80066a0:	e762      	b.n	8006568 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066a2:	f7fd fd3b 	bl	800411c <HAL_GetTick>
 80066a6:	4b0c      	ldr	r3, [pc, #48]	; (80066d8 <HAL_RCC_ClockConfig+0x194>)
 80066a8:	1bc0      	subs	r0, r0, r7
 80066aa:	4298      	cmp	r0, r3
 80066ac:	d800      	bhi.n	80066b0 <HAL_RCC_ClockConfig+0x16c>
 80066ae:	e767      	b.n	8006580 <HAL_RCC_ClockConfig+0x3c>
 80066b0:	e79a      	b.n	80065e8 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066b2:	68eb      	ldr	r3, [r5, #12]
 80066b4:	4909      	ldr	r1, [pc, #36]	; (80066dc <HAL_RCC_ClockConfig+0x198>)
 80066b6:	400b      	ands	r3, r1
 80066b8:	68e1      	ldr	r1, [r4, #12]
 80066ba:	430b      	orrs	r3, r1
 80066bc:	60eb      	str	r3, [r5, #12]
 80066be:	e768      	b.n	8006592 <HAL_RCC_ClockConfig+0x4e>
 80066c0:	40022000 	.word	0x40022000
 80066c4:	40021000 	.word	0x40021000
 80066c8:	ffffc7ff 	.word	0xffffc7ff
 80066cc:	08011275 	.word	0x08011275
 80066d0:	20000034 	.word	0x20000034
 80066d4:	2000003c 	.word	0x2000003c
 80066d8:	00001388 	.word	0x00001388
 80066dc:	fffff8ff 	.word	0xfffff8ff

080066e0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80066e0:	4b04      	ldr	r3, [pc, #16]	; (80066f4 <HAL_RCC_GetPCLK1Freq+0x14>)
 80066e2:	4a05      	ldr	r2, [pc, #20]	; (80066f8 <HAL_RCC_GetPCLK1Freq+0x18>)
 80066e4:	68db      	ldr	r3, [r3, #12]
 80066e6:	055b      	lsls	r3, r3, #21
 80066e8:	0f5b      	lsrs	r3, r3, #29
 80066ea:	5cd3      	ldrb	r3, [r2, r3]
 80066ec:	4a03      	ldr	r2, [pc, #12]	; (80066fc <HAL_RCC_GetPCLK1Freq+0x1c>)
 80066ee:	6810      	ldr	r0, [r2, #0]
 80066f0:	40d8      	lsrs	r0, r3
}
 80066f2:	4770      	bx	lr
 80066f4:	40021000 	.word	0x40021000
 80066f8:	08011285 	.word	0x08011285
 80066fc:	20000034 	.word	0x20000034

08006700 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006700:	4b04      	ldr	r3, [pc, #16]	; (8006714 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006702:	4a05      	ldr	r2, [pc, #20]	; (8006718 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	049b      	lsls	r3, r3, #18
 8006708:	0f5b      	lsrs	r3, r3, #29
 800670a:	5cd3      	ldrb	r3, [r2, r3]
 800670c:	4a03      	ldr	r2, [pc, #12]	; (800671c <HAL_RCC_GetPCLK2Freq+0x1c>)
 800670e:	6810      	ldr	r0, [r2, #0]
 8006710:	40d8      	lsrs	r0, r3
}
 8006712:	4770      	bx	lr
 8006714:	40021000 	.word	0x40021000
 8006718:	08011285 	.word	0x08011285
 800671c:	20000034 	.word	0x20000034

08006720 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006720:	6803      	ldr	r3, [r0, #0]
{
 8006722:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006724:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006726:	069b      	lsls	r3, r3, #26
 8006728:	d53f      	bpl.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800672a:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 800672c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800672e:	4c60      	ldr	r4, [pc, #384]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006730:	055b      	lsls	r3, r3, #21
 8006732:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8006734:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006736:	421a      	tst	r2, r3
 8006738:	d104      	bne.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800673a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800673c:	4313      	orrs	r3, r2
 800673e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8006740:	2301      	movs	r3, #1
 8006742:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006744:	2780      	movs	r7, #128	; 0x80
 8006746:	4e5b      	ldr	r6, [pc, #364]	; (80068b4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8006748:	007f      	lsls	r7, r7, #1
 800674a:	6833      	ldr	r3, [r6, #0]
 800674c:	423b      	tst	r3, r7
 800674e:	d06e      	beq.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006750:	686b      	ldr	r3, [r5, #4]
 8006752:	22c0      	movs	r2, #192	; 0xc0
 8006754:	20c0      	movs	r0, #192	; 0xc0
 8006756:	001e      	movs	r6, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006758:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800675a:	0292      	lsls	r2, r2, #10
 800675c:	0380      	lsls	r0, r0, #14
 800675e:	0017      	movs	r7, r2
 8006760:	4016      	ands	r6, r2
 8006762:	4003      	ands	r3, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006764:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006766:	428b      	cmp	r3, r1
 8006768:	d000      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x4c>
 800676a:	e071      	b.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x130>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800676c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800676e:	001a      	movs	r2, r3
 8006770:	403a      	ands	r2, r7

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006772:	423b      	tst	r3, r7
 8006774:	d000      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8006776:	e074      	b.n	8006862 <HAL_RCCEx_PeriphCLKConfig+0x142>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006778:	6869      	ldr	r1, [r5, #4]
 800677a:	23c0      	movs	r3, #192	; 0xc0
 800677c:	000a      	movs	r2, r1
 800677e:	029b      	lsls	r3, r3, #10
 8006780:	401a      	ands	r2, r3
 8006782:	429a      	cmp	r2, r3
 8006784:	d107      	bne.n	8006796 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	484b      	ldr	r0, [pc, #300]	; (80068b8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800678a:	4003      	ands	r3, r0
 800678c:	20c0      	movs	r0, #192	; 0xc0
 800678e:	0380      	lsls	r0, r0, #14
 8006790:	4001      	ands	r1, r0
 8006792:	430b      	orrs	r3, r1
 8006794:	6023      	str	r3, [r4, #0]
 8006796:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006798:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800679a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800679c:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d103      	bne.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80067a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80067a4:	4a45      	ldr	r2, [pc, #276]	; (80068bc <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 80067a6:	4013      	ands	r3, r2
 80067a8:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80067aa:	682b      	ldr	r3, [r5, #0]
 80067ac:	07da      	lsls	r2, r3, #31
 80067ae:	d506      	bpl.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067b0:	2003      	movs	r0, #3
 80067b2:	493f      	ldr	r1, [pc, #252]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80067b4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80067b6:	4382      	bics	r2, r0
 80067b8:	68a8      	ldr	r0, [r5, #8]
 80067ba:	4302      	orrs	r2, r0
 80067bc:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067be:	079a      	lsls	r2, r3, #30
 80067c0:	d506      	bpl.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067c2:	200c      	movs	r0, #12
 80067c4:	493a      	ldr	r1, [pc, #232]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80067c6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80067c8:	4382      	bics	r2, r0
 80067ca:	68e8      	ldr	r0, [r5, #12]
 80067cc:	4302      	orrs	r2, r0
 80067ce:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80067d0:	075a      	lsls	r2, r3, #29
 80067d2:	d506      	bpl.n	80067e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80067d4:	4936      	ldr	r1, [pc, #216]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80067d6:	483a      	ldr	r0, [pc, #232]	; (80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80067d8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80067da:	4002      	ands	r2, r0
 80067dc:	6928      	ldr	r0, [r5, #16]
 80067de:	4302      	orrs	r2, r0
 80067e0:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067e2:	071a      	lsls	r2, r3, #28
 80067e4:	d506      	bpl.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067e6:	4932      	ldr	r1, [pc, #200]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80067e8:	4836      	ldr	r0, [pc, #216]	; (80068c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80067ea:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80067ec:	4002      	ands	r2, r0
 80067ee:	6968      	ldr	r0, [r5, #20]
 80067f0:	4302      	orrs	r2, r0
 80067f2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067f4:	05da      	lsls	r2, r3, #23
 80067f6:	d506      	bpl.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0xe6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067f8:	492d      	ldr	r1, [pc, #180]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80067fa:	4833      	ldr	r0, [pc, #204]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80067fc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80067fe:	4002      	ands	r2, r0
 8006800:	69a8      	ldr	r0, [r5, #24]
 8006802:	4302      	orrs	r2, r0
 8006804:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006806:	065a      	lsls	r2, r3, #25
 8006808:	d506      	bpl.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0xf8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800680a:	4929      	ldr	r1, [pc, #164]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800680c:	482f      	ldr	r0, [pc, #188]	; (80068cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800680e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006810:	4002      	ands	r2, r0
 8006812:	6a28      	ldr	r0, [r5, #32]
 8006814:	4302      	orrs	r2, r0
 8006816:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8006818:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800681a:	061b      	lsls	r3, r3, #24
 800681c:	d517      	bpl.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x12e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800681e:	4a24      	ldr	r2, [pc, #144]	; (80068b0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006820:	492b      	ldr	r1, [pc, #172]	; (80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006822:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006824:	400b      	ands	r3, r1
 8006826:	69e9      	ldr	r1, [r5, #28]
 8006828:	430b      	orrs	r3, r1
 800682a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800682c:	e00f      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800682e:	6833      	ldr	r3, [r6, #0]
 8006830:	433b      	orrs	r3, r7
 8006832:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006834:	f7fd fc72 	bl	800411c <HAL_GetTick>
 8006838:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800683a:	6833      	ldr	r3, [r6, #0]
 800683c:	423b      	tst	r3, r7
 800683e:	d187      	bne.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006840:	f7fd fc6c 	bl	800411c <HAL_GetTick>
 8006844:	9b01      	ldr	r3, [sp, #4]
 8006846:	1ac0      	subs	r0, r0, r3
 8006848:	2864      	cmp	r0, #100	; 0x64
 800684a:	d9f6      	bls.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x11a>
          return HAL_TIMEOUT;
 800684c:	2003      	movs	r0, #3
}
 800684e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006850:	4296      	cmp	r6, r2
 8006852:	d000      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006854:	e78a      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x4c>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006856:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8006858:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800685a:	039b      	lsls	r3, r3, #14
 800685c:	d400      	bmi.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800685e:	e785      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x4c>
 8006860:	e7f5      	b.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x12e>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006862:	42b2      	cmp	r2, r6
 8006864:	d100      	bne.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8006866:	e787      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x58>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006868:	682b      	ldr	r3, [r5, #0]
 800686a:	069b      	lsls	r3, r3, #26
 800686c:	d400      	bmi.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800686e:	e783      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_BACKUPRESET_FORCE();
 8006870:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006872:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8006874:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006876:	0312      	lsls	r2, r2, #12
 8006878:	4302      	orrs	r2, r0
 800687a:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800687c:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800687e:	4b12      	ldr	r3, [pc, #72]	; (80068c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006880:	4814      	ldr	r0, [pc, #80]	; (80068d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006882:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006884:	4002      	ands	r2, r0
 8006886:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8006888:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800688a:	05cb      	lsls	r3, r1, #23
 800688c:	d400      	bmi.n	8006890 <HAL_RCCEx_PeriphCLKConfig+0x170>
 800688e:	e773      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x58>
        tickstart = HAL_GetTick();
 8006890:	f7fd fc44 	bl	800411c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006894:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8006896:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006898:	00bf      	lsls	r7, r7, #2
 800689a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800689c:	423b      	tst	r3, r7
 800689e:	d000      	beq.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80068a0:	e76a      	b.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x58>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068a2:	f7fd fc3b 	bl	800411c <HAL_GetTick>
 80068a6:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068a8:	1b80      	subs	r0, r0, r6
 80068aa:	4298      	cmp	r0, r3
 80068ac:	d9f5      	bls.n	800689a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80068ae:	e7cd      	b.n	800684c <HAL_RCCEx_PeriphCLKConfig+0x12c>
 80068b0:	40021000 	.word	0x40021000
 80068b4:	40007000 	.word	0x40007000
 80068b8:	ffcfffff 	.word	0xffcfffff
 80068bc:	efffffff 	.word	0xefffffff
 80068c0:	fffff3ff 	.word	0xfffff3ff
 80068c4:	ffffcfff 	.word	0xffffcfff
 80068c8:	fffcffff 	.word	0xfffcffff
 80068cc:	fbffffff 	.word	0xfbffffff
 80068d0:	fff3ffff 	.word	0xfff3ffff
 80068d4:	fff7ffff 	.word	0xfff7ffff
 80068d8:	00001388 	.word	0x00001388

080068dc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80068dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068de:	2502      	movs	r5, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80068e0:	1c46      	adds	r6, r0, #1
 80068e2:	7ff3      	ldrb	r3, [r6, #31]
{
 80068e4:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80068e6:	0028      	movs	r0, r5
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d025      	beq.n	8006938 <HAL_RTC_DeactivateAlarm+0x5c>
 80068ec:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068ee:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 80068f0:	1967      	adds	r7, r4, r5
  __HAL_LOCK(hrtc);
 80068f2:	77f3      	strb	r3, [r6, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80068f4:	77fd      	strb	r5, [r7, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	625a      	str	r2, [r3, #36]	; 0x24
 80068fa:	3a77      	subs	r2, #119	; 0x77
 80068fc:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80068fe:	32ad      	adds	r2, #173	; 0xad
 8006900:	4291      	cmp	r1, r2
 8006902:	d12a      	bne.n	800695a <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006904:	689a      	ldr	r2, [r3, #8]
 8006906:	4922      	ldr	r1, [pc, #136]	; (8006990 <HAL_RTC_DeactivateAlarm+0xb4>)
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);

    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006908:	3d01      	subs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800690a:	400a      	ands	r2, r1
 800690c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	4920      	ldr	r1, [pc, #128]	; (8006994 <HAL_RTC_DeactivateAlarm+0xb8>)
 8006912:	400a      	ands	r2, r1
 8006914:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006916:	f7fd fc01 	bl	800411c <HAL_GetTick>
 800691a:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	001a      	movs	r2, r3
 8006922:	402a      	ands	r2, r5
 8006924:	9201      	str	r2, [sp, #4]
 8006926:	422b      	tst	r3, r5
 8006928:	d007      	beq.n	800693a <HAL_RTC_DeactivateAlarm+0x5e>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800692a:	22ff      	movs	r2, #255	; 0xff
 800692c:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800692e:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006930:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006932:	2301      	movs	r3, #1
 8006934:	77fb      	strb	r3, [r7, #31]
  __HAL_UNLOCK(hrtc);
 8006936:	77f0      	strb	r0, [r6, #31]

  return HAL_OK;
}
 8006938:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800693a:	f7fd fbef 	bl	800411c <HAL_GetTick>
 800693e:	9b00      	ldr	r3, [sp, #0]
 8006940:	1ac0      	subs	r0, r0, r3
 8006942:	23fa      	movs	r3, #250	; 0xfa
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4298      	cmp	r0, r3
 8006948:	d9e8      	bls.n	800691c <HAL_RTC_DeactivateAlarm+0x40>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800694a:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800694c:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006952:	77f8      	strb	r0, [r7, #31]
        __HAL_UNLOCK(hrtc);
 8006954:	9b01      	ldr	r3, [sp, #4]
 8006956:	77f3      	strb	r3, [r6, #31]
        return HAL_TIMEOUT;
 8006958:	e7ee      	b.n	8006938 <HAL_RTC_DeactivateAlarm+0x5c>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	490e      	ldr	r1, [pc, #56]	; (8006998 <HAL_RTC_DeactivateAlarm+0xbc>)
 800695e:	400a      	ands	r2, r1
 8006960:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006962:	689a      	ldr	r2, [r3, #8]
 8006964:	490d      	ldr	r1, [pc, #52]	; (800699c <HAL_RTC_DeactivateAlarm+0xc0>)
 8006966:	400a      	ands	r2, r1
 8006968:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800696a:	f7fd fbd7 	bl	800411c <HAL_GetTick>
 800696e:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	68db      	ldr	r3, [r3, #12]
 8006974:	001a      	movs	r2, r3
 8006976:	402a      	ands	r2, r5
 8006978:	9201      	str	r2, [sp, #4]
 800697a:	422b      	tst	r3, r5
 800697c:	d1d5      	bne.n	800692a <HAL_RTC_DeactivateAlarm+0x4e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800697e:	f7fd fbcd 	bl	800411c <HAL_GetTick>
 8006982:	9b00      	ldr	r3, [sp, #0]
 8006984:	1ac0      	subs	r0, r0, r3
 8006986:	23fa      	movs	r3, #250	; 0xfa
 8006988:	009b      	lsls	r3, r3, #2
 800698a:	4298      	cmp	r0, r3
 800698c:	d9f0      	bls.n	8006970 <HAL_RTC_DeactivateAlarm+0x94>
 800698e:	e7dc      	b.n	800694a <HAL_RTC_DeactivateAlarm+0x6e>
 8006990:	fffffeff 	.word	0xfffffeff
 8006994:	ffffefff 	.word	0xffffefff
 8006998:	fffffdff 	.word	0xfffffdff
 800699c:	ffffdfff 	.word	0xffffdfff

080069a0 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80069a0:	6803      	ldr	r3, [r0, #0]
{
 80069a2:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80069a4:	689a      	ldr	r2, [r3, #8]
{
 80069a6:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80069a8:	04d2      	lsls	r2, r2, #19
 80069aa:	d50a      	bpl.n	80069c2 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	05db      	lsls	r3, r3, #23
 80069b0:	d507      	bpl.n	80069c2 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80069b2:	f7fd fa16 	bl	8003de2 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80069b6:	6821      	ldr	r1, [r4, #0]
 80069b8:	4b0e      	ldr	r3, [pc, #56]	; (80069f4 <HAL_RTC_AlarmIRQHandler+0x54>)
 80069ba:	68ca      	ldr	r2, [r1, #12]
 80069bc:	b2d2      	uxtb	r2, r2
 80069be:	4313      	orrs	r3, r2
 80069c0:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	689a      	ldr	r2, [r3, #8]
 80069c6:	0492      	lsls	r2, r2, #18
 80069c8:	d50b      	bpl.n	80069e2 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	059b      	lsls	r3, r3, #22
 80069ce:	d508      	bpl.n	80069e2 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80069d0:	0020      	movs	r0, r4
 80069d2:	f000 faf7 	bl	8006fc4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80069d6:	6821      	ldr	r1, [r4, #0]
 80069d8:	4b07      	ldr	r3, [pc, #28]	; (80069f8 <HAL_RTC_AlarmIRQHandler+0x58>)
 80069da:	68ca      	ldr	r2, [r1, #12]
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	4313      	orrs	r3, r2
 80069e0:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80069e2:	2280      	movs	r2, #128	; 0x80
 80069e4:	4b05      	ldr	r3, [pc, #20]	; (80069fc <HAL_RTC_AlarmIRQHandler+0x5c>)
 80069e6:	0292      	lsls	r2, r2, #10
 80069e8:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80069ea:	2301      	movs	r3, #1
 80069ec:	3402      	adds	r4, #2
 80069ee:	77e3      	strb	r3, [r4, #31]
}
 80069f0:	bd10      	pop	{r4, pc}
 80069f2:	46c0      	nop			; (mov r8, r8)
 80069f4:	fffffe7f 	.word	0xfffffe7f
 80069f8:	fffffd7f 	.word	0xfffffd7f
 80069fc:	40010400 	.word	0x40010400

08006a00 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006a00:	21a0      	movs	r1, #160	; 0xa0
 8006a02:	6802      	ldr	r2, [r0, #0]
{
 8006a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006a06:	68d3      	ldr	r3, [r2, #12]
{
 8006a08:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006a0a:	438b      	bics	r3, r1
 8006a0c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006a0e:	f7fd fb85 	bl	800411c <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a12:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8006a14:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a16:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a18:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	4233      	tst	r3, r6
 8006a20:	d001      	beq.n	8006a26 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8006a22:	2000      	movs	r0, #0
}
 8006a24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a26:	f7fd fb79 	bl	800411c <HAL_GetTick>
 8006a2a:	1b40      	subs	r0, r0, r5
 8006a2c:	42b8      	cmp	r0, r7
 8006a2e:	d9f4      	bls.n	8006a1a <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8006a30:	2003      	movs	r0, #3
 8006a32:	e7f7      	b.n	8006a24 <HAL_RTC_WaitForSynchro+0x24>

08006a34 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a36:	2440      	movs	r4, #64	; 0x40
 8006a38:	6803      	ldr	r3, [r0, #0]
{
 8006a3a:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a3c:	68da      	ldr	r2, [r3, #12]
 8006a3e:	4222      	tst	r2, r4
 8006a40:	d001      	beq.n	8006a46 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8006a42:	2000      	movs	r0, #0
}
 8006a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006a46:	2201      	movs	r2, #1
 8006a48:	4252      	negs	r2, r2
 8006a4a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8006a4c:	f7fd fb66 	bl	800411c <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a50:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8006a52:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a54:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006a56:	682b      	ldr	r3, [r5, #0]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	4223      	tst	r3, r4
 8006a5c:	d1f1      	bne.n	8006a42 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a5e:	f7fd fb5d 	bl	800411c <HAL_GetTick>
 8006a62:	1b80      	subs	r0, r0, r6
 8006a64:	42b8      	cmp	r0, r7
 8006a66:	d9f6      	bls.n	8006a56 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8006a68:	2003      	movs	r0, #3
 8006a6a:	e7eb      	b.n	8006a44 <RTC_EnterInitMode+0x10>

08006a6c <HAL_RTC_Init>:
{
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8006a70:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8006a72:	2800      	cmp	r0, #0
 8006a74:	d01a      	beq.n	8006aac <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006a76:	1c86      	adds	r6, r0, #2
 8006a78:	7ff3      	ldrb	r3, [r6, #31]
 8006a7a:	b2da      	uxtb	r2, r3
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d103      	bne.n	8006a88 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8006a80:	1943      	adds	r3, r0, r5
 8006a82:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8006a84:	f7fc ffbc 	bl	8003a00 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a88:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a8a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006a8c:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a8e:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a90:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006a92:	625a      	str	r2, [r3, #36]	; 0x24
 8006a94:	3a77      	subs	r2, #119	; 0x77
 8006a96:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006a98:	f7ff ffcc 	bl	8006a34 <RTC_EnterInitMode>
 8006a9c:	6823      	ldr	r3, [r4, #0]
 8006a9e:	1e05      	subs	r5, r0, #0
 8006aa0:	d006      	beq.n	8006ab0 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006aa2:	22ff      	movs	r2, #255	; 0xff
 8006aa4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006aa6:	2304      	movs	r3, #4
 8006aa8:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8006aaa:	2501      	movs	r5, #1
}
 8006aac:	0028      	movs	r0, r5
 8006aae:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006ab0:	689a      	ldr	r2, [r3, #8]
 8006ab2:	491b      	ldr	r1, [pc, #108]	; (8006b20 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006ab4:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006ab6:	400a      	ands	r2, r1
 8006ab8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006aba:	6862      	ldr	r2, [r4, #4]
 8006abc:	6899      	ldr	r1, [r3, #8]
 8006abe:	4302      	orrs	r2, r0
 8006ac0:	69a0      	ldr	r0, [r4, #24]
 8006ac2:	4302      	orrs	r2, r0
 8006ac4:	430a      	orrs	r2, r1
 8006ac6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006ac8:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006aca:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006acc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006ace:	68a2      	ldr	r2, [r4, #8]
 8006ad0:	6919      	ldr	r1, [r3, #16]
 8006ad2:	0412      	lsls	r2, r2, #16
 8006ad4:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006ad6:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006ad8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006ada:	68da      	ldr	r2, [r3, #12]
 8006adc:	438a      	bics	r2, r1
 8006ade:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8006ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ae2:	397d      	subs	r1, #125	; 0x7d
 8006ae4:	438a      	bics	r2, r1
 8006ae6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8006ae8:	69e2      	ldr	r2, [r4, #28]
 8006aea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006aec:	4302      	orrs	r2, r0
 8006aee:	430a      	orrs	r2, r1
 8006af0:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	069b      	lsls	r3, r3, #26
 8006af6:	d40c      	bmi.n	8006b12 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006af8:	0020      	movs	r0, r4
 8006afa:	f7ff ff81 	bl	8006a00 <HAL_RTC_WaitForSynchro>
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d007      	beq.n	8006b12 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b02:	22ff      	movs	r2, #255	; 0xff
 8006b04:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8006b06:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b08:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006b0a:	2304      	movs	r3, #4
 8006b0c:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8006b0e:	77e5      	strb	r5, [r4, #31]
 8006b10:	e7cb      	b.n	8006aaa <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006b12:	22ff      	movs	r2, #255	; 0xff
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8006b1c:	e7c6      	b.n	8006aac <HAL_RTC_Init+0x40>
 8006b1e:	46c0      	nop			; (mov r8, r8)
 8006b20:	ff8fffbf 	.word	0xff8fffbf

08006b24 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006b24:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8006b26:	2809      	cmp	r0, #9
 8006b28:	d803      	bhi.n	8006b32 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8006b2a:	011b      	lsls	r3, r3, #4
 8006b2c:	4318      	orrs	r0, r3
 8006b2e:	b2c0      	uxtb	r0, r0
}
 8006b30:	4770      	bx	lr
    Param -= 10U;
 8006b32:	380a      	subs	r0, #10
    bcdhigh++;
 8006b34:	3301      	adds	r3, #1
    Param -= 10U;
 8006b36:	b2c0      	uxtb	r0, r0
 8006b38:	e7f5      	b.n	8006b26 <RTC_ByteToBcd2+0x2>
	...

08006b3c <HAL_RTC_SetTime>:
{
 8006b3c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8006b3e:	1c43      	adds	r3, r0, #1
{
 8006b40:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8006b42:	9302      	str	r3, [sp, #8]
{
 8006b44:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8006b46:	7fd9      	ldrb	r1, [r3, #31]
 8006b48:	2302      	movs	r3, #2
{
 8006b4a:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8006b4c:	001f      	movs	r7, r3
 8006b4e:	2901      	cmp	r1, #1
 8006b50:	d038      	beq.n	8006bc4 <HAL_RTC_SetTime+0x88>
 8006b52:	2101      	movs	r1, #1
 8006b54:	1840      	adds	r0, r0, r1
 8006b56:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b58:	18e9      	adds	r1, r5, r3
 8006b5a:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	7820      	ldrb	r0, [r4, #0]
 8006b60:	9301      	str	r3, [sp, #4]
 8006b62:	7866      	ldrb	r6, [r4, #1]
 8006b64:	2340      	movs	r3, #64	; 0x40
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b66:	9103      	str	r1, [sp, #12]
  if (Format == RTC_FORMAT_BIN)
 8006b68:	2a00      	cmp	r2, #0
 8006b6a:	d12e      	bne.n	8006bca <HAL_RTC_SetTime+0x8e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006b6c:	9a01      	ldr	r2, [sp, #4]
 8006b6e:	6892      	ldr	r2, [r2, #8]
 8006b70:	0011      	movs	r1, r2
 8006b72:	4019      	ands	r1, r3
 8006b74:	421a      	tst	r2, r3
 8006b76:	d100      	bne.n	8006b7a <HAL_RTC_SetTime+0x3e>
      sTime->TimeFormat = 0x00U;
 8006b78:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b7a:	f7ff ffd3 	bl	8006b24 <RTC_ByteToBcd2>
 8006b7e:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006b80:	0030      	movs	r0, r6
 8006b82:	f7ff ffcf 	bl	8006b24 <RTC_ByteToBcd2>
 8006b86:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006b88:	78a0      	ldrb	r0, [r4, #2]
 8006b8a:	f7ff ffcb 	bl	8006b24 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006b8e:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b90:	043f      	lsls	r7, r7, #16
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006b92:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006b94:	4303      	orrs	r3, r0
 8006b96:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006b98:	0236      	lsls	r6, r6, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b9a:	23ca      	movs	r3, #202	; 0xca
 8006b9c:	9a01      	ldr	r2, [sp, #4]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006b9e:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ba0:	6253      	str	r3, [r2, #36]	; 0x24
 8006ba2:	3b77      	subs	r3, #119	; 0x77
 8006ba4:	6253      	str	r3, [r2, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006ba6:	f7ff ff45 	bl	8006a34 <RTC_EnterInitMode>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006baa:	433e      	orrs	r6, r7
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006bac:	682b      	ldr	r3, [r5, #0]
 8006bae:	1e07      	subs	r7, r0, #0
 8006bb0:	d01a      	beq.n	8006be8 <HAL_RTC_SetTime+0xac>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bb2:	22ff      	movs	r2, #255	; 0xff
 8006bb4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006bb6:	2304      	movs	r3, #4
 8006bb8:	9a03      	ldr	r2, [sp, #12]
 8006bba:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	9a02      	ldr	r2, [sp, #8]
 8006bc0:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 8006bc2:	2701      	movs	r7, #1
}
 8006bc4:	0038      	movs	r0, r7
 8006bc6:	b005      	add	sp, #20
 8006bc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006bca:	9a01      	ldr	r2, [sp, #4]
 8006bcc:	6892      	ldr	r2, [r2, #8]
 8006bce:	0011      	movs	r1, r2
 8006bd0:	4019      	ands	r1, r3
 8006bd2:	421a      	tst	r2, r3
 8006bd4:	d100      	bne.n	8006bd8 <HAL_RTC_SetTime+0x9c>
      sTime->TimeFormat = 0x00U;
 8006bd6:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006bd8:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006bda:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006bdc:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006bde:	78e7      	ldrb	r7, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 8006be0:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006be2:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006be4:	4306      	orrs	r6, r0
 8006be6:	e7d8      	b.n	8006b9a <HAL_RTC_SetTime+0x5e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006be8:	4815      	ldr	r0, [pc, #84]	; (8006c40 <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006bea:	4916      	ldr	r1, [pc, #88]	; (8006c44 <HAL_RTC_SetTime+0x108>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006bec:	4006      	ands	r6, r0
 8006bee:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006bf0:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006bf2:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8006bf4:	400a      	ands	r2, r1
 8006bf6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006bf8:	68e2      	ldr	r2, [r4, #12]
 8006bfa:	6899      	ldr	r1, [r3, #8]
 8006bfc:	4302      	orrs	r2, r0
 8006bfe:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006c00:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006c02:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	438a      	bics	r2, r1
 8006c08:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	069b      	lsls	r3, r3, #26
 8006c0e:	d40d      	bmi.n	8006c2c <HAL_RTC_SetTime+0xf0>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006c10:	0028      	movs	r0, r5
 8006c12:	f7ff fef5 	bl	8006a00 <HAL_RTC_WaitForSynchro>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d008      	beq.n	8006c2c <HAL_RTC_SetTime+0xf0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c1a:	22ff      	movs	r2, #255	; 0xff
 8006c1c:	682b      	ldr	r3, [r5, #0]
 8006c1e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006c20:	2304      	movs	r3, #4
 8006c22:	9a03      	ldr	r2, [sp, #12]
 8006c24:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8006c26:	9b02      	ldr	r3, [sp, #8]
 8006c28:	77df      	strb	r7, [r3, #31]
 8006c2a:	e7ca      	b.n	8006bc2 <HAL_RTC_SetTime+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c2c:	22ff      	movs	r2, #255	; 0xff
 8006c2e:	682b      	ldr	r3, [r5, #0]
 8006c30:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8006c32:	2301      	movs	r3, #1
 8006c34:	9a03      	ldr	r2, [sp, #12]
 8006c36:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8006c38:	2300      	movs	r3, #0
 8006c3a:	9a02      	ldr	r2, [sp, #8]
 8006c3c:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 8006c3e:	e7c1      	b.n	8006bc4 <HAL_RTC_SetTime+0x88>
 8006c40:	007f7f7f 	.word	0x007f7f7f
 8006c44:	fffbffff 	.word	0xfffbffff

08006c48 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8006c48:	2302      	movs	r3, #2
{
 8006c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8006c4c:	1c47      	adds	r7, r0, #1
{
 8006c4e:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8006c50:	7ff9      	ldrb	r1, [r7, #31]
{
 8006c52:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8006c54:	001d      	movs	r5, r3
{
 8006c56:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8006c58:	2901      	cmp	r1, #1
 8006c5a:	d036      	beq.n	8006cca <HAL_RTC_SetDate+0x82>
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c60:	18c1      	adds	r1, r0, r3
 8006c62:	77cb      	strb	r3, [r1, #31]
 8006c64:	9101      	str	r1, [sp, #4]
 8006c66:	7831      	ldrb	r1, [r6, #0]
 8006c68:	78f0      	ldrb	r0, [r6, #3]
 8006c6a:	0349      	lsls	r1, r1, #13
 8006c6c:	7873      	ldrb	r3, [r6, #1]
 8006c6e:	78b5      	ldrb	r5, [r6, #2]
 8006c70:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006c72:	2a00      	cmp	r2, #0
 8006c74:	d14c      	bne.n	8006d10 <HAL_RTC_SetDate+0xc8>
 8006c76:	3210      	adds	r2, #16
 8006c78:	4213      	tst	r3, r2
 8006c7a:	d002      	beq.n	8006c82 <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006c7c:	4393      	bics	r3, r2
 8006c7e:	330a      	adds	r3, #10
 8006c80:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006c82:	f7ff ff4f 	bl	8006b24 <RTC_ByteToBcd2>
 8006c86:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006c88:	7870      	ldrb	r0, [r6, #1]
 8006c8a:	f7ff ff4b 	bl	8006b24 <RTC_ByteToBcd2>
 8006c8e:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006c90:	0028      	movs	r0, r5
 8006c92:	f7ff ff47 	bl	8006b24 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006c96:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006c98:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006c9a:	041d      	lsls	r5, r3, #16
 8006c9c:	9b02      	ldr	r3, [sp, #8]
 8006c9e:	4318      	orrs	r0, r3
 8006ca0:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ca2:	22ca      	movs	r2, #202	; 0xca
 8006ca4:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006ca6:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006ca8:	625a      	str	r2, [r3, #36]	; 0x24
 8006caa:	3a77      	subs	r2, #119	; 0x77
 8006cac:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006cae:	f7ff fec1 	bl	8006a34 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006cb2:	432e      	orrs	r6, r5
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	1e05      	subs	r5, r0, #0
 8006cb8:	d00a      	beq.n	8006cd0 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cba:	22ff      	movs	r2, #255	; 0xff
 8006cbc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006cbe:	2304      	movs	r3, #4
 8006cc0:	9a01      	ldr	r2, [sp, #4]
 8006cc2:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 8006cc8:	2501      	movs	r5, #1
}
 8006cca:	0028      	movs	r0, r5
 8006ccc:	b005      	add	sp, #20
 8006cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006cd0:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006cd2:	4812      	ldr	r0, [pc, #72]	; (8006d1c <HAL_RTC_SetDate+0xd4>)
 8006cd4:	4006      	ands	r6, r0
 8006cd6:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006cd8:	68da      	ldr	r2, [r3, #12]
 8006cda:	438a      	bics	r2, r1
 8006cdc:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	069b      	lsls	r3, r3, #26
 8006ce2:	d40c      	bmi.n	8006cfe <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ce4:	0020      	movs	r0, r4
 8006ce6:	f7ff fe8b 	bl	8006a00 <HAL_RTC_WaitForSynchro>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	d007      	beq.n	8006cfe <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cee:	22ff      	movs	r2, #255	; 0xff
 8006cf0:	6823      	ldr	r3, [r4, #0]
 8006cf2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006cf4:	2304      	movs	r3, #4
 8006cf6:	9a01      	ldr	r2, [sp, #4]
 8006cf8:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8006cfa:	77fd      	strb	r5, [r7, #31]
 8006cfc:	e7e4      	b.n	8006cc8 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cfe:	22ff      	movs	r2, #255	; 0xff
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8006d04:	2301      	movs	r3, #1
 8006d06:	9a01      	ldr	r2, [sp, #4]
 8006d08:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 8006d0e:	e7dc      	b.n	8006cca <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006d10:	9a02      	ldr	r2, [sp, #8]
 8006d12:	0400      	lsls	r0, r0, #16
 8006d14:	4310      	orrs	r0, r2
 8006d16:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8006d18:	021e      	lsls	r6, r3, #8
 8006d1a:	e7c2      	b.n	8006ca2 <HAL_RTC_SetDate+0x5a>
 8006d1c:	00ffff3f 	.word	0x00ffff3f

08006d20 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8006d20:	2302      	movs	r3, #2
{
 8006d22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d24:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8006d26:	1c41      	adds	r1, r0, #1
 8006d28:	7fce      	ldrb	r6, [r1, #31]
{
 8006d2a:	0004      	movs	r4, r0
 8006d2c:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8006d2e:	0018      	movs	r0, r3
 8006d30:	2e01      	cmp	r6, #1
 8006d32:	d100      	bne.n	8006d36 <HAL_RTC_SetAlarm_IT+0x16>
 8006d34:	e095      	b.n	8006e62 <HAL_RTC_SetAlarm_IT+0x142>
 8006d36:	3801      	subs	r0, #1
 8006d38:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d3a:	18e1      	adds	r1, r4, r3
 8006d3c:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 8006d3e:	7869      	ldrb	r1, [r5, #1]
 8006d40:	6826      	ldr	r6, [r4, #0]
 8006d42:	9101      	str	r1, [sp, #4]
 8006d44:	7828      	ldrb	r0, [r5, #0]
 8006d46:	78af      	ldrb	r7, [r5, #2]
 8006d48:	333e      	adds	r3, #62	; 0x3e
 8006d4a:	2a00      	cmp	r2, #0
 8006d4c:	d165      	bne.n	8006e1a <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006d4e:	68b2      	ldr	r2, [r6, #8]
 8006d50:	0011      	movs	r1, r2
 8006d52:	4019      	ands	r1, r3
 8006d54:	421a      	tst	r2, r3
 8006d56:	d100      	bne.n	8006d5a <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006d58:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006d5a:	f7ff fee3 	bl	8006b24 <RTC_ByteToBcd2>
 8006d5e:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006d60:	9801      	ldr	r0, [sp, #4]
 8006d62:	f7ff fedf 	bl	8006b24 <RTC_ByteToBcd2>
 8006d66:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006d68:	0038      	movs	r0, r7
 8006d6a:	f7ff fedb 	bl	8006b24 <RTC_ByteToBcd2>
 8006d6e:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006d70:	1c6b      	adds	r3, r5, #1
 8006d72:	7fd8      	ldrb	r0, [r3, #31]
 8006d74:	f7ff fed6 	bl	8006b24 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006d78:	696a      	ldr	r2, [r5, #20]
 8006d7a:	69eb      	ldr	r3, [r5, #28]
 8006d7c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006d7e:	78ea      	ldrb	r2, [r5, #3]
 8006d80:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006d82:	4313      	orrs	r3, r2
 8006d84:	431f      	orrs	r7, r3
 8006d86:	9b02      	ldr	r3, [sp, #8]
 8006d88:	041b      	lsls	r3, r3, #16
 8006d8a:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006d8c:	9b01      	ldr	r3, [sp, #4]
 8006d8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006d90:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006d92:	69aa      	ldr	r2, [r5, #24]
 8006d94:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006d96:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006d9c:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006d9e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006da0:	6273      	str	r3, [r6, #36]	; 0x24
 8006da2:	3b77      	subs	r3, #119	; 0x77
 8006da4:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006da6:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006da8:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d15b      	bne.n	8006e66 <HAL_RTC_SetAlarm_IT+0x146>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006dae:	68b3      	ldr	r3, [r6, #8]
 8006db0:	4a41      	ldr	r2, [pc, #260]	; (8006eb8 <HAL_RTC_SetAlarm_IT+0x198>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006db2:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006db4:	4013      	ands	r3, r2
 8006db6:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006db8:	68f2      	ldr	r2, [r6, #12]
 8006dba:	4b40      	ldr	r3, [pc, #256]	; (8006ebc <HAL_RTC_SetAlarm_IT+0x19c>)
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8006dc2:	f7fd f9ab 	bl	800411c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006dc6:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8006dc8:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006dca:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006dcc:	6823      	ldr	r3, [r4, #0]
 8006dce:	68da      	ldr	r2, [r3, #12]
 8006dd0:	0011      	movs	r1, r2
 8006dd2:	4029      	ands	r1, r5
 8006dd4:	9103      	str	r1, [sp, #12]
 8006dd6:	422a      	tst	r2, r5
 8006dd8:	d034      	beq.n	8006e44 <HAL_RTC_SetAlarm_IT+0x124>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006dda:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006ddc:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8006dde:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006de0:	2280      	movs	r2, #128	; 0x80
 8006de2:	6899      	ldr	r1, [r3, #8]
 8006de4:	0052      	lsls	r2, r2, #1
 8006de6:	430a      	orrs	r2, r1
 8006de8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8006dea:	2280      	movs	r2, #128	; 0x80
 8006dec:	6899      	ldr	r1, [r3, #8]
 8006dee:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006df0:	430a      	orrs	r2, r1
 8006df2:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006df4:	2280      	movs	r2, #128	; 0x80
 8006df6:	4b32      	ldr	r3, [pc, #200]	; (8006ec0 <HAL_RTC_SetAlarm_IT+0x1a0>)
 8006df8:	0292      	lsls	r2, r2, #10
 8006dfa:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 8006dfc:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006dfe:	4311      	orrs	r1, r2
 8006e00:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006e02:	6899      	ldr	r1, [r3, #8]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e08:	22ff      	movs	r2, #255	; 0xff
 8006e0a:	6823      	ldr	r3, [r4, #0]
 8006e0c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006e0e:	3afe      	subs	r2, #254	; 0xfe
 8006e10:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 8006e12:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 8006e14:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8006e16:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8006e18:	e023      	b.n	8006e62 <HAL_RTC_SetAlarm_IT+0x142>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006e1a:	68b2      	ldr	r2, [r6, #8]
 8006e1c:	0011      	movs	r1, r2
 8006e1e:	4019      	ands	r1, r3
 8006e20:	421a      	tst	r2, r3
 8006e22:	d100      	bne.n	8006e26 <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006e24:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006e26:	69eb      	ldr	r3, [r5, #28]
 8006e28:	696a      	ldr	r2, [r5, #20]
 8006e2a:	0400      	lsls	r0, r0, #16
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006e30:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006e32:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006e34:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006e36:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006e38:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006e3a:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006e3c:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006e3e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006e40:	7fd8      	ldrb	r0, [r3, #31]
 8006e42:	e7a6      	b.n	8006d92 <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e44:	f7fd f96a 	bl	800411c <HAL_GetTick>
 8006e48:	9b02      	ldr	r3, [sp, #8]
 8006e4a:	1ac0      	subs	r0, r0, r3
 8006e4c:	42b0      	cmp	r0, r6
 8006e4e:	d9bd      	bls.n	8006dcc <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e50:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e52:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e54:	6823      	ldr	r3, [r4, #0]
 8006e56:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006e58:	1ca3      	adds	r3, r4, #2
 8006e5a:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 8006e5c:	9b03      	ldr	r3, [sp, #12]
 8006e5e:	3401      	adds	r4, #1
 8006e60:	77e3      	strb	r3, [r4, #31]
}
 8006e62:	b005      	add	sp, #20
 8006e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006e66:	68b3      	ldr	r3, [r6, #8]
 8006e68:	4a16      	ldr	r2, [pc, #88]	; (8006ec4 <HAL_RTC_SetAlarm_IT+0x1a4>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006e6a:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006e70:	68f2      	ldr	r2, [r6, #12]
 8006e72:	4b15      	ldr	r3, [pc, #84]	; (8006ec8 <HAL_RTC_SetAlarm_IT+0x1a8>)
 8006e74:	b2d2      	uxtb	r2, r2
 8006e76:	4313      	orrs	r3, r2
 8006e78:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8006e7a:	f7fd f94f 	bl	800411c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e7e:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8006e80:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006e82:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	68da      	ldr	r2, [r3, #12]
 8006e88:	0011      	movs	r1, r2
 8006e8a:	4029      	ands	r1, r5
 8006e8c:	9103      	str	r1, [sp, #12]
 8006e8e:	422a      	tst	r2, r5
 8006e90:	d00b      	beq.n	8006eaa <HAL_RTC_SetAlarm_IT+0x18a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006e92:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006e94:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006e96:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006e98:	2280      	movs	r2, #128	; 0x80
 8006e9a:	6899      	ldr	r1, [r3, #8]
 8006e9c:	0092      	lsls	r2, r2, #2
 8006e9e:	430a      	orrs	r2, r1
 8006ea0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8006ea2:	2280      	movs	r2, #128	; 0x80
 8006ea4:	6899      	ldr	r1, [r3, #8]
 8006ea6:	0192      	lsls	r2, r2, #6
 8006ea8:	e7a2      	b.n	8006df0 <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006eaa:	f7fd f937 	bl	800411c <HAL_GetTick>
 8006eae:	9b02      	ldr	r3, [sp, #8]
 8006eb0:	1ac0      	subs	r0, r0, r3
 8006eb2:	42b0      	cmp	r0, r6
 8006eb4:	d9e6      	bls.n	8006e84 <HAL_RTC_SetAlarm_IT+0x164>
 8006eb6:	e7cb      	b.n	8006e50 <HAL_RTC_SetAlarm_IT+0x130>
 8006eb8:	fffffeff 	.word	0xfffffeff
 8006ebc:	fffffe7f 	.word	0xfffffe7f
 8006ec0:	40010400 	.word	0x40010400
 8006ec4:	fffffdff 	.word	0xfffffdff
 8006ec8:	fffffd7f 	.word	0xfffffd7f

08006ecc <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006ecc:	0902      	lsrs	r2, r0, #4
{
 8006ece:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8006ed0:	200a      	movs	r0, #10
 8006ed2:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006ed4:	220f      	movs	r2, #15
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	18c0      	adds	r0, r0, r3
 8006eda:	b2c0      	uxtb	r0, r0
}
 8006edc:	4770      	bx	lr
	...

08006ee0 <HAL_RTC_GetTime>:
{
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006ee4:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006ee6:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006ee8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8006eea:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006eec:	690b      	ldr	r3, [r1, #16]
 8006eee:	045b      	lsls	r3, r3, #17
 8006ef0:	0c5b      	lsrs	r3, r3, #17
 8006ef2:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006ef4:	680b      	ldr	r3, [r1, #0]
 8006ef6:	490e      	ldr	r1, [pc, #56]	; (8006f30 <HAL_RTC_GetTime+0x50>)
 8006ef8:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006efa:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006efc:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006efe:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006f00:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006f02:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006f04:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006f06:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006f08:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006f0a:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8006f0c:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006f0e:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8006f10:	2a00      	cmp	r2, #0
 8006f12:	d10a      	bne.n	8006f2a <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006f14:	f7ff ffda 	bl	8006ecc <RTC_Bcd2ToByte>
 8006f18:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006f1a:	0030      	movs	r0, r6
 8006f1c:	f7ff ffd6 	bl	8006ecc <RTC_Bcd2ToByte>
 8006f20:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006f22:	0028      	movs	r0, r5
 8006f24:	f7ff ffd2 	bl	8006ecc <RTC_Bcd2ToByte>
 8006f28:	70a0      	strb	r0, [r4, #2]
}
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	bd70      	pop	{r4, r5, r6, pc}
 8006f2e:	46c0      	nop			; (mov r8, r8)
 8006f30:	007f7f7f 	.word	0x007f7f7f

08006f34 <HAL_RTC_GetDate>:
{
 8006f34:	b570      	push	{r4, r5, r6, lr}
 8006f36:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006f38:	6803      	ldr	r3, [r0, #0]
 8006f3a:	490e      	ldr	r1, [pc, #56]	; (8006f74 <HAL_RTC_GetDate+0x40>)
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006f40:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006f42:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006f44:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006f46:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006f48:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006f4a:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006f4c:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006f4e:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006f50:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006f52:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8006f54:	2a00      	cmp	r2, #0
 8006f56:	d10a      	bne.n	8006f6e <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006f58:	f7ff ffb8 	bl	8006ecc <RTC_Bcd2ToByte>
 8006f5c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006f5e:	0028      	movs	r0, r5
 8006f60:	f7ff ffb4 	bl	8006ecc <RTC_Bcd2ToByte>
 8006f64:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006f66:	0030      	movs	r0, r6
 8006f68:	f7ff ffb0 	bl	8006ecc <RTC_Bcd2ToByte>
 8006f6c:	70a0      	strb	r0, [r4, #2]
}
 8006f6e:	2000      	movs	r0, #0
 8006f70:	bd70      	pop	{r4, r5, r6, pc}
 8006f72:	46c0      	nop			; (mov r8, r8)
 8006f74:	00ffff3f 	.word	0x00ffff3f

08006f78 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006f78:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8006f7a:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006f7c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8006f7e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006f80:	600a      	str	r2, [r1, #0]
}
 8006f82:	4770      	bx	lr

08006f84 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006f84:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8006f86:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006f88:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8006f8a:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006f8c:	6808      	ldr	r0, [r1, #0]
}
 8006f8e:	4770      	bx	lr

08006f90 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006f90:	2202      	movs	r2, #2
{
 8006f92:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8006f94:	1c41      	adds	r1, r0, #1
 8006f96:	7fcc      	ldrb	r4, [r1, #31]
{
 8006f98:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8006f9a:	0010      	movs	r0, r2
 8006f9c:	2c01      	cmp	r4, #1
 8006f9e:	d010      	beq.n	8006fc2 <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006fa0:	1898      	adds	r0, r3, r2
 8006fa2:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	32c8      	adds	r2, #200	; 0xc8
 8006fa8:	625a      	str	r2, [r3, #36]	; 0x24
 8006faa:	3a77      	subs	r2, #119	; 0x77
 8006fac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8006fae:	689c      	ldr	r4, [r3, #8]
 8006fb0:	3a33      	subs	r2, #51	; 0x33
 8006fb2:	4322      	orrs	r2, r4
 8006fb4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fb6:	22ff      	movs	r2, #255	; 0xff
 8006fb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 8006fc2:	bd10      	pop	{r4, pc}

08006fc4 <HAL_RTCEx_AlarmBEventCallback>:
 8006fc4:	4770      	bx	lr
	...

08006fc8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8006fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fca:	001d      	movs	r5, r3
 8006fcc:	0017      	movs	r7, r2
 8006fce:	b085      	sub	sp, #20
 8006fd0:	000e      	movs	r6, r1
 8006fd2:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fd4:	f7fd f8a2 	bl	800411c <HAL_GetTick>
 8006fd8:	19ed      	adds	r5, r5, r7
 8006fda:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8006fdc:	f7fd f89e 	bl	800411c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fe0:	4b25      	ldr	r3, [pc, #148]	; (8007078 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8006fe2:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	015b      	lsls	r3, r3, #5
 8006fe8:	0d1b      	lsrs	r3, r3, #20
 8006fea:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006fec:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8006fee:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ff0:	6893      	ldr	r3, [r2, #8]
 8006ff2:	4033      	ands	r3, r6
 8006ff4:	429e      	cmp	r6, r3
 8006ff6:	d001      	beq.n	8006ffc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	e032      	b.n	8007062 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 8006ffc:	1c7b      	adds	r3, r7, #1
 8006ffe:	d0f7      	beq.n	8006ff0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007000:	f7fd f88c 	bl	800411c <HAL_GetTick>
 8007004:	9b01      	ldr	r3, [sp, #4]
 8007006:	1ac0      	subs	r0, r0, r3
 8007008:	42a8      	cmp	r0, r5
 800700a:	d32c      	bcc.n	8007066 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800700c:	21e0      	movs	r1, #224	; 0xe0
 800700e:	6823      	ldr	r3, [r4, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	438a      	bics	r2, r1
 8007014:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007016:	2282      	movs	r2, #130	; 0x82
 8007018:	6861      	ldr	r1, [r4, #4]
 800701a:	0052      	lsls	r2, r2, #1
 800701c:	4291      	cmp	r1, r2
 800701e:	d10c      	bne.n	800703a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8007020:	2180      	movs	r1, #128	; 0x80
 8007022:	68a2      	ldr	r2, [r4, #8]
 8007024:	0209      	lsls	r1, r1, #8
 8007026:	428a      	cmp	r2, r1
 8007028:	d003      	beq.n	8007032 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800702a:	2180      	movs	r1, #128	; 0x80
 800702c:	00c9      	lsls	r1, r1, #3
 800702e:	428a      	cmp	r2, r1
 8007030:	d103      	bne.n	800703a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 8007032:	2140      	movs	r1, #64	; 0x40
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	438a      	bics	r2, r1
 8007038:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800703a:	2180      	movs	r1, #128	; 0x80
 800703c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800703e:	0189      	lsls	r1, r1, #6
 8007040:	428a      	cmp	r2, r1
 8007042:	d106      	bne.n	8007052 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 8007044:	6819      	ldr	r1, [r3, #0]
 8007046:	480d      	ldr	r0, [pc, #52]	; (800707c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8007048:	4001      	ands	r1, r0
 800704a:	6019      	str	r1, [r3, #0]
 800704c:	6819      	ldr	r1, [r3, #0]
 800704e:	430a      	orrs	r2, r1
 8007050:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007052:	0023      	movs	r3, r4
 8007054:	2201      	movs	r2, #1
 8007056:	3351      	adds	r3, #81	; 0x51
 8007058:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800705a:	2300      	movs	r3, #0
 800705c:	2003      	movs	r0, #3
 800705e:	3450      	adds	r4, #80	; 0x50
 8007060:	7023      	strb	r3, [r4, #0]
}
 8007062:	b005      	add	sp, #20
 8007064:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8007066:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8007068:	1e5a      	subs	r2, r3, #1
 800706a:	4193      	sbcs	r3, r2
 800706c:	425b      	negs	r3, r3
 800706e:	401d      	ands	r5, r3
      count--;
 8007070:	9b03      	ldr	r3, [sp, #12]
 8007072:	3b01      	subs	r3, #1
 8007074:	e7ba      	b.n	8006fec <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8007076:	46c0      	nop			; (mov r8, r8)
 8007078:	20000034 	.word	0x20000034
 800707c:	ffffdfff 	.word	0xffffdfff

08007080 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007080:	4b16      	ldr	r3, [pc, #88]	; (80070dc <SPI_EndRxTxTransaction+0x5c>)
{
 8007082:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007084:	0004      	movs	r4, r0
 8007086:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	4915      	ldr	r1, [pc, #84]	; (80070e0 <SPI_EndRxTxTransaction+0x60>)
{
 800708c:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800708e:	f7f9 f86b 	bl	8000168 <__udivsi3>
 8007092:	23fa      	movs	r3, #250	; 0xfa
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	4343      	muls	r3, r0
 8007098:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800709a:	2382      	movs	r3, #130	; 0x82
 800709c:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800709e:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	4299      	cmp	r1, r3
 80070a4:	d10d      	bne.n	80070c2 <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070a6:	0033      	movs	r3, r6
 80070a8:	002a      	movs	r2, r5
 80070aa:	2180      	movs	r1, #128	; 0x80
 80070ac:	0020      	movs	r0, r4
 80070ae:	f7ff ff8b 	bl	8006fc8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d00f      	beq.n	80070d6 <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070b6:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80070b8:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070ba:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80070bc:	4313      	orrs	r3, r2
 80070be:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 80070c0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 80070c2:	9b01      	ldr	r3, [sp, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d006      	beq.n	80070d6 <SPI_EndRxTxTransaction+0x56>
      count--;
 80070c8:	9b01      	ldr	r3, [sp, #4]
 80070ca:	3b01      	subs	r3, #1
 80070cc:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	4213      	tst	r3, r2
 80070d4:	d1f5      	bne.n	80070c2 <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 80070d6:	2000      	movs	r0, #0
 80070d8:	e7f2      	b.n	80070c0 <SPI_EndRxTxTransaction+0x40>
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	20000034 	.word	0x20000034
 80070e0:	016e3600 	.word	0x016e3600

080070e4 <HAL_SPI_MspInit>:
}
 80070e4:	4770      	bx	lr
	...

080070e8 <HAL_SPI_Init>:
{
 80070e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ea:	0004      	movs	r4, r0
    return HAL_ERROR;
 80070ec:	2001      	movs	r0, #1
  if (hspi == NULL)
 80070ee:	2c00      	cmp	r4, #0
 80070f0:	d054      	beq.n	800719c <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80070f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d152      	bne.n	800719e <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80070f8:	2282      	movs	r2, #130	; 0x82
 80070fa:	6861      	ldr	r1, [r4, #4]
 80070fc:	0052      	lsls	r2, r2, #1
 80070fe:	4291      	cmp	r1, r2
 8007100:	d000      	beq.n	8007104 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007102:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007104:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8007106:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007108:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800710a:	3551      	adds	r5, #81	; 0x51
 800710c:	782b      	ldrb	r3, [r5, #0]
 800710e:	b2da      	uxtb	r2, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d105      	bne.n	8007120 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8007114:	0023      	movs	r3, r4
 8007116:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8007118:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800711a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 800711c:	f7ff ffe2 	bl	80070e4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8007120:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 8007122:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8007124:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8007126:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007128:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 800712a:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800712c:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 800712e:	4393      	bics	r3, r2
 8007130:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007132:	2382      	movs	r3, #130	; 0x82
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	4033      	ands	r3, r6
 8007138:	2684      	movs	r6, #132	; 0x84
 800713a:	0236      	lsls	r6, r6, #8
 800713c:	403e      	ands	r6, r7
 800713e:	4333      	orrs	r3, r6
 8007140:	2680      	movs	r6, #128	; 0x80
 8007142:	68e7      	ldr	r7, [r4, #12]
 8007144:	0136      	lsls	r6, r6, #4
 8007146:	403e      	ands	r6, r7
 8007148:	4333      	orrs	r3, r6
 800714a:	6926      	ldr	r6, [r4, #16]
 800714c:	69a2      	ldr	r2, [r4, #24]
 800714e:	4030      	ands	r0, r6
 8007150:	2601      	movs	r6, #1
 8007152:	4303      	orrs	r3, r0
 8007154:	6960      	ldr	r0, [r4, #20]
 8007156:	69e7      	ldr	r7, [r4, #28]
 8007158:	4030      	ands	r0, r6
 800715a:	4303      	orrs	r3, r0
 800715c:	2080      	movs	r0, #128	; 0x80
 800715e:	0080      	lsls	r0, r0, #2
 8007160:	4010      	ands	r0, r2
 8007162:	4303      	orrs	r3, r0
 8007164:	2038      	movs	r0, #56	; 0x38
 8007166:	4038      	ands	r0, r7
 8007168:	4303      	orrs	r3, r0
 800716a:	2080      	movs	r0, #128	; 0x80
 800716c:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800716e:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007170:	4038      	ands	r0, r7
 8007172:	4303      	orrs	r3, r0
 8007174:	2080      	movs	r0, #128	; 0x80
 8007176:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8007178:	0180      	lsls	r0, r0, #6
 800717a:	4038      	ands	r0, r7
 800717c:	4303      	orrs	r3, r0
 800717e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007180:	2304      	movs	r3, #4
 8007182:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007184:	401a      	ands	r2, r3
 8007186:	330c      	adds	r3, #12
 8007188:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800718a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800718c:	431a      	orrs	r2, r3
 800718e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007190:	69cb      	ldr	r3, [r1, #28]
 8007192:	4a05      	ldr	r2, [pc, #20]	; (80071a8 <HAL_SPI_Init+0xc0>)
 8007194:	4013      	ands	r3, r2
 8007196:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007198:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800719a:	702e      	strb	r6, [r5, #0]
}
 800719c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800719e:	2300      	movs	r3, #0
 80071a0:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80071a2:	6163      	str	r3, [r4, #20]
 80071a4:	e7ae      	b.n	8007104 <HAL_SPI_Init+0x1c>
 80071a6:	46c0      	nop			; (mov r8, r8)
 80071a8:	fffff7ff 	.word	0xfffff7ff

080071ac <HAL_SPI_TransmitReceive>:
{
 80071ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071ae:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 80071b0:	0003      	movs	r3, r0
 80071b2:	3350      	adds	r3, #80	; 0x50
{
 80071b4:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 80071b6:	781a      	ldrb	r2, [r3, #0]
{
 80071b8:	0004      	movs	r4, r0
 80071ba:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 80071bc:	2002      	movs	r0, #2
{
 80071be:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 80071c0:	2a01      	cmp	r2, #1
 80071c2:	d100      	bne.n	80071c6 <HAL_SPI_TransmitReceive+0x1a>
 80071c4:	e092      	b.n	80072ec <HAL_SPI_TransmitReceive+0x140>
 80071c6:	2201      	movs	r2, #1
 80071c8:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80071ca:	f7fc ffa7 	bl	800411c <HAL_GetTick>
  tmp_state           = hspi->State;
 80071ce:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80071d0:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 80071d2:	3351      	adds	r3, #81	; 0x51
 80071d4:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80071d6:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80071d8:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d00a      	beq.n	80071f4 <HAL_SPI_TransmitReceive+0x48>
 80071de:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 80071e0:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	4299      	cmp	r1, r3
 80071e6:	d000      	beq.n	80071ea <HAL_SPI_TransmitReceive+0x3e>
 80071e8:	e079      	b.n	80072de <HAL_SPI_TransmitReceive+0x132>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071ea:	68a3      	ldr	r3, [r4, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d176      	bne.n	80072de <HAL_SPI_TransmitReceive+0x132>
 80071f0:	2a04      	cmp	r2, #4
 80071f2:	d174      	bne.n	80072de <HAL_SPI_TransmitReceive+0x132>
    errorcode = HAL_ERROR;
 80071f4:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071f6:	2d00      	cmp	r5, #0
 80071f8:	d071      	beq.n	80072de <HAL_SPI_TransmitReceive+0x132>
 80071fa:	2f00      	cmp	r7, #0
 80071fc:	d06f      	beq.n	80072de <HAL_SPI_TransmitReceive+0x132>
 80071fe:	2e00      	cmp	r6, #0
 8007200:	d06d      	beq.n	80072de <HAL_SPI_TransmitReceive+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007202:	0023      	movs	r3, r4
 8007204:	3351      	adds	r3, #81	; 0x51
 8007206:	781a      	ldrb	r2, [r3, #0]
 8007208:	2a04      	cmp	r2, #4
 800720a:	d001      	beq.n	8007210 <HAL_SPI_TransmitReceive+0x64>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800720c:	2205      	movs	r2, #5
 800720e:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007210:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007212:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007214:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8007216:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007218:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800721a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800721c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 800721e:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007220:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007222:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007224:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007226:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8007228:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800722a:	4210      	tst	r0, r2
 800722c:	d102      	bne.n	8007234 <HAL_SPI_TransmitReceive+0x88>
    __HAL_SPI_ENABLE(hspi);
 800722e:	6818      	ldr	r0, [r3, #0]
 8007230:	4302      	orrs	r2, r0
 8007232:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007234:	2280      	movs	r2, #128	; 0x80
 8007236:	68e0      	ldr	r0, [r4, #12]
 8007238:	0112      	lsls	r2, r2, #4
 800723a:	4290      	cmp	r0, r2
 800723c:	d158      	bne.n	80072f0 <HAL_SPI_TransmitReceive+0x144>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800723e:	2900      	cmp	r1, #0
 8007240:	d001      	beq.n	8007246 <HAL_SPI_TransmitReceive+0x9a>
 8007242:	2e01      	cmp	r6, #1
 8007244:	d107      	bne.n	8007256 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007246:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007248:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800724a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800724c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800724e:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8007250:	3b01      	subs	r3, #1
 8007252:	b29b      	uxth	r3, r3
 8007254:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8007256:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007258:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800725a:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800725c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800725e:	2b00      	cmp	r3, #0
 8007260:	d10e      	bne.n	8007280 <HAL_SPI_TransmitReceive+0xd4>
 8007262:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007264:	2b00      	cmp	r3, #0
 8007266:	d10b      	bne.n	8007280 <HAL_SPI_TransmitReceive+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007268:	0020      	movs	r0, r4
 800726a:	9a01      	ldr	r2, [sp, #4]
 800726c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800726e:	f7ff ff07 	bl	8007080 <SPI_EndRxTxTransaction>
 8007272:	2800      	cmp	r0, #0
 8007274:	d100      	bne.n	8007278 <HAL_SPI_TransmitReceive+0xcc>
 8007276:	e083      	b.n	8007380 <HAL_SPI_TransmitReceive+0x1d4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007278:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 800727a:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800727c:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 800727e:	e02e      	b.n	80072de <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007280:	6821      	ldr	r1, [r4, #0]
 8007282:	688b      	ldr	r3, [r1, #8]
 8007284:	423b      	tst	r3, r7
 8007286:	d00e      	beq.n	80072a6 <HAL_SPI_TransmitReceive+0xfa>
 8007288:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00b      	beq.n	80072a6 <HAL_SPI_TransmitReceive+0xfa>
 800728e:	2d01      	cmp	r5, #1
 8007290:	d109      	bne.n	80072a6 <HAL_SPI_TransmitReceive+0xfa>
        txallowed = 0U;
 8007292:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007294:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007296:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007298:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800729a:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800729c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800729e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80072a0:	3b01      	subs	r3, #1
 80072a2:	b29b      	uxth	r3, r3
 80072a4:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072a6:	688b      	ldr	r3, [r1, #8]
 80072a8:	001a      	movs	r2, r3
 80072aa:	4032      	ands	r2, r6
 80072ac:	4233      	tst	r3, r6
 80072ae:	d00c      	beq.n	80072ca <HAL_SPI_TransmitReceive+0x11e>
 80072b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d009      	beq.n	80072ca <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 80072b6:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072b8:	68c9      	ldr	r1, [r1, #12]
 80072ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80072bc:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072be:	3302      	adds	r3, #2
 80072c0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80072c2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80072ca:	f7fc ff27 	bl	800411c <HAL_GetTick>
 80072ce:	9b01      	ldr	r3, [sp, #4]
 80072d0:	1ac0      	subs	r0, r0, r3
 80072d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072d4:	4298      	cmp	r0, r3
 80072d6:	d3c1      	bcc.n	800725c <HAL_SPI_TransmitReceive+0xb0>
 80072d8:	3301      	adds	r3, #1
 80072da:	d0bf      	beq.n	800725c <HAL_SPI_TransmitReceive+0xb0>
        errorcode = HAL_TIMEOUT;
 80072dc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80072de:	0023      	movs	r3, r4
 80072e0:	2201      	movs	r2, #1
 80072e2:	3351      	adds	r3, #81	; 0x51
 80072e4:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 80072e6:	2300      	movs	r3, #0
 80072e8:	3450      	adds	r4, #80	; 0x50
 80072ea:	7023      	strb	r3, [r4, #0]
}
 80072ec:	b005      	add	sp, #20
 80072ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072f0:	2900      	cmp	r1, #0
 80072f2:	d001      	beq.n	80072f8 <HAL_SPI_TransmitReceive+0x14c>
 80072f4:	2e01      	cmp	r6, #1
 80072f6:	d108      	bne.n	800730a <HAL_SPI_TransmitReceive+0x15e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80072f8:	782a      	ldrb	r2, [r5, #0]
 80072fa:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80072fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80072fe:	3301      	adds	r3, #1
 8007300:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8007302:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007304:	3b01      	subs	r3, #1
 8007306:	b29b      	uxth	r3, r3
 8007308:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 800730a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800730c:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800730e:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007310:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007312:	2b00      	cmp	r3, #0
 8007314:	d102      	bne.n	800731c <HAL_SPI_TransmitReceive+0x170>
 8007316:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007318:	2b00      	cmp	r3, #0
 800731a:	d0a5      	beq.n	8007268 <HAL_SPI_TransmitReceive+0xbc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	689a      	ldr	r2, [r3, #8]
 8007320:	423a      	tst	r2, r7
 8007322:	d00f      	beq.n	8007344 <HAL_SPI_TransmitReceive+0x198>
 8007324:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8007326:	2a00      	cmp	r2, #0
 8007328:	d00c      	beq.n	8007344 <HAL_SPI_TransmitReceive+0x198>
 800732a:	2d01      	cmp	r5, #1
 800732c:	d10a      	bne.n	8007344 <HAL_SPI_TransmitReceive+0x198>
        txallowed = 0U;
 800732e:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007330:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007332:	7812      	ldrb	r2, [r2, #0]
 8007334:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8007336:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007338:	3301      	adds	r3, #1
 800733a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800733c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800733e:	3b01      	subs	r3, #1
 8007340:	b29b      	uxth	r3, r3
 8007342:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007344:	6823      	ldr	r3, [r4, #0]
 8007346:	6899      	ldr	r1, [r3, #8]
 8007348:	000a      	movs	r2, r1
 800734a:	4032      	ands	r2, r6
 800734c:	4231      	tst	r1, r6
 800734e:	d00d      	beq.n	800736c <HAL_SPI_TransmitReceive+0x1c0>
 8007350:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8007352:	2900      	cmp	r1, #0
 8007354:	d00a      	beq.n	800736c <HAL_SPI_TransmitReceive+0x1c0>
        txallowed = 1U;
 8007356:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007358:	68db      	ldr	r3, [r3, #12]
 800735a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800735c:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 800735e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007360:	3301      	adds	r3, #1
 8007362:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8007364:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8007366:	3b01      	subs	r3, #1
 8007368:	b29b      	uxth	r3, r3
 800736a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800736c:	f7fc fed6 	bl	800411c <HAL_GetTick>
 8007370:	9b01      	ldr	r3, [sp, #4]
 8007372:	1ac0      	subs	r0, r0, r3
 8007374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007376:	4298      	cmp	r0, r3
 8007378:	d3ca      	bcc.n	8007310 <HAL_SPI_TransmitReceive+0x164>
 800737a:	3301      	adds	r3, #1
 800737c:	d0c8      	beq.n	8007310 <HAL_SPI_TransmitReceive+0x164>
 800737e:	e7ad      	b.n	80072dc <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007380:	68a3      	ldr	r3, [r4, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d1ab      	bne.n	80072de <HAL_SPI_TransmitReceive+0x132>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	9003      	str	r0, [sp, #12]
 800738a:	68da      	ldr	r2, [r3, #12]
 800738c:	9203      	str	r2, [sp, #12]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	9303      	str	r3, [sp, #12]
 8007392:	9b03      	ldr	r3, [sp, #12]
 8007394:	e7a3      	b.n	80072de <HAL_SPI_TransmitReceive+0x132>

08007396 <HAL_SPI_GetState>:
  return hspi->State;
 8007396:	3051      	adds	r0, #81	; 0x51
 8007398:	7800      	ldrb	r0, [r0, #0]
 800739a:	b2c0      	uxtb	r0, r0
}
 800739c:	4770      	bx	lr
	...

080073a0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073a0:	6803      	ldr	r3, [r0, #0]
 80073a2:	490b      	ldr	r1, [pc, #44]	; (80073d0 <UART_EndRxTransfer+0x30>)
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	400a      	ands	r2, r1
 80073a8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073aa:	689a      	ldr	r2, [r3, #8]
 80073ac:	3123      	adds	r1, #35	; 0x23
 80073ae:	31ff      	adds	r1, #255	; 0xff
 80073b0:	438a      	bics	r2, r1
 80073b2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80073b6:	428a      	cmp	r2, r1
 80073b8:	d103      	bne.n	80073c2 <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	310f      	adds	r1, #15
 80073be:	438a      	bics	r2, r1
 80073c0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073c2:	2320      	movs	r3, #32
 80073c4:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073c6:	2300      	movs	r3, #0
 80073c8:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80073ca:	6643      	str	r3, [r0, #100]	; 0x64
}
 80073cc:	4770      	bx	lr
 80073ce:	46c0      	nop			; (mov r8, r8)
 80073d0:	fffffedf 	.word	0xfffffedf

080073d4 <HAL_UART_Transmit_DMA>:
{
 80073d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073d6:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80073d8:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 80073da:	0004      	movs	r4, r0
    return HAL_BUSY;
 80073dc:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 80073de:	2a20      	cmp	r2, #32
 80073e0:	d13a      	bne.n	8007458 <HAL_UART_Transmit_DMA+0x84>
      return HAL_ERROR;
 80073e2:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 80073e4:	2900      	cmp	r1, #0
 80073e6:	d037      	beq.n	8007458 <HAL_UART_Transmit_DMA+0x84>
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d035      	beq.n	8007458 <HAL_UART_Transmit_DMA+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073ec:	2280      	movs	r2, #128	; 0x80
 80073ee:	68a0      	ldr	r0, [r4, #8]
 80073f0:	0152      	lsls	r2, r2, #5
 80073f2:	4290      	cmp	r0, r2
 80073f4:	d106      	bne.n	8007404 <HAL_UART_Transmit_DMA+0x30>
 80073f6:	6922      	ldr	r2, [r4, #16]
 80073f8:	2a00      	cmp	r2, #0
 80073fa:	d103      	bne.n	8007404 <HAL_UART_Transmit_DMA+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 80073fc:	3201      	adds	r2, #1
      return HAL_ERROR;
 80073fe:	0010      	movs	r0, r2
      if ((((uint32_t)pData) & 1U) != 0U)
 8007400:	4211      	tst	r1, r2
 8007402:	d129      	bne.n	8007458 <HAL_UART_Transmit_DMA+0x84>
    __HAL_LOCK(huart);
 8007404:	0025      	movs	r5, r4
 8007406:	3574      	adds	r5, #116	; 0x74
 8007408:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 800740a:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 800740c:	2a01      	cmp	r2, #1
 800740e:	d023      	beq.n	8007458 <HAL_UART_Transmit_DMA+0x84>
 8007410:	2201      	movs	r2, #1
 8007412:	702a      	strb	r2, [r5, #0]
    huart->TxXferSize  = Size;
 8007414:	0022      	movs	r2, r4
 8007416:	3250      	adds	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 8007418:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800741a:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 800741c:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 800741e:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007420:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 8007422:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007424:	1d27      	adds	r7, r4, #4
 8007426:	67fe      	str	r6, [r7, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007428:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 800742a:	42b0      	cmp	r0, r6
 800742c:	d015      	beq.n	800745a <HAL_UART_Transmit_DMA+0x86>
 800742e:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 8007430:	6386      	str	r6, [r0, #56]	; 0x38
 8007432:	9201      	str	r2, [sp, #4]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007434:	4a0e      	ldr	r2, [pc, #56]	; (8007470 <HAL_UART_Transmit_DMA+0x9c>)
 8007436:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007438:	4a0e      	ldr	r2, [pc, #56]	; (8007474 <HAL_UART_Transmit_DMA+0xa0>)
 800743a:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800743c:	4a0e      	ldr	r2, [pc, #56]	; (8007478 <HAL_UART_Transmit_DMA+0xa4>)
 800743e:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007440:	9a01      	ldr	r2, [sp, #4]
 8007442:	3228      	adds	r2, #40	; 0x28
 8007444:	f7fd ff54 	bl	80052f0 <HAL_DMA_Start_IT>
 8007448:	42b0      	cmp	r0, r6
 800744a:	d006      	beq.n	800745a <HAL_UART_Transmit_DMA+0x86>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800744c:	2310      	movs	r3, #16
        return HAL_ERROR;
 800744e:	2001      	movs	r0, #1
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007450:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8007452:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 8007454:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 8007456:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8007458:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800745a:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 800745c:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800745e:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8007460:	3474      	adds	r4, #116	; 0x74
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007462:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8007464:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007466:	6899      	ldr	r1, [r3, #8]
 8007468:	1892      	adds	r2, r2, r2
 800746a:	430a      	orrs	r2, r1
 800746c:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 800746e:	e7f3      	b.n	8007458 <HAL_UART_Transmit_DMA+0x84>
 8007470:	0800747d 	.word	0x0800747d
 8007474:	080074b3 	.word	0x080074b3
 8007478:	080074bf 	.word	0x080074bf

0800747c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800747c:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800747e:	681b      	ldr	r3, [r3, #0]
{
 8007480:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	2320      	movs	r3, #32
 8007486:	0011      	movs	r1, r2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007488:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800748a:	4019      	ands	r1, r3
 800748c:	421a      	tst	r2, r3
 800748e:	d10c      	bne.n	80074aa <UART_DMATransmitCplt+0x2e>
  {
    huart->TxXferCount = 0U;
 8007490:	0003      	movs	r3, r0
 8007492:	3352      	adds	r3, #82	; 0x52
 8007494:	8019      	strh	r1, [r3, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007496:	2180      	movs	r1, #128	; 0x80
 8007498:	6803      	ldr	r3, [r0, #0]
 800749a:	689a      	ldr	r2, [r3, #8]
 800749c:	438a      	bics	r2, r1
 800749e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80074a0:	2240      	movs	r2, #64	; 0x40
 80074a2:	6819      	ldr	r1, [r3, #0]
 80074a4:	430a      	orrs	r2, r1
 80074a6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074a8:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 80074aa:	f7fd f847 	bl	800453c <HAL_UART_TxCpltCallback>
}
 80074ae:	e7fb      	b.n	80074a8 <UART_DMATransmitCplt+0x2c>

080074b0 <HAL_UART_TxHalfCpltCallback>:
 80074b0:	4770      	bx	lr

080074b2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074b2:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80074b4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80074b6:	f7ff fffb 	bl	80074b0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074ba:	bd10      	pop	{r4, pc}

080074bc <HAL_UART_ErrorCallback>:
 80074bc:	4770      	bx	lr

080074be <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80074be:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074c0:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80074c2:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 80074c4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80074c6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80074c8:	6898      	ldr	r0, [r3, #8]
 80074ca:	0600      	lsls	r0, r0, #24
 80074cc:	d50b      	bpl.n	80074e6 <UART_DMAError+0x28>
 80074ce:	2a21      	cmp	r2, #33	; 0x21
 80074d0:	d109      	bne.n	80074e6 <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80074d2:	0022      	movs	r2, r4
 80074d4:	2000      	movs	r0, #0
 80074d6:	3252      	adds	r2, #82	; 0x52
 80074d8:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	30c0      	adds	r0, #192	; 0xc0
 80074de:	4382      	bics	r2, r0
 80074e0:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 80074e2:	2220      	movs	r2, #32
 80074e4:	67a2      	str	r2, [r4, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	065b      	lsls	r3, r3, #25
 80074ea:	d508      	bpl.n	80074fe <UART_DMAError+0x40>
 80074ec:	2922      	cmp	r1, #34	; 0x22
 80074ee:	d106      	bne.n	80074fe <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80074f0:	0023      	movs	r3, r4
 80074f2:	2200      	movs	r2, #0
 80074f4:	335a      	adds	r3, #90	; 0x5a
    UART_EndRxTransfer(huart);
 80074f6:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 80074f8:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 80074fa:	f7ff ff51 	bl	80073a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80074fe:	2310      	movs	r3, #16
 8007500:	1d22      	adds	r2, r4, #4
 8007502:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007504:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007506:	430b      	orrs	r3, r1
 8007508:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 800750a:	f7ff ffd7 	bl	80074bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800750e:	bd10      	pop	{r4, pc}

08007510 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007510:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	0002      	movs	r2, r0
{
 8007516:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8007518:	325a      	adds	r2, #90	; 0x5a
 800751a:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 800751c:	3a08      	subs	r2, #8
 800751e:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007520:	f7ff ffcc 	bl	80074bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007524:	bd10      	pop	{r4, pc}

08007526 <HAL_UARTEx_RxEventCallback>:
}
 8007526:	4770      	bx	lr

08007528 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007528:	6803      	ldr	r3, [r0, #0]
{
 800752a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800752c:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800752e:	4a85      	ldr	r2, [pc, #532]	; (8007744 <HAL_UART_IRQHandler+0x21c>)
{
 8007530:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007532:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007534:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8007536:	4211      	tst	r1, r2
 8007538:	d10b      	bne.n	8007552 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800753a:	2220      	movs	r2, #32
 800753c:	4211      	tst	r1, r2
 800753e:	d100      	bne.n	8007542 <HAL_UART_IRQHandler+0x1a>
 8007540:	e076      	b.n	8007630 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007542:	4210      	tst	r0, r2
 8007544:	d100      	bne.n	8007548 <HAL_UART_IRQHandler+0x20>
 8007546:	e073      	b.n	8007630 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8007548:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 800754a:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 800754c:	2b00      	cmp	r3, #0
 800754e:	d165      	bne.n	800761c <HAL_UART_IRQHandler+0xf4>
 8007550:	e065      	b.n	800761e <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007552:	2201      	movs	r2, #1
 8007554:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007556:	4d7c      	ldr	r5, [pc, #496]	; (8007748 <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007558:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800755a:	4005      	ands	r5, r0
 800755c:	433d      	orrs	r5, r7
 800755e:	d067      	beq.n	8007630 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007560:	1d25      	adds	r5, r4, #4
 8007562:	4211      	tst	r1, r2
 8007564:	d005      	beq.n	8007572 <HAL_UART_IRQHandler+0x4a>
 8007566:	05c6      	lsls	r6, r0, #23
 8007568:	d503      	bpl.n	8007572 <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800756a:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800756c:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 800756e:	4332      	orrs	r2, r6
 8007570:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007572:	2202      	movs	r2, #2
 8007574:	4211      	tst	r1, r2
 8007576:	d006      	beq.n	8007586 <HAL_UART_IRQHandler+0x5e>
 8007578:	2f00      	cmp	r7, #0
 800757a:	d004      	beq.n	8007586 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800757c:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800757e:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8007580:	1892      	adds	r2, r2, r2
 8007582:	4332      	orrs	r2, r6
 8007584:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007586:	2204      	movs	r2, #4
 8007588:	4211      	tst	r1, r2
 800758a:	d006      	beq.n	800759a <HAL_UART_IRQHandler+0x72>
 800758c:	2f00      	cmp	r7, #0
 800758e:	d004      	beq.n	800759a <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007590:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007592:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8007594:	3a02      	subs	r2, #2
 8007596:	4332      	orrs	r2, r6
 8007598:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 800759a:	2208      	movs	r2, #8
 800759c:	4211      	tst	r1, r2
 800759e:	d007      	beq.n	80075b0 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80075a0:	2620      	movs	r6, #32
 80075a2:	4006      	ands	r6, r0
 80075a4:	433e      	orrs	r6, r7
 80075a6:	d003      	beq.n	80075b0 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075a8:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80075aa:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 80075ac:	4332      	orrs	r2, r6
 80075ae:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80075b0:	2280      	movs	r2, #128	; 0x80
 80075b2:	0112      	lsls	r2, r2, #4
 80075b4:	4211      	tst	r1, r2
 80075b6:	d006      	beq.n	80075c6 <HAL_UART_IRQHandler+0x9e>
 80075b8:	0146      	lsls	r6, r0, #5
 80075ba:	d504      	bpl.n	80075c6 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075bc:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80075be:	2320      	movs	r3, #32
 80075c0:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80075c2:	4313      	orrs	r3, r2
 80075c4:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075c6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d028      	beq.n	800761e <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80075cc:	2320      	movs	r3, #32
 80075ce:	4219      	tst	r1, r3
 80075d0:	d006      	beq.n	80075e0 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80075d2:	4218      	tst	r0, r3
 80075d4:	d004      	beq.n	80075e0 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 80075d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d001      	beq.n	80075e0 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 80075dc:	0020      	movs	r0, r4
 80075de:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075e0:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 80075e2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075e4:	2740      	movs	r7, #64	; 0x40
 80075e6:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075e8:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075ea:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075ec:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 80075ee:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075f0:	431e      	orrs	r6, r3
 80075f2:	d019      	beq.n	8007628 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 80075f4:	f7ff fed4 	bl	80073a0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	423a      	tst	r2, r7
 80075fe:	d00f      	beq.n	8007620 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007600:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8007602:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007604:	43ba      	bics	r2, r7
 8007606:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8007608:	2800      	cmp	r0, #0
 800760a:	d009      	beq.n	8007620 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800760c:	4b4f      	ldr	r3, [pc, #316]	; (800774c <HAL_UART_IRQHandler+0x224>)
 800760e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007610:	f7fd fece 	bl	80053b0 <HAL_DMA_Abort_IT>
 8007614:	2800      	cmp	r0, #0
 8007616:	d002      	beq.n	800761e <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007618:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800761a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800761c:	4798      	blx	r3
}
 800761e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8007620:	0020      	movs	r0, r4
 8007622:	f7ff ff4b 	bl	80074bc <HAL_UART_ErrorCallback>
 8007626:	e7fa      	b.n	800761e <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8007628:	f7ff ff48 	bl	80074bc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800762c:	67ee      	str	r6, [r5, #124]	; 0x7c
 800762e:	e7f6      	b.n	800761e <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007630:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8007632:	2d01      	cmp	r5, #1
 8007634:	d161      	bne.n	80076fa <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007636:	2210      	movs	r2, #16
 8007638:	4211      	tst	r1, r2
 800763a:	d05e      	beq.n	80076fa <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800763c:	4210      	tst	r0, r2
 800763e:	d05c      	beq.n	80076fa <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007640:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007642:	6899      	ldr	r1, [r3, #8]
 8007644:	2640      	movs	r6, #64	; 0x40
 8007646:	000f      	movs	r7, r1
 8007648:	4037      	ands	r7, r6
 800764a:	4231      	tst	r1, r6
 800764c:	d038      	beq.n	80076c0 <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800764e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8007650:	680f      	ldr	r7, [r1, #0]
 8007652:	9100      	str	r1, [sp, #0]
 8007654:	6879      	ldr	r1, [r7, #4]
 8007656:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 8007658:	2900      	cmp	r1, #0
 800765a:	d0e0      	beq.n	800761e <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800765c:	2058      	movs	r0, #88	; 0x58
 800765e:	4684      	mov	ip, r0
 8007660:	44a4      	add	ip, r4
 8007662:	4660      	mov	r0, ip
 8007664:	8800      	ldrh	r0, [r0, #0]
 8007666:	4288      	cmp	r0, r1
 8007668:	d9d9      	bls.n	800761e <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 800766a:	205a      	movs	r0, #90	; 0x5a
 800766c:	4684      	mov	ip, r0
 800766e:	44a4      	add	ip, r4
 8007670:	4660      	mov	r0, ip
 8007672:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007674:	683f      	ldr	r7, [r7, #0]
 8007676:	2120      	movs	r1, #32
 8007678:	0038      	movs	r0, r7
 800767a:	4008      	ands	r0, r1
 800767c:	9001      	str	r0, [sp, #4]
 800767e:	420f      	tst	r7, r1
 8007680:	d112      	bne.n	80076a8 <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007682:	681f      	ldr	r7, [r3, #0]
 8007684:	4832      	ldr	r0, [pc, #200]	; (8007750 <HAL_UART_IRQHandler+0x228>)
 8007686:	4007      	ands	r7, r0
 8007688:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768a:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800768c:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768e:	43af      	bics	r7, r5
 8007690:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007692:	689d      	ldr	r5, [r3, #8]
 8007694:	43b5      	bics	r5, r6
 8007696:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8007698:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800769a:	9901      	ldr	r1, [sp, #4]
 800769c:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800769e:	6819      	ldr	r1, [r3, #0]
 80076a0:	4391      	bics	r1, r2
 80076a2:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076a4:	f7fd fe64 	bl	8005370 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076a8:	0023      	movs	r3, r4
 80076aa:	0022      	movs	r2, r4
 80076ac:	335a      	adds	r3, #90	; 0x5a
 80076ae:	3258      	adds	r2, #88	; 0x58
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	8811      	ldrh	r1, [r2, #0]
 80076b4:	1ac9      	subs	r1, r1, r3
 80076b6:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076b8:	0020      	movs	r0, r4
 80076ba:	f7ff ff34 	bl	8007526 <HAL_UARTEx_RxEventCallback>
 80076be:	e7ae      	b.n	800761e <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076c0:	0026      	movs	r6, r4
 80076c2:	365a      	adds	r6, #90	; 0x5a
 80076c4:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 80076c6:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076c8:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 80076ca:	2900      	cmp	r1, #0
 80076cc:	d0a7      	beq.n	800761e <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076ce:	0021      	movs	r1, r4
 80076d0:	3158      	adds	r1, #88	; 0x58
 80076d2:	8809      	ldrh	r1, [r1, #0]
 80076d4:	1a09      	subs	r1, r1, r0
 80076d6:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 80076d8:	2900      	cmp	r1, #0
 80076da:	d0a0      	beq.n	800761e <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076dc:	6818      	ldr	r0, [r3, #0]
 80076de:	4e1d      	ldr	r6, [pc, #116]	; (8007754 <HAL_UART_IRQHandler+0x22c>)
 80076e0:	4030      	ands	r0, r6
 80076e2:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e4:	6898      	ldr	r0, [r3, #8]
 80076e6:	43a8      	bics	r0, r5
 80076e8:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80076ea:	2020      	movs	r0, #32
 80076ec:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ee:	6627      	str	r7, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076f0:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 80076f2:	6667      	str	r7, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076f4:	4390      	bics	r0, r2
 80076f6:	6018      	str	r0, [r3, #0]
 80076f8:	e7de      	b.n	80076b8 <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80076fa:	2280      	movs	r2, #128	; 0x80
 80076fc:	0352      	lsls	r2, r2, #13
 80076fe:	4211      	tst	r1, r2
 8007700:	d006      	beq.n	8007710 <HAL_UART_IRQHandler+0x1e8>
 8007702:	0275      	lsls	r5, r6, #9
 8007704:	d504      	bpl.n	8007710 <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 8007706:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007708:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800770a:	f000 fb55 	bl	8007db8 <HAL_UARTEx_WakeupCallback>
    return;
 800770e:	e786      	b.n	800761e <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007710:	2280      	movs	r2, #128	; 0x80
 8007712:	4211      	tst	r1, r2
 8007714:	d003      	beq.n	800771e <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007716:	4210      	tst	r0, r2
 8007718:	d001      	beq.n	800771e <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 800771a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800771c:	e715      	b.n	800754a <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800771e:	2540      	movs	r5, #64	; 0x40
 8007720:	4229      	tst	r1, r5
 8007722:	d100      	bne.n	8007726 <HAL_UART_IRQHandler+0x1fe>
 8007724:	e77b      	b.n	800761e <HAL_UART_IRQHandler+0xf6>
 8007726:	4228      	tst	r0, r5
 8007728:	d100      	bne.n	800772c <HAL_UART_IRQHandler+0x204>
 800772a:	e778      	b.n	800761e <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800772c:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800772e:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007730:	43aa      	bics	r2, r5
 8007732:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007734:	2320      	movs	r3, #32
 8007736:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8007738:	2300      	movs	r3, #0
 800773a:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 800773c:	f7fc fefe 	bl	800453c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007740:	e76d      	b.n	800761e <HAL_UART_IRQHandler+0xf6>
 8007742:	46c0      	nop			; (mov r8, r8)
 8007744:	0000080f 	.word	0x0000080f
 8007748:	04000120 	.word	0x04000120
 800774c:	08007511 	.word	0x08007511
 8007750:	fffffeff 	.word	0xfffffeff
 8007754:	fffffedf 	.word	0xfffffedf

08007758 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007758:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 800775a:	b510      	push	{r4, lr}
 800775c:	6803      	ldr	r3, [r0, #0]
 800775e:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007760:	2a22      	cmp	r2, #34	; 0x22
 8007762:	d134      	bne.n	80077ce <UART_RxISR_8BIT+0x76>
  uint16_t uhMask = huart->Mask;
 8007764:	0002      	movs	r2, r0
 8007766:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800776a:	8812      	ldrh	r2, [r2, #0]
 800776c:	4013      	ands	r3, r2
 800776e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8007770:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8007772:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8007774:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8007776:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8007778:	3301      	adds	r3, #1
 800777a:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800777c:	8813      	ldrh	r3, [r2, #0]
 800777e:	3b01      	subs	r3, #1
 8007780:	b29b      	uxth	r3, r3
 8007782:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8007784:	8813      	ldrh	r3, [r2, #0]
 8007786:	b299      	uxth	r1, r3
 8007788:	2b00      	cmp	r3, #0
 800778a:	d11b      	bne.n	80077c4 <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800778c:	6803      	ldr	r3, [r0, #0]
 800778e:	4812      	ldr	r0, [pc, #72]	; (80077d8 <UART_RxISR_8BIT+0x80>)
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	4002      	ands	r2, r0
 8007794:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	3023      	adds	r0, #35	; 0x23
 800779a:	30ff      	adds	r0, #255	; 0xff
 800779c:	4382      	bics	r2, r0
 800779e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80077a0:	2220      	movs	r2, #32
 80077a2:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a4:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 80077a6:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077a8:	4282      	cmp	r2, r0
 80077aa:	d10c      	bne.n	80077c6 <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ac:	2110      	movs	r1, #16
 80077ae:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077b0:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077b2:	438a      	bics	r2, r1
 80077b4:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80077b6:	0023      	movs	r3, r4
 80077b8:	3358      	adds	r3, #88	; 0x58
 80077ba:	8819      	ldrh	r1, [r3, #0]
 80077bc:	f7ff feb3 	bl	8007526 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077c0:	2300      	movs	r3, #0
 80077c2:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077c4:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 80077c6:	0020      	movs	r0, r4
 80077c8:	f7fc fec0 	bl	800454c <HAL_UART_RxCpltCallback>
 80077cc:	e7f8      	b.n	80077c0 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077ce:	2208      	movs	r2, #8
 80077d0:	6999      	ldr	r1, [r3, #24]
 80077d2:	430a      	orrs	r2, r1
 80077d4:	619a      	str	r2, [r3, #24]
}
 80077d6:	e7f5      	b.n	80077c4 <UART_RxISR_8BIT+0x6c>
 80077d8:	fffffedf 	.word	0xfffffedf

080077dc <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077dc:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 80077de:	b510      	push	{r4, lr}
 80077e0:	6803      	ldr	r3, [r0, #0]
 80077e2:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077e4:	2a22      	cmp	r2, #34	; 0x22
 80077e6:	d131      	bne.n	800784c <UART_RxISR_16BIT+0x70>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077e8:	6d42      	ldr	r2, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 80077ea:	305c      	adds	r0, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80077ee:	8800      	ldrh	r0, [r0, #0]
 80077f0:	4001      	ands	r1, r0
 80077f2:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 80077f4:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 80077f6:	3202      	adds	r2, #2
    huart->RxXferCount--;
 80077f8:	315a      	adds	r1, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 80077fa:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 80077fc:	880a      	ldrh	r2, [r1, #0]
 80077fe:	3a01      	subs	r2, #1
 8007800:	b292      	uxth	r2, r2
 8007802:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8007804:	880a      	ldrh	r2, [r1, #0]
 8007806:	b291      	uxth	r1, r2
 8007808:	2a00      	cmp	r2, #0
 800780a:	d11a      	bne.n	8007842 <UART_RxISR_16BIT+0x66>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	4812      	ldr	r0, [pc, #72]	; (8007858 <UART_RxISR_16BIT+0x7c>)
 8007810:	4002      	ands	r2, r0
 8007812:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007814:	689a      	ldr	r2, [r3, #8]
 8007816:	3023      	adds	r0, #35	; 0x23
 8007818:	30ff      	adds	r0, #255	; 0xff
 800781a:	4382      	bics	r2, r0
 800781c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800781e:	2220      	movs	r2, #32
 8007820:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007822:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 8007824:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007826:	4282      	cmp	r2, r0
 8007828:	d10c      	bne.n	8007844 <UART_RxISR_16BIT+0x68>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800782a:	2110      	movs	r1, #16
 800782c:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800782e:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007830:	438a      	bics	r2, r1
 8007832:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007834:	0023      	movs	r3, r4
 8007836:	3358      	adds	r3, #88	; 0x58
 8007838:	8819      	ldrh	r1, [r3, #0]
 800783a:	f7ff fe74 	bl	8007526 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800783e:	2300      	movs	r3, #0
 8007840:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007842:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8007844:	0020      	movs	r0, r4
 8007846:	f7fc fe81 	bl	800454c <HAL_UART_RxCpltCallback>
 800784a:	e7f8      	b.n	800783e <UART_RxISR_16BIT+0x62>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800784c:	2208      	movs	r2, #8
 800784e:	6999      	ldr	r1, [r3, #24]
 8007850:	430a      	orrs	r2, r1
 8007852:	619a      	str	r2, [r3, #24]
}
 8007854:	e7f5      	b.n	8007842 <UART_RxISR_16BIT+0x66>
 8007856:	46c0      	nop			; (mov r8, r8)
 8007858:	fffffedf 	.word	0xfffffedf

0800785c <UART_SetConfig>:
{
 800785c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007860:	6925      	ldr	r5, [r4, #16]
 8007862:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8007864:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007866:	4329      	orrs	r1, r5
 8007868:	6965      	ldr	r5, [r4, #20]
 800786a:	69c3      	ldr	r3, [r0, #28]
 800786c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800786e:	6810      	ldr	r0, [r2, #0]
 8007870:	4d79      	ldr	r5, [pc, #484]	; (8007a58 <UART_SetConfig+0x1fc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007872:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007874:	4028      	ands	r0, r5
 8007876:	4301      	orrs	r1, r0
 8007878:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800787a:	6851      	ldr	r1, [r2, #4]
 800787c:	4877      	ldr	r0, [pc, #476]	; (8007a5c <UART_SetConfig+0x200>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800787e:	4d78      	ldr	r5, [pc, #480]	; (8007a60 <UART_SetConfig+0x204>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007880:	4001      	ands	r1, r0
 8007882:	68e0      	ldr	r0, [r4, #12]
 8007884:	4301      	orrs	r1, r0
 8007886:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007888:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800788a:	42aa      	cmp	r2, r5
 800788c:	d001      	beq.n	8007892 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 800788e:	6a21      	ldr	r1, [r4, #32]
 8007890:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007892:	6891      	ldr	r1, [r2, #8]
 8007894:	4e73      	ldr	r6, [pc, #460]	; (8007a64 <UART_SetConfig+0x208>)
 8007896:	4031      	ands	r1, r6
 8007898:	4301      	orrs	r1, r0
 800789a:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800789c:	4972      	ldr	r1, [pc, #456]	; (8007a68 <UART_SetConfig+0x20c>)
 800789e:	428a      	cmp	r2, r1
 80078a0:	d10f      	bne.n	80078c2 <UART_SetConfig+0x66>
 80078a2:	2103      	movs	r1, #3
 80078a4:	4a71      	ldr	r2, [pc, #452]	; (8007a6c <UART_SetConfig+0x210>)
 80078a6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80078a8:	400a      	ands	r2, r1
 80078aa:	3a01      	subs	r2, #1
 80078ac:	4970      	ldr	r1, [pc, #448]	; (8007a70 <UART_SetConfig+0x214>)
 80078ae:	2a02      	cmp	r2, #2
 80078b0:	d910      	bls.n	80078d4 <UART_SetConfig+0x78>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078b2:	2280      	movs	r2, #128	; 0x80
 80078b4:	0212      	lsls	r2, r2, #8
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d000      	beq.n	80078bc <UART_SetConfig+0x60>
 80078ba:	e0a3      	b.n	8007a04 <UART_SetConfig+0x1a8>
        pclk = HAL_RCC_GetPCLK2Freq();
 80078bc:	f7fe ff20 	bl	8006700 <HAL_RCC_GetPCLK2Freq>
 80078c0:	e0c5      	b.n	8007a4e <UART_SetConfig+0x1f2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078c2:	496c      	ldr	r1, [pc, #432]	; (8007a74 <UART_SetConfig+0x218>)
 80078c4:	428a      	cmp	r2, r1
 80078c6:	d118      	bne.n	80078fa <UART_SetConfig+0x9e>
 80078c8:	200c      	movs	r0, #12
 80078ca:	4a68      	ldr	r2, [pc, #416]	; (8007a6c <UART_SetConfig+0x210>)
 80078cc:	4968      	ldr	r1, [pc, #416]	; (8007a70 <UART_SetConfig+0x214>)
 80078ce:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80078d0:	3103      	adds	r1, #3
 80078d2:	4002      	ands	r2, r0
 80078d4:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80078d6:	2280      	movs	r2, #128	; 0x80
 80078d8:	0212      	lsls	r2, r2, #8
 80078da:	4293      	cmp	r3, r2
 80078dc:	d000      	beq.n	80078e0 <UART_SetConfig+0x84>
 80078de:	e083      	b.n	80079e8 <UART_SetConfig+0x18c>
    switch (clocksource)
 80078e0:	2808      	cmp	r0, #8
 80078e2:	d824      	bhi.n	800792e <UART_SetConfig+0xd2>
 80078e4:	f7f8 fc2c 	bl	8000140 <__gnu_thumb1_case_shi>
 80078e8:	ffea00b1 	.word	0xffea00b1
 80078ec:	0023005c 	.word	0x0023005c
 80078f0:	0023007d 	.word	0x0023007d
 80078f4:	00230023 	.word	0x00230023
 80078f8:	0067      	.short	0x0067
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078fa:	495f      	ldr	r1, [pc, #380]	; (8007a78 <UART_SetConfig+0x21c>)
 80078fc:	428a      	cmp	r2, r1
 80078fe:	d100      	bne.n	8007902 <UART_SetConfig+0xa6>
 8007900:	e09f      	b.n	8007a42 <UART_SetConfig+0x1e6>
 8007902:	495e      	ldr	r1, [pc, #376]	; (8007a7c <UART_SetConfig+0x220>)
 8007904:	428a      	cmp	r2, r1
 8007906:	d100      	bne.n	800790a <UART_SetConfig+0xae>
 8007908:	e09b      	b.n	8007a42 <UART_SetConfig+0x1e6>
 800790a:	42aa      	cmp	r2, r5
 800790c:	d10f      	bne.n	800792e <UART_SetConfig+0xd2>
 800790e:	21c0      	movs	r1, #192	; 0xc0
 8007910:	2080      	movs	r0, #128	; 0x80
 8007912:	4a56      	ldr	r2, [pc, #344]	; (8007a6c <UART_SetConfig+0x210>)
 8007914:	0109      	lsls	r1, r1, #4
 8007916:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007918:	0100      	lsls	r0, r0, #4
 800791a:	400b      	ands	r3, r1
 800791c:	4283      	cmp	r3, r0
 800791e:	d016      	beq.n	800794e <UART_SetConfig+0xf2>
 8007920:	d807      	bhi.n	8007932 <UART_SetConfig+0xd6>
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <UART_SetConfig+0xe0>
 8007926:	2280      	movs	r2, #128	; 0x80
 8007928:	00d2      	lsls	r2, r2, #3
 800792a:	4293      	cmp	r3, r2
 800792c:	d035      	beq.n	800799a <UART_SetConfig+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800792e:	2001      	movs	r0, #1
 8007930:	e009      	b.n	8007946 <UART_SetConfig+0xea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007932:	428b      	cmp	r3, r1
 8007934:	d1fb      	bne.n	800792e <UART_SetConfig+0xd2>
 8007936:	2080      	movs	r0, #128	; 0x80
 8007938:	0200      	lsls	r0, r0, #8
 800793a:	e012      	b.n	8007962 <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 800793c:	f7fe fed0 	bl	80066e0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007940:	2800      	cmp	r0, #0
 8007942:	d10e      	bne.n	8007962 <UART_SetConfig+0x106>
 8007944:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 800794a:	66a3      	str	r3, [r4, #104]	; 0x68
}
 800794c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800794e:	2310      	movs	r3, #16
 8007950:	6810      	ldr	r0, [r2, #0]
 8007952:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007954:	4243      	negs	r3, r0
 8007956:	4158      	adcs	r0, r3
 8007958:	4b49      	ldr	r3, [pc, #292]	; (8007a80 <UART_SetConfig+0x224>)
 800795a:	4240      	negs	r0, r0
 800795c:	4018      	ands	r0, r3
 800795e:	4b49      	ldr	r3, [pc, #292]	; (8007a84 <UART_SetConfig+0x228>)
 8007960:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007962:	2203      	movs	r2, #3
 8007964:	6863      	ldr	r3, [r4, #4]
 8007966:	435a      	muls	r2, r3
 8007968:	4282      	cmp	r2, r0
 800796a:	d8e0      	bhi.n	800792e <UART_SetConfig+0xd2>
          (pclk > (4096U * huart->Init.BaudRate)))
 800796c:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800796e:	4282      	cmp	r2, r0
 8007970:	d3dd      	bcc.n	800792e <UART_SetConfig+0xd2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007972:	2700      	movs	r7, #0
 8007974:	0e02      	lsrs	r2, r0, #24
 8007976:	0201      	lsls	r1, r0, #8
 8007978:	085e      	lsrs	r6, r3, #1
 800797a:	1989      	adds	r1, r1, r6
 800797c:	417a      	adcs	r2, r7
 800797e:	0008      	movs	r0, r1
 8007980:	0011      	movs	r1, r2
 8007982:	001a      	movs	r2, r3
 8007984:	003b      	movs	r3, r7
 8007986:	f7f8 fddd 	bl	8000544 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800798a:	4b3f      	ldr	r3, [pc, #252]	; (8007a88 <UART_SetConfig+0x22c>)
 800798c:	18c2      	adds	r2, r0, r3
 800798e:	4b3f      	ldr	r3, [pc, #252]	; (8007a8c <UART_SetConfig+0x230>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007990:	429a      	cmp	r2, r3
 8007992:	d8cc      	bhi.n	800792e <UART_SetConfig+0xd2>
        huart->Instance->BRR = usartdiv;
 8007994:	6823      	ldr	r3, [r4, #0]
 8007996:	60d8      	str	r0, [r3, #12]
 8007998:	e7d4      	b.n	8007944 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 800799a:	f7fe faff 	bl	8005f9c <HAL_RCC_GetSysClockFreq>
        break;
 800799e:	e7cf      	b.n	8007940 <UART_SetConfig+0xe4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079a0:	4b32      	ldr	r3, [pc, #200]	; (8007a6c <UART_SetConfig+0x210>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80079a2:	4a38      	ldr	r2, [pc, #224]	; (8007a84 <UART_SetConfig+0x228>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079a4:	6818      	ldr	r0, [r3, #0]
 80079a6:	2310      	movs	r3, #16
 80079a8:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80079aa:	4243      	negs	r3, r0
 80079ac:	4158      	adcs	r0, r3
 80079ae:	4b34      	ldr	r3, [pc, #208]	; (8007a80 <UART_SetConfig+0x224>)
 80079b0:	4240      	negs	r0, r0
 80079b2:	4003      	ands	r3, r0
 80079b4:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079b6:	0058      	lsls	r0, r3, #1
 80079b8:	6863      	ldr	r3, [r4, #4]
 80079ba:	6861      	ldr	r1, [r4, #4]
 80079bc:	085b      	lsrs	r3, r3, #1
 80079be:	18c0      	adds	r0, r0, r3
 80079c0:	f7f8 fbd2 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079c4:	4932      	ldr	r1, [pc, #200]	; (8007a90 <UART_SetConfig+0x234>)
 80079c6:	b282      	uxth	r2, r0
 80079c8:	3a10      	subs	r2, #16
 80079ca:	0403      	lsls	r3, r0, #16
 80079cc:	428a      	cmp	r2, r1
 80079ce:	d8ae      	bhi.n	800792e <UART_SetConfig+0xd2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079d0:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079d2:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80079d4:	4390      	bics	r0, r2
 80079d6:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 80079d8:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80079da:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80079dc:	4318      	orrs	r0, r3
 80079de:	60d0      	str	r0, [r2, #12]
 80079e0:	e7b0      	b.n	8007944 <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 80079e2:	f7fe fadb 	bl	8005f9c <HAL_RCC_GetSysClockFreq>
 80079e6:	e032      	b.n	8007a4e <UART_SetConfig+0x1f2>
    switch (clocksource)
 80079e8:	2808      	cmp	r0, #8
 80079ea:	d8a0      	bhi.n	800792e <UART_SetConfig+0xd2>
 80079ec:	f7f8 fb94 	bl	8000118 <__gnu_thumb1_case_sqi>
 80079f0:	9f0d0a05 	.word	0x9f0d0a05
 80079f4:	9f9f9f23 	.word	0x9f9f9f23
 80079f8:	26          	.byte	0x26
 80079f9:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 80079fa:	f7fe fe71 	bl	80066e0 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d0a0      	beq.n	8007944 <UART_SetConfig+0xe8>
 8007a02:	e00d      	b.n	8007a20 <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a04:	f7fe fe7c 	bl	8006700 <HAL_RCC_GetPCLK2Freq>
        break;
 8007a08:	e7f9      	b.n	80079fe <UART_SetConfig+0x1a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a0a:	4b18      	ldr	r3, [pc, #96]	; (8007a6c <UART_SetConfig+0x210>)
 8007a0c:	6818      	ldr	r0, [r3, #0]
 8007a0e:	2310      	movs	r3, #16
 8007a10:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007a12:	4243      	negs	r3, r0
 8007a14:	4158      	adcs	r0, r3
 8007a16:	4b1a      	ldr	r3, [pc, #104]	; (8007a80 <UART_SetConfig+0x224>)
 8007a18:	4240      	negs	r0, r0
 8007a1a:	4018      	ands	r0, r3
 8007a1c:	4b19      	ldr	r3, [pc, #100]	; (8007a84 <UART_SetConfig+0x228>)
 8007a1e:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007a20:	6863      	ldr	r3, [r4, #4]
 8007a22:	6861      	ldr	r1, [r4, #4]
 8007a24:	085b      	lsrs	r3, r3, #1
 8007a26:	1818      	adds	r0, r3, r0
 8007a28:	f7f8 fb9e 	bl	8000168 <__udivsi3>
 8007a2c:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a2e:	0002      	movs	r2, r0
 8007a30:	4b17      	ldr	r3, [pc, #92]	; (8007a90 <UART_SetConfig+0x234>)
 8007a32:	3a10      	subs	r2, #16
 8007a34:	e7ac      	b.n	8007990 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetSysClockFreq();
 8007a36:	f7fe fab1 	bl	8005f9c <HAL_RCC_GetSysClockFreq>
        break;
 8007a3a:	e7e0      	b.n	80079fe <UART_SetConfig+0x1a2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a3c:	2080      	movs	r0, #128	; 0x80
 8007a3e:	0200      	lsls	r0, r0, #8
 8007a40:	e7ee      	b.n	8007a20 <UART_SetConfig+0x1c4>
 8007a42:	2280      	movs	r2, #128	; 0x80
 8007a44:	0212      	lsls	r2, r2, #8
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d1d7      	bne.n	80079fa <UART_SetConfig+0x19e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a4a:	f7fe fe49 	bl	80066e0 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8007a4e:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8007a50:	d100      	bne.n	8007a54 <UART_SetConfig+0x1f8>
 8007a52:	e777      	b.n	8007944 <UART_SetConfig+0xe8>
 8007a54:	e7af      	b.n	80079b6 <UART_SetConfig+0x15a>
 8007a56:	46c0      	nop			; (mov r8, r8)
 8007a58:	efff69f3 	.word	0xefff69f3
 8007a5c:	ffffcfff 	.word	0xffffcfff
 8007a60:	40004800 	.word	0x40004800
 8007a64:	fffff4ff 	.word	0xfffff4ff
 8007a68:	40013800 	.word	0x40013800
 8007a6c:	40021000 	.word	0x40021000
 8007a70:	0801128d 	.word	0x0801128d
 8007a74:	40004400 	.word	0x40004400
 8007a78:	40004c00 	.word	0x40004c00
 8007a7c:	40005000 	.word	0x40005000
 8007a80:	00b71b00 	.word	0x00b71b00
 8007a84:	003d0900 	.word	0x003d0900
 8007a88:	fffffd00 	.word	0xfffffd00
 8007a8c:	000ffcff 	.word	0x000ffcff
 8007a90:	0000ffef 	.word	0x0000ffef

08007a94 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a94:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8007a96:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a98:	07da      	lsls	r2, r3, #31
 8007a9a:	d506      	bpl.n	8007aaa <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a9c:	6801      	ldr	r1, [r0, #0]
 8007a9e:	4c28      	ldr	r4, [pc, #160]	; (8007b40 <UART_AdvFeatureConfig+0xac>)
 8007aa0:	684a      	ldr	r2, [r1, #4]
 8007aa2:	4022      	ands	r2, r4
 8007aa4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8007aa6:	4322      	orrs	r2, r4
 8007aa8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007aaa:	079a      	lsls	r2, r3, #30
 8007aac:	d506      	bpl.n	8007abc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007aae:	6801      	ldr	r1, [r0, #0]
 8007ab0:	4c24      	ldr	r4, [pc, #144]	; (8007b44 <UART_AdvFeatureConfig+0xb0>)
 8007ab2:	684a      	ldr	r2, [r1, #4]
 8007ab4:	4022      	ands	r2, r4
 8007ab6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007ab8:	4322      	orrs	r2, r4
 8007aba:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007abc:	075a      	lsls	r2, r3, #29
 8007abe:	d506      	bpl.n	8007ace <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007ac0:	6801      	ldr	r1, [r0, #0]
 8007ac2:	4c21      	ldr	r4, [pc, #132]	; (8007b48 <UART_AdvFeatureConfig+0xb4>)
 8007ac4:	684a      	ldr	r2, [r1, #4]
 8007ac6:	4022      	ands	r2, r4
 8007ac8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007aca:	4322      	orrs	r2, r4
 8007acc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ace:	071a      	lsls	r2, r3, #28
 8007ad0:	d506      	bpl.n	8007ae0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ad2:	6801      	ldr	r1, [r0, #0]
 8007ad4:	4c1d      	ldr	r4, [pc, #116]	; (8007b4c <UART_AdvFeatureConfig+0xb8>)
 8007ad6:	684a      	ldr	r2, [r1, #4]
 8007ad8:	4022      	ands	r2, r4
 8007ada:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007adc:	4322      	orrs	r2, r4
 8007ade:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ae0:	06da      	lsls	r2, r3, #27
 8007ae2:	d506      	bpl.n	8007af2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ae4:	6801      	ldr	r1, [r0, #0]
 8007ae6:	4c1a      	ldr	r4, [pc, #104]	; (8007b50 <UART_AdvFeatureConfig+0xbc>)
 8007ae8:	688a      	ldr	r2, [r1, #8]
 8007aea:	4022      	ands	r2, r4
 8007aec:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007aee:	4322      	orrs	r2, r4
 8007af0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007af2:	069a      	lsls	r2, r3, #26
 8007af4:	d506      	bpl.n	8007b04 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007af6:	6801      	ldr	r1, [r0, #0]
 8007af8:	4c16      	ldr	r4, [pc, #88]	; (8007b54 <UART_AdvFeatureConfig+0xc0>)
 8007afa:	688a      	ldr	r2, [r1, #8]
 8007afc:	4022      	ands	r2, r4
 8007afe:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007b00:	4322      	orrs	r2, r4
 8007b02:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007b04:	065a      	lsls	r2, r3, #25
 8007b06:	d510      	bpl.n	8007b2a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b08:	6801      	ldr	r1, [r0, #0]
 8007b0a:	4d13      	ldr	r5, [pc, #76]	; (8007b58 <UART_AdvFeatureConfig+0xc4>)
 8007b0c:	684a      	ldr	r2, [r1, #4]
 8007b0e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007b10:	402a      	ands	r2, r5
 8007b12:	4322      	orrs	r2, r4
 8007b14:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b16:	2280      	movs	r2, #128	; 0x80
 8007b18:	0352      	lsls	r2, r2, #13
 8007b1a:	4294      	cmp	r4, r2
 8007b1c:	d105      	bne.n	8007b2a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b1e:	684a      	ldr	r2, [r1, #4]
 8007b20:	4c0e      	ldr	r4, [pc, #56]	; (8007b5c <UART_AdvFeatureConfig+0xc8>)
 8007b22:	4022      	ands	r2, r4
 8007b24:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007b26:	4322      	orrs	r2, r4
 8007b28:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b2a:	061b      	lsls	r3, r3, #24
 8007b2c:	d506      	bpl.n	8007b3c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b2e:	6802      	ldr	r2, [r0, #0]
 8007b30:	490b      	ldr	r1, [pc, #44]	; (8007b60 <UART_AdvFeatureConfig+0xcc>)
 8007b32:	6853      	ldr	r3, [r2, #4]
 8007b34:	400b      	ands	r3, r1
 8007b36:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007b38:	430b      	orrs	r3, r1
 8007b3a:	6053      	str	r3, [r2, #4]
}
 8007b3c:	bd30      	pop	{r4, r5, pc}
 8007b3e:	46c0      	nop			; (mov r8, r8)
 8007b40:	fffdffff 	.word	0xfffdffff
 8007b44:	fffeffff 	.word	0xfffeffff
 8007b48:	fffbffff 	.word	0xfffbffff
 8007b4c:	ffff7fff 	.word	0xffff7fff
 8007b50:	ffffefff 	.word	0xffffefff
 8007b54:	ffffdfff 	.word	0xffffdfff
 8007b58:	ffefffff 	.word	0xffefffff
 8007b5c:	ff9fffff 	.word	0xff9fffff
 8007b60:	fff7ffff 	.word	0xfff7ffff

08007b64 <UART_WaitOnFlagUntilTimeout>:
{
 8007b64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b66:	2780      	movs	r7, #128	; 0x80
{
 8007b68:	0004      	movs	r4, r0
 8007b6a:	000d      	movs	r5, r1
 8007b6c:	0016      	movs	r6, r2
 8007b6e:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b70:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b72:	6822      	ldr	r2, [r4, #0]
 8007b74:	69d3      	ldr	r3, [r2, #28]
 8007b76:	402b      	ands	r3, r5
 8007b78:	1b5b      	subs	r3, r3, r5
 8007b7a:	4259      	negs	r1, r3
 8007b7c:	414b      	adcs	r3, r1
 8007b7e:	42b3      	cmp	r3, r6
 8007b80:	d001      	beq.n	8007b86 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8007b82:	2000      	movs	r0, #0
 8007b84:	e01c      	b.n	8007bc0 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8007b86:	9b08      	ldr	r3, [sp, #32]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	d0f3      	beq.n	8007b74 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b8c:	f7fc fac6 	bl	800411c <HAL_GetTick>
 8007b90:	9b01      	ldr	r3, [sp, #4]
 8007b92:	9a08      	ldr	r2, [sp, #32]
 8007b94:	1ac0      	subs	r0, r0, r3
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	4290      	cmp	r0, r2
 8007b9a:	d801      	bhi.n	8007ba0 <UART_WaitOnFlagUntilTimeout+0x3c>
 8007b9c:	2a00      	cmp	r2, #0
 8007b9e:	d110      	bne.n	8007bc2 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ba0:	681a      	ldr	r2, [r3, #0]
 8007ba2:	4913      	ldr	r1, [pc, #76]	; (8007bf0 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8007ba4:	400a      	ands	r2, r1
 8007ba6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	31a3      	adds	r1, #163	; 0xa3
 8007bac:	31ff      	adds	r1, #255	; 0xff
 8007bae:	438a      	bics	r2, r1
 8007bb0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8007bb2:	2320      	movs	r3, #32
 8007bb4:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007bb6:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8007bb8:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 8007bba:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8007bbc:	3474      	adds	r4, #116	; 0x74
 8007bbe:	7023      	strb	r3, [r4, #0]
}
 8007bc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bc2:	2104      	movs	r1, #4
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	420a      	tst	r2, r1
 8007bc8:	d0d3      	beq.n	8007b72 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bca:	69da      	ldr	r2, [r3, #28]
 8007bcc:	423a      	tst	r2, r7
 8007bce:	d0d0      	beq.n	8007b72 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007bd0:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	4906      	ldr	r1, [pc, #24]	; (8007bf0 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8007bd6:	400a      	ands	r2, r1
 8007bd8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bda:	689a      	ldr	r2, [r3, #8]
 8007bdc:	31a3      	adds	r1, #163	; 0xa3
 8007bde:	31ff      	adds	r1, #255	; 0xff
 8007be0:	438a      	bics	r2, r1
 8007be2:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8007be4:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007be6:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 8007be8:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007bea:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bec:	67d3      	str	r3, [r2, #124]	; 0x7c
 8007bee:	e7e3      	b.n	8007bb8 <UART_WaitOnFlagUntilTimeout+0x54>
 8007bf0:	fffffe5f 	.word	0xfffffe5f

08007bf4 <UART_CheckIdleState>:
{
 8007bf4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bf6:	2600      	movs	r6, #0
{
 8007bf8:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bfa:	1d03      	adds	r3, r0, #4
 8007bfc:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8007bfe:	f7fc fa8d 	bl	800411c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c02:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8007c04:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	071b      	lsls	r3, r3, #28
 8007c0a:	d416      	bmi.n	8007c3a <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	075b      	lsls	r3, r3, #29
 8007c12:	d50a      	bpl.n	8007c2a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c14:	2180      	movs	r1, #128	; 0x80
 8007c16:	4b0f      	ldr	r3, [pc, #60]	; (8007c54 <UART_CheckIdleState+0x60>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	9300      	str	r3, [sp, #0]
 8007c1c:	0020      	movs	r0, r4
 8007c1e:	002b      	movs	r3, r5
 8007c20:	03c9      	lsls	r1, r1, #15
 8007c22:	f7ff ff9f 	bl	8007b64 <UART_WaitOnFlagUntilTimeout>
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d112      	bne.n	8007c50 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 8007c2a:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c2c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8007c2e:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007c30:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c32:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8007c34:	3474      	adds	r4, #116	; 0x74
 8007c36:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8007c38:	e00b      	b.n	8007c52 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c3a:	2180      	movs	r1, #128	; 0x80
 8007c3c:	4b05      	ldr	r3, [pc, #20]	; (8007c54 <UART_CheckIdleState+0x60>)
 8007c3e:	0032      	movs	r2, r6
 8007c40:	9300      	str	r3, [sp, #0]
 8007c42:	0389      	lsls	r1, r1, #14
 8007c44:	0003      	movs	r3, r0
 8007c46:	0020      	movs	r0, r4
 8007c48:	f7ff ff8c 	bl	8007b64 <UART_WaitOnFlagUntilTimeout>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	d0dd      	beq.n	8007c0c <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8007c50:	2003      	movs	r0, #3
}
 8007c52:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8007c54:	01ffffff 	.word	0x01ffffff

08007c58 <HAL_UART_Init>:
{
 8007c58:	b510      	push	{r4, lr}
 8007c5a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8007c5c:	d101      	bne.n	8007c62 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8007c5e:	2001      	movs	r0, #1
}
 8007c60:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8007c62:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d104      	bne.n	8007c72 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8007c68:	0002      	movs	r2, r0
 8007c6a:	3274      	adds	r2, #116	; 0x74
 8007c6c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8007c6e:	f7fc fa97 	bl	80041a0 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8007c72:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8007c74:	2101      	movs	r1, #1
 8007c76:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007c78:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8007c7a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c7c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8007c7e:	438b      	bics	r3, r1
 8007c80:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c82:	f7ff fdeb 	bl	800785c <UART_SetConfig>
 8007c86:	2801      	cmp	r0, #1
 8007c88:	d0e9      	beq.n	8007c5e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8007c90:	0020      	movs	r0, r4
 8007c92:	f7ff feff 	bl	8007a94 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c96:	6823      	ldr	r3, [r4, #0]
 8007c98:	4907      	ldr	r1, [pc, #28]	; (8007cb8 <HAL_UART_Init+0x60>)
 8007c9a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8007c9c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c9e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ca0:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ca4:	689a      	ldr	r2, [r3, #8]
 8007ca6:	438a      	bics	r2, r1
 8007ca8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8007caa:	2201      	movs	r2, #1
 8007cac:	6819      	ldr	r1, [r3, #0]
 8007cae:	430a      	orrs	r2, r1
 8007cb0:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8007cb2:	f7ff ff9f 	bl	8007bf4 <UART_CheckIdleState>
 8007cb6:	e7d3      	b.n	8007c60 <HAL_UART_Init+0x8>
 8007cb8:	ffffb7ff 	.word	0xffffb7ff

08007cbc <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8007cbc:	0003      	movs	r3, r0
 8007cbe:	3358      	adds	r3, #88	; 0x58
{
 8007cc0:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8007cc2:	6541      	str	r1, [r0, #84]	; 0x54
  UART_MASK_COMPUTATION(huart);
 8007cc4:	2480      	movs	r4, #128	; 0x80
  huart->RxXferSize  = Size;
 8007cc6:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 8007cc8:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 8007cca:	2200      	movs	r2, #0
  UART_MASK_COMPUTATION(huart);
 8007ccc:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 8007cce:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8007cd0:	0164      	lsls	r4, r4, #5
 8007cd2:	3304      	adds	r3, #4
 8007cd4:	42a1      	cmp	r1, r4
 8007cd6:	d124      	bne.n	8007d22 <UART_Start_Receive_IT+0x66>
 8007cd8:	6902      	ldr	r2, [r0, #16]
 8007cda:	2a00      	cmp	r2, #0
 8007cdc:	d11f      	bne.n	8007d1e <UART_Start_Receive_IT+0x62>
 8007cde:	4a19      	ldr	r2, [pc, #100]	; (8007d44 <UART_Start_Receive_IT+0x88>)
 8007ce0:	801a      	strh	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	1d03      	adds	r3, r0, #4
 8007ce6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ce8:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cea:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cec:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cee:	6894      	ldr	r4, [r2, #8]
 8007cf0:	3b21      	subs	r3, #33	; 0x21
 8007cf2:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cf4:	2480      	movs	r4, #128	; 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cf6:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cf8:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 8007cfa:	4b13      	ldr	r3, [pc, #76]	; (8007d48 <UART_Start_Receive_IT+0x8c>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cfc:	42a1      	cmp	r1, r4
 8007cfe:	d103      	bne.n	8007d08 <UART_Start_Receive_IT+0x4c>
 8007d00:	6901      	ldr	r1, [r0, #16]
 8007d02:	2900      	cmp	r1, #0
 8007d04:	d100      	bne.n	8007d08 <UART_Start_Receive_IT+0x4c>
    huart->RxISR = UART_RxISR_16BIT;
 8007d06:	4b11      	ldr	r3, [pc, #68]	; (8007d4c <UART_Start_Receive_IT+0x90>)
 8007d08:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 8007d0a:	0003      	movs	r3, r0
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	3374      	adds	r3, #116	; 0x74
 8007d10:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007d12:	2390      	movs	r3, #144	; 0x90
 8007d14:	6811      	ldr	r1, [r2, #0]
 8007d16:	005b      	lsls	r3, r3, #1
 8007d18:	430b      	orrs	r3, r1
 8007d1a:	6013      	str	r3, [r2, #0]
}
 8007d1c:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 8007d1e:	22ff      	movs	r2, #255	; 0xff
 8007d20:	e7de      	b.n	8007ce0 <UART_Start_Receive_IT+0x24>
 8007d22:	2900      	cmp	r1, #0
 8007d24:	d104      	bne.n	8007d30 <UART_Start_Receive_IT+0x74>
 8007d26:	6902      	ldr	r2, [r0, #16]
 8007d28:	2a00      	cmp	r2, #0
 8007d2a:	d0f8      	beq.n	8007d1e <UART_Start_Receive_IT+0x62>
 8007d2c:	227f      	movs	r2, #127	; 0x7f
 8007d2e:	e7d7      	b.n	8007ce0 <UART_Start_Receive_IT+0x24>
 8007d30:	2480      	movs	r4, #128	; 0x80
 8007d32:	0564      	lsls	r4, r4, #21
 8007d34:	42a1      	cmp	r1, r4
 8007d36:	d1d3      	bne.n	8007ce0 <UART_Start_Receive_IT+0x24>
 8007d38:	6902      	ldr	r2, [r0, #16]
 8007d3a:	2a00      	cmp	r2, #0
 8007d3c:	d0f6      	beq.n	8007d2c <UART_Start_Receive_IT+0x70>
 8007d3e:	223f      	movs	r2, #63	; 0x3f
 8007d40:	e7ce      	b.n	8007ce0 <UART_Start_Receive_IT+0x24>
 8007d42:	46c0      	nop			; (mov r8, r8)
 8007d44:	000001ff 	.word	0x000001ff
 8007d48:	08007759 	.word	0x08007759
 8007d4c:	080077dd 	.word	0x080077dd

08007d50 <HAL_UART_Receive_IT>:
{
 8007d50:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d52:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    return HAL_BUSY;
 8007d54:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d56:	2c20      	cmp	r4, #32
 8007d58:	d129      	bne.n	8007dae <HAL_UART_Receive_IT+0x5e>
      return HAL_ERROR;
 8007d5a:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 8007d5c:	2900      	cmp	r1, #0
 8007d5e:	d026      	beq.n	8007dae <HAL_UART_Receive_IT+0x5e>
 8007d60:	2a00      	cmp	r2, #0
 8007d62:	d024      	beq.n	8007dae <HAL_UART_Receive_IT+0x5e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d64:	2380      	movs	r3, #128	; 0x80
 8007d66:	6884      	ldr	r4, [r0, #8]
 8007d68:	015b      	lsls	r3, r3, #5
 8007d6a:	429c      	cmp	r4, r3
 8007d6c:	d106      	bne.n	8007d7c <HAL_UART_Receive_IT+0x2c>
 8007d6e:	6903      	ldr	r3, [r0, #16]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d103      	bne.n	8007d7c <HAL_UART_Receive_IT+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8007d74:	2401      	movs	r4, #1
      return HAL_ERROR;
 8007d76:	0023      	movs	r3, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8007d78:	4221      	tst	r1, r4
 8007d7a:	d118      	bne.n	8007dae <HAL_UART_Receive_IT+0x5e>
    __HAL_LOCK(huart);
 8007d7c:	0004      	movs	r4, r0
 8007d7e:	3474      	adds	r4, #116	; 0x74
 8007d80:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 8007d82:	2302      	movs	r3, #2
    __HAL_LOCK(huart);
 8007d84:	2d01      	cmp	r5, #1
 8007d86:	d012      	beq.n	8007dae <HAL_UART_Receive_IT+0x5e>
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	7023      	strb	r3, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d8c:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d8e:	4c09      	ldr	r4, [pc, #36]	; (8007db4 <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d90:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d92:	6803      	ldr	r3, [r0, #0]
 8007d94:	42a3      	cmp	r3, r4
 8007d96:	d007      	beq.n	8007da8 <HAL_UART_Receive_IT+0x58>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007d98:	685c      	ldr	r4, [r3, #4]
 8007d9a:	0224      	lsls	r4, r4, #8
 8007d9c:	d504      	bpl.n	8007da8 <HAL_UART_Receive_IT+0x58>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007d9e:	2480      	movs	r4, #128	; 0x80
 8007da0:	681d      	ldr	r5, [r3, #0]
 8007da2:	04e4      	lsls	r4, r4, #19
 8007da4:	432c      	orrs	r4, r5
 8007da6:	601c      	str	r4, [r3, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8007da8:	f7ff ff88 	bl	8007cbc <UART_Start_Receive_IT>
 8007dac:	0003      	movs	r3, r0
}
 8007dae:	0018      	movs	r0, r3
 8007db0:	bd70      	pop	{r4, r5, r6, pc}
 8007db2:	46c0      	nop			; (mov r8, r8)
 8007db4:	40004800 	.word	0x40004800

08007db8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007db8:	4770      	bx	lr
	...

08007dbc <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007dbc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007dbe:	0005      	movs	r5, r0
{
 8007dc0:	9102      	str	r1, [sp, #8]
 8007dc2:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(huart);
 8007dc4:	3574      	adds	r5, #116	; 0x74
 8007dc6:	782b      	ldrb	r3, [r5, #0]
{
 8007dc8:	0004      	movs	r4, r0
 8007dca:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 8007dcc:	2002      	movs	r0, #2
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d030      	beq.n	8007e34 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8007dd2:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8007dd4:	3801      	subs	r0, #1
 8007dd6:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007dd8:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8007dda:	6823      	ldr	r3, [r4, #0]
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	4382      	bics	r2, r0
 8007de0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007de2:	689a      	ldr	r2, [r3, #8]
 8007de4:	4815      	ldr	r0, [pc, #84]	; (8007e3c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x80>)
 8007de6:	4002      	ands	r2, r0
 8007de8:	430a      	orrs	r2, r1
 8007dea:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007dec:	2900      	cmp	r1, #0
 8007dee:	d10c      	bne.n	8007e0a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x4e>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007df0:	2210      	movs	r2, #16
 8007df2:	6859      	ldr	r1, [r3, #4]
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007df4:	79b0      	ldrb	r0, [r6, #6]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007df6:	4391      	bics	r1, r2
 8007df8:	88b2      	ldrh	r2, [r6, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007dfa:	0600      	lsls	r0, r0, #24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007dfc:	4311      	orrs	r1, r2
 8007dfe:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	0212      	lsls	r2, r2, #8
 8007e04:	0a12      	lsrs	r2, r2, #8
 8007e06:	4302      	orrs	r2, r0
 8007e08:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 8007e0a:	2201      	movs	r2, #1
 8007e0c:	6819      	ldr	r1, [r3, #0]
 8007e0e:	430a      	orrs	r2, r1
 8007e10:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8007e12:	f7fc f983 	bl	800411c <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e16:	2180      	movs	r1, #128	; 0x80
 8007e18:	4a09      	ldr	r2, [pc, #36]	; (8007e40 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x84>)
  tickstart = HAL_GetTick();
 8007e1a:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e1c:	9200      	str	r2, [sp, #0]
 8007e1e:	0020      	movs	r0, r4
 8007e20:	2200      	movs	r2, #0
 8007e22:	03c9      	lsls	r1, r1, #15
 8007e24:	f7ff fe9e 	bl	8007b64 <UART_WaitOnFlagUntilTimeout>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	d105      	bne.n	8007e38 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 8007e2c:	2320      	movs	r3, #32
 8007e2e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8007e30:	2300      	movs	r3, #0
 8007e32:	702b      	strb	r3, [r5, #0]
}
 8007e34:	b004      	add	sp, #16
 8007e36:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIMEOUT;
 8007e38:	2003      	movs	r0, #3
 8007e3a:	e7f9      	b.n	8007e30 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
 8007e3c:	ffcfffff 	.word	0xffcfffff
 8007e40:	01ffffff 	.word	0x01ffffff

08007e44 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8007e44:	0001      	movs	r1, r0
 8007e46:	2302      	movs	r3, #2
{
 8007e48:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 8007e4a:	3174      	adds	r1, #116	; 0x74
 8007e4c:	780c      	ldrb	r4, [r1, #0]
{
 8007e4e:	0002      	movs	r2, r0
  __HAL_LOCK(huart);
 8007e50:	0018      	movs	r0, r3
 8007e52:	2c01      	cmp	r4, #1
 8007e54:	d005      	beq.n	8007e62 <HAL_UARTEx_EnableStopMode+0x1e>
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007e56:	6812      	ldr	r2, [r2, #0]
 8007e58:	6810      	ldr	r0, [r2, #0]
 8007e5a:	4303      	orrs	r3, r0
  __HAL_UNLOCK(huart);
 8007e5c:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007e5e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8007e60:	7008      	strb	r0, [r1, #0]
}
 8007e62:	bd10      	pop	{r4, pc}

08007e64 <HAL_UARTEx_DisableStopMode>:
  __HAL_LOCK(huart);
 8007e64:	0002      	movs	r2, r0
{
 8007e66:	b510      	push	{r4, lr}
 8007e68:	2402      	movs	r4, #2
  __HAL_LOCK(huart);
 8007e6a:	3274      	adds	r2, #116	; 0x74
 8007e6c:	7811      	ldrb	r1, [r2, #0]
{
 8007e6e:	0003      	movs	r3, r0
  __HAL_LOCK(huart);
 8007e70:	0020      	movs	r0, r4
 8007e72:	2901      	cmp	r1, #1
 8007e74:	d005      	beq.n	8007e82 <HAL_UARTEx_DisableStopMode+0x1e>
  __HAL_UNLOCK(huart);
 8007e76:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007e78:	6819      	ldr	r1, [r3, #0]
 8007e7a:	680b      	ldr	r3, [r1, #0]
 8007e7c:	43a3      	bics	r3, r4
 8007e7e:	600b      	str	r3, [r1, #0]
  __HAL_UNLOCK(huart);
 8007e80:	7010      	strb	r0, [r2, #0]
}
 8007e82:	bd10      	pop	{r4, pc}

08007e84 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8007e84:	b510      	push	{r4, lr}
 8007e86:	0004      	movs	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8007e88:	2210      	movs	r2, #16
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	30f1      	adds	r0, #241	; 0xf1
 8007e8e:	f006 f959 	bl	800e144 <memset1>
    ctx->M_n = 0;
 8007e92:	0023      	movs	r3, r4
 8007e94:	2100      	movs	r1, #0
 8007e96:	33fc      	adds	r3, #252	; 0xfc
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8007e98:	22f0      	movs	r2, #240	; 0xf0
 8007e9a:	0020      	movs	r0, r4
    ctx->M_n = 0;
 8007e9c:	6199      	str	r1, [r3, #24]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8007e9e:	f006 f951 	bl	800e144 <memset1>
}
 8007ea2:	bd10      	pop	{r4, pc}

08007ea4 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8007ea4:	b510      	push	{r4, lr}
 8007ea6:	0002      	movs	r2, r0
 8007ea8:	0008      	movs	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 8007eaa:	2110      	movs	r1, #16
 8007eac:	f000 f9a0 	bl	80081f0 <lorawan_aes_set_key>
}
 8007eb0:	bd10      	pop	{r4, pc}

08007eb2 <AES_CMAC_Update>:
void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8007eb2:	0003      	movs	r3, r0
{
 8007eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007eb6:	0004      	movs	r4, r0
    if( ctx->M_n > 0 )
 8007eb8:	33fc      	adds	r3, #252	; 0xfc
 8007eba:	6998      	ldr	r0, [r3, #24]
 8007ebc:	1ca3      	adds	r3, r4, #2
{
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	33ff      	adds	r3, #255	; 0xff
 8007ec2:	000e      	movs	r6, r1
 8007ec4:	0015      	movs	r5, r2
 8007ec6:	9301      	str	r3, [sp, #4]
    if( ctx->M_n > 0 )
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d036      	beq.n	8007f3a <AES_CMAC_Update+0x88>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 8007ecc:	2710      	movs	r7, #16
 8007ece:	1a3f      	subs	r7, r7, r0
 8007ed0:	9700      	str	r7, [sp, #0]
 8007ed2:	4297      	cmp	r7, r2
 8007ed4:	d900      	bls.n	8007ed8 <AES_CMAC_Update+0x26>
 8007ed6:	9200      	str	r2, [sp, #0]
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8007ed8:	466b      	mov	r3, sp
 8007eda:	881a      	ldrh	r2, [r3, #0]
 8007edc:	1ca3      	adds	r3, r4, #2
 8007ede:	33ff      	adds	r3, #255	; 0xff
 8007ee0:	0031      	movs	r1, r6
 8007ee2:	1818      	adds	r0, r3, r0
 8007ee4:	f006 f918 	bl	800e118 <memcpy1>
        ctx->M_n += mlen;
 8007ee8:	0022      	movs	r2, r4
 8007eea:	32fc      	adds	r2, #252	; 0xfc
 8007eec:	6991      	ldr	r1, [r2, #24]
 8007eee:	9b00      	ldr	r3, [sp, #0]
 8007ef0:	185b      	adds	r3, r3, r1
 8007ef2:	6193      	str	r3, [r2, #24]
        if( ctx->M_n < 16 || len == mlen )
 8007ef4:	2b0f      	cmp	r3, #15
 8007ef6:	d929      	bls.n	8007f4c <AES_CMAC_Update+0x9a>
 8007ef8:	42af      	cmp	r7, r5
 8007efa:	d227      	bcs.n	8007f4c <AES_CMAC_Update+0x9a>
 8007efc:	0023      	movs	r3, r4
 8007efe:	1ca1      	adds	r1, r4, #2
 8007f00:	33f1      	adds	r3, #241	; 0xf1
 8007f02:	31ff      	adds	r1, #255	; 0xff
            return;
        XOR( ctx->M_last, ctx->X );
 8007f04:	781a      	ldrb	r2, [r3, #0]
 8007f06:	7c18      	ldrb	r0, [r3, #16]
 8007f08:	4042      	eors	r2, r0
 8007f0a:	701a      	strb	r2, [r3, #0]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	428b      	cmp	r3, r1
 8007f10:	d1f8      	bne.n	8007f04 <AES_CMAC_Update+0x52>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8007f12:	0027      	movs	r7, r4
 8007f14:	37f1      	adds	r7, #241	; 0xf1
 8007f16:	2210      	movs	r2, #16
 8007f18:	0039      	movs	r1, r7
 8007f1a:	a802      	add	r0, sp, #8
 8007f1c:	f006 f8fc 	bl	800e118 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8007f20:	a902      	add	r1, sp, #8
 8007f22:	0022      	movs	r2, r4
 8007f24:	0008      	movs	r0, r1
 8007f26:	f000 f9e9 	bl	80082fc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8007f2a:	2210      	movs	r2, #16
 8007f2c:	0038      	movs	r0, r7
 8007f2e:	a902      	add	r1, sp, #8
 8007f30:	f006 f8f2 	bl	800e118 <memcpy1>

        data += mlen;
 8007f34:	9b00      	ldr	r3, [sp, #0]
 8007f36:	18f6      	adds	r6, r6, r3
        len -= mlen;
 8007f38:	1aed      	subs	r5, r5, r3
    }
    while( len > 16 )
 8007f3a:	2d10      	cmp	r5, #16
 8007f3c:	d808      	bhi.n	8007f50 <AES_CMAC_Update+0x9e>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8007f3e:	0031      	movs	r1, r6
 8007f40:	9801      	ldr	r0, [sp, #4]
 8007f42:	b2aa      	uxth	r2, r5
    ctx->M_n = len;
 8007f44:	34fc      	adds	r4, #252	; 0xfc
    memcpy1( ctx->M_last, data, len );
 8007f46:	f006 f8e7 	bl	800e118 <memcpy1>
    ctx->M_n = len;
 8007f4a:	61a5      	str	r5, [r4, #24]
}
 8007f4c:	b007      	add	sp, #28
 8007f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f50:	0023      	movs	r3, r4
 8007f52:	0032      	movs	r2, r6
 8007f54:	1ca0      	adds	r0, r4, #2
 8007f56:	33f1      	adds	r3, #241	; 0xf1
 8007f58:	30ff      	adds	r0, #255	; 0xff
        XOR( data, ctx->X );
 8007f5a:	7819      	ldrb	r1, [r3, #0]
 8007f5c:	7817      	ldrb	r7, [r2, #0]
 8007f5e:	3201      	adds	r2, #1
 8007f60:	4079      	eors	r1, r7
 8007f62:	7019      	strb	r1, [r3, #0]
 8007f64:	3301      	adds	r3, #1
 8007f66:	4283      	cmp	r3, r0
 8007f68:	d1f7      	bne.n	8007f5a <AES_CMAC_Update+0xa8>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8007f6a:	0027      	movs	r7, r4
 8007f6c:	37f1      	adds	r7, #241	; 0xf1
 8007f6e:	2210      	movs	r2, #16
 8007f70:	0039      	movs	r1, r7
 8007f72:	a802      	add	r0, sp, #8
 8007f74:	f006 f8d0 	bl	800e118 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8007f78:	a902      	add	r1, sp, #8
 8007f7a:	0022      	movs	r2, r4
 8007f7c:	0008      	movs	r0, r1
 8007f7e:	f000 f9bd 	bl	80082fc <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8007f82:	2210      	movs	r2, #16
 8007f84:	0038      	movs	r0, r7
 8007f86:	a902      	add	r1, sp, #8
 8007f88:	f006 f8c6 	bl	800e118 <memcpy1>
        data += 16;
 8007f8c:	3610      	adds	r6, #16
        len -= 16;
 8007f8e:	3d10      	subs	r5, #16
 8007f90:	e7d3      	b.n	8007f3a <AES_CMAC_Update+0x88>

08007f92 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8007f92:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f94:	000c      	movs	r4, r1
 8007f96:	b089      	sub	sp, #36	; 0x24
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8007f98:	2210      	movs	r2, #16
 8007f9a:	2100      	movs	r1, #0
{
 8007f9c:	0005      	movs	r5, r0
    memset1( K, '\0', 16 );
 8007f9e:	4668      	mov	r0, sp
 8007fa0:	f006 f8d0 	bl	800e144 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8007fa4:	0022      	movs	r2, r4
 8007fa6:	4669      	mov	r1, sp
 8007fa8:	4668      	mov	r0, sp
 8007faa:	f000 f9a7 	bl	80082fc <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8007fae:	466b      	mov	r3, sp
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b7f      	cmp	r3, #127	; 0x7f
 8007fb4:	d940      	bls.n	8008038 <AES_CMAC_Final+0xa6>
 8007fb6:	466b      	mov	r3, sp
    {
        LSHIFT( K, K );
 8007fb8:	2100      	movs	r1, #0
 8007fba:	781a      	ldrb	r2, [r3, #0]
 8007fbc:	7858      	ldrb	r0, [r3, #1]
 8007fbe:	0052      	lsls	r2, r2, #1
 8007fc0:	09c0      	lsrs	r0, r0, #7
 8007fc2:	4302      	orrs	r2, r0
 8007fc4:	3101      	adds	r1, #1
 8007fc6:	701a      	strb	r2, [r3, #0]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	290f      	cmp	r1, #15
 8007fcc:	d1f5      	bne.n	8007fba <AES_CMAC_Final+0x28>
 8007fce:	466b      	mov	r3, sp
 8007fd0:	7bda      	ldrb	r2, [r3, #15]
        K[15] ^= 0x87;
 8007fd2:	2379      	movs	r3, #121	; 0x79
        LSHIFT( K, K );
 8007fd4:	0052      	lsls	r2, r2, #1
        K[15] ^= 0x87;
 8007fd6:	425b      	negs	r3, r3
 8007fd8:	4053      	eors	r3, r2
    }
    else
        LSHIFT( K, K );

    if( ctx->M_n == 16 )
 8007fda:	0020      	movs	r0, r4
        LSHIFT( K, K );
 8007fdc:	466a      	mov	r2, sp
    if( ctx->M_n == 16 )
 8007fde:	30fc      	adds	r0, #252	; 0xfc
 8007fe0:	6986      	ldr	r6, [r0, #24]
        LSHIFT( K, K );
 8007fe2:	73d3      	strb	r3, [r2, #15]
    if( ctx->M_n == 16 )
 8007fe4:	2e10      	cmp	r6, #16
 8007fe6:	d137      	bne.n	8008058 <AES_CMAC_Final+0xc6>
 8007fe8:	466a      	mov	r2, sp
 8007fea:	1ca3      	adds	r3, r4, #2
 8007fec:	33ff      	adds	r3, #255	; 0xff
 8007fee:	3015      	adds	r0, #21
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8007ff0:	7819      	ldrb	r1, [r3, #0]
 8007ff2:	7816      	ldrb	r6, [r2, #0]
 8007ff4:	3201      	adds	r2, #1
 8007ff6:	4071      	eors	r1, r6
 8007ff8:	7019      	strb	r1, [r3, #0]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	4298      	cmp	r0, r3
 8007ffe:	d1f7      	bne.n	8007ff0 <AES_CMAC_Final+0x5e>
 8008000:	0023      	movs	r3, r4
 8008002:	33f1      	adds	r3, #241	; 0xf1
 8008004:	0019      	movs	r1, r3
 8008006:	1ca0      	adds	r0, r4, #2
 8008008:	30ff      	adds	r0, #255	; 0xff
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 800800a:	781a      	ldrb	r2, [r3, #0]
 800800c:	7c1e      	ldrb	r6, [r3, #16]
 800800e:	4072      	eors	r2, r6
 8008010:	701a      	strb	r2, [r3, #0]
 8008012:	3301      	adds	r3, #1
 8008014:	4298      	cmp	r0, r3
 8008016:	d1f8      	bne.n	800800a <AES_CMAC_Final+0x78>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8008018:	a804      	add	r0, sp, #16
 800801a:	2210      	movs	r2, #16
 800801c:	f006 f87c 	bl	800e118 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8008020:	0022      	movs	r2, r4
 8008022:	0029      	movs	r1, r5
 8008024:	a804      	add	r0, sp, #16
 8008026:	f000 f969 	bl	80082fc <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800802a:	2210      	movs	r2, #16
 800802c:	2100      	movs	r1, #0
 800802e:	4668      	mov	r0, sp
 8008030:	f006 f888 	bl	800e144 <memset1>
}
 8008034:	b009      	add	sp, #36	; 0x24
 8008036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008038:	466b      	mov	r3, sp
        LSHIFT( K, K );
 800803a:	2100      	movs	r1, #0
 800803c:	781a      	ldrb	r2, [r3, #0]
 800803e:	7858      	ldrb	r0, [r3, #1]
 8008040:	0052      	lsls	r2, r2, #1
 8008042:	09c0      	lsrs	r0, r0, #7
 8008044:	4302      	orrs	r2, r0
 8008046:	3101      	adds	r1, #1
 8008048:	701a      	strb	r2, [r3, #0]
 800804a:	3301      	adds	r3, #1
 800804c:	290f      	cmp	r1, #15
 800804e:	d1f5      	bne.n	800803c <AES_CMAC_Final+0xaa>
 8008050:	466b      	mov	r3, sp
 8008052:	7bdb      	ldrb	r3, [r3, #15]
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	e7c0      	b.n	8007fda <AES_CMAC_Final+0x48>
        if( K[0] & 0x80 )
 8008058:	7813      	ldrb	r3, [r2, #0]
 800805a:	2b7f      	cmp	r3, #127	; 0x7f
 800805c:	d932      	bls.n	80080c4 <AES_CMAC_Final+0x132>
 800805e:	466b      	mov	r3, sp
            LSHIFT( K, K );
 8008060:	2100      	movs	r1, #0
 8008062:	781a      	ldrb	r2, [r3, #0]
 8008064:	785f      	ldrb	r7, [r3, #1]
 8008066:	0052      	lsls	r2, r2, #1
 8008068:	09ff      	lsrs	r7, r7, #7
 800806a:	433a      	orrs	r2, r7
 800806c:	3101      	adds	r1, #1
 800806e:	701a      	strb	r2, [r3, #0]
 8008070:	3301      	adds	r3, #1
 8008072:	290f      	cmp	r1, #15
 8008074:	d1f5      	bne.n	8008062 <AES_CMAC_Final+0xd0>
 8008076:	466b      	mov	r3, sp
 8008078:	7bda      	ldrb	r2, [r3, #15]
            K[15] ^= 0x87;
 800807a:	2379      	movs	r3, #121	; 0x79
            LSHIFT( K, K );
 800807c:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 800807e:	425b      	negs	r3, r3
 8008080:	4053      	eors	r3, r2
            LSHIFT( K, K );
 8008082:	466a      	mov	r2, sp
 8008084:	73d3      	strb	r3, [r2, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 8008086:	2280      	movs	r2, #128	; 0x80
 8008088:	19a3      	adds	r3, r4, r6
 800808a:	33ff      	adds	r3, #255	; 0xff
 800808c:	1c77      	adds	r7, r6, #1
 800808e:	709a      	strb	r2, [r3, #2]
        while( ++ctx->M_n < 16 )
 8008090:	0039      	movs	r1, r7
            ctx->M_last[ctx->M_n] = 0;
 8008092:	2200      	movs	r2, #0
 8008094:	1ca3      	adds	r3, r4, #2
 8008096:	33ff      	adds	r3, #255	; 0xff
        while( ++ctx->M_n < 16 )
 8008098:	290f      	cmp	r1, #15
 800809a:	d923      	bls.n	80080e4 <AES_CMAC_Final+0x152>
 800809c:	2200      	movs	r2, #0
 800809e:	2f10      	cmp	r7, #16
 80080a0:	d801      	bhi.n	80080a6 <AES_CMAC_Final+0x114>
 80080a2:	320f      	adds	r2, #15
 80080a4:	1b92      	subs	r2, r2, r6
 80080a6:	19d2      	adds	r2, r2, r7
 80080a8:	6182      	str	r2, [r0, #24]
 80080aa:	0020      	movs	r0, r4
 80080ac:	466a      	mov	r2, sp
 80080ae:	3012      	adds	r0, #18
 80080b0:	30ff      	adds	r0, #255	; 0xff
        XOR( K, ctx->M_last );
 80080b2:	7819      	ldrb	r1, [r3, #0]
 80080b4:	7816      	ldrb	r6, [r2, #0]
 80080b6:	3201      	adds	r2, #1
 80080b8:	4071      	eors	r1, r6
 80080ba:	7019      	strb	r1, [r3, #0]
 80080bc:	3301      	adds	r3, #1
 80080be:	4298      	cmp	r0, r3
 80080c0:	d1f7      	bne.n	80080b2 <AES_CMAC_Final+0x120>
 80080c2:	e79d      	b.n	8008000 <AES_CMAC_Final+0x6e>
 80080c4:	466b      	mov	r3, sp
            LSHIFT( K, K );
 80080c6:	2100      	movs	r1, #0
 80080c8:	781a      	ldrb	r2, [r3, #0]
 80080ca:	785f      	ldrb	r7, [r3, #1]
 80080cc:	0052      	lsls	r2, r2, #1
 80080ce:	09ff      	lsrs	r7, r7, #7
 80080d0:	433a      	orrs	r2, r7
 80080d2:	3101      	adds	r1, #1
 80080d4:	701a      	strb	r2, [r3, #0]
 80080d6:	3301      	adds	r3, #1
 80080d8:	290f      	cmp	r1, #15
 80080da:	d1f5      	bne.n	80080c8 <AES_CMAC_Final+0x136>
 80080dc:	466b      	mov	r3, sp
 80080de:	7bdb      	ldrb	r3, [r3, #15]
 80080e0:	005b      	lsls	r3, r3, #1
 80080e2:	e7ce      	b.n	8008082 <AES_CMAC_Final+0xf0>
            ctx->M_last[ctx->M_n] = 0;
 80080e4:	545a      	strb	r2, [r3, r1]
 80080e6:	3101      	adds	r1, #1
 80080e8:	e7d6      	b.n	8008098 <AES_CMAC_Final+0x106>

080080ea <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80080ea:	780a      	ldrb	r2, [r1, #0]
 80080ec:	7803      	ldrb	r3, [r0, #0]
 80080ee:	4053      	eors	r3, r2
 80080f0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80080f2:	784a      	ldrb	r2, [r1, #1]
 80080f4:	7843      	ldrb	r3, [r0, #1]
 80080f6:	4053      	eors	r3, r2
 80080f8:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80080fa:	788a      	ldrb	r2, [r1, #2]
 80080fc:	7883      	ldrb	r3, [r0, #2]
 80080fe:	4053      	eors	r3, r2
 8008100:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8008102:	78ca      	ldrb	r2, [r1, #3]
 8008104:	78c3      	ldrb	r3, [r0, #3]
 8008106:	4053      	eors	r3, r2
 8008108:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800810a:	790a      	ldrb	r2, [r1, #4]
 800810c:	7903      	ldrb	r3, [r0, #4]
 800810e:	4053      	eors	r3, r2
 8008110:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8008112:	794a      	ldrb	r2, [r1, #5]
 8008114:	7943      	ldrb	r3, [r0, #5]
 8008116:	4053      	eors	r3, r2
 8008118:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800811a:	798a      	ldrb	r2, [r1, #6]
 800811c:	7983      	ldrb	r3, [r0, #6]
 800811e:	4053      	eors	r3, r2
 8008120:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8008122:	79ca      	ldrb	r2, [r1, #7]
 8008124:	79c3      	ldrb	r3, [r0, #7]
 8008126:	4053      	eors	r3, r2
 8008128:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800812a:	7a0a      	ldrb	r2, [r1, #8]
 800812c:	7a03      	ldrb	r3, [r0, #8]
 800812e:	4053      	eors	r3, r2
 8008130:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8008132:	7a4a      	ldrb	r2, [r1, #9]
 8008134:	7a43      	ldrb	r3, [r0, #9]
 8008136:	4053      	eors	r3, r2
 8008138:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800813a:	7a8a      	ldrb	r2, [r1, #10]
 800813c:	7a83      	ldrb	r3, [r0, #10]
 800813e:	4053      	eors	r3, r2
 8008140:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8008142:	7aca      	ldrb	r2, [r1, #11]
 8008144:	7ac3      	ldrb	r3, [r0, #11]
 8008146:	4053      	eors	r3, r2
 8008148:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800814a:	7b0a      	ldrb	r2, [r1, #12]
 800814c:	7b03      	ldrb	r3, [r0, #12]
 800814e:	4053      	eors	r3, r2
 8008150:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8008152:	7b4a      	ldrb	r2, [r1, #13]
 8008154:	7b43      	ldrb	r3, [r0, #13]
 8008156:	4053      	eors	r3, r2
 8008158:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800815a:	7b8a      	ldrb	r2, [r1, #14]
 800815c:	7b83      	ldrb	r3, [r0, #14]
 800815e:	4053      	eors	r3, r2
 8008160:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8008162:	7bca      	ldrb	r2, [r1, #15]
 8008164:	7bc3      	ldrb	r3, [r0, #15]
 8008166:	4053      	eors	r3, r2
 8008168:	73c3      	strb	r3, [r0, #15]
#endif
}
 800816a:	4770      	bx	lr

0800816c <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800816c:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800816e:	780b      	ldrb	r3, [r1, #0]
 8008170:	7814      	ldrb	r4, [r2, #0]
 8008172:	4063      	eors	r3, r4
 8008174:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8008176:	7854      	ldrb	r4, [r2, #1]
 8008178:	784b      	ldrb	r3, [r1, #1]
 800817a:	4063      	eors	r3, r4
 800817c:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800817e:	7894      	ldrb	r4, [r2, #2]
 8008180:	788b      	ldrb	r3, [r1, #2]
 8008182:	4063      	eors	r3, r4
 8008184:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8008186:	78d4      	ldrb	r4, [r2, #3]
 8008188:	78cb      	ldrb	r3, [r1, #3]
 800818a:	4063      	eors	r3, r4
 800818c:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800818e:	7914      	ldrb	r4, [r2, #4]
 8008190:	790b      	ldrb	r3, [r1, #4]
 8008192:	4063      	eors	r3, r4
 8008194:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8008196:	7954      	ldrb	r4, [r2, #5]
 8008198:	794b      	ldrb	r3, [r1, #5]
 800819a:	4063      	eors	r3, r4
 800819c:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800819e:	7994      	ldrb	r4, [r2, #6]
 80081a0:	798b      	ldrb	r3, [r1, #6]
 80081a2:	4063      	eors	r3, r4
 80081a4:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 80081a6:	79d4      	ldrb	r4, [r2, #7]
 80081a8:	79cb      	ldrb	r3, [r1, #7]
 80081aa:	4063      	eors	r3, r4
 80081ac:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 80081ae:	7a14      	ldrb	r4, [r2, #8]
 80081b0:	7a0b      	ldrb	r3, [r1, #8]
 80081b2:	4063      	eors	r3, r4
 80081b4:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 80081b6:	7a4b      	ldrb	r3, [r1, #9]
 80081b8:	7a54      	ldrb	r4, [r2, #9]
 80081ba:	4063      	eors	r3, r4
 80081bc:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 80081be:	7a8b      	ldrb	r3, [r1, #10]
 80081c0:	7a94      	ldrb	r4, [r2, #10]
 80081c2:	4063      	eors	r3, r4
 80081c4:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 80081c6:	7ad4      	ldrb	r4, [r2, #11]
 80081c8:	7acb      	ldrb	r3, [r1, #11]
 80081ca:	4063      	eors	r3, r4
 80081cc:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 80081ce:	7b14      	ldrb	r4, [r2, #12]
 80081d0:	7b0b      	ldrb	r3, [r1, #12]
 80081d2:	4063      	eors	r3, r4
 80081d4:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 80081d6:	7b54      	ldrb	r4, [r2, #13]
 80081d8:	7b4b      	ldrb	r3, [r1, #13]
 80081da:	4063      	eors	r3, r4
 80081dc:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 80081de:	7b94      	ldrb	r4, [r2, #14]
 80081e0:	7b8b      	ldrb	r3, [r1, #14]
 80081e2:	4063      	eors	r3, r4
 80081e4:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 80081e6:	7bcb      	ldrb	r3, [r1, #15]
 80081e8:	7bd2      	ldrb	r2, [r2, #15]
 80081ea:	4053      	eors	r3, r2
 80081ec:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 80081ee:	bd10      	pop	{r4, pc}

080081f0 <lorawan_aes_set_key>:

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 80081f0:	000b      	movs	r3, r1
{
 80081f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081f4:	3b10      	subs	r3, #16
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	000e      	movs	r6, r1
 80081fa:	0014      	movs	r4, r2
 80081fc:	b087      	sub	sp, #28
 80081fe:	2b10      	cmp	r3, #16
 8008200:	d805      	bhi.n	800820e <lorawan_aes_set_key+0x1e>
 8008202:	2201      	movs	r2, #1
 8008204:	409a      	lsls	r2, r3
 8008206:	0013      	movs	r3, r2
 8008208:	4a3a      	ldr	r2, [pc, #232]	; (80082f4 <lorawan_aes_set_key+0x104>)
 800820a:	4213      	tst	r3, r2
 800820c:	d105      	bne.n	800821a <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800820e:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 8008210:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
 8008212:	34f0      	adds	r4, #240	; 0xf0
 8008214:	7023      	strb	r3, [r4, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8008216:	b007      	add	sp, #28
 8008218:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while( nn-- )
 800821a:	2300      	movs	r3, #0
 800821c:	429e      	cmp	r6, r3
 800821e:	d153      	bne.n	80082c8 <lorawan_aes_set_key+0xd8>
    hi = (keylen + 28) << 2;
 8008220:	0033      	movs	r3, r6
    ctx->rnd = (hi >> 4) - 1;
 8008222:	0022      	movs	r2, r4
    hi = (keylen + 28) << 2;
 8008224:	331c      	adds	r3, #28
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	b2db      	uxtb	r3, r3
 800822a:	9305      	str	r3, [sp, #20]
    ctx->rnd = (hi >> 4) - 1;
 800822c:	091b      	lsrs	r3, r3, #4
 800822e:	3b01      	subs	r3, #1
 8008230:	32f0      	adds	r2, #240	; 0xf0
 8008232:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8008234:	2301      	movs	r3, #1
    ctx->rnd = (hi >> 4) - 1;
 8008236:	0035      	movs	r5, r6
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8008238:	9304      	str	r3, [sp, #16]
        t0 = ctx->ksch[cc - 4];
 800823a:	1963      	adds	r3, r4, r5
 800823c:	1f1a      	subs	r2, r3, #4
 800823e:	7817      	ldrb	r7, [r2, #0]
        t1 = ctx->ksch[cc - 3];
 8008240:	1eda      	subs	r2, r3, #3
 8008242:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 8008244:	0031      	movs	r1, r6
        t1 = ctx->ksch[cc - 3];
 8008246:	9201      	str	r2, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 8008248:	1e9a      	subs	r2, r3, #2
        t3 = ctx->ksch[cc - 1];
 800824a:	3b01      	subs	r3, #1
        t2 = ctx->ksch[cc - 2];
 800824c:	7812      	ldrb	r2, [r2, #0]
        t3 = ctx->ksch[cc - 1];
 800824e:	781b      	ldrb	r3, [r3, #0]
        if( cc % keylen == 0 )
 8008250:	0028      	movs	r0, r5
        t2 = ctx->ksch[cc - 2];
 8008252:	9202      	str	r2, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 8008254:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 8008256:	f7f8 f80d 	bl	8000274 <__aeabi_uidivmod>
 800825a:	b2c9      	uxtb	r1, r1
 800825c:	2900      	cmp	r1, #0
 800825e:	d137      	bne.n	80082d0 <lorawan_aes_set_key+0xe0>
            t0 = s_box(t1) ^ rc;
 8008260:	4b25      	ldr	r3, [pc, #148]	; (80082f8 <lorawan_aes_set_key+0x108>)
 8008262:	9a01      	ldr	r2, [sp, #4]
            t1 = s_box(t2);
 8008264:	9902      	ldr	r1, [sp, #8]
            t0 = s_box(t1) ^ rc;
 8008266:	5c9a      	ldrb	r2, [r3, r2]
 8008268:	9b04      	ldr	r3, [sp, #16]
 800826a:	405a      	eors	r2, r3
            t1 = s_box(t2);
 800826c:	4b22      	ldr	r3, [pc, #136]	; (80082f8 <lorawan_aes_set_key+0x108>)
 800826e:	5c5b      	ldrb	r3, [r3, r1]
            t2 = s_box(t3);
 8008270:	9903      	ldr	r1, [sp, #12]
            t1 = s_box(t2);
 8008272:	9301      	str	r3, [sp, #4]
            t2 = s_box(t3);
 8008274:	4b20      	ldr	r3, [pc, #128]	; (80082f8 <lorawan_aes_set_key+0x108>)
 8008276:	5c5b      	ldrb	r3, [r3, r1]
            rc = f2(rc);
 8008278:	211b      	movs	r1, #27
            t2 = s_box(t3);
 800827a:	9302      	str	r3, [sp, #8]
            t3 = s_box(tt);
 800827c:	4b1e      	ldr	r3, [pc, #120]	; (80082f8 <lorawan_aes_set_key+0x108>)
 800827e:	5ddb      	ldrb	r3, [r3, r7]
            t0 = s_box(t1) ^ rc;
 8008280:	0017      	movs	r7, r2
            t3 = s_box(tt);
 8008282:	9303      	str	r3, [sp, #12]
            rc = f2(rc);
 8008284:	9b04      	ldr	r3, [sp, #16]
 8008286:	09db      	lsrs	r3, r3, #7
 8008288:	434b      	muls	r3, r1
 800828a:	9904      	ldr	r1, [sp, #16]
 800828c:	0049      	lsls	r1, r1, #1
 800828e:	404b      	eors	r3, r1
 8008290:	b2db      	uxtb	r3, r3
 8008292:	9304      	str	r3, [sp, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8008294:	1bab      	subs	r3, r5, r6
 8008296:	b2db      	uxtb	r3, r3
 8008298:	5ce2      	ldrb	r2, [r4, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800829a:	18e3      	adds	r3, r4, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800829c:	4057      	eors	r7, r2
 800829e:	5567      	strb	r7, [r4, r5]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 80082a0:	785a      	ldrb	r2, [r3, #1]
 80082a2:	9801      	ldr	r0, [sp, #4]
 80082a4:	1961      	adds	r1, r4, r5
 80082a6:	4050      	eors	r0, r2
 80082a8:	7048      	strb	r0, [r1, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80082aa:	789a      	ldrb	r2, [r3, #2]
 80082ac:	9802      	ldr	r0, [sp, #8]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80082ae:	3504      	adds	r5, #4
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 80082b0:	4050      	eors	r0, r2
 80082b2:	7088      	strb	r0, [r1, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80082b4:	78db      	ldrb	r3, [r3, #3]
 80082b6:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80082b8:	b2ed      	uxtb	r5, r5
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80082ba:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80082bc:	9b05      	ldr	r3, [sp, #20]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 80082be:	70ca      	strb	r2, [r1, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80082c0:	42ab      	cmp	r3, r5
 80082c2:	d8ba      	bhi.n	800823a <lorawan_aes_set_key+0x4a>
    return 0;
 80082c4:	2000      	movs	r0, #0
 80082c6:	e7a6      	b.n	8008216 <lorawan_aes_set_key+0x26>
        *d++ = *s++;
 80082c8:	5cc2      	ldrb	r2, [r0, r3]
 80082ca:	54e2      	strb	r2, [r4, r3]
 80082cc:	3301      	adds	r3, #1
 80082ce:	e7a5      	b.n	800821c <lorawan_aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 80082d0:	2e18      	cmp	r6, #24
 80082d2:	d9df      	bls.n	8008294 <lorawan_aes_set_key+0xa4>
 80082d4:	2910      	cmp	r1, #16
 80082d6:	d1dd      	bne.n	8008294 <lorawan_aes_set_key+0xa4>
            t1 = s_box(t1);
 80082d8:	9a01      	ldr	r2, [sp, #4]
            t0 = s_box(t0);
 80082da:	4b07      	ldr	r3, [pc, #28]	; (80082f8 <lorawan_aes_set_key+0x108>)
 80082dc:	5ddf      	ldrb	r7, [r3, r7]
            t1 = s_box(t1);
 80082de:	5c9b      	ldrb	r3, [r3, r2]
            t2 = s_box(t2);
 80082e0:	9a02      	ldr	r2, [sp, #8]
            t1 = s_box(t1);
 80082e2:	9301      	str	r3, [sp, #4]
            t2 = s_box(t2);
 80082e4:	4b04      	ldr	r3, [pc, #16]	; (80082f8 <lorawan_aes_set_key+0x108>)
 80082e6:	5c9b      	ldrb	r3, [r3, r2]
            t3 = s_box(t3);
 80082e8:	9a03      	ldr	r2, [sp, #12]
            t2 = s_box(t2);
 80082ea:	9302      	str	r3, [sp, #8]
            t3 = s_box(t3);
 80082ec:	4b02      	ldr	r3, [pc, #8]	; (80082f8 <lorawan_aes_set_key+0x108>)
 80082ee:	5c9b      	ldrb	r3, [r3, r2]
 80082f0:	9303      	str	r3, [sp, #12]
 80082f2:	e7cf      	b.n	8008294 <lorawan_aes_set_key+0xa4>
 80082f4:	00010101 	.word	0x00010101
 80082f8:	0801149d 	.word	0x0801149d

080082fc <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 80082fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082fe:	b0a5      	sub	sp, #148	; 0x94
 8008300:	0016      	movs	r6, r2
 8008302:	911f      	str	r1, [sp, #124]	; 0x7c
    if( ctx->rnd )
 8008304:	32f0      	adds	r2, #240	; 0xf0
 8008306:	7812      	ldrb	r2, [r2, #0]
{
 8008308:	0003      	movs	r3, r0
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 800830a:	20ff      	movs	r0, #255	; 0xff
    if( ctx->rnd )
 800830c:	2a00      	cmp	r2, #0
 800830e:	d100      	bne.n	8008312 <lorawan_aes_encrypt+0x16>
 8008310:	e08a      	b.n	8008428 <lorawan_aes_encrypt+0x12c>
        copy_and_key( s1, in, ctx->ksch );
 8008312:	0032      	movs	r2, r6
 8008314:	0019      	movs	r1, r3
 8008316:	a820      	add	r0, sp, #128	; 0x80
 8008318:	f7ff ff28 	bl	800816c <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800831c:	2501      	movs	r5, #1
 800831e:	012a      	lsls	r2, r5, #4
 8008320:	18b3      	adds	r3, r6, r2
 8008322:	469c      	mov	ip, r3
 8008324:	ab20      	add	r3, sp, #128	; 0x80
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	ab20      	add	r3, sp, #128	; 0x80
 800832c:	795b      	ldrb	r3, [r3, #5]
 800832e:	9302      	str	r3, [sp, #8]
 8008330:	ab20      	add	r3, sp, #128	; 0x80
 8008332:	7a9f      	ldrb	r7, [r3, #10]
 8008334:	4b91      	ldr	r3, [pc, #580]	; (800857c <lorawan_aes_encrypt+0x280>)
 8008336:	5dda      	ldrb	r2, [r3, r7]
 8008338:	9203      	str	r2, [sp, #12]
 800833a:	aa20      	add	r2, sp, #128	; 0x80
 800833c:	7bd2      	ldrb	r2, [r2, #15]
 800833e:	9204      	str	r2, [sp, #16]
 8008340:	5c9a      	ldrb	r2, [r3, r2]
 8008342:	9205      	str	r2, [sp, #20]
 8008344:	9a01      	ldr	r2, [sp, #4]
 8008346:	5c98      	ldrb	r0, [r3, r2]
 8008348:	9a02      	ldr	r2, [sp, #8]
 800834a:	5c9a      	ldrb	r2, [r3, r2]
 800834c:	9206      	str	r2, [sp, #24]
 800834e:	aa20      	add	r2, sp, #128	; 0x80
 8008350:	7912      	ldrb	r2, [r2, #4]
 8008352:	9207      	str	r2, [sp, #28]
 8008354:	aa20      	add	r2, sp, #128	; 0x80
 8008356:	7a52      	ldrb	r2, [r2, #9]
 8008358:	9208      	str	r2, [sp, #32]
 800835a:	aa20      	add	r2, sp, #128	; 0x80
 800835c:	7b92      	ldrb	r2, [r2, #14]
 800835e:	9209      	str	r2, [sp, #36]	; 0x24
 8008360:	5c9a      	ldrb	r2, [r3, r2]
 8008362:	920a      	str	r2, [sp, #40]	; 0x28
 8008364:	aa20      	add	r2, sp, #128	; 0x80
 8008366:	78d2      	ldrb	r2, [r2, #3]
 8008368:	920b      	str	r2, [sp, #44]	; 0x2c
 800836a:	5c9a      	ldrb	r2, [r3, r2]
 800836c:	920c      	str	r2, [sp, #48]	; 0x30
 800836e:	9a07      	ldr	r2, [sp, #28]
 8008370:	5c9a      	ldrb	r2, [r3, r2]
 8008372:	920d      	str	r2, [sp, #52]	; 0x34
 8008374:	9a08      	ldr	r2, [sp, #32]
 8008376:	5c9a      	ldrb	r2, [r3, r2]
 8008378:	920e      	str	r2, [sp, #56]	; 0x38
 800837a:	aa20      	add	r2, sp, #128	; 0x80
 800837c:	7a12      	ldrb	r2, [r2, #8]
 800837e:	920f      	str	r2, [sp, #60]	; 0x3c
 8008380:	aa20      	add	r2, sp, #128	; 0x80
 8008382:	7b52      	ldrb	r2, [r2, #13]
 8008384:	9210      	str	r2, [sp, #64]	; 0x40
 8008386:	aa20      	add	r2, sp, #128	; 0x80
 8008388:	7892      	ldrb	r2, [r2, #2]
 800838a:	9211      	str	r2, [sp, #68]	; 0x44
 800838c:	5c9a      	ldrb	r2, [r3, r2]
 800838e:	9212      	str	r2, [sp, #72]	; 0x48
 8008390:	aa20      	add	r2, sp, #128	; 0x80
 8008392:	79d2      	ldrb	r2, [r2, #7]
 8008394:	9213      	str	r2, [sp, #76]	; 0x4c
 8008396:	5c9a      	ldrb	r2, [r3, r2]
 8008398:	9214      	str	r2, [sp, #80]	; 0x50
 800839a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800839c:	5c9a      	ldrb	r2, [r3, r2]
 800839e:	9215      	str	r2, [sp, #84]	; 0x54
 80083a0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80083a2:	5c9a      	ldrb	r2, [r3, r2]
 80083a4:	9216      	str	r2, [sp, #88]	; 0x58
 80083a6:	aa20      	add	r2, sp, #128	; 0x80
 80083a8:	7b12      	ldrb	r2, [r2, #12]
 80083aa:	9217      	str	r2, [sp, #92]	; 0x5c
 80083ac:	aa20      	add	r2, sp, #128	; 0x80
 80083ae:	7852      	ldrb	r2, [r2, #1]
 80083b0:	9218      	str	r2, [sp, #96]	; 0x60
 80083b2:	aa20      	add	r2, sp, #128	; 0x80
 80083b4:	7992      	ldrb	r2, [r2, #6]
 80083b6:	9219      	str	r2, [sp, #100]	; 0x64
 80083b8:	5c9a      	ldrb	r2, [r3, r2]
 80083ba:	921a      	str	r2, [sp, #104]	; 0x68
 80083bc:	aa20      	add	r2, sp, #128	; 0x80
 80083be:	7ad2      	ldrb	r2, [r2, #11]
 80083c0:	921b      	str	r2, [sp, #108]	; 0x6c
 80083c2:	5c9a      	ldrb	r2, [r3, r2]
 80083c4:	921c      	str	r2, [sp, #112]	; 0x70
 80083c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80083c8:	5c9a      	ldrb	r2, [r3, r2]
 80083ca:	921d      	str	r2, [sp, #116]	; 0x74
 80083cc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80083ce:	5c9b      	ldrb	r3, [r3, r2]
 80083d0:	931e      	str	r3, [sp, #120]	; 0x78
 80083d2:	0033      	movs	r3, r6
 80083d4:	33f0      	adds	r3, #240	; 0xf0
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	42ab      	cmp	r3, r5
 80083da:	d827      	bhi.n	800842c <lorawan_aes_encrypt+0x130>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80083dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083de:	ab20      	add	r3, sp, #128	; 0x80
 80083e0:	711a      	strb	r2, [r3, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80083e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 80083e4:	7018      	strb	r0, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80083e6:	721a      	strb	r2, [r3, #8]
 80083e8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80083ea:	981f      	ldr	r0, [sp, #124]	; 0x7c
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 80083ec:	731a      	strb	r2, [r3, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80083ee:	9a06      	ldr	r2, [sp, #24]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80083f0:	0019      	movs	r1, r3
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 80083f2:	705a      	strb	r2, [r3, #1]
 80083f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083f6:	715a      	strb	r2, [r3, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 80083f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80083fa:	725a      	strb	r2, [r3, #9]
 80083fc:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80083fe:	735a      	strb	r2, [r3, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8008400:	9a03      	ldr	r2, [sp, #12]
 8008402:	709a      	strb	r2, [r3, #2]
 8008404:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008406:	729a      	strb	r2, [r3, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8008408:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800840a:	719a      	strb	r2, [r3, #6]
 800840c:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800840e:	739a      	strb	r2, [r3, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8008410:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8008412:	73da      	strb	r2, [r3, #15]
 8008414:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008416:	72da      	strb	r2, [r3, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8008418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800841a:	71da      	strb	r2, [r3, #7]
 800841c:	9a05      	ldr	r2, [sp, #20]
 800841e:	70da      	strb	r2, [r3, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8008420:	4662      	mov	r2, ip
 8008422:	f7ff fea3 	bl	800816c <copy_and_key>
    return 0;
 8008426:	2000      	movs	r0, #0
}
 8008428:	b025      	add	sp, #148	; 0x94
 800842a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800842c:	4b54      	ldr	r3, [pc, #336]	; (8008580 <lorawan_aes_encrypt+0x284>)
 800842e:	9c01      	ldr	r4, [sp, #4]
 8008430:	9905      	ldr	r1, [sp, #20]
 8008432:	9a03      	ldr	r2, [sp, #12]
 8008434:	5d1c      	ldrb	r4, [r3, r4]
 8008436:	404a      	eors	r2, r1
 8008438:	4054      	eors	r4, r2
 800843a:	9902      	ldr	r1, [sp, #8]
 800843c:	4a51      	ldr	r2, [pc, #324]	; (8008584 <lorawan_aes_encrypt+0x288>)
        for( r = 1 ; r < ctx->rnd ; ++r )
 800843e:	3501      	adds	r5, #1
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8008440:	5c51      	ldrb	r1, [r2, r1]
        for( r = 1 ; r < ctx->rnd ; ++r )
 8008442:	b2ed      	uxtb	r5, r5
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8008444:	404c      	eors	r4, r1
 8008446:	a920      	add	r1, sp, #128	; 0x80
 8008448:	700c      	strb	r4, [r1, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800844a:	9c02      	ldr	r4, [sp, #8]
 800844c:	9905      	ldr	r1, [sp, #20]
 800844e:	5d1c      	ldrb	r4, [r3, r4]
 8008450:	4041      	eors	r1, r0
 8008452:	4061      	eors	r1, r4
 8008454:	5dd4      	ldrb	r4, [r2, r7]
 8008456:	4061      	eors	r1, r4
 8008458:	ac20      	add	r4, sp, #128	; 0x80
 800845a:	7061      	strb	r1, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800845c:	9906      	ldr	r1, [sp, #24]
 800845e:	4048      	eors	r0, r1
 8008460:	5dd9      	ldrb	r1, [r3, r7]
 8008462:	4048      	eors	r0, r1
 8008464:	9904      	ldr	r1, [sp, #16]
 8008466:	5c51      	ldrb	r1, [r2, r1]
 8008468:	4048      	eors	r0, r1
 800846a:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800846c:	9903      	ldr	r1, [sp, #12]
 800846e:	9806      	ldr	r0, [sp, #24]
 8008470:	4041      	eors	r1, r0
 8008472:	9801      	ldr	r0, [sp, #4]
 8008474:	5c10      	ldrb	r0, [r2, r0]
 8008476:	4041      	eors	r1, r0
 8008478:	9804      	ldr	r0, [sp, #16]
 800847a:	5c18      	ldrb	r0, [r3, r0]
 800847c:	4041      	eors	r1, r0
 800847e:	70e1      	strb	r1, [r4, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8008480:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008482:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008484:	4041      	eors	r1, r0
 8008486:	9807      	ldr	r0, [sp, #28]
 8008488:	5c18      	ldrb	r0, [r3, r0]
 800848a:	4041      	eors	r1, r0
 800848c:	9808      	ldr	r0, [sp, #32]
 800848e:	5c10      	ldrb	r0, [r2, r0]
 8008490:	4041      	eors	r1, r0
 8008492:	7121      	strb	r1, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8008494:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008496:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008498:	4041      	eors	r1, r0
 800849a:	9808      	ldr	r0, [sp, #32]
 800849c:	5c18      	ldrb	r0, [r3, r0]
 800849e:	4041      	eors	r1, r0
 80084a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084a2:	5c10      	ldrb	r0, [r2, r0]
 80084a4:	4041      	eors	r1, r0
 80084a6:	7161      	strb	r1, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 80084a8:	980e      	ldr	r0, [sp, #56]	; 0x38
 80084aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80084ac:	4041      	eors	r1, r0
 80084ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084b0:	5c18      	ldrb	r0, [r3, r0]
 80084b2:	4041      	eors	r1, r0
 80084b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80084b6:	5c10      	ldrb	r0, [r2, r0]
 80084b8:	4041      	eors	r1, r0
 80084ba:	71a1      	strb	r1, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 80084bc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80084be:	990a      	ldr	r1, [sp, #40]	; 0x28
 80084c0:	4041      	eors	r1, r0
 80084c2:	9807      	ldr	r0, [sp, #28]
 80084c4:	5c10      	ldrb	r0, [r2, r0]
 80084c6:	4041      	eors	r1, r0
 80084c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80084ca:	5c18      	ldrb	r0, [r3, r0]
 80084cc:	4041      	eors	r1, r0
 80084ce:	71e1      	strb	r1, [r4, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 80084d0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80084d2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80084d4:	4041      	eors	r1, r0
 80084d6:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80084d8:	5c18      	ldrb	r0, [r3, r0]
 80084da:	4041      	eors	r1, r0
 80084dc:	9810      	ldr	r0, [sp, #64]	; 0x40
 80084de:	5c10      	ldrb	r0, [r2, r0]
 80084e0:	4041      	eors	r1, r0
 80084e2:	7221      	strb	r1, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 80084e4:	9815      	ldr	r0, [sp, #84]	; 0x54
 80084e6:	9914      	ldr	r1, [sp, #80]	; 0x50
 80084e8:	4041      	eors	r1, r0
 80084ea:	9810      	ldr	r0, [sp, #64]	; 0x40
 80084ec:	5c18      	ldrb	r0, [r3, r0]
 80084ee:	4041      	eors	r1, r0
 80084f0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80084f2:	5c10      	ldrb	r0, [r2, r0]
 80084f4:	4041      	eors	r1, r0
 80084f6:	7261      	strb	r1, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 80084f8:	9816      	ldr	r0, [sp, #88]	; 0x58
 80084fa:	9915      	ldr	r1, [sp, #84]	; 0x54
 80084fc:	4041      	eors	r1, r0
 80084fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008500:	5c18      	ldrb	r0, [r3, r0]
 8008502:	4041      	eors	r1, r0
 8008504:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008506:	5c10      	ldrb	r0, [r2, r0]
 8008508:	4041      	eors	r1, r0
 800850a:	72a1      	strb	r1, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800850c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800850e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008510:	4041      	eors	r1, r0
 8008512:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008514:	5c10      	ldrb	r0, [r2, r0]
 8008516:	4041      	eors	r1, r0
 8008518:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800851a:	5c18      	ldrb	r0, [r3, r0]
 800851c:	4041      	eors	r1, r0
 800851e:	72e1      	strb	r1, [r4, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8008520:	981c      	ldr	r0, [sp, #112]	; 0x70
 8008522:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008524:	4041      	eors	r1, r0
 8008526:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008528:	5c18      	ldrb	r0, [r3, r0]
 800852a:	4041      	eors	r1, r0
 800852c:	9818      	ldr	r0, [sp, #96]	; 0x60
 800852e:	5c10      	ldrb	r0, [r2, r0]
 8008530:	4041      	eors	r1, r0
 8008532:	7321      	strb	r1, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8008534:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008536:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008538:	4041      	eors	r1, r0
 800853a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800853c:	5c18      	ldrb	r0, [r3, r0]
 800853e:	4041      	eors	r1, r0
 8008540:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008542:	5c10      	ldrb	r0, [r2, r0]
 8008544:	4041      	eors	r1, r0
 8008546:	7361      	strb	r1, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8008548:	991d      	ldr	r1, [sp, #116]	; 0x74
 800854a:	981e      	ldr	r0, [sp, #120]	; 0x78
 800854c:	4041      	eors	r1, r0
 800854e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008550:	5c18      	ldrb	r0, [r3, r0]
 8008552:	4041      	eors	r1, r0
 8008554:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008556:	5c10      	ldrb	r0, [r2, r0]
 8008558:	4041      	eors	r1, r0
 800855a:	73a1      	strb	r1, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800855c:	981e      	ldr	r0, [sp, #120]	; 0x78
 800855e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008560:	4041      	eors	r1, r0
 8008562:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008564:	5c12      	ldrb	r2, [r2, r0]
    xor_block(d, k);
 8008566:	0020      	movs	r0, r4
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8008568:	404a      	eors	r2, r1
 800856a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800856c:	5c5b      	ldrb	r3, [r3, r1]
    xor_block(d, k);
 800856e:	4661      	mov	r1, ip
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8008570:	4053      	eors	r3, r2
 8008572:	73e3      	strb	r3, [r4, #15]
    xor_block(d, k);
 8008574:	f7ff fdb9 	bl	80080ea <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8008578:	e6d1      	b.n	800831e <lorawan_aes_encrypt+0x22>
 800857a:	46c0      	nop			; (mov r8, r8)
 800857c:	0801149d 	.word	0x0801149d
 8008580:	0801139d 	.word	0x0801139d
 8008584:	0801129d 	.word	0x0801129d

08008588 <GetKeyByID>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8008588:	4a09      	ldr	r2, [pc, #36]	; (80085b0 <GetKeyByID+0x28>)
{
 800858a:	b530      	push	{r4, r5, lr}
 800858c:	2300      	movs	r3, #0
 800858e:	0014      	movs	r4, r2
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 8008590:	7c15      	ldrb	r5, [r2, #16]
 8008592:	4285      	cmp	r5, r0
 8008594:	d106      	bne.n	80085a4 <GetKeyByID+0x1c>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 8008596:	2211      	movs	r2, #17
      return SECURE_ELEMENT_SUCCESS;
 8008598:	2000      	movs	r0, #0
      *keyItem = &(SeNvmCtx.KeyList[i]);
 800859a:	4353      	muls	r3, r2
 800859c:	3310      	adds	r3, #16
 800859e:	18e3      	adds	r3, r4, r3
 80085a0:	600b      	str	r3, [r1, #0]
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}
 80085a2:	bd30      	pop	{r4, r5, pc}
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 80085a4:	3301      	adds	r3, #1
 80085a6:	3211      	adds	r2, #17
 80085a8:	2b0a      	cmp	r3, #10
 80085aa:	d1f1      	bne.n	8008590 <GetKeyByID+0x8>
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80085ac:	2003      	movs	r0, #3
 80085ae:	e7f8      	b.n	80085a2 <GetKeyByID+0x1a>
 80085b0:	20000040 	.word	0x20000040

080085b4 <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
  return;
}
 80085b4:	4770      	bx	lr

080085b6 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 80085b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085b8:	b0cf      	sub	sp, #316	; 0x13c
 80085ba:	0006      	movs	r6, r0
 80085bc:	000d      	movs	r5, r1
 80085be:	0017      	movs	r7, r2
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if ((buffer == NULL) || (cmac == NULL))
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80085c0:	2402      	movs	r4, #2
{
 80085c2:	9301      	str	r3, [sp, #4]
  if ((buffer == NULL) || (cmac == NULL))
 80085c4:	2900      	cmp	r1, #0
 80085c6:	d023      	beq.n	8008610 <ComputeCmac+0x5a>
 80085c8:	9b54      	ldr	r3, [sp, #336]	; 0x150
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d020      	beq.n	8008610 <ComputeCmac+0x5a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 80085ce:	a808      	add	r0, sp, #32
 80085d0:	f7ff fc58 	bl	8007e84 <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 80085d4:	9801      	ldr	r0, [sp, #4]
 80085d6:	a903      	add	r1, sp, #12
 80085d8:	f7ff ffd6 	bl	8008588 <GetKeyByID>
 80085dc:	1e04      	subs	r4, r0, #0

  if (retval == SECURE_ELEMENT_SUCCESS)
 80085de:	d117      	bne.n	8008610 <ComputeCmac+0x5a>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 80085e0:	9b03      	ldr	r3, [sp, #12]
 80085e2:	a808      	add	r0, sp, #32
 80085e4:	1c59      	adds	r1, r3, #1
 80085e6:	f7ff fc5d 	bl	8007ea4 <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 80085ea:	2e00      	cmp	r6, #0
 80085ec:	d004      	beq.n	80085f8 <ComputeCmac+0x42>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 80085ee:	2210      	movs	r2, #16
 80085f0:	0031      	movs	r1, r6
 80085f2:	a808      	add	r0, sp, #32
 80085f4:	f7ff fc5d 	bl	8007eb2 <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 80085f8:	003a      	movs	r2, r7
 80085fa:	0029      	movs	r1, r5
 80085fc:	a808      	add	r0, sp, #32
 80085fe:	f7ff fc58 	bl	8007eb2 <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 8008602:	a908      	add	r1, sp, #32
 8008604:	a804      	add	r0, sp, #16
 8008606:	f7ff fcc4 	bl	8007f92 <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 800860a:	9b54      	ldr	r3, [sp, #336]	; 0x150
 800860c:	9a04      	ldr	r2, [sp, #16]
 800860e:	601a      	str	r2, [r3, #0]
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 8008610:	0020      	movs	r0, r4
 8008612:	b04f      	add	sp, #316	; 0x13c
 8008614:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008618 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 8008618:	b530      	push	{r4, r5, lr}
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800861a:	22aa      	movs	r2, #170	; 0xaa
{
 800861c:	b093      	sub	sp, #76	; 0x4c
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800861e:	4968      	ldr	r1, [pc, #416]	; (80087c0 <SecureElementInit+0x1a8>)
{
 8008620:	0004      	movs	r4, r0
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 8008622:	4868      	ldr	r0, [pc, #416]	; (80087c4 <SecureElementInit+0x1ac>)
 8008624:	f005 fd78 	bl	800e118 <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 8008628:	a911      	add	r1, sp, #68	; 0x44
 800862a:	2000      	movs	r0, #0
 800862c:	f7ff ffac 	bl	8008588 <GetKeyByID>
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8008630:	2200      	movs	r2, #0
  retval = GetKeyByID(APP_KEY, &keyItem);
 8008632:	0005      	movs	r5, r0
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8008634:	0011      	movs	r1, r2
 8008636:	2002      	movs	r0, #2
 8008638:	4b63      	ldr	r3, [pc, #396]	; (80087c8 <SecureElementInit+0x1b0>)
 800863a:	f007 f84b 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 800863e:	2d00      	cmp	r5, #0
 8008640:	d126      	bne.n	8008690 <SecureElementInit+0x78>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 8008642:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008644:	0029      	movs	r1, r5
 8008646:	7c1a      	ldrb	r2, [r3, #16]
 8008648:	2002      	movs	r0, #2
 800864a:	920f      	str	r2, [sp, #60]	; 0x3c
 800864c:	7bda      	ldrb	r2, [r3, #15]
 800864e:	920e      	str	r2, [sp, #56]	; 0x38
 8008650:	7b9a      	ldrb	r2, [r3, #14]
 8008652:	920d      	str	r2, [sp, #52]	; 0x34
 8008654:	7b5a      	ldrb	r2, [r3, #13]
 8008656:	920c      	str	r2, [sp, #48]	; 0x30
 8008658:	7b1a      	ldrb	r2, [r3, #12]
 800865a:	920b      	str	r2, [sp, #44]	; 0x2c
 800865c:	7ada      	ldrb	r2, [r3, #11]
 800865e:	920a      	str	r2, [sp, #40]	; 0x28
 8008660:	7a9a      	ldrb	r2, [r3, #10]
 8008662:	9209      	str	r2, [sp, #36]	; 0x24
 8008664:	7a5a      	ldrb	r2, [r3, #9]
 8008666:	9208      	str	r2, [sp, #32]
 8008668:	7a1a      	ldrb	r2, [r3, #8]
 800866a:	9207      	str	r2, [sp, #28]
 800866c:	79da      	ldrb	r2, [r3, #7]
 800866e:	9206      	str	r2, [sp, #24]
 8008670:	799a      	ldrb	r2, [r3, #6]
 8008672:	9205      	str	r2, [sp, #20]
 8008674:	795a      	ldrb	r2, [r3, #5]
 8008676:	9204      	str	r2, [sp, #16]
 8008678:	791a      	ldrb	r2, [r3, #4]
 800867a:	9203      	str	r2, [sp, #12]
 800867c:	78da      	ldrb	r2, [r3, #3]
 800867e:	9202      	str	r2, [sp, #8]
 8008680:	789a      	ldrb	r2, [r3, #2]
 8008682:	9201      	str	r2, [sp, #4]
 8008684:	785b      	ldrb	r3, [r3, #1]
 8008686:	002a      	movs	r2, r5
 8008688:	9300      	str	r3, [sp, #0]
 800868a:	4b50      	ldr	r3, [pc, #320]	; (80087cc <SecureElementInit+0x1b4>)
 800868c:	f007 f822 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 8008690:	a911      	add	r1, sp, #68	; 0x44
 8008692:	2001      	movs	r0, #1
 8008694:	f7ff ff78 	bl	8008588 <GetKeyByID>
 8008698:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 800869a:	d125      	bne.n	80086e8 <SecureElementInit+0xd0>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:  %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 800869c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800869e:	7c1a      	ldrb	r2, [r3, #16]
 80086a0:	920f      	str	r2, [sp, #60]	; 0x3c
 80086a2:	7bda      	ldrb	r2, [r3, #15]
 80086a4:	920e      	str	r2, [sp, #56]	; 0x38
 80086a6:	7b9a      	ldrb	r2, [r3, #14]
 80086a8:	920d      	str	r2, [sp, #52]	; 0x34
 80086aa:	7b5a      	ldrb	r2, [r3, #13]
 80086ac:	920c      	str	r2, [sp, #48]	; 0x30
 80086ae:	7b1a      	ldrb	r2, [r3, #12]
 80086b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80086b2:	7ada      	ldrb	r2, [r3, #11]
 80086b4:	920a      	str	r2, [sp, #40]	; 0x28
 80086b6:	7a9a      	ldrb	r2, [r3, #10]
 80086b8:	9209      	str	r2, [sp, #36]	; 0x24
 80086ba:	7a5a      	ldrb	r2, [r3, #9]
 80086bc:	9208      	str	r2, [sp, #32]
 80086be:	7a1a      	ldrb	r2, [r3, #8]
 80086c0:	9207      	str	r2, [sp, #28]
 80086c2:	79da      	ldrb	r2, [r3, #7]
 80086c4:	9206      	str	r2, [sp, #24]
 80086c6:	799a      	ldrb	r2, [r3, #6]
 80086c8:	9205      	str	r2, [sp, #20]
 80086ca:	795a      	ldrb	r2, [r3, #5]
 80086cc:	9204      	str	r2, [sp, #16]
 80086ce:	791a      	ldrb	r2, [r3, #4]
 80086d0:	9203      	str	r2, [sp, #12]
 80086d2:	78da      	ldrb	r2, [r3, #3]
 80086d4:	9202      	str	r2, [sp, #8]
 80086d6:	789a      	ldrb	r2, [r3, #2]
 80086d8:	9201      	str	r2, [sp, #4]
 80086da:	785b      	ldrb	r3, [r3, #1]
 80086dc:	0002      	movs	r2, r0
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	2002      	movs	r0, #2
 80086e2:	4b3b      	ldr	r3, [pc, #236]	; (80087d0 <SecureElementInit+0x1b8>)
 80086e4:	f006 fff6 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
  }
  KEY_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 80086e8:	2200      	movs	r2, #0
 80086ea:	4b3a      	ldr	r3, [pc, #232]	; (80087d4 <SecureElementInit+0x1bc>)
 80086ec:	0011      	movs	r1, r2
 80086ee:	2002      	movs	r0, #2
 80086f0:	f006 fff0 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 80086f4:	a911      	add	r1, sp, #68	; 0x44
 80086f6:	2003      	movs	r0, #3
 80086f8:	f7ff ff46 	bl	8008588 <GetKeyByID>
 80086fc:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 80086fe:	d125      	bne.n	800874c <SecureElementInit+0x134>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 8008700:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008702:	7c1a      	ldrb	r2, [r3, #16]
 8008704:	920f      	str	r2, [sp, #60]	; 0x3c
 8008706:	7bda      	ldrb	r2, [r3, #15]
 8008708:	920e      	str	r2, [sp, #56]	; 0x38
 800870a:	7b9a      	ldrb	r2, [r3, #14]
 800870c:	920d      	str	r2, [sp, #52]	; 0x34
 800870e:	7b5a      	ldrb	r2, [r3, #13]
 8008710:	920c      	str	r2, [sp, #48]	; 0x30
 8008712:	7b1a      	ldrb	r2, [r3, #12]
 8008714:	920b      	str	r2, [sp, #44]	; 0x2c
 8008716:	7ada      	ldrb	r2, [r3, #11]
 8008718:	920a      	str	r2, [sp, #40]	; 0x28
 800871a:	7a9a      	ldrb	r2, [r3, #10]
 800871c:	9209      	str	r2, [sp, #36]	; 0x24
 800871e:	7a5a      	ldrb	r2, [r3, #9]
 8008720:	9208      	str	r2, [sp, #32]
 8008722:	7a1a      	ldrb	r2, [r3, #8]
 8008724:	9207      	str	r2, [sp, #28]
 8008726:	79da      	ldrb	r2, [r3, #7]
 8008728:	9206      	str	r2, [sp, #24]
 800872a:	799a      	ldrb	r2, [r3, #6]
 800872c:	9205      	str	r2, [sp, #20]
 800872e:	795a      	ldrb	r2, [r3, #5]
 8008730:	9204      	str	r2, [sp, #16]
 8008732:	791a      	ldrb	r2, [r3, #4]
 8008734:	9203      	str	r2, [sp, #12]
 8008736:	78da      	ldrb	r2, [r3, #3]
 8008738:	9202      	str	r2, [sp, #8]
 800873a:	789a      	ldrb	r2, [r3, #2]
 800873c:	9201      	str	r2, [sp, #4]
 800873e:	785b      	ldrb	r3, [r3, #1]
 8008740:	0002      	movs	r2, r0
 8008742:	9300      	str	r3, [sp, #0]
 8008744:	2002      	movs	r0, #2
 8008746:	4b24      	ldr	r3, [pc, #144]	; (80087d8 <SecureElementInit+0x1c0>)
 8008748:	f006 ffc4 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 800874c:	a911      	add	r1, sp, #68	; 0x44
 800874e:	2002      	movs	r0, #2
 8008750:	f7ff ff1a 	bl	8008588 <GetKeyByID>
 8008754:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 8008756:	d125      	bne.n	80087a4 <SecureElementInit+0x18c>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey: %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X %02X\r\n", HEX16(keyItem->KeyValue));
 8008758:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800875a:	7c1a      	ldrb	r2, [r3, #16]
 800875c:	920f      	str	r2, [sp, #60]	; 0x3c
 800875e:	7bda      	ldrb	r2, [r3, #15]
 8008760:	920e      	str	r2, [sp, #56]	; 0x38
 8008762:	7b9a      	ldrb	r2, [r3, #14]
 8008764:	920d      	str	r2, [sp, #52]	; 0x34
 8008766:	7b5a      	ldrb	r2, [r3, #13]
 8008768:	920c      	str	r2, [sp, #48]	; 0x30
 800876a:	7b1a      	ldrb	r2, [r3, #12]
 800876c:	920b      	str	r2, [sp, #44]	; 0x2c
 800876e:	7ada      	ldrb	r2, [r3, #11]
 8008770:	920a      	str	r2, [sp, #40]	; 0x28
 8008772:	7a9a      	ldrb	r2, [r3, #10]
 8008774:	9209      	str	r2, [sp, #36]	; 0x24
 8008776:	7a5a      	ldrb	r2, [r3, #9]
 8008778:	9208      	str	r2, [sp, #32]
 800877a:	7a1a      	ldrb	r2, [r3, #8]
 800877c:	9207      	str	r2, [sp, #28]
 800877e:	79da      	ldrb	r2, [r3, #7]
 8008780:	9206      	str	r2, [sp, #24]
 8008782:	799a      	ldrb	r2, [r3, #6]
 8008784:	9205      	str	r2, [sp, #20]
 8008786:	795a      	ldrb	r2, [r3, #5]
 8008788:	9204      	str	r2, [sp, #16]
 800878a:	791a      	ldrb	r2, [r3, #4]
 800878c:	9203      	str	r2, [sp, #12]
 800878e:	78da      	ldrb	r2, [r3, #3]
 8008790:	9202      	str	r2, [sp, #8]
 8008792:	789a      	ldrb	r2, [r3, #2]
 8008794:	9201      	str	r2, [sp, #4]
 8008796:	785b      	ldrb	r3, [r3, #1]
 8008798:	0002      	movs	r2, r0
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	2002      	movs	r0, #2
 800879e:	4b0f      	ldr	r3, [pc, #60]	; (80087dc <SecureElementInit+0x1c4>)
 80087a0:	f006 ff98 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 80087a4:	2c00      	cmp	r4, #0
 80087a6:	d100      	bne.n	80087aa <SecureElementInit+0x192>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 80087a8:	4c0d      	ldr	r4, [pc, #52]	; (80087e0 <SecureElementInit+0x1c8>)
 80087aa:	4d0e      	ldr	r5, [pc, #56]	; (80087e4 <SecureElementInit+0x1cc>)
  }

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
 80087ac:	480e      	ldr	r0, [pc, #56]	; (80087e8 <SecureElementInit+0x1d0>)
 80087ae:	602c      	str	r4, [r5, #0]
 80087b0:	f7fb fc82 	bl	80040b8 <GetUniqueId>
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 80087b4:	682b      	ldr	r3, [r5, #0]
 80087b6:	4798      	blx	r3

  return SECURE_ELEMENT_SUCCESS;
}
 80087b8:	2000      	movs	r0, #0
 80087ba:	b013      	add	sp, #76	; 0x4c
 80087bc:	bd30      	pop	{r4, r5, pc}
 80087be:	46c0      	nop			; (mov r8, r8)
 80087c0:	0801159d 	.word	0x0801159d
 80087c4:	20000050 	.word	0x20000050
 80087c8:	08011c67 	.word	0x08011c67
 80087cc:	08011c7c 	.word	0x08011c7c
 80087d0:	08011cde 	.word	0x08011cde
 80087d4:	08011d40 	.word	0x08011d40
 80087d8:	08011d55 	.word	0x08011d55
 80087dc:	08011db7 	.word	0x08011db7
 80087e0:	080085b5 	.word	0x080085b5
 80087e4:	200003d8 	.word	0x200003d8
 80087e8:	20000040 	.word	0x20000040

080087ec <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 80087ec:	0001      	movs	r1, r0
 80087ee:	b510      	push	{r4, lr}
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
    return SECURE_ELEMENT_SUCCESS;
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80087f0:	2002      	movs	r0, #2
  if (seNvmCtx != 0)
 80087f2:	2900      	cmp	r1, #0
 80087f4:	d004      	beq.n	8008800 <SecureElementRestoreNvmCtx+0x14>
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 80087f6:	4803      	ldr	r0, [pc, #12]	; (8008804 <SecureElementRestoreNvmCtx+0x18>)
 80087f8:	22ba      	movs	r2, #186	; 0xba
 80087fa:	f005 fc8d 	bl	800e118 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80087fe:	2000      	movs	r0, #0
  }
}
 8008800:	bd10      	pop	{r4, pc}
 8008802:	46c0      	nop			; (mov r8, r8)
 8008804:	20000040 	.word	0x20000040

08008808 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
  *seNvmCtxSize = sizeof(SeNvmCtx);
 8008808:	23ba      	movs	r3, #186	; 0xba
 800880a:	6003      	str	r3, [r0, #0]
  return &SeNvmCtx;
}
 800880c:	4800      	ldr	r0, [pc, #0]	; (8008810 <SecureElementGetNvmCtx+0x8>)
 800880e:	4770      	bx	lr
 8008810:	20000040 	.word	0x20000040

08008814 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
 8008814:	b513      	push	{r0, r1, r4, lr}
 8008816:	0004      	movs	r4, r0
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008818:	2003      	movs	r0, #3
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 800881a:	2b7e      	cmp	r3, #126	; 0x7e
 800881c:	d804      	bhi.n	8008828 <SecureElementComputeAesCmac+0x14>
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 800881e:	9804      	ldr	r0, [sp, #16]
 8008820:	9000      	str	r0, [sp, #0]
 8008822:	0020      	movs	r0, r4
 8008824:	f7ff fec7 	bl	80085b6 <ComputeCmac>
}
 8008828:	bd16      	pop	{r1, r2, r4, pc}

0800882a <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 800882a:	b530      	push	{r4, r5, lr}
 800882c:	0004      	movs	r4, r0
 800882e:	0015      	movs	r5, r2
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (buffer == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008830:	2002      	movs	r0, #2
{
 8008832:	b085      	sub	sp, #20
  if (buffer == NULL)
 8008834:	2c00      	cmp	r4, #0
 8008836:	d00e      	beq.n	8008856 <SecureElementVerifyAesCmac+0x2c>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 8008838:	2000      	movs	r0, #0

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 800883a:	aa03      	add	r2, sp, #12
 800883c:	9200      	str	r2, [sp, #0]
 800883e:	000a      	movs	r2, r1
 8008840:	0021      	movs	r1, r4
  uint32_t compCmac = 0;
 8008842:	9003      	str	r0, [sp, #12]
  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 8008844:	f7ff feb7 	bl	80085b6 <ComputeCmac>
  if (retval != SECURE_ELEMENT_SUCCESS)
 8008848:	2800      	cmp	r0, #0
 800884a:	d104      	bne.n	8008856 <SecureElementVerifyAesCmac+0x2c>
  {
    return retval;
  }

  if (expectedCmac != compCmac)
 800884c:	9b03      	ldr	r3, [sp, #12]
 800884e:	1b58      	subs	r0, r3, r5
 8008850:	1e42      	subs	r2, r0, #1
 8008852:	4190      	sbcs	r0, r2
    return SECURE_ELEMENT_ERROR_NPE;
 8008854:	b2c0      	uxtb	r0, r0
  }

#endif /* LORAWAN_KMS */

  return retval;
}
 8008856:	b005      	add	sp, #20
 8008858:	bd30      	pop	{r4, r5, pc}

0800885a <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 800885a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800885c:	b0c1      	sub	sp, #260	; 0x104
 800885e:	000e      	movs	r6, r1
 8008860:	0015      	movs	r5, r2
 8008862:	001f      	movs	r7, r3
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (buffer == NULL || encBuffer == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008864:	2402      	movs	r4, #2
{
 8008866:	9001      	str	r0, [sp, #4]
  if (buffer == NULL || encBuffer == NULL)
 8008868:	2800      	cmp	r0, #0
 800886a:	d01b      	beq.n	80088a4 <SecureElementAesEncrypt+0x4a>
 800886c:	2f00      	cmp	r7, #0
 800886e:	d019      	beq.n	80088a4 <SecureElementAesEncrypt+0x4a>
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 8008870:	230f      	movs	r3, #15
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8008872:	3403      	adds	r4, #3
  if ((size % 16) != 0)
 8008874:	4019      	ands	r1, r3
 8008876:	421e      	tst	r6, r3
 8008878:	d114      	bne.n	80088a4 <SecureElementAesEncrypt+0x4a>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 800887a:	22f0      	movs	r2, #240	; 0xf0
 800887c:	a803      	add	r0, sp, #12
 800887e:	f005 fc61 	bl	800e144 <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 8008882:	0028      	movs	r0, r5
 8008884:	a902      	add	r1, sp, #8
 8008886:	f7ff fe7f 	bl	8008588 <GetKeyByID>
 800888a:	1e04      	subs	r4, r0, #0

  if (retval == SECURE_ELEMENT_SUCCESS)
 800888c:	d10a      	bne.n	80088a4 <SecureElementAesEncrypt+0x4a>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800888e:	9b02      	ldr	r3, [sp, #8]
 8008890:	2110      	movs	r1, #16
 8008892:	1c58      	adds	r0, r3, #1
 8008894:	aa03      	add	r2, sp, #12
 8008896:	f7ff fcab 	bl	80081f0 <lorawan_aes_set_key>

    uint8_t block = 0;

    while (size != 0)
 800889a:	0035      	movs	r5, r6
 800889c:	1b70      	subs	r0, r6, r5
 800889e:	b2c0      	uxtb	r0, r0
 80088a0:	2d00      	cmp	r5, #0
 80088a2:	d102      	bne.n	80088aa <SecureElementAesEncrypt+0x50>
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 80088a4:	0020      	movs	r0, r4
 80088a6:	b041      	add	sp, #260	; 0x104
 80088a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 80088aa:	9b01      	ldr	r3, [sp, #4]
 80088ac:	1839      	adds	r1, r7, r0
 80088ae:	aa03      	add	r2, sp, #12
 80088b0:	1818      	adds	r0, r3, r0
      size = size - 16;
 80088b2:	3d10      	subs	r5, #16
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 80088b4:	f7ff fd22 	bl	80082fc <lorawan_aes_encrypt>
      size = size - 16;
 80088b8:	b2ad      	uxth	r5, r5
 80088ba:	e7ef      	b.n	800889c <SecureElementAesEncrypt+0x42>

080088bc <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
 80088bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80088be:	4a19      	ldr	r2, [pc, #100]	; (8008924 <SecureElementSetKey.part.0+0x68>)
 80088c0:	000c      	movs	r4, r1
 80088c2:	2300      	movs	r3, #0
 80088c4:	0015      	movs	r5, r2
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 80088c6:	7c11      	ldrb	r1, [r2, #16]
 80088c8:	3301      	adds	r3, #1
 80088ca:	4281      	cmp	r1, r0
 80088cc:	d125      	bne.n	800891a <SecureElementSetKey.part.0+0x5e>
      if (keyID == MC_KEY_0)
 80088ce:	2211      	movs	r2, #17
 80088d0:	4353      	muls	r3, r2
 80088d2:	4e15      	ldr	r6, [pc, #84]	; (8008928 <SecureElementSetKey.part.0+0x6c>)
 80088d4:	18ed      	adds	r5, r5, r3
 80088d6:	2880      	cmp	r0, #128	; 0x80
 80088d8:	d116      	bne.n	8008908 <SecureElementSetKey.part.0+0x4c>
        uint8_t decryptedKey[16] = { 0 };
 80088da:	2100      	movs	r1, #0
 80088dc:	3a05      	subs	r2, #5
 80088de:	a801      	add	r0, sp, #4
 80088e0:	9100      	str	r1, [sp, #0]
 80088e2:	f007 fc26 	bl	8010132 <memset>
        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 80088e6:	466b      	mov	r3, sp
 80088e8:	227f      	movs	r2, #127	; 0x7f
 80088ea:	2110      	movs	r1, #16
 80088ec:	0020      	movs	r0, r4
 80088ee:	f7ff ffb4 	bl	800885a <SecureElementAesEncrypt>
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 80088f2:	2210      	movs	r2, #16
        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 80088f4:	0004      	movs	r4, r0
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 80088f6:	4669      	mov	r1, sp
 80088f8:	0028      	movs	r0, r5
 80088fa:	f005 fc0d 	bl	800e118 <memcpy1>
        SeNvmCtxChanged();
 80088fe:	6833      	ldr	r3, [r6, #0]
 8008900:	4798      	blx	r3
}
 8008902:	0020      	movs	r0, r4
 8008904:	b004      	add	sp, #16
 8008906:	bd70      	pop	{r4, r5, r6, pc}
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 8008908:	0021      	movs	r1, r4
 800890a:	2210      	movs	r2, #16
 800890c:	0028      	movs	r0, r5
 800890e:	f005 fc03 	bl	800e118 <memcpy1>
        SeNvmCtxChanged();
 8008912:	6833      	ldr	r3, [r6, #0]
 8008914:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 8008916:	2400      	movs	r4, #0
 8008918:	e7f3      	b.n	8008902 <SecureElementSetKey.part.0+0x46>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800891a:	3211      	adds	r2, #17
 800891c:	2b0a      	cmp	r3, #10
 800891e:	d1d2      	bne.n	80088c6 <SecureElementSetKey.part.0+0xa>
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008920:	2403      	movs	r4, #3
 8008922:	e7ee      	b.n	8008902 <SecureElementSetKey.part.0+0x46>
 8008924:	20000040 	.word	0x20000040
 8008928:	200003d8 	.word	0x200003d8

0800892c <SecureElementSetKey>:
{
 800892c:	0003      	movs	r3, r0
 800892e:	b510      	push	{r4, lr}
    return SECURE_ELEMENT_ERROR_NPE;
 8008930:	2002      	movs	r0, #2
  if (key == NULL)
 8008932:	2900      	cmp	r1, #0
 8008934:	d002      	beq.n	800893c <SecureElementSetKey+0x10>
 8008936:	0018      	movs	r0, r3
 8008938:	f7ff ffc0 	bl	80088bc <SecureElementSetKey.part.0>
}
 800893c:	bd10      	pop	{r4, pc}

0800893e <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 800893e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008940:	000d      	movs	r5, r1
 8008942:	0016      	movs	r6, r2
 8008944:	001c      	movs	r4, r3
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (input == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008946:	2002      	movs	r0, #2
  if (input == NULL)
 8008948:	2900      	cmp	r1, #0
 800894a:	d016      	beq.n	800897a <SecureElementDeriveAndStoreKey+0x3c>
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 800894c:	2b7f      	cmp	r3, #127	; 0x7f
 800894e:	d102      	bne.n	8008956 <SecureElementDeriveAndStoreKey+0x18>
  {
    if (rootKeyID != MC_ROOT_KEY)
    {
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008950:	3001      	adds	r0, #1
    if (rootKeyID != MC_ROOT_KEY)
 8008952:	2a04      	cmp	r2, #4
 8008954:	d111      	bne.n	800897a <SecureElementDeriveAndStoreKey+0x3c>
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 8008956:	2100      	movs	r1, #0
 8008958:	220c      	movs	r2, #12
 800895a:	a801      	add	r0, sp, #4
 800895c:	9100      	str	r1, [sp, #0]
 800895e:	f007 fbe8 	bl	8010132 <memset>
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 8008962:	466b      	mov	r3, sp
 8008964:	0032      	movs	r2, r6
 8008966:	2110      	movs	r1, #16
 8008968:	0028      	movs	r0, r5
 800896a:	f7ff ff76 	bl	800885a <SecureElementAesEncrypt>
  if (retval != SECURE_ELEMENT_SUCCESS)
 800896e:	2800      	cmp	r0, #0
 8008970:	d103      	bne.n	800897a <SecureElementDeriveAndStoreKey+0x3c>
  if (key == NULL)
 8008972:	4669      	mov	r1, sp
 8008974:	0020      	movs	r0, r4
 8008976:	f7ff ffa1 	bl	80088bc <SecureElementSetKey.part.0>
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 800897a:	b004      	add	sp, #16
 800897c:	bd70      	pop	{r4, r5, r6, pc}

0800897e <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept(JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                     uint16_t devNonce, uint8_t *encJoinAccept,
                                                     uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                     uint8_t *versionMinor)
{
 800897e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008980:	001d      	movs	r5, r3
 8008982:	ab06      	add	r3, sp, #24
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008984:	2002      	movs	r0, #2
{
 8008986:	781f      	ldrb	r7, [r3, #0]
 8008988:	9e07      	ldr	r6, [sp, #28]
  if ((encJoinAccept == NULL) || (decJoinAccept == NULL) || (versionMinor == NULL))
 800898a:	2d00      	cmp	r5, #0
 800898c:	d037      	beq.n	80089fe <SecureElementProcessJoinAccept+0x80>
 800898e:	2e00      	cmp	r6, #0
 8008990:	d035      	beq.n	80089fe <SecureElementProcessJoinAccept+0x80>
 8008992:	9b08      	ldr	r3, [sp, #32]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d032      	beq.n	80089fe <SecureElementProcessJoinAccept+0x80>
  }

  /* Check that frame size isn't bigger than a JoinAccept with CFList size */
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8008998:	3003      	adds	r0, #3
  if (encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE)
 800899a:	2f21      	cmp	r7, #33	; 0x21
 800899c:	d82f      	bhi.n	80089fe <SecureElementProcessJoinAccept+0x80>
  {
    encKeyID = J_S_ENC_KEY;
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

  memcpy1(decJoinAccept, encJoinAccept, encJoinAcceptSize);
 800899e:	b2bc      	uxth	r4, r7
 80089a0:	0022      	movs	r2, r4
 80089a2:	0029      	movs	r1, r5
 80089a4:	0030      	movs	r0, r6
 80089a6:	f005 fbb7 	bl	800e118 <memcpy1>

  /* Decrypt JoinAccept, skip MHDR */
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 80089aa:	1e61      	subs	r1, r4, #1
 80089ac:	1c73      	adds	r3, r6, #1
 80089ae:	2201      	movs	r2, #1
 80089b0:	b289      	uxth	r1, r1
 80089b2:	1c68      	adds	r0, r5, #1
 80089b4:	f7ff ff51 	bl	800885a <SecureElementAesEncrypt>
 80089b8:	0003      	movs	r3, r0
                              encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE) != SECURE_ELEMENT_SUCCESS)
  {
    return SECURE_ELEMENT_FAIL_ENCRYPT;
 80089ba:	2007      	movs	r0, #7
  if (SecureElementAesEncrypt(encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d11e      	bne.n	80089fe <SecureElementProcessJoinAccept+0x80>
  }

  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 80089c0:	7af3      	ldrb	r3, [r6, #11]
 80089c2:	9a08      	ldr	r2, [sp, #32]
 80089c4:	40c3      	lsrs	r3, r0
    }
  }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
  else
  {
    return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 80089c6:	3803      	subs	r0, #3
  *versionMinor = ((decJoinAccept[11] & 0x80) == 0x80) ? 1 : 0;
 80089c8:	7013      	strb	r3, [r2, #0]
  if (*versionMinor == 0)
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d117      	bne.n	80089fe <SecureElementProcessJoinAccept+0x80>
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 80089ce:	19f3      	adds	r3, r6, r7
 80089d0:	1e9a      	subs	r2, r3, #2
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 80089d2:	1e59      	subs	r1, r3, #1
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 80089d4:	7812      	ldrb	r2, [r2, #0]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 80089d6:	7809      	ldrb	r1, [r1, #0]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16);
 80089d8:	0412      	lsls	r2, r2, #16
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 80089da:	0609      	lsls	r1, r1, #24
 80089dc:	430a      	orrs	r2, r1
  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 80089de:	1f19      	subs	r1, r3, #4
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 80089e0:	3b03      	subs	r3, #3
  mic = ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0);
 80089e2:	7809      	ldrb	r1, [r1, #0]
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8);
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	430a      	orrs	r2, r1
 80089e8:	021b      	lsls	r3, r3, #8
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 80089ea:	1f21      	subs	r1, r4, #4
  mic |= ((uint32_t) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24);
 80089ec:	431a      	orrs	r2, r3
    if (SecureElementVerifyAesCmac(decJoinAccept, (encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE), mic, NWK_KEY) !=
 80089ee:	0030      	movs	r0, r6
 80089f0:	2301      	movs	r3, #1
 80089f2:	b289      	uxth	r1, r1
 80089f4:	f7ff ff19 	bl	800882a <SecureElementVerifyAesCmac>
 80089f8:	1e43      	subs	r3, r0, #1
 80089fa:	4198      	sbcs	r0, r3
    return SECURE_ELEMENT_ERROR_NPE;
 80089fc:	b2c0      	uxtb	r0, r0
  }

  return SECURE_ELEMENT_SUCCESS;
}
 80089fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a00 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 8008a00:	b513      	push	{r0, r1, r4, lr}
 8008a02:	0004      	movs	r4, r0
  if (randomNum == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008a04:	2002      	movs	r0, #2
  if (randomNum == NULL)
 8008a06:	2c00      	cmp	r4, #0
 8008a08:	d005      	beq.n	8008a16 <SecureElementRandomNumber+0x16>
  }
  *randomNum = Radio.Random( );
 8008a0a:	4b03      	ldr	r3, [pc, #12]	; (8008a18 <SecureElementRandomNumber+0x18>)
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	9301      	str	r3, [sp, #4]
 8008a10:	4798      	blx	r3
 8008a12:	6020      	str	r0, [r4, #0]
  return SECURE_ELEMENT_SUCCESS;
 8008a14:	2000      	movs	r0, #0
}
 8008a16:	bd16      	pop	{r1, r2, r4, pc}
 8008a18:	080117e4 	.word	0x080117e4

08008a1c <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 8008a1c:	0001      	movs	r1, r0
 8008a1e:	b510      	push	{r4, lr}
  if (devEui == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008a20:	2002      	movs	r0, #2
  if (devEui == NULL)
 8008a22:	2900      	cmp	r1, #0
 8008a24:	d007      	beq.n	8008a36 <SecureElementSetDevEui+0x1a>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 8008a26:	4804      	ldr	r0, [pc, #16]	; (8008a38 <SecureElementSetDevEui+0x1c>)
 8008a28:	2208      	movs	r2, #8
 8008a2a:	f005 fb75 	bl	800e118 <memcpy1>
  SeNvmCtxChanged();
 8008a2e:	4b03      	ldr	r3, [pc, #12]	; (8008a3c <SecureElementSetDevEui+0x20>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 8008a34:	2000      	movs	r0, #0
}
 8008a36:	bd10      	pop	{r4, pc}
 8008a38:	20000040 	.word	0x20000040
 8008a3c:	200003d8 	.word	0x200003d8

08008a40 <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
  return SeNvmCtx.DevEui;
}
 8008a40:	4800      	ldr	r0, [pc, #0]	; (8008a44 <SecureElementGetDevEui+0x4>)
 8008a42:	4770      	bx	lr
 8008a44:	20000040 	.word	0x20000040

08008a48 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 8008a48:	0001      	movs	r1, r0
 8008a4a:	b510      	push	{r4, lr}
  if (joinEui == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008a4c:	2002      	movs	r0, #2
  if (joinEui == NULL)
 8008a4e:	2900      	cmp	r1, #0
 8008a50:	d007      	beq.n	8008a62 <SecureElementSetJoinEui+0x1a>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 8008a52:	4804      	ldr	r0, [pc, #16]	; (8008a64 <SecureElementSetJoinEui+0x1c>)
 8008a54:	2208      	movs	r2, #8
 8008a56:	f005 fb5f 	bl	800e118 <memcpy1>
  SeNvmCtxChanged();
 8008a5a:	4b03      	ldr	r3, [pc, #12]	; (8008a68 <SecureElementSetJoinEui+0x20>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 8008a60:	2000      	movs	r0, #0
}
 8008a62:	bd10      	pop	{r4, pc}
 8008a64:	20000048 	.word	0x20000048
 8008a68:	200003d8 	.word	0x200003d8

08008a6c <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
  return SeNvmCtx.JoinEui;
}
 8008a6c:	4800      	ldr	r0, [pc, #0]	; (8008a70 <SecureElementGetJoinEui+0x4>)
 8008a6e:	4770      	bx	lr
 8008a70:	20000048 	.word	0x20000048

08008a74 <MlmeIndication>:
  }
}

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
  RxParams.IsMcpsIndication = 0;
 8008a74:	2200      	movs	r2, #0
 8008a76:	4b02      	ldr	r3, [pc, #8]	; (8008a80 <MlmeIndication+0xc>)
 8008a78:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 8008a7a:	7842      	ldrb	r2, [r0, #1]
 8008a7c:	705a      	strb	r2, [r3, #1]
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
  }
}
 8008a7e:	4770      	bx	lr
 8008a80:	200000fc 	.word	0x200000fc

08008a84 <LmHandlerDeviceTimeReq>:
{
 8008a84:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  mlmeReq.Type = MLME_DEVICE_TIME;
 8008a86:	230a      	movs	r3, #10
 8008a88:	a801      	add	r0, sp, #4
 8008a8a:	7003      	strb	r3, [r0, #0]
  status = LoRaMacMlmeRequest(&mlmeReq);
 8008a8c:	f002 fffc 	bl	800ba88 <LoRaMacMlmeRequest>
  if (status == LORAMAC_STATUS_OK)
 8008a90:	1e43      	subs	r3, r0, #1
 8008a92:	4198      	sbcs	r0, r3
 8008a94:	4240      	negs	r0, r0
}
 8008a96:	b007      	add	sp, #28
 8008a98:	bd00      	pop	{pc}
	...

08008a9c <McpsConfirm>:
  TxParams.IsMcpsConfirm = 1;
 8008a9c:	2301      	movs	r3, #1
{
 8008a9e:	b570      	push	{r4, r5, r6, lr}
  TxParams.IsMcpsConfirm = 1;
 8008aa0:	4c10      	ldr	r4, [pc, #64]	; (8008ae4 <McpsConfirm+0x48>)
{
 8008aa2:	0005      	movs	r5, r0
  TxParams.IsMcpsConfirm = 1;
 8008aa4:	7023      	strb	r3, [r4, #0]
  TxParams.Status = mcpsConfirm->Status;
 8008aa6:	7843      	ldrb	r3, [r0, #1]
 8008aa8:	0026      	movs	r6, r4
 8008aaa:	7063      	strb	r3, [r4, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 8008aac:	7883      	ldrb	r3, [r0, #2]
 8008aae:	3638      	adds	r6, #56	; 0x38
 8008ab0:	7123      	strb	r3, [r4, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8008ab2:	68c3      	ldr	r3, [r0, #12]
 8008ab4:	60a3      	str	r3, [r4, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 8008ab6:	78c3      	ldrb	r3, [r0, #3]
 8008ab8:	7523      	strb	r3, [r4, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 8008aba:	6903      	ldr	r3, [r0, #16]
 8008abc:	7563      	strb	r3, [r4, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 8008abe:	7903      	ldrb	r3, [r0, #4]
  LmHandlerCallbacks.OnTxData(&TxParams);
 8008ac0:	0020      	movs	r0, r4
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 8008ac2:	70e3      	strb	r3, [r4, #3]
  LmHandlerCallbacks.OnTxData(&TxParams);
 8008ac4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008ac6:	4798      	blx	r3
  }
}

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008ac8:	344c      	adds	r4, #76	; 0x4c
  {
    if (LmHandlerPackages[i] != NULL)
 8008aca:	6833      	ldr	r3, [r6, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d004      	beq.n	8008ada <McpsConfirm+0x3e>
    {
      switch (notifyType)
      {
        case PACKAGE_MCPS_CONFIRM:
        {
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 8008ad0:	695b      	ldr	r3, [r3, #20]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <McpsConfirm+0x3e>
          {
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 8008ad6:	0028      	movs	r0, r5
 8008ad8:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008ada:	3604      	adds	r6, #4
 8008adc:	42a6      	cmp	r6, r4
 8008ade:	d1f4      	bne.n	8008aca <McpsConfirm+0x2e>
}
 8008ae0:	bd70      	pop	{r4, r5, r6, pc}
 8008ae2:	46c0      	nop			; (mov r8, r8)
 8008ae4:	200003dc 	.word	0x200003dc

08008ae8 <LmHandlerConfigure>:
{
 8008ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8008aea:	4e4f      	ldr	r6, [pc, #316]	; (8008c28 <LmHandlerConfigure+0x140>)
  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8008aec:	2701      	movs	r7, #1
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8008aee:	0034      	movs	r4, r6
 8008af0:	344c      	adds	r4, #76	; 0x4c
{
 8008af2:	0001      	movs	r1, r0
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8008af4:	2206      	movs	r2, #6
 8008af6:	0020      	movs	r0, r4
{
 8008af8:	b097      	sub	sp, #92	; 0x5c
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8008afa:	f006 ff05 	bl	800f908 <UTIL_MEM_cpy_8>
  loraInfo = LoraInfo_GetPtr();
 8008afe:	f7fa fc37 	bl	8003370 <LoraInfo_GetPtr>
  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8008b02:	003b      	movs	r3, r7
 8008b04:	7822      	ldrb	r2, [r4, #0]
 8008b06:	6841      	ldr	r1, [r0, #4]
 8008b08:	4093      	lsls	r3, r2
 8008b0a:	0008      	movs	r0, r1
 8008b0c:	4018      	ands	r0, r3
 8008b0e:	4219      	tst	r1, r3
 8008b10:	d00b      	beq.n	8008b2a <LmHandlerConfigure+0x42>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8008b12:	0031      	movs	r1, r6
 8008b14:	0030      	movs	r0, r6
 8008b16:	3154      	adds	r1, #84	; 0x54
 8008b18:	3064      	adds	r0, #100	; 0x64
 8008b1a:	f002 fa05 	bl	800af28 <LoRaMacInitialization>
 8008b1e:	9009      	str	r0, [sp, #36]	; 0x24
 8008b20:	2800      	cmp	r0, #0
 8008b22:	d008      	beq.n	8008b36 <LmHandlerConfigure+0x4e>
      return LORAMAC_HANDLER_ERROR;
 8008b24:	2001      	movs	r0, #1
 8008b26:	4240      	negs	r0, r0
 8008b28:	e063      	b.n	8008bf2 <LmHandlerConfigure+0x10a>
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8008b2a:	003a      	movs	r2, r7
 8008b2c:	0001      	movs	r1, r0
 8008b2e:	4b3f      	ldr	r3, [pc, #252]	; (8008c2c <LmHandlerConfigure+0x144>)
 8008b30:	f006 fdd0 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 8008b34:	e7fe      	b.n	8008b34 <LmHandlerConfigure+0x4c>
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 8008b36:	f000 fc74 	bl	8009422 <NvmCtxMgmtRestore>
 8008b3a:	0033      	movs	r3, r6
 8008b3c:	4d3c      	ldr	r5, [pc, #240]	; (8008c30 <LmHandlerConfigure+0x148>)
 8008b3e:	3374      	adds	r3, #116	; 0x74
 8008b40:	ac0d      	add	r4, sp, #52	; 0x34
 8008b42:	2800      	cmp	r0, #0
 8008b44:	d157      	bne.n	8008bf6 <LmHandlerConfigure+0x10e>
    CtxRestoreDone = true;
 8008b46:	701f      	strb	r7, [r3, #0]
  MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 8008b48:	2200      	movs	r2, #0
 8008b4a:	7deb      	ldrb	r3, [r5, #23]
 8008b4c:	0011      	movs	r1, r2
 8008b4e:	9307      	str	r3, [sp, #28]
 8008b50:	7dab      	ldrb	r3, [r5, #22]
 8008b52:	2002      	movs	r0, #2
 8008b54:	9306      	str	r3, [sp, #24]
 8008b56:	7d6b      	ldrb	r3, [r5, #21]
  mibReq.Type = MIB_PUBLIC_NETWORK;
 8008b58:	270f      	movs	r7, #15
  MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 8008b5a:	9305      	str	r3, [sp, #20]
 8008b5c:	7d2b      	ldrb	r3, [r5, #20]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8008b5e:	364c      	adds	r6, #76	; 0x4c
  MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 8008b60:	9304      	str	r3, [sp, #16]
 8008b62:	7ceb      	ldrb	r3, [r5, #19]
 8008b64:	9303      	str	r3, [sp, #12]
 8008b66:	7cab      	ldrb	r3, [r5, #18]
 8008b68:	9302      	str	r3, [sp, #8]
 8008b6a:	7c6b      	ldrb	r3, [r5, #17]
 8008b6c:	9301      	str	r3, [sp, #4]
 8008b6e:	7c2b      	ldrb	r3, [r5, #16]
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	4b30      	ldr	r3, [pc, #192]	; (8008c34 <LmHandlerConfigure+0x14c>)
 8008b74:	f006 fdae 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
  MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 8008b78:	2200      	movs	r2, #0
 8008b7a:	7feb      	ldrb	r3, [r5, #31]
 8008b7c:	0011      	movs	r1, r2
 8008b7e:	9307      	str	r3, [sp, #28]
 8008b80:	7fab      	ldrb	r3, [r5, #30]
 8008b82:	2002      	movs	r0, #2
 8008b84:	9306      	str	r3, [sp, #24]
 8008b86:	7f6b      	ldrb	r3, [r5, #29]
 8008b88:	9305      	str	r3, [sp, #20]
 8008b8a:	7f2b      	ldrb	r3, [r5, #28]
 8008b8c:	9304      	str	r3, [sp, #16]
 8008b8e:	7eeb      	ldrb	r3, [r5, #27]
 8008b90:	9303      	str	r3, [sp, #12]
 8008b92:	7eab      	ldrb	r3, [r5, #26]
 8008b94:	9302      	str	r3, [sp, #8]
 8008b96:	7e6b      	ldrb	r3, [r5, #25]
 8008b98:	9301      	str	r3, [sp, #4]
 8008b9a:	7e2b      	ldrb	r3, [r5, #24]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8008b9c:	2500      	movs	r5, #0
  MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X\r\n",
 8008b9e:	9300      	str	r3, [sp, #0]
 8008ba0:	4b25      	ldr	r3, [pc, #148]	; (8008c38 <LmHandlerConfigure+0x150>)
 8008ba2:	f006 fd97 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8008ba6:	2301      	movs	r3, #1
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008ba8:	0020      	movs	r0, r4
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8008baa:	7123      	strb	r3, [r4, #4]
  mibReq.Type = MIB_PUBLIC_NETWORK;
 8008bac:	7027      	strb	r7, [r4, #0]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008bae:	f002 fd3f 	bl	800b630 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_REPEATER_SUPPORT;
 8008bb2:	2310      	movs	r3, #16
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008bb4:	0020      	movs	r0, r4
  mibReq.Type = MIB_REPEATER_SUPPORT;
 8008bb6:	7023      	strb	r3, [r4, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8008bb8:	7125      	strb	r5, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008bba:	f002 fd39 	bl	800b630 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_ADR;
 8008bbe:	2304      	movs	r3, #4
 8008bc0:	7023      	strb	r3, [r4, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8008bc2:	78b3      	ldrb	r3, [r6, #2]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008bc4:	0020      	movs	r0, r4
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8008bc6:	7123      	strb	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008bc8:	f002 fd32 	bl	800b630 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8008bcc:	2322      	movs	r3, #34	; 0x22
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008bce:	0020      	movs	r0, r4
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8008bd0:	7023      	strb	r3, [r4, #0]
  mibReq.Param.SystemMaxRxError = 20;
 8008bd2:	3b0e      	subs	r3, #14
 8008bd4:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008bd6:	f002 fd2b 	bl	800b630 <LoRaMacMibSetRequestConfirm>
  getPhy.Attribute = PHY_DUTY_CYCLE;
 8008bda:	a90b      	add	r1, sp, #44	; 0x2c
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 8008bdc:	7830      	ldrb	r0, [r6, #0]
  getPhy.Attribute = PHY_DUTY_CYCLE;
 8008bde:	700f      	strb	r7, [r1, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 8008be0:	f004 f988 	bl	800cef4 <RegionGetPhyParam>
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8008be4:	1e43      	subs	r3, r0, #1
 8008be6:	4198      	sbcs	r0, r3
 8008be8:	b2c0      	uxtb	r0, r0
 8008bea:	7130      	strb	r0, [r6, #4]
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 8008bec:	f003 fa1c 	bl	800c028 <LoRaMacTestSetDutyCycleOn>
  return LORAMAC_HANDLER_SUCCESS;
 8008bf0:	0028      	movs	r0, r5
}
 8008bf2:	b017      	add	sp, #92	; 0x5c
 8008bf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CtxRestoreDone = false;
 8008bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    LoRaMacMibGetRequestConfirm(&mibReq);
 8008bf8:	0020      	movs	r0, r4
    CtxRestoreDone = false;
 8008bfa:	701a      	strb	r2, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8008c00:	f002 fbf8 	bl	800b3f4 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 8008c04:	0028      	movs	r0, r5
 8008c06:	6861      	ldr	r1, [r4, #4]
 8008c08:	2208      	movs	r2, #8
 8008c0a:	3010      	adds	r0, #16
 8008c0c:	f005 fa84 	bl	800e118 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8008c10:	2303      	movs	r3, #3
    LoRaMacMibGetRequestConfirm(&mibReq);
 8008c12:	0020      	movs	r0, r4
    mibReq.Type = MIB_JOIN_EUI;
 8008c14:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 8008c16:	f002 fbed 	bl	800b3f4 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 8008c1a:	0028      	movs	r0, r5
 8008c1c:	2208      	movs	r2, #8
 8008c1e:	6861      	ldr	r1, [r4, #4]
 8008c20:	3018      	adds	r0, #24
 8008c22:	f005 fa79 	bl	800e118 <memcpy1>
 8008c26:	e78f      	b.n	8008b48 <LmHandlerConfigure+0x60>
 8008c28:	200003dc 	.word	0x200003dc
 8008c2c:	08011e19 	.word	0x08011e19
 8008c30:	200000fc 	.word	0x200000fc
 8008c34:	08011e62 	.word	0x08011e62
 8008c38:	08011e9c 	.word	0x08011e9c

08008c3c <LmHandlerProcess>:
{
 8008c3c:	b570      	push	{r4, r5, r6, lr}
  LoRaMacProcess();
 8008c3e:	f001 fc73 	bl	800a528 <LoRaMacProcess>
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008c42:	4d0c      	ldr	r5, [pc, #48]	; (8008c74 <LmHandlerProcess+0x38>)
 8008c44:	002c      	movs	r4, r5
 8008c46:	354c      	adds	r5, #76	; 0x4c
 8008c48:	3438      	adds	r4, #56	; 0x38
    if ((LmHandlerPackages[i] != NULL) &&
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00b      	beq.n	8008c68 <LmHandlerProcess+0x2c>
 8008c50:	691a      	ldr	r2, [r3, #16]
 8008c52:	2a00      	cmp	r2, #0
 8008c54:	d008      	beq.n	8008c68 <LmHandlerProcess+0x2c>
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d005      	beq.n	8008c68 <LmHandlerProcess+0x2c>
    return LmHandlerPackages[id]->IsInitialized();
 8008c5c:	4798      	blx	r3
        (LmHandlerPackages[i]->Process != NULL) &&
 8008c5e:	2800      	cmp	r0, #0
 8008c60:	d002      	beq.n	8008c68 <LmHandlerProcess+0x2c>
      LmHandlerPackages[i]->Process();
 8008c62:	6823      	ldr	r3, [r4, #0]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008c68:	3404      	adds	r4, #4
 8008c6a:	42a5      	cmp	r5, r4
 8008c6c:	d1ed      	bne.n	8008c4a <LmHandlerProcess+0xe>
  NvmCtxMgmtStore();
 8008c6e:	f000 fbd6 	bl	800941e <NvmCtxMgmtStore>
}
 8008c72:	bd70      	pop	{r4, r5, r6, pc}
 8008c74:	200003dc 	.word	0x200003dc

08008c78 <LmHandlerJoinStatus>:
{
 8008c78:	b500      	push	{lr}
 8008c7a:	b08b      	sub	sp, #44	; 0x2c
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 8008c80:	a801      	add	r0, sp, #4
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008c82:	7113      	strb	r3, [r2, #4]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 8008c84:	f002 fbb6 	bl	800b3f4 <LoRaMacMibGetRequestConfirm>
    return LORAMAC_HANDLER_RESET;
 8008c88:	2300      	movs	r3, #0
  if (status == LORAMAC_STATUS_OK)
 8008c8a:	4298      	cmp	r0, r3
 8008c8c:	d104      	bne.n	8008c98 <LmHandlerJoinStatus+0x20>
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 8008c8e:	466b      	mov	r3, sp
 8008c90:	7a1b      	ldrb	r3, [r3, #8]
 8008c92:	1e58      	subs	r0, r3, #1
 8008c94:	4183      	sbcs	r3, r0
      return LORAMAC_HANDLER_RESET;
 8008c96:	b2db      	uxtb	r3, r3
}
 8008c98:	0018      	movs	r0, r3
 8008c9a:	b00b      	add	sp, #44	; 0x2c
 8008c9c:	bd00      	pop	{pc}
	...

08008ca0 <LmHandlerRequestClass>:
{
 8008ca0:	b570      	push	{r4, r5, r6, lr}
 8008ca2:	b08c      	sub	sp, #48	; 0x30
 8008ca4:	0005      	movs	r5, r0
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8008ca6:	f7ff ffe7 	bl	8008c78 <LmHandlerJoinStatus>
 8008caa:	2801      	cmp	r0, #1
 8008cac:	d143      	bne.n	8008d36 <LmHandlerRequestClass+0x96>
  mibReq.Type = MIB_DEVICE_CLASS;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	ae03      	add	r6, sp, #12
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008cb2:	0030      	movs	r0, r6
  mibReq.Type = MIB_DEVICE_CLASS;
 8008cb4:	7033      	strb	r3, [r6, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008cb6:	f002 fb9d 	bl	800b3f4 <LoRaMacMibGetRequestConfirm>
 8008cba:	1e04      	subs	r4, r0, #0
 8008cbc:	d001      	beq.n	8008cc2 <LmHandlerRequestClass+0x22>
    switch (newClass)
 8008cbe:	2401      	movs	r4, #1
 8008cc0:	e03a      	b.n	8008d38 <LmHandlerRequestClass+0x98>
  currentClass = mibReq.Param.Class;
 8008cc2:	7933      	ldrb	r3, [r6, #4]
  if (currentClass != newClass)
 8008cc4:	42ab      	cmp	r3, r5
 8008cc6:	d103      	bne.n	8008cd0 <LmHandlerRequestClass+0x30>
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 8008cc8:	2400      	movs	r4, #0
}
 8008cca:	0020      	movs	r0, r4
 8008ccc:	b00c      	add	sp, #48	; 0x30
 8008cce:	bd70      	pop	{r4, r5, r6, pc}
    switch (newClass)
 8008cd0:	2d01      	cmp	r5, #1
 8008cd2:	d0f4      	beq.n	8008cbe <LmHandlerRequestClass+0x1e>
 8008cd4:	2d02      	cmp	r5, #2
 8008cd6:	d018      	beq.n	8008d0a <LmHandlerRequestClass+0x6a>
 8008cd8:	2d00      	cmp	r5, #0
 8008cda:	d1f6      	bne.n	8008cca <LmHandlerRequestClass+0x2a>
        if (currentClass != CLASS_A)
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d0f3      	beq.n	8008cc8 <LmHandlerRequestClass+0x28>
          mibReq.Param.Class = CLASS_A;
 8008ce0:	7130      	strb	r0, [r6, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 8008ce2:	0030      	movs	r0, r6
 8008ce4:	f002 fca4 	bl	800b630 <LoRaMacMibSetRequestConfirm>
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d1e8      	bne.n	8008cbe <LmHandlerRequestClass+0x1e>
  }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8008cec:	2341      	movs	r3, #65	; 0x41
 8008cee:	0022      	movs	r2, r4
 8008cf0:	9300      	str	r3, [sp, #0]
 8008cf2:	0021      	movs	r1, r4
 8008cf4:	4b11      	ldr	r3, [pc, #68]	; (8008d3c <LmHandlerRequestClass+0x9c>)
 8008cf6:	3002      	adds	r0, #2
 8008cf8:	f006 fcec 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 8008cfc:	4b10      	ldr	r3, [pc, #64]	; (8008d40 <LmHandlerRequestClass+0xa0>)
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 8008cfe:	0020      	movs	r0, r4
            if (LmHandlerCallbacks.OnClassChange != NULL)
 8008d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d0e0      	beq.n	8008cc8 <LmHandlerRequestClass+0x28>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 8008d06:	4798      	blx	r3
 8008d08:	e7df      	b.n	8008cca <LmHandlerRequestClass+0x2a>
        if (currentClass != CLASS_A)
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1d7      	bne.n	8008cbe <LmHandlerRequestClass+0x1e>
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 8008d0e:	0030      	movs	r0, r6
          mibReq.Param.Class = CLASS_C;
 8008d10:	7135      	strb	r5, [r6, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 8008d12:	f002 fc8d 	bl	800b630 <LoRaMacMibSetRequestConfirm>
 8008d16:	1e04      	subs	r4, r0, #0
 8008d18:	d1d1      	bne.n	8008cbe <LmHandlerRequestClass+0x1e>
  MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8008d1a:	2343      	movs	r3, #67	; 0x43
 8008d1c:	0002      	movs	r2, r0
 8008d1e:	0001      	movs	r1, r0
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	0028      	movs	r0, r5
 8008d24:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <LmHandlerRequestClass+0x9c>)
 8008d26:	f006 fcd5 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 8008d2a:	4b05      	ldr	r3, [pc, #20]	; (8008d40 <LmHandlerRequestClass+0xa0>)
 8008d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d0ca      	beq.n	8008cc8 <LmHandlerRequestClass+0x28>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 8008d32:	0028      	movs	r0, r5
 8008d34:	e7e7      	b.n	8008d06 <LmHandlerRequestClass+0x66>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008d36:	2403      	movs	r4, #3
    switch (newClass)
 8008d38:	4264      	negs	r4, r4
 8008d3a:	e7c6      	b.n	8008cca <LmHandlerRequestClass+0x2a>
 8008d3c:	08011ed6 	.word	0x08011ed6
 8008d40:	200003dc 	.word	0x200003dc

08008d44 <LmHandlerJoin>:
{
 8008d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d46:	b08d      	sub	sp, #52	; 0x34
 8008d48:	4d26      	ldr	r5, [pc, #152]	; (8008de4 <LmHandlerJoin+0xa0>)
 8008d4a:	4e27      	ldr	r6, [pc, #156]	; (8008de8 <LmHandlerJoin+0xa4>)
 8008d4c:	ac03      	add	r4, sp, #12
  if (mode == ACTIVATION_TYPE_OTAA)
 8008d4e:	2802      	cmp	r0, #2
 8008d50:	d10d      	bne.n	8008d6e <LmHandlerJoin+0x2a>
    JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8008d52:	3528      	adds	r5, #40	; 0x28
 8008d54:	70a8      	strb	r0, [r5, #2]
    LoRaMacStart();
 8008d56:	f002 fae9 	bl	800b32c <LoRaMacStart>
    mlmeReq.Type = MLME_JOIN;
 8008d5a:	2301      	movs	r3, #1
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8008d5c:	364c      	adds	r6, #76	; 0x4c
    mlmeReq.Type = MLME_JOIN;
 8008d5e:	7023      	strb	r3, [r4, #0]
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8008d60:	78f3      	ldrb	r3, [r6, #3]
    LoRaMacMlmeRequest(&mlmeReq);
 8008d62:	0020      	movs	r0, r4
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8008d64:	7123      	strb	r3, [r4, #4]
    LoRaMacMlmeRequest(&mlmeReq);
 8008d66:	f002 fe8f 	bl	800ba88 <LoRaMacMlmeRequest>
}
 8008d6a:	b00d      	add	sp, #52	; 0x34
 8008d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8008d6e:	002b      	movs	r3, r5
 8008d70:	2201      	movs	r2, #1
 8008d72:	3328      	adds	r3, #40	; 0x28
 8008d74:	709a      	strb	r2, [r3, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008d76:	2200      	movs	r2, #0
 8008d78:	705a      	strb	r2, [r3, #1]
    if (CtxRestoreDone == false)
 8008d7a:	0033      	movs	r3, r6
 8008d7c:	3374      	adds	r3, #116	; 0x74
 8008d7e:	781f      	ldrb	r7, [r3, #0]
 8008d80:	4297      	cmp	r7, r2
 8008d82:	d11e      	bne.n	8008dc2 <LmHandlerJoin+0x7e>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8008d84:	2327      	movs	r3, #39	; 0x27
 8008d86:	7023      	strb	r3, [r4, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8008d88:	4b18      	ldr	r3, [pc, #96]	; (8008dec <LmHandlerJoin+0xa8>)
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008d8a:	0020      	movs	r0, r4
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8008d8c:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008d8e:	f002 fc4f 	bl	800b630 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 8008d92:	2305      	movs	r3, #5
 8008d94:	7023      	strb	r3, [r4, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 8008d96:	6a2b      	ldr	r3, [r5, #32]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008d98:	0020      	movs	r0, r4
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 8008d9a:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008d9c:	f002 fc48 	bl	800b630 <LoRaMacMibSetRequestConfirm>
      CommissioningParams.DevAddr = GetDevAddr();
 8008da0:	f7fb f9a3 	bl	80040ea <GetDevAddr>
      mibReq.Type = MIB_DEV_ADDR;
 8008da4:	2306      	movs	r3, #6
      CommissioningParams.DevAddr = GetDevAddr();
 8008da6:	6268      	str	r0, [r5, #36]	; 0x24
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8008da8:	6060      	str	r0, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008daa:	0020      	movs	r0, r4
      mibReq.Type = MIB_DEV_ADDR;
 8008dac:	7023      	strb	r3, [r4, #0]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008dae:	f002 fc3f 	bl	800b630 <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 8008db2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008db4:	003a      	movs	r2, r7
 8008db6:	9300      	str	r3, [sp, #0]
 8008db8:	0039      	movs	r1, r7
 8008dba:	2002      	movs	r0, #2
 8008dbc:	4b0c      	ldr	r3, [pc, #48]	; (8008df0 <LmHandlerJoin+0xac>)
 8008dbe:	f006 fc89 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 8008dc2:	f002 fab3 	bl	800b32c <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008dc6:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm(&mibReq);
 8008dc8:	0020      	movs	r0, r4
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008dca:	7023      	strb	r3, [r4, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8008dcc:	7123      	strb	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8008dce:	f002 fc2f 	bl	800b630 <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 8008dd2:	0028      	movs	r0, r5
 8008dd4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008dd6:	3028      	adds	r0, #40	; 0x28
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8008dd8:	364c      	adds	r6, #76	; 0x4c
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 8008dda:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8008ddc:	7870      	ldrb	r0, [r6, #1]
 8008dde:	f7ff ff5f 	bl	8008ca0 <LmHandlerRequestClass>
}
 8008de2:	e7c2      	b.n	8008d6a <LmHandlerJoin+0x26>
 8008de4:	200000fc 	.word	0x200000fc
 8008de8:	200003dc 	.word	0x200003dc
 8008dec:	01000300 	.word	0x01000300
 8008df0:	08011ef0 	.word	0x08011ef0

08008df4 <LmHandlerSend>:
{
 8008df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008df6:	b089      	sub	sp, #36	; 0x24
 8008df8:	0005      	movs	r5, r0
 8008dfa:	000f      	movs	r7, r1
 8008dfc:	9200      	str	r2, [sp, #0]
 8008dfe:	9301      	str	r3, [sp, #4]
  if (LoRaMacIsBusy() == true)
 8008e00:	f001 fb80 	bl	800a504 <LoRaMacIsBusy>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d152      	bne.n	8008eae <LmHandlerSend+0xba>
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8008e08:	f7ff ff36 	bl	8008c78 <LmHandlerJoinStatus>
 8008e0c:	2801      	cmp	r0, #1
 8008e0e:	d007      	beq.n	8008e20 <LmHandlerSend+0x2c>
    LmHandlerJoin(JoinParams.Mode);
 8008e10:	4b2a      	ldr	r3, [pc, #168]	; (8008ebc <LmHandlerSend+0xc8>)
 8008e12:	3328      	adds	r3, #40	; 0x28
 8008e14:	7898      	ldrb	r0, [r3, #2]
 8008e16:	f7ff ff95 	bl	8008d44 <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008e1a:	2003      	movs	r0, #3
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8008e1c:	4240      	negs	r0, r0
 8008e1e:	e034      	b.n	8008e8a <LmHandlerSend+0x96>
  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 8008e20:	4e27      	ldr	r6, [pc, #156]	; (8008ec0 <LmHandlerSend+0xcc>)
 8008e22:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	4798      	blx	r3
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d006      	beq.n	8008e3a <LmHandlerSend+0x46>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 8008e2c:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8008e2e:	782b      	ldrb	r3, [r5, #0]
 8008e30:	7812      	ldrb	r2, [r2, #0]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d001      	beq.n	8008e3a <LmHandlerSend+0x46>
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d13b      	bne.n	8008eb2 <LmHandlerSend+0xbe>
  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 8008e3a:	0033      	movs	r3, r6
 8008e3c:	334c      	adds	r3, #76	; 0x4c
 8008e3e:	78db      	ldrb	r3, [r3, #3]
 8008e40:	ac03      	add	r4, sp, #12
 8008e42:	73a3      	strb	r3, [r4, #14]
  if (LoRaMacQueryTxPossible(appData->BufferSize, &txInfo) != LORAMAC_STATUS_OK)
 8008e44:	7868      	ldrb	r0, [r5, #1]
 8008e46:	a902      	add	r1, sp, #8
 8008e48:	f002 fa78 	bl	800b33c <LoRaMacQueryTxPossible>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d01e      	beq.n	8008e8e <LmHandlerSend+0x9a>
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8008e50:	2300      	movs	r3, #0
 8008e52:	70b3      	strb	r3, [r6, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 8008e54:	7023      	strb	r3, [r4, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8008e56:	60a3      	str	r3, [r4, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8008e58:	81a3      	strh	r3, [r4, #12]
  TxParams.AppData = *appData;
 8008e5a:	0033      	movs	r3, r6
 8008e5c:	330c      	adds	r3, #12
 8008e5e:	cd06      	ldmia	r5!, {r1, r2}
 8008e60:	c306      	stmia	r3!, {r1, r2}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 8008e62:	0033      	movs	r3, r6
 8008e64:	334c      	adds	r3, #76	; 0x4c
 8008e66:	78db      	ldrb	r3, [r3, #3]
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8008e68:	0020      	movs	r0, r4
 8008e6a:	9901      	ldr	r1, [sp, #4]
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 8008e6c:	7133      	strb	r3, [r6, #4]
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8008e6e:	f002 ff13 	bl	800bc98 <LoRaMacMcpsRequest>
  if (nextTxIn != NULL)
 8008e72:	9b00      	ldr	r3, [sp, #0]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d004      	beq.n	8008e82 <LmHandlerSend+0x8e>
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 8008e78:	6923      	ldr	r3, [r4, #16]
 8008e7a:	9301      	str	r3, [sp, #4]
 8008e7c:	9a01      	ldr	r2, [sp, #4]
 8008e7e:	9b00      	ldr	r3, [sp, #0]
 8008e80:	601a      	str	r2, [r3, #0]
  switch(status)
 8008e82:	2811      	cmp	r0, #17
 8008e84:	d817      	bhi.n	8008eb6 <LmHandlerSend+0xc2>
 8008e86:	4b0f      	ldr	r3, [pc, #60]	; (8008ec4 <LmHandlerSend+0xd0>)
 8008e88:	5618      	ldrsb	r0, [r3, r0]
}
 8008e8a:	b009      	add	sp, #36	; 0x24
 8008e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TxParams.MsgType = isTxConfirmed;
 8008e8e:	70b7      	strb	r7, [r6, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 8008e90:	782b      	ldrb	r3, [r5, #0]
 8008e92:	7123      	strb	r3, [r4, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8008e94:	786b      	ldrb	r3, [r5, #1]
 8008e96:	81a3      	strh	r3, [r4, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8008e98:	686b      	ldr	r3, [r5, #4]
 8008e9a:	60a3      	str	r3, [r4, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 8008e9c:	2f00      	cmp	r7, #0
 8008e9e:	d101      	bne.n	8008ea4 <LmHandlerSend+0xb0>
      mcpsReq.Type = MCPS_UNCONFIRMED;
 8008ea0:	7027      	strb	r7, [r4, #0]
 8008ea2:	e7da      	b.n	8008e5a <LmHandlerSend+0x66>
      mcpsReq.Type = MCPS_CONFIRMED;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	7023      	strb	r3, [r4, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 8008ea8:	3307      	adds	r3, #7
 8008eaa:	73e3      	strb	r3, [r4, #15]
 8008eac:	e7d5      	b.n	8008e5a <LmHandlerSend+0x66>
    return LORAMAC_HANDLER_BUSY_ERROR;
 8008eae:	2002      	movs	r0, #2
 8008eb0:	e7b4      	b.n	8008e1c <LmHandlerSend+0x28>
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8008eb2:	2004      	movs	r0, #4
 8008eb4:	e7b2      	b.n	8008e1c <LmHandlerSend+0x28>
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	e7b0      	b.n	8008e1c <LmHandlerSend+0x28>
 8008eba:	46c0      	nop			; (mov r8, r8)
 8008ebc:	200000fc 	.word	0x200000fc
 8008ec0:	200003dc 	.word	0x200003dc
 8008ec4:	08011647 	.word	0x08011647

08008ec8 <LmHandlerPackageRegister>:
{
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	0004      	movs	r4, r0
 8008ecc:	000d      	movs	r5, r1
  switch (id)
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	d002      	beq.n	8008ed8 <LmHandlerPackageRegister+0x10>
    return LORAMAC_HANDLER_ERROR;
 8008ed2:	2001      	movs	r0, #1
 8008ed4:	4240      	negs	r0, r0
}
 8008ed6:	bd70      	pop	{r4, r5, r6, pc}
      package = LmphCompliancePackageFactory();
 8008ed8:	f000 fa9c 	bl	8009414 <LmphCompliancePackageFactory>
  if (package != NULL)
 8008edc:	2800      	cmp	r0, #0
 8008ede:	d0f8      	beq.n	8008ed2 <LmHandlerPackageRegister+0xa>
    LmHandlerPackages[id] = package;
 8008ee0:	4b07      	ldr	r3, [pc, #28]	; (8008f00 <LmHandlerPackageRegister+0x38>)
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 8008ee2:	22f2      	movs	r2, #242	; 0xf2
    LmHandlerPackages[id] = package;
 8008ee4:	6398      	str	r0, [r3, #56]	; 0x38
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8008ee6:	4b07      	ldr	r3, [pc, #28]	; (8008f04 <LmHandlerPackageRegister+0x3c>)
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 8008ee8:	4907      	ldr	r1, [pc, #28]	; (8008f08 <LmHandlerPackageRegister+0x40>)
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 8008eea:	6203      	str	r3, [r0, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8008eec:	4b07      	ldr	r3, [pc, #28]	; (8008f0c <LmHandlerPackageRegister+0x44>)
 8008eee:	6243      	str	r3, [r0, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8008ef0:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <LmHandlerPackageRegister+0x48>)
 8008ef2:	6283      	str	r3, [r0, #40]	; 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 8008ef4:	6843      	ldr	r3, [r0, #4]
 8008ef6:	0028      	movs	r0, r5
 8008ef8:	4798      	blx	r3
    return LORAMAC_HANDLER_SUCCESS;
 8008efa:	0020      	movs	r0, r4
 8008efc:	e7eb      	b.n	8008ed6 <LmHandlerPackageRegister+0xe>
 8008efe:	46c0      	nop			; (mov r8, r8)
 8008f00:	200003dc 	.word	0x200003dc
 8008f04:	08008d45 	.word	0x08008d45
 8008f08:	20000451 	.word	0x20000451
 8008f0c:	08008df5 	.word	0x08008df5
 8008f10:	08008a85 	.word	0x08008a85

08008f14 <LmHandlerInit>:
{
 8008f14:	b510      	push	{r4, lr}
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 8008f16:	4c10      	ldr	r4, [pc, #64]	; (8008f58 <LmHandlerInit+0x44>)
{
 8008f18:	0001      	movs	r1, r0
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 8008f1a:	0020      	movs	r0, r4
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	3018      	adds	r0, #24
 8008f20:	f006 fcf2 	bl	800f908 <UTIL_MEM_cpy_8>
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8008f24:	4b0d      	ldr	r3, [pc, #52]	; (8008f5c <LmHandlerInit+0x48>)
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8008f26:	490e      	ldr	r1, [pc, #56]	; (8008f60 <LmHandlerInit+0x4c>)
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8008f28:	6663      	str	r3, [r4, #100]	; 0x64
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8008f2a:	4b0e      	ldr	r3, [pc, #56]	; (8008f64 <LmHandlerInit+0x50>)
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8008f2c:	312c      	adds	r1, #44	; 0x2c
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8008f2e:	66a3      	str	r3, [r4, #104]	; 0x68
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8008f30:	4b0d      	ldr	r3, [pc, #52]	; (8008f68 <LmHandlerInit+0x54>)
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8008f32:	2000      	movs	r0, #0
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8008f34:	66e3      	str	r3, [r4, #108]	; 0x6c
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8008f36:	4b0d      	ldr	r3, [pc, #52]	; (8008f6c <LmHandlerInit+0x58>)
 8008f38:	6723      	str	r3, [r4, #112]	; 0x70
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 8008f3a:	69a3      	ldr	r3, [r4, #24]
 8008f3c:	6563      	str	r3, [r4, #84]	; 0x54
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 8008f3e:	69e3      	ldr	r3, [r4, #28]
 8008f40:	65a3      	str	r3, [r4, #88]	; 0x58
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 8008f42:	4b0b      	ldr	r3, [pc, #44]	; (8008f70 <LmHandlerInit+0x5c>)
 8008f44:	65e3      	str	r3, [r4, #92]	; 0x5c
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 8008f46:	6a23      	ldr	r3, [r4, #32]
 8008f48:	6623      	str	r3, [r4, #96]	; 0x60
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8008f4a:	f7ff ffbd 	bl	8008ec8 <LmHandlerPackageRegister>
 8008f4e:	1e43      	subs	r3, r0, #1
 8008f50:	4198      	sbcs	r0, r3
 8008f52:	4240      	negs	r0, r0
}
 8008f54:	bd10      	pop	{r4, pc}
 8008f56:	46c0      	nop			; (mov r8, r8)
 8008f58:	200003dc 	.word	0x200003dc
 8008f5c:	08008a9d 	.word	0x08008a9d
 8008f60:	200000fc 	.word	0x200000fc
 8008f64:	08008fa1 	.word	0x08008fa1
 8008f68:	08009095 	.word	0x08009095
 8008f6c:	08008a75 	.word	0x08008a75
 8008f70:	0800941d 	.word	0x0800941d

08008f74 <LmHandlerGetCurrentClass>:
{
 8008f74:	b510      	push	{r4, lr}
 8008f76:	0004      	movs	r4, r0
 8008f78:	b08a      	sub	sp, #40	; 0x28
  if (deviceClass == NULL)
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d103      	bne.n	8008f86 <LmHandlerGetCurrentClass+0x12>
    return LORAMAC_HANDLER_ERROR;
 8008f7e:	2001      	movs	r0, #1
 8008f80:	4240      	negs	r0, r0
}
 8008f82:	b00a      	add	sp, #40	; 0x28
 8008f84:	bd10      	pop	{r4, pc}
  mibReq.Type = MIB_DEVICE_CLASS;
 8008f86:	2300      	movs	r3, #0
 8008f88:	466a      	mov	r2, sp
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008f8a:	a801      	add	r0, sp, #4
  mibReq.Type = MIB_DEVICE_CLASS;
 8008f8c:	7113      	strb	r3, [r2, #4]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008f8e:	f002 fa31 	bl	800b3f4 <LoRaMacMibGetRequestConfirm>
 8008f92:	2800      	cmp	r0, #0
 8008f94:	d1f3      	bne.n	8008f7e <LmHandlerGetCurrentClass+0xa>
  *deviceClass = mibReq.Param.Class;
 8008f96:	466b      	mov	r3, sp
 8008f98:	7a1b      	ldrb	r3, [r3, #8]
 8008f9a:	7023      	strb	r3, [r4, #0]
  return LORAMAC_HANDLER_SUCCESS;
 8008f9c:	e7f1      	b.n	8008f82 <LmHandlerGetCurrentClass+0xe>
	...

08008fa0 <McpsIndication>:
  RxParams.IsMcpsIndication = 1;
 8008fa0:	2301      	movs	r3, #1
{
 8008fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
  RxParams.IsMcpsIndication = 1;
 8008fa4:	492b      	ldr	r1, [pc, #172]	; (8009054 <McpsIndication+0xb4>)
{
 8008fa6:	0004      	movs	r4, r0
  RxParams.IsMcpsIndication = 1;
 8008fa8:	700b      	strb	r3, [r1, #0]
  RxParams.Status = mcpsIndication->Status;
 8008faa:	7843      	ldrb	r3, [r0, #1]
{
 8008fac:	b087      	sub	sp, #28
  RxParams.Status = mcpsIndication->Status;
 8008fae:	704b      	strb	r3, [r1, #1]
  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d145      	bne.n	8009040 <McpsIndication+0xa0>
  if (mcpsIndication->BufferSize > 0)
 8008fb4:	7b03      	ldrb	r3, [r0, #12]
 8008fb6:	4e28      	ldr	r6, [pc, #160]	; (8009058 <McpsIndication+0xb8>)
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d012      	beq.n	8008fe2 <McpsIndication+0x42>
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8008fbc:	7902      	ldrb	r2, [r0, #4]
 8008fbe:	708a      	strb	r2, [r1, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 8008fc0:	89c2      	ldrh	r2, [r0, #14]
 8008fc2:	70ca      	strb	r2, [r1, #3]
    RxParams.Snr = mcpsIndication->Snr;
 8008fc4:	7c02      	ldrb	r2, [r0, #16]
 8008fc6:	710a      	strb	r2, [r1, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8008fc8:	6942      	ldr	r2, [r0, #20]
 8008fca:	608a      	str	r2, [r1, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 8008fcc:	7c42      	ldrb	r2, [r0, #17]
 8008fce:	730a      	strb	r2, [r1, #12]
    appData.Port = mcpsIndication->Port;
 8008fd0:	78c2      	ldrb	r2, [r0, #3]
 8008fd2:	4668      	mov	r0, sp
    appData.BufferSize = mcpsIndication->BufferSize;
 8008fd4:	7243      	strb	r3, [r0, #9]
    appData.Buffer = mcpsIndication->Buffer;
 8008fd6:	68a3      	ldr	r3, [r4, #8]
    appData.Port = mcpsIndication->Port;
 8008fd8:	7202      	strb	r2, [r0, #8]
    appData.Buffer = mcpsIndication->Buffer;
 8008fda:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 8008fdc:	a802      	add	r0, sp, #8
 8008fde:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8008fe0:	4798      	blx	r3
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 8008fe2:	7f23      	ldrb	r3, [r4, #28]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d003      	beq.n	8008ff0 <McpsIndication+0x50>
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 8008fe8:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d000      	beq.n	8008ff0 <McpsIndication+0x50>
        LmHandlerCallbacks.OnSysTimeUpdate( );
 8008fee:	4798      	blx	r3
 8008ff0:	0037      	movs	r7, r6
{
 8008ff2:	2500      	movs	r5, #0
 8008ff4:	3738      	adds	r7, #56	; 0x38
    if (LmHandlerPackages[i] != NULL)
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00a      	beq.n	8009012 <McpsIndication+0x72>
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 8008ffc:	699a      	ldr	r2, [r3, #24]
 8008ffe:	2a00      	cmp	r2, #0
 8009000:	d007      	beq.n	8009012 <McpsIndication+0x72>
 8009002:	781a      	ldrb	r2, [r3, #0]
 8009004:	78e3      	ldrb	r3, [r4, #3]
 8009006:	429a      	cmp	r2, r3
 8009008:	d11c      	bne.n	8009044 <McpsIndication+0xa4>
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	0020      	movs	r0, r4
 800900e:	699b      	ldr	r3, [r3, #24]
 8009010:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8009012:	3501      	adds	r5, #1
 8009014:	b2eb      	uxtb	r3, r5
 8009016:	3704      	adds	r7, #4
 8009018:	b26d      	sxtb	r5, r5
 800901a:	2b05      	cmp	r3, #5
 800901c:	d1eb      	bne.n	8008ff6 <McpsIndication+0x56>
  LmHandlerGetCurrentClass(&deviceClass);
 800901e:	466b      	mov	r3, sp
 8009020:	1ddd      	adds	r5, r3, #7
 8009022:	0028      	movs	r0, r5
 8009024:	f7ff ffa6 	bl	8008f74 <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8009028:	7963      	ldrb	r3, [r4, #5]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d108      	bne.n	8009040 <McpsIndication+0xa0>
 800902e:	7829      	ldrb	r1, [r5, #0]
 8009030:	2900      	cmp	r1, #0
 8009032:	d105      	bne.n	8009040 <McpsIndication+0xa0>
    LmHandlerAppData_t appData =
 8009034:	a804      	add	r0, sp, #16
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8009036:	000a      	movs	r2, r1
    LmHandlerAppData_t appData =
 8009038:	8001      	strh	r1, [r0, #0]
 800903a:	6041      	str	r1, [r0, #4]
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 800903c:	f7ff feda 	bl	8008df4 <LmHandlerSend>
}
 8009040:	b007      	add	sp, #28
 8009042:	bdf0      	pop	{r4, r5, r6, r7, pc}
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 8009044:	2d00      	cmp	r5, #0
 8009046:	d1e4      	bne.n	8009012 <McpsIndication+0x72>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 8009048:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	4798      	blx	r3
 800904e:	2800      	cmp	r0, #0
 8009050:	d1db      	bne.n	800900a <McpsIndication+0x6a>
 8009052:	e7de      	b.n	8009012 <McpsIndication+0x72>
 8009054:	200000fc 	.word	0x200000fc
 8009058:	200003dc 	.word	0x200003dc

0800905c <LmHandlerGetTxDatarate>:
{
 800905c:	b510      	push	{r4, lr}
 800905e:	0004      	movs	r4, r0
 8009060:	b08a      	sub	sp, #40	; 0x28
  if (txDatarate == NULL)
 8009062:	2800      	cmp	r0, #0
 8009064:	d103      	bne.n	800906e <LmHandlerGetTxDatarate+0x12>
    return LORAMAC_HANDLER_ERROR;
 8009066:	2001      	movs	r0, #1
 8009068:	4240      	negs	r0, r0
}
 800906a:	b00a      	add	sp, #40	; 0x28
 800906c:	bd10      	pop	{r4, pc}
  mibGet.Type = MIB_CHANNELS_DATARATE;
 800906e:	231f      	movs	r3, #31
 8009070:	466a      	mov	r2, sp
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 8009072:	a801      	add	r0, sp, #4
  mibGet.Type = MIB_CHANNELS_DATARATE;
 8009074:	7113      	strb	r3, [r2, #4]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 8009076:	f002 f9bd 	bl	800b3f4 <LoRaMacMibGetRequestConfirm>
 800907a:	2800      	cmp	r0, #0
 800907c:	d1f3      	bne.n	8009066 <LmHandlerGetTxDatarate+0xa>
  *txDatarate = mibGet.Param.ChannelsDatarate;
 800907e:	466b      	mov	r3, sp
 8009080:	2208      	movs	r2, #8
 8009082:	569a      	ldrsb	r2, [r3, r2]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 8009084:	4b02      	ldr	r3, [pc, #8]	; (8009090 <LmHandlerGetTxDatarate+0x34>)
  *txDatarate = mibGet.Param.ChannelsDatarate;
 8009086:	7022      	strb	r2, [r4, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 8009088:	334c      	adds	r3, #76	; 0x4c
 800908a:	70da      	strb	r2, [r3, #3]
  return LORAMAC_HANDLER_SUCCESS;
 800908c:	e7ed      	b.n	800906a <LmHandlerGetTxDatarate+0xe>
 800908e:	46c0      	nop			; (mov r8, r8)
 8009090:	200003dc 	.word	0x200003dc

08009094 <MlmeConfirm>:
  TxParams.IsMcpsConfirm = 0;
 8009094:	2300      	movs	r3, #0
{
 8009096:	b5f0      	push	{r4, r5, r6, r7, lr}
  TxParams.IsMcpsConfirm = 0;
 8009098:	4c1b      	ldr	r4, [pc, #108]	; (8009108 <MlmeConfirm+0x74>)
{
 800909a:	0005      	movs	r5, r0
 800909c:	0026      	movs	r6, r4
 800909e:	0027      	movs	r7, r4
  TxParams.IsMcpsConfirm = 0;
 80090a0:	7023      	strb	r3, [r4, #0]
  TxParams.Status = mlmeConfirm->Status;
 80090a2:	7843      	ldrb	r3, [r0, #1]
{
 80090a4:	b08b      	sub	sp, #44	; 0x2c
  TxParams.Status = mlmeConfirm->Status;
 80090a6:	7063      	strb	r3, [r4, #1]
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 80090a8:	3638      	adds	r6, #56	; 0x38
 80090aa:	374c      	adds	r7, #76	; 0x4c
    if (LmHandlerPackages[i] != NULL)
 80090ac:	6833      	ldr	r3, [r6, #0]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d004      	beq.n	80090bc <MlmeConfirm+0x28>
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 80090b2:	69db      	ldr	r3, [r3, #28]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d001      	beq.n	80090bc <MlmeConfirm+0x28>
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 80090b8:	0028      	movs	r0, r5
 80090ba:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 80090bc:	3604      	adds	r6, #4
 80090be:	42be      	cmp	r6, r7
 80090c0:	d1f4      	bne.n	80090ac <MlmeConfirm+0x18>
  switch (mlmeConfirm->MlmeRequest)
 80090c2:	782b      	ldrb	r3, [r5, #0]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d11a      	bne.n	80090fe <MlmeConfirm+0x6a>
      mibReq.Type = MIB_DEV_ADDR;
 80090c8:	af01      	add	r7, sp, #4
 80090ca:	3305      	adds	r3, #5
      LoRaMacMibGetRequestConfirm(&mibReq);
 80090cc:	0038      	movs	r0, r7
      mibReq.Type = MIB_DEV_ADDR;
 80090ce:	703b      	strb	r3, [r7, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 80090d0:	f002 f990 	bl	800b3f4 <LoRaMacMibGetRequestConfirm>
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80090d4:	4e0d      	ldr	r6, [pc, #52]	; (800910c <MlmeConfirm+0x78>)
 80090d6:	687b      	ldr	r3, [r7, #4]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 80090d8:	0037      	movs	r7, r6
 80090da:	3728      	adds	r7, #40	; 0x28
 80090dc:	0038      	movs	r0, r7
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80090de:	6273      	str	r3, [r6, #36]	; 0x24
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 80090e0:	f7ff ffbc 	bl	800905c <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 80090e4:	786b      	ldrb	r3, [r5, #1]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10b      	bne.n	8009102 <MlmeConfirm+0x6e>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80090ea:	707b      	strb	r3, [r7, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80090ec:	0023      	movs	r3, r4
 80090ee:	334c      	adds	r3, #76	; 0x4c
 80090f0:	7858      	ldrb	r0, [r3, #1]
 80090f2:	f7ff fdd5 	bl	8008ca0 <LmHandlerRequestClass>
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 80090f6:	0030      	movs	r0, r6
 80090f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090fa:	3028      	adds	r0, #40	; 0x28
 80090fc:	4798      	blx	r3
}
 80090fe:	b00b      	add	sp, #44	; 0x2c
 8009100:	bdf0      	pop	{r4, r5, r6, r7, pc}
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8009102:	23ff      	movs	r3, #255	; 0xff
 8009104:	707b      	strb	r3, [r7, #1]
 8009106:	e7f6      	b.n	80090f6 <MlmeConfirm+0x62>
 8009108:	200003dc 	.word	0x200003dc
 800910c:	200000fc 	.word	0x200000fc

08009110 <LmhpComplianceInit>:
}

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
  if ((params != NULL) && (dataBuffer != NULL))
 8009110:	4b06      	ldr	r3, [pc, #24]	; (800912c <LmhpComplianceInit+0x1c>)
 8009112:	2800      	cmp	r0, #0
 8009114:	d007      	beq.n	8009126 <LmhpComplianceInit+0x16>
 8009116:	2900      	cmp	r1, #0
 8009118:	d005      	beq.n	8009126 <LmhpComplianceInit+0x16>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
    ComplianceTestState.DataBuffer = dataBuffer;
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800911a:	729a      	strb	r2, [r3, #10]
    ComplianceTestState.Initialized = true;
 800911c:	2201      	movs	r2, #1
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 800911e:	6018      	str	r0, [r3, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 8009120:	60d9      	str	r1, [r3, #12]
  }
  else
  {
    LmhpComplianceParams = NULL;
    ComplianceTestState.Initialized = false;
 8009122:	711a      	strb	r2, [r3, #4]
  }
}
 8009124:	4770      	bx	lr
    LmhpComplianceParams = NULL;
 8009126:	2200      	movs	r2, #0
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	e7fa      	b.n	8009122 <LmhpComplianceInit+0x12>
 800912c:	20000544 	.word	0x20000544

08009130 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
  return ComplianceTestState.Initialized;
 8009130:	4b01      	ldr	r3, [pc, #4]	; (8009138 <LmhpComplianceIsInitialized+0x8>)
 8009132:	7918      	ldrb	r0, [r3, #4]
}
 8009134:	4770      	bx	lr
 8009136:	46c0      	nop			; (mov r8, r8)
 8009138:	20000544 	.word	0x20000544

0800913c <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
  if (ComplianceTestState.Initialized == false)
 800913c:	4b02      	ldr	r3, [pc, #8]	; (8009148 <LmhpComplianceIsRunning+0xc>)
 800913e:	7918      	ldrb	r0, [r3, #4]
 8009140:	2800      	cmp	r0, #0
 8009142:	d000      	beq.n	8009146 <LmhpComplianceIsRunning+0xa>
  {
    return false;
  }

  return ComplianceTestState.IsRunning;
 8009144:	7958      	ldrb	r0, [r3, #5]
}
 8009146:	4770      	bx	lr
 8009148:	20000544 	.word	0x20000544

0800914c <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess(void)
{
  /* Nothing to process */
}
 800914c:	4770      	bx	lr
	...

08009150 <LmhpComplianceTxProcess>:
{
 8009150:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (ComplianceTestState.Initialized == false)
 8009152:	4c1c      	ldr	r4, [pc, #112]	; (80091c4 <LmhpComplianceTxProcess+0x74>)
 8009154:	7923      	ldrb	r3, [r4, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d031      	beq.n	80091be <LmhpComplianceTxProcess+0x6e>
  if (ComplianceTestState.LinkCheck == true)
 800915a:	7ca2      	ldrb	r2, [r4, #18]
 800915c:	68e3      	ldr	r3, [r4, #12]
 800915e:	2a00      	cmp	r2, #0
 8009160:	d020      	beq.n	80091a4 <LmhpComplianceTxProcess+0x54>
    ComplianceTestState.LinkCheck = false;
 8009162:	2200      	movs	r2, #0
 8009164:	74a2      	strb	r2, [r4, #18]
    ComplianceTestState.DataBufferSize = 3;
 8009166:	3203      	adds	r2, #3
 8009168:	72e2      	strb	r2, [r4, #11]
    ComplianceTestState.DataBuffer[0] = 5;
 800916a:	3202      	adds	r2, #2
 800916c:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 800916e:	7ce2      	ldrb	r2, [r4, #19]
 8009170:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8009172:	7d22      	ldrb	r2, [r4, #20]
 8009174:	709a      	strb	r2, [r3, #2]
    ComplianceTestState.State = 1;
 8009176:	2201      	movs	r2, #1
 8009178:	71a2      	strb	r2, [r4, #6]
  LmHandlerAppData_t appData =
 800917a:	4669      	mov	r1, sp
 800917c:	22e0      	movs	r2, #224	; 0xe0
  TimerStart(&ComplianceTxNextPacketTimer);
 800917e:	0020      	movs	r0, r4
  LmHandlerAppData_t appData =
 8009180:	720a      	strb	r2, [r1, #8]
 8009182:	7ae2      	ldrb	r2, [r4, #11]
 8009184:	9303      	str	r3, [sp, #12]
  TimerTime_t nextTxIn = 0;
 8009186:	2300      	movs	r3, #0
  TimerStart(&ComplianceTxNextPacketTimer);
 8009188:	3018      	adds	r0, #24
  LmHandlerAppData_t appData =
 800918a:	724a      	strb	r2, [r1, #9]
  TimerTime_t nextTxIn = 0;
 800918c:	9301      	str	r3, [sp, #4]
  TimerStart(&ComplianceTxNextPacketTimer);
 800918e:	f006 fdcb 	bl	800fd28 <UTIL_TIMER_Start>
  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 8009192:	4b0d      	ldr	r3, [pc, #52]	; (80091c8 <LmhpComplianceTxProcess+0x78>)
 8009194:	7a21      	ldrb	r1, [r4, #8]
 8009196:	aa01      	add	r2, sp, #4
 8009198:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800919a:	a802      	add	r0, sp, #8
 800919c:	2301      	movs	r3, #1
 800919e:	47a0      	blx	r4
}
 80091a0:	b004      	add	sp, #16
 80091a2:	bd10      	pop	{r4, pc}
    switch (ComplianceTestState.State)
 80091a4:	79a2      	ldrb	r2, [r4, #6]
 80091a6:	2a01      	cmp	r2, #1
 80091a8:	d002      	beq.n	80091b0 <LmhpComplianceTxProcess+0x60>
 80091aa:	2a04      	cmp	r2, #4
 80091ac:	d1e5      	bne.n	800917a <LmhpComplianceTxProcess+0x2a>
 80091ae:	e7e2      	b.n	8009176 <LmhpComplianceTxProcess+0x26>
        ComplianceTestState.DataBufferSize = 2;
 80091b0:	2202      	movs	r2, #2
 80091b2:	72e2      	strb	r2, [r4, #11]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 80091b4:	8a22      	ldrh	r2, [r4, #16]
 80091b6:	0a11      	lsrs	r1, r2, #8
 80091b8:	7019      	strb	r1, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 80091ba:	705a      	strb	r2, [r3, #1]
        break;
 80091bc:	e7dd      	b.n	800917a <LmhpComplianceTxProcess+0x2a>
    return LORAMAC_HANDLER_ERROR;
 80091be:	2001      	movs	r0, #1
 80091c0:	4240      	negs	r0, r0
 80091c2:	e7ed      	b.n	80091a0 <LmhpComplianceTxProcess+0x50>
 80091c4:	20000544 	.word	0x20000544
 80091c8:	20000134 	.word	0x20000134

080091cc <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 80091cc:	b510      	push	{r4, lr}
  LmhpComplianceTxProcess();
 80091ce:	f7ff ffbf 	bl	8009150 <LmhpComplianceTxProcess>
}
 80091d2:	bd10      	pop	{r4, pc}

080091d4 <LmhpComplianceOnMcpsConfirm>:
  if (ComplianceTestState.Initialized == false)
 80091d4:	4b08      	ldr	r3, [pc, #32]	; (80091f8 <LmhpComplianceOnMcpsConfirm+0x24>)
 80091d6:	791a      	ldrb	r2, [r3, #4]
 80091d8:	2a00      	cmp	r2, #0
 80091da:	d00b      	beq.n	80091f4 <LmhpComplianceOnMcpsConfirm+0x20>
  if ((ComplianceTestState.IsRunning == true) &&
 80091dc:	795a      	ldrb	r2, [r3, #5]
 80091de:	2a00      	cmp	r2, #0
 80091e0:	d008      	beq.n	80091f4 <LmhpComplianceOnMcpsConfirm+0x20>
 80091e2:	7802      	ldrb	r2, [r0, #0]
 80091e4:	2a01      	cmp	r2, #1
 80091e6:	d105      	bne.n	80091f4 <LmhpComplianceOnMcpsConfirm+0x20>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 80091e8:	7902      	ldrb	r2, [r0, #4]
 80091ea:	2a00      	cmp	r2, #0
 80091ec:	d002      	beq.n	80091f4 <LmhpComplianceOnMcpsConfirm+0x20>
    ComplianceTestState.DownLinkCounter++;
 80091ee:	8a1a      	ldrh	r2, [r3, #16]
 80091f0:	3201      	adds	r2, #1
 80091f2:	821a      	strh	r2, [r3, #16]
}
 80091f4:	4770      	bx	lr
 80091f6:	46c0      	nop			; (mov r8, r8)
 80091f8:	20000544 	.word	0x20000544

080091fc <LmhpComplianceOnMlmeConfirm>:
  if (ComplianceTestState.Initialized == false)
 80091fc:	4b06      	ldr	r3, [pc, #24]	; (8009218 <LmhpComplianceOnMlmeConfirm+0x1c>)
 80091fe:	791a      	ldrb	r2, [r3, #4]
 8009200:	2a00      	cmp	r2, #0
 8009202:	d008      	beq.n	8009216 <LmhpComplianceOnMlmeConfirm+0x1a>
  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 8009204:	7802      	ldrb	r2, [r0, #0]
 8009206:	2a04      	cmp	r2, #4
 8009208:	d105      	bne.n	8009216 <LmhpComplianceOnMlmeConfirm+0x1a>
    ComplianceTestState.LinkCheck = true;
 800920a:	3a03      	subs	r2, #3
 800920c:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 800920e:	7a02      	ldrb	r2, [r0, #8]
 8009210:	74da      	strb	r2, [r3, #19]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8009212:	7a42      	ldrb	r2, [r0, #9]
 8009214:	751a      	strb	r2, [r3, #20]
}
 8009216:	4770      	bx	lr
 8009218:	20000544 	.word	0x20000544

0800921c <LmhpComplianceOnMcpsIndication>:
{
 800921c:	b530      	push	{r4, r5, lr}
  if (ComplianceTestState.Initialized == false)
 800921e:	4c78      	ldr	r4, [pc, #480]	; (8009400 <LmhpComplianceOnMcpsIndication+0x1e4>)
{
 8009220:	0002      	movs	r2, r0
  if (ComplianceTestState.Initialized == false)
 8009222:	7923      	ldrb	r3, [r4, #4]
{
 8009224:	b08d      	sub	sp, #52	; 0x34
  if (ComplianceTestState.Initialized == false)
 8009226:	2b00      	cmp	r3, #0
 8009228:	d045      	beq.n	80092b6 <LmhpComplianceOnMcpsIndication+0x9a>
  if (mcpsIndication->RxData == false)
 800922a:	7b43      	ldrb	r3, [r0, #13]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d042      	beq.n	80092b6 <LmhpComplianceOnMcpsIndication+0x9a>
  if ((ComplianceTestState.IsRunning == true) &&
 8009230:	7965      	ldrb	r5, [r4, #5]
 8009232:	2d00      	cmp	r5, #0
 8009234:	d005      	beq.n	8009242 <LmhpComplianceOnMcpsIndication+0x26>
 8009236:	7c83      	ldrb	r3, [r0, #18]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d102      	bne.n	8009242 <LmhpComplianceOnMcpsIndication+0x26>
    ComplianceTestState.DownLinkCounter++;
 800923c:	8a23      	ldrh	r3, [r4, #16]
 800923e:	3301      	adds	r3, #1
 8009240:	8223      	strh	r3, [r4, #16]
  if (mcpsIndication->Port != COMPLIANCE_PORT)
 8009242:	78d3      	ldrb	r3, [r2, #3]
 8009244:	2be0      	cmp	r3, #224	; 0xe0
 8009246:	d136      	bne.n	80092b6 <LmhpComplianceOnMcpsIndication+0x9a>
  if (ComplianceTestState.IsRunning == false)
 8009248:	2d00      	cmp	r5, #0
 800924a:	d136      	bne.n	80092ba <LmhpComplianceOnMcpsIndication+0x9e>
    if ((mcpsIndication->BufferSize == 4) &&
 800924c:	7b11      	ldrb	r1, [r2, #12]
 800924e:	2904      	cmp	r1, #4
 8009250:	d131      	bne.n	80092b6 <LmhpComplianceOnMcpsIndication+0x9a>
        (mcpsIndication->Buffer[0] == 0x01) &&
 8009252:	6893      	ldr	r3, [r2, #8]
    if ((mcpsIndication->BufferSize == 4) &&
 8009254:	781a      	ldrb	r2, [r3, #0]
 8009256:	2a01      	cmp	r2, #1
 8009258:	d12d      	bne.n	80092b6 <LmhpComplianceOnMcpsIndication+0x9a>
        (mcpsIndication->Buffer[0] == 0x01) &&
 800925a:	785a      	ldrb	r2, [r3, #1]
 800925c:	2a01      	cmp	r2, #1
 800925e:	d12a      	bne.n	80092b6 <LmhpComplianceOnMcpsIndication+0x9a>
        (mcpsIndication->Buffer[1] == 0x01) &&
 8009260:	789a      	ldrb	r2, [r3, #2]
 8009262:	2a01      	cmp	r2, #1
 8009264:	d127      	bne.n	80092b6 <LmhpComplianceOnMcpsIndication+0x9a>
        (mcpsIndication->Buffer[2] == 0x01) &&
 8009266:	78db      	ldrb	r3, [r3, #3]
 8009268:	2b01      	cmp	r3, #1
 800926a:	d124      	bne.n	80092b6 <LmhpComplianceOnMcpsIndication+0x9a>
      ComplianceTestState.IsTxConfirmed = false;
 800926c:	4a65      	ldr	r2, [pc, #404]	; (8009404 <LmhpComplianceOnMcpsIndication+0x1e8>)
      ComplianceTestState.DownLinkCounter = 0;
 800926e:	6125      	str	r5, [r4, #16]
      ComplianceTestState.IsTxConfirmed = false;
 8009270:	8122      	strh	r2, [r4, #8]
      ComplianceTestState.DataBufferSize = 2;
 8009272:	2202      	movs	r2, #2
 8009274:	72e2      	strb	r2, [r4, #11]
      mibReq.Type = MIB_ADR;
 8009276:	466a      	mov	r2, sp
      LoRaMacMibSetRequestConfirm(&mibReq);
 8009278:	a803      	add	r0, sp, #12
      ComplianceTestState.IsRunning = true;
 800927a:	7163      	strb	r3, [r4, #5]
      ComplianceTestState.State = 1;
 800927c:	71a3      	strb	r3, [r4, #6]
      mibReq.Param.AdrEnable = true;
 800927e:	7413      	strb	r3, [r2, #16]
      mibReq.Type = MIB_ADR;
 8009280:	7311      	strb	r1, [r2, #12]
      ComplianceTestState.NbGateways = 0;
 8009282:	7525      	strb	r5, [r4, #20]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8009284:	f002 f9d4 	bl	800b630 <LoRaMacMibSetRequestConfirm>
      LoRaMacTestSetDutyCycleOn(false);
 8009288:	0028      	movs	r0, r5
 800928a:	f002 fecd 	bl	800c028 <LoRaMacTestSetDutyCycleOn>
      if (LmhpComplianceParams->StopPeripherals != NULL)
 800928e:	6823      	ldr	r3, [r4, #0]
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d000      	beq.n	8009298 <LmhpComplianceOnMcpsIndication+0x7c>
        LmhpComplianceParams->StopPeripherals();
 8009296:	4798      	blx	r3
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 8009298:	2200      	movs	r2, #0
 800929a:	2101      	movs	r1, #1
 800929c:	3418      	adds	r4, #24
 800929e:	4b5a      	ldr	r3, [pc, #360]	; (8009408 <LmhpComplianceOnMcpsIndication+0x1ec>)
 80092a0:	9200      	str	r2, [sp, #0]
 80092a2:	4249      	negs	r1, r1
 80092a4:	0020      	movs	r0, r4
 80092a6:	f006 fc8b 	bl	800fbc0 <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 80092aa:	4958      	ldr	r1, [pc, #352]	; (800940c <LmhpComplianceOnMcpsIndication+0x1f0>)
 80092ac:	0020      	movs	r0, r4
 80092ae:	f006 fd7d 	bl	800fdac <UTIL_TIMER_SetPeriod>
      LmhpComplianceTxProcess();
 80092b2:	f7ff ff4d 	bl	8009150 <LmhpComplianceTxProcess>
}
 80092b6:	b00d      	add	sp, #52	; 0x34
 80092b8:	bd30      	pop	{r4, r5, pc}
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 80092ba:	6893      	ldr	r3, [r2, #8]
 80092bc:	7818      	ldrb	r0, [r3, #0]
 80092be:	71a0      	strb	r0, [r4, #6]
    switch (ComplianceTestState.State)
 80092c0:	280a      	cmp	r0, #10
 80092c2:	d8f8      	bhi.n	80092b6 <LmhpComplianceOnMcpsIndication+0x9a>
 80092c4:	f7f6 ff32 	bl	800012c <__gnu_thumb1_case_uqi>
 80092c8:	27232006 	.word	0x27232006
 80092cc:	6446402b 	.word	0x6446402b
 80092d0:	8c89      	.short	0x8c89
 80092d2:	95          	.byte	0x95
 80092d3:	00          	.byte	0x00
        TimerStop(&ComplianceTxNextPacketTimer);
 80092d4:	0020      	movs	r0, r4
 80092d6:	3018      	adds	r0, #24
 80092d8:	f006 fcd2 	bl	800fc80 <UTIL_TIMER_Stop>
        ComplianceTestState.DownLinkCounter = 0;
 80092dc:	2300      	movs	r3, #0
        mibReq.Type = MIB_ADR;
 80092de:	466a      	mov	r2, sp
        ComplianceTestState.DownLinkCounter = 0;
 80092e0:	8223      	strh	r3, [r4, #16]
        ComplianceTestState.IsRunning = false;
 80092e2:	7163      	strb	r3, [r4, #5]
        mibReq.Type = MIB_ADR;
 80092e4:	3304      	adds	r3, #4
 80092e6:	7313      	strb	r3, [r2, #12]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80092e8:	6823      	ldr	r3, [r4, #0]
        LoRaMacMibSetRequestConfirm(&mibReq);
 80092ea:	a803      	add	r0, sp, #12
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	7413      	strb	r3, [r2, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 80092f0:	f002 f99e 	bl	800b630 <LoRaMacMibSetRequestConfirm>
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 80092f4:	6823      	ldr	r3, [r4, #0]
 80092f6:	7858      	ldrb	r0, [r3, #1]
 80092f8:	f002 fe96 	bl	800c028 <LoRaMacTestSetDutyCycleOn>
        if (LmhpComplianceParams->StartPeripherals != NULL)
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d0d8      	beq.n	80092b6 <LmhpComplianceOnMcpsIndication+0x9a>
          LmhpComplianceParams->StartPeripherals();
 8009304:	4798      	blx	r3
      break;
 8009306:	e7d6      	b.n	80092b6 <LmhpComplianceOnMcpsIndication+0x9a>
        ComplianceTestState.DataBufferSize = 2;
 8009308:	2302      	movs	r3, #2
 800930a:	72e3      	strb	r3, [r4, #11]
        break;
 800930c:	e7d3      	b.n	80092b6 <LmhpComplianceOnMcpsIndication+0x9a>
        ComplianceTestState.IsTxConfirmed = true;
 800930e:	2301      	movs	r3, #1
 8009310:	7223      	strb	r3, [r4, #8]
        ComplianceTestState.State = 1;
 8009312:	71a3      	strb	r3, [r4, #6]
        break;
 8009314:	e7cf      	b.n	80092b6 <LmhpComplianceOnMcpsIndication+0x9a>
        ComplianceTestState.IsTxConfirmed = false;
 8009316:	2300      	movs	r3, #0
 8009318:	7223      	strb	r3, [r4, #8]
        ComplianceTestState.State = 1;
 800931a:	3301      	adds	r3, #1
 800931c:	e7f9      	b.n	8009312 <LmhpComplianceOnMcpsIndication+0xf6>
        ComplianceTestState.DataBuffer[0] = 4;
 800931e:	2304      	movs	r3, #4
 8009320:	68e5      	ldr	r5, [r4, #12]
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8009322:	7b11      	ldrb	r1, [r2, #12]
        ComplianceTestState.DataBuffer[0] = 4;
 8009324:	702b      	strb	r3, [r5, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 8009326:	7aa0      	ldrb	r0, [r4, #10]
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8009328:	72e1      	strb	r1, [r4, #11]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 800932a:	1c03      	adds	r3, r0, #0
 800932c:	4288      	cmp	r0, r1
 800932e:	d900      	bls.n	8009332 <LmhpComplianceOnMcpsIndication+0x116>
 8009330:	1c0b      	adds	r3, r1, #0
 8009332:	b2d9      	uxtb	r1, r3
 8009334:	2300      	movs	r3, #0
 8009336:	3301      	adds	r3, #1
 8009338:	b2d8      	uxtb	r0, r3
 800933a:	4281      	cmp	r1, r0
 800933c:	d9bb      	bls.n	80092b6 <LmhpComplianceOnMcpsIndication+0x9a>
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 800933e:	6890      	ldr	r0, [r2, #8]
 8009340:	5cc0      	ldrb	r0, [r0, r3]
 8009342:	3001      	adds	r0, #1
 8009344:	54e8      	strb	r0, [r5, r3]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 8009346:	e7f6      	b.n	8009336 <LmhpComplianceOnMcpsIndication+0x11a>
        mlmeReq.Type = MLME_LINK_CHECK;
 8009348:	2304      	movs	r3, #4
 800934a:	a803      	add	r0, sp, #12
        mlmeReq.Type = MLME_DEVICE_TIME;
 800934c:	7003      	strb	r3, [r0, #0]
        LoRaMacMlmeRequest(&mlmeReq);
 800934e:	f002 fb9b 	bl	800ba88 <LoRaMacMlmeRequest>
      break;
 8009352:	e7b0      	b.n	80092b6 <LmhpComplianceOnMcpsIndication+0x9a>
        TimerStop(&ComplianceTxNextPacketTimer);
 8009354:	0020      	movs	r0, r4
 8009356:	3018      	adds	r0, #24
 8009358:	f006 fc92 	bl	800fc80 <UTIL_TIMER_Stop>
        ComplianceTestState.DownLinkCounter = 0;
 800935c:	2300      	movs	r3, #0
        mibReq.Type = MIB_ADR;
 800935e:	466a      	mov	r2, sp
        ComplianceTestState.DownLinkCounter = 0;
 8009360:	8223      	strh	r3, [r4, #16]
        ComplianceTestState.IsRunning = false;
 8009362:	7163      	strb	r3, [r4, #5]
        mibReq.Type = MIB_ADR;
 8009364:	3304      	adds	r3, #4
 8009366:	7313      	strb	r3, [r2, #12]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8009368:	6823      	ldr	r3, [r4, #0]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800936a:	a803      	add	r0, sp, #12
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	7413      	strb	r3, [r2, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8009370:	f002 f95e 	bl	800b630 <LoRaMacMibSetRequestConfirm>
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 8009374:	6823      	ldr	r3, [r4, #0]
 8009376:	7858      	ldrb	r0, [r3, #1]
 8009378:	f002 fe56 	bl	800c028 <LoRaMacTestSetDutyCycleOn>
        if (LmhpComplianceParams->StartPeripherals != NULL)
 800937c:	6823      	ldr	r3, [r4, #0]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	2b00      	cmp	r3, #0
 8009382:	d000      	beq.n	8009386 <LmhpComplianceOnMcpsIndication+0x16a>
          LmhpComplianceParams->StartPeripherals();
 8009384:	4798      	blx	r3
        LmhpCompliancePackage.OnJoinRequest(ACTIVATION_TYPE_OTAA);
 8009386:	4b22      	ldr	r3, [pc, #136]	; (8009410 <LmhpComplianceOnMcpsIndication+0x1f4>)
 8009388:	2002      	movs	r0, #2
 800938a:	6a1b      	ldr	r3, [r3, #32]
 800938c:	4798      	blx	r3
      break;
 800938e:	e792      	b.n	80092b6 <LmhpComplianceOnMcpsIndication+0x9a>
        if (mcpsIndication->BufferSize == 3)
 8009390:	7b12      	ldrb	r2, [r2, #12]
 8009392:	a803      	add	r0, sp, #12
 8009394:	2a03      	cmp	r2, #3
 8009396:	d10a      	bne.n	80093ae <LmhpComplianceOnMcpsIndication+0x192>
          mlmeReq.Type = MLME_TXCW;
 8009398:	3202      	adds	r2, #2
 800939a:	7002      	strb	r2, [r0, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 800939c:	785a      	ldrb	r2, [r3, #1]
 800939e:	789b      	ldrb	r3, [r3, #2]
 80093a0:	0212      	lsls	r2, r2, #8
 80093a2:	4313      	orrs	r3, r2
 80093a4:	8083      	strh	r3, [r0, #4]
        LoRaMacMlmeRequest(&mlmeReq);
 80093a6:	f002 fb6f 	bl	800ba88 <LoRaMacMlmeRequest>
        ComplianceTestState.State = 1;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e7b1      	b.n	8009312 <LmhpComplianceOnMcpsIndication+0xf6>
        else if (mcpsIndication->BufferSize == 7)
 80093ae:	2a07      	cmp	r2, #7
 80093b0:	d1f9      	bne.n	80093a6 <LmhpComplianceOnMcpsIndication+0x18a>
          mlmeReq.Type = MLME_TXCW_1;
 80093b2:	3a01      	subs	r2, #1
 80093b4:	7002      	strb	r2, [r0, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 80093b6:	7859      	ldrb	r1, [r3, #1]
 80093b8:	789a      	ldrb	r2, [r3, #2]
 80093ba:	0209      	lsls	r1, r1, #8
 80093bc:	430a      	orrs	r2, r1
 80093be:	8082      	strh	r2, [r0, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 80093c0:	78da      	ldrb	r2, [r3, #3]
 80093c2:	7919      	ldrb	r1, [r3, #4]
 80093c4:	0412      	lsls	r2, r2, #16
 80093c6:	0209      	lsls	r1, r1, #8
 80093c8:	430a      	orrs	r2, r1
 80093ca:	7959      	ldrb	r1, [r3, #5]
 80093cc:	430a      	orrs	r2, r1
 80093ce:	2164      	movs	r1, #100	; 0x64
 80093d0:	434a      	muls	r2, r1
 80093d2:	6082      	str	r2, [r0, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 80093d4:	799b      	ldrb	r3, [r3, #6]
 80093d6:	7303      	strb	r3, [r0, #12]
 80093d8:	e7e5      	b.n	80093a6 <LmhpComplianceOnMcpsIndication+0x18a>
        mlmeReq.Type = MLME_DEVICE_TIME;
 80093da:	230a      	movs	r3, #10
 80093dc:	a803      	add	r0, sp, #12
 80093de:	e7b5      	b.n	800934c <LmhpComplianceOnMcpsIndication+0x130>
        mibReq.Type = MIB_DEVICE_CLASS;
 80093e0:	4669      	mov	r1, sp
 80093e2:	2200      	movs	r2, #0
 80093e4:	730a      	strb	r2, [r1, #12]
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 80093e6:	785b      	ldrb	r3, [r3, #1]
        LoRaMacMibSetRequestConfirm(&mibReq);
 80093e8:	a803      	add	r0, sp, #12
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 80093ea:	740b      	strb	r3, [r1, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 80093ec:	f002 f920 	bl	800b630 <LoRaMacMibSetRequestConfirm>
      break;
 80093f0:	e761      	b.n	80092b6 <LmhpComplianceOnMcpsIndication+0x9a>
        mlmeReq.Type = MLME_PING_SLOT_INFO;
 80093f2:	4669      	mov	r1, sp
 80093f4:	220d      	movs	r2, #13
 80093f6:	730a      	strb	r2, [r1, #12]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 80093f8:	785b      	ldrb	r3, [r3, #1]
        LoRaMacMlmeRequest(&mlmeReq);
 80093fa:	a803      	add	r0, sp, #12
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 80093fc:	740b      	strb	r3, [r1, #16]
        LoRaMacMlmeRequest(&mlmeReq);
 80093fe:	e7a6      	b.n	800934e <LmhpComplianceOnMcpsIndication+0x132>
 8009400:	20000544 	.word	0x20000544
 8009404:	ffffe000 	.word	0xffffe000
 8009408:	080091cd 	.word	0x080091cd
 800940c:	00001388 	.word	0x00001388
 8009410:	20000134 	.word	0x20000134

08009414 <LmphCompliancePackageFactory>:
}
 8009414:	4800      	ldr	r0, [pc, #0]	; (8009418 <LmphCompliancePackageFactory+0x4>)
 8009416:	4770      	bx	lr
 8009418:	20000134 	.word	0x20000134

0800941c <NvmCtxMgmtEvent>:
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800941c:	4770      	bx	lr

0800941e <NvmCtxMgmtStore>:

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800941e:	2001      	movs	r0, #1
 8009420:	4770      	bx	lr

08009422 <NvmCtxMgmtRestore>:
 8009422:	2001      	movs	r0, #1
 8009424:	4770      	bx	lr
	...

08009428 <OnRadioRxError>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8009428:	2302      	movs	r3, #2
 800942a:	4a08      	ldr	r2, [pc, #32]	; (800944c <OnRadioRxError+0x24>)
{
 800942c:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800942e:	7811      	ldrb	r1, [r2, #0]
 8009430:	430b      	orrs	r3, r1
 8009432:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009434:	23d2      	movs	r3, #210	; 0xd2
 8009436:	4a06      	ldr	r2, [pc, #24]	; (8009450 <OnRadioRxError+0x28>)
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	58d3      	ldr	r3, [r2, r3]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d003      	beq.n	8009448 <OnRadioRxError+0x20>
 8009440:	68db      	ldr	r3, [r3, #12]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d000      	beq.n	8009448 <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009446:	4798      	blx	r3
    }
}
 8009448:	bd10      	pop	{r4, pc}
 800944a:	46c0      	nop			; (mov r8, r8)
 800944c:	20000574 	.word	0x20000574
 8009450:	2000071c 	.word	0x2000071c

08009454 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009454:	4a05      	ldr	r2, [pc, #20]	; (800946c <UpdateRxSlotIdleState+0x18>)
 8009456:	4b06      	ldr	r3, [pc, #24]	; (8009470 <UpdateRxSlotIdleState+0x1c>)
 8009458:	58d3      	ldr	r3, [r2, r3]
 800945a:	337c      	adds	r3, #124	; 0x7c
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	2b02      	cmp	r3, #2
 8009460:	d000      	beq.n	8009464 <UpdateRxSlotIdleState+0x10>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8009462:	2306      	movs	r3, #6
 8009464:	2190      	movs	r1, #144	; 0x90
 8009466:	00c9      	lsls	r1, r1, #3
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8009468:	5453      	strb	r3, [r2, r1]
 800946a:	4770      	bx	lr
 800946c:	2000071c 	.word	0x2000071c
 8009470:	00000484 	.word	0x00000484

08009474 <StopRetransmission>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009474:	4b11      	ldr	r3, [pc, #68]	; (80094bc <StopRetransmission+0x48>)
 8009476:	4a12      	ldr	r2, [pc, #72]	; (80094c0 <StopRetransmission+0x4c>)
 8009478:	5c9a      	ldrb	r2, [r3, r2]
 800947a:	0792      	lsls	r2, r2, #30
 800947c:	d503      	bpl.n	8009486 <StopRetransmission+0x12>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 800947e:	4a11      	ldr	r2, [pc, #68]	; (80094c4 <StopRetransmission+0x50>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009480:	5c9a      	ldrb	r2, [r3, r2]
 8009482:	2a01      	cmp	r2, #1
 8009484:	d90a      	bls.n	800949c <StopRetransmission+0x28>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8009486:	4a10      	ldr	r2, [pc, #64]	; (80094c8 <StopRetransmission+0x54>)
 8009488:	589a      	ldr	r2, [r3, r2]
 800948a:	0011      	movs	r1, r2
 800948c:	317e      	adds	r1, #126	; 0x7e
 800948e:	7809      	ldrb	r1, [r1, #0]
 8009490:	2900      	cmp	r1, #0
 8009492:	d003      	beq.n	800949c <StopRetransmission+0x28>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8009494:	3204      	adds	r2, #4
 8009496:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 8009498:	3101      	adds	r1, #1
 800949a:	67d1      	str	r1, [r2, #124]	; 0x7c
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800949c:	2182      	movs	r1, #130	; 0x82
 800949e:	2200      	movs	r2, #0
 80094a0:	00c9      	lsls	r1, r1, #3
 80094a2:	545a      	strb	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 80094a4:	4909      	ldr	r1, [pc, #36]	; (80094cc <StopRetransmission+0x58>)
 80094a6:	545a      	strb	r2, [r3, r1]
    MacCtx.AckTimeoutRetry = false;
 80094a8:	4909      	ldr	r1, [pc, #36]	; (80094d0 <StopRetransmission+0x5c>)
 80094aa:	545a      	strb	r2, [r3, r1]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 80094ac:	39d3      	subs	r1, #211	; 0xd3
 80094ae:	5858      	ldr	r0, [r3, r1]
 80094b0:	3202      	adds	r2, #2
 80094b2:	4390      	bics	r0, r2
 80094b4:	5058      	str	r0, [r3, r1]

    return true;
}
 80094b6:	2001      	movs	r0, #1
 80094b8:	4770      	bx	lr
 80094ba:	46c0      	nop			; (mov r8, r8)
 80094bc:	2000071c 	.word	0x2000071c
 80094c0:	00000481 	.word	0x00000481
 80094c4:	0000042d 	.word	0x0000042d
 80094c8:	00000484 	.word	0x00000484
 80094cc:	00000414 	.word	0x00000414
 80094d0:	00000413 	.word	0x00000413

080094d4 <CallNvmCtxCallback>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 80094d4:	23d2      	movs	r3, #210	; 0xd2
 80094d6:	4a05      	ldr	r2, [pc, #20]	; (80094ec <CallNvmCtxCallback+0x18>)
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	58d3      	ldr	r3, [r2, r3]
{
 80094dc:	b510      	push	{r4, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <CallNvmCtxCallback+0x16>
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d000      	beq.n	80094ea <CallNvmCtxCallback+0x16>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 80094e8:	4798      	blx	r3
    }
}
 80094ea:	bd10      	pop	{r4, pc}
 80094ec:	2000071c 	.word	0x2000071c

080094f0 <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 80094f0:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 80094f2:	2000      	movs	r0, #0
 80094f4:	f7ff ffee 	bl	80094d4 <CallNvmCtxCallback>
}
 80094f8:	bd10      	pop	{r4, pc}

080094fa <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 80094fa:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 80094fc:	2001      	movs	r0, #1
 80094fe:	f7ff ffe9 	bl	80094d4 <CallNvmCtxCallback>
}
 8009502:	bd10      	pop	{r4, pc}

08009504 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 8009504:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8009506:	2002      	movs	r0, #2
 8009508:	f7ff ffe4 	bl	80094d4 <CallNvmCtxCallback>
}
 800950c:	bd10      	pop	{r4, pc}

0800950e <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 800950e:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8009510:	2003      	movs	r0, #3
 8009512:	f7ff ffdf 	bl	80094d4 <CallNvmCtxCallback>
}
 8009516:	bd10      	pop	{r4, pc}

08009518 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 8009518:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 800951a:	2004      	movs	r0, #4
 800951c:	f7ff ffda 	bl	80094d4 <CallNvmCtxCallback>
}
 8009520:	bd10      	pop	{r4, pc}

08009522 <EventClassBNvmCtxChanged>:

static void EventClassBNvmCtxChanged( void )
{
 8009522:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
 8009524:	2005      	movs	r0, #5
 8009526:	f7ff ffd5 	bl	80094d4 <CallNvmCtxCallback>
}
 800952a:	bd10      	pop	{r4, pc}

0800952c <EventConfirmQueueNvmCtxChanged>:

static void EventConfirmQueueNvmCtxChanged( void )
{
 800952c:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 800952e:	2006      	movs	r0, #6
 8009530:	f7ff ffd0 	bl	80094d4 <CallNvmCtxCallback>
}
 8009534:	bd10      	pop	{r4, pc}
	...

08009538 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8009538:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800953a:	4a0c      	ldr	r2, [pc, #48]	; (800956c <GetMaxAppPayloadWithoutFOptsLength+0x34>)
 800953c:	4b0c      	ldr	r3, [pc, #48]	; (8009570 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 800953e:	a902      	add	r1, sp, #8
 8009540:	58d3      	ldr	r3, [r2, r3]
 8009542:	001a      	movs	r2, r3
 8009544:	32b8      	adds	r2, #184	; 0xb8
 8009546:	7812      	ldrb	r2, [r2, #0]
    getPhy.Datarate = datarate;
 8009548:	7048      	strb	r0, [r1, #1]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800954a:	708a      	strb	r2, [r1, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800954c:	220d      	movs	r2, #13
 800954e:	700a      	strb	r2, [r1, #0]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 8009550:	001a      	movs	r2, r3
 8009552:	32ca      	adds	r2, #202	; 0xca
 8009554:	7812      	ldrb	r2, [r2, #0]
 8009556:	2a00      	cmp	r2, #0
 8009558:	d001      	beq.n	800955e <GetMaxAppPayloadWithoutFOptsLength+0x26>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800955a:	220e      	movs	r2, #14
 800955c:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800955e:	7818      	ldrb	r0, [r3, #0]
 8009560:	f003 fcc8 	bl	800cef4 <RegionGetPhyParam>
    return phyParam.Value;
 8009564:	b2c0      	uxtb	r0, r0
}
 8009566:	b005      	add	sp, #20
 8009568:	bd00      	pop	{pc}
 800956a:	46c0      	nop			; (mov r8, r8)
 800956c:	2000071c 	.word	0x2000071c
 8009570:	00000484 	.word	0x00000484

08009574 <OnAckTimeoutTimerEvent>:
{
 8009574:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8009576:	4810      	ldr	r0, [pc, #64]	; (80095b8 <OnAckTimeoutTimerEvent+0x44>)
 8009578:	f006 fb82 	bl	800fc80 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800957c:	4b0f      	ldr	r3, [pc, #60]	; (80095bc <OnAckTimeoutTimerEvent+0x48>)
 800957e:	4a10      	ldr	r2, [pc, #64]	; (80095c0 <OnAckTimeoutTimerEvent+0x4c>)
 8009580:	5c9a      	ldrb	r2, [r3, r2]
 8009582:	2a00      	cmp	r2, #0
 8009584:	d002      	beq.n	800958c <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8009586:	2101      	movs	r1, #1
 8009588:	4a0e      	ldr	r2, [pc, #56]	; (80095c4 <OnAckTimeoutTimerEvent+0x50>)
 800958a:	5499      	strb	r1, [r3, r2]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800958c:	4a0e      	ldr	r2, [pc, #56]	; (80095c8 <OnAckTimeoutTimerEvent+0x54>)
 800958e:	589a      	ldr	r2, [r3, r2]
 8009590:	327c      	adds	r2, #124	; 0x7c
 8009592:	7812      	ldrb	r2, [r2, #0]
 8009594:	2a02      	cmp	r2, #2
 8009596:	d104      	bne.n	80095a2 <OnAckTimeoutTimerEvent+0x2e>
        MacCtx.MacFlags.Bits.MacDone = 1;
 8009598:	490c      	ldr	r1, [pc, #48]	; (80095cc <OnAckTimeoutTimerEvent+0x58>)
 800959a:	321e      	adds	r2, #30
 800959c:	5c58      	ldrb	r0, [r3, r1]
 800959e:	4302      	orrs	r2, r0
 80095a0:	545a      	strb	r2, [r3, r1]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80095a2:	22d2      	movs	r2, #210	; 0xd2
 80095a4:	0092      	lsls	r2, r2, #2
 80095a6:	589b      	ldr	r3, [r3, r2]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d003      	beq.n	80095b4 <OnAckTimeoutTimerEvent+0x40>
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d000      	beq.n	80095b4 <OnAckTimeoutTimerEvent+0x40>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80095b2:	4798      	blx	r3
}
 80095b4:	bd10      	pop	{r4, pc}
 80095b6:	46c0      	nop			; (mov r8, r8)
 80095b8:	20000b14 	.word	0x20000b14
 80095bc:	2000071c 	.word	0x2000071c
 80095c0:	00000414 	.word	0x00000414
 80095c4:	00000413 	.word	0x00000413
 80095c8:	00000484 	.word	0x00000484
 80095cc:	00000481 	.word	0x00000481

080095d0 <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80095d0:	22d0      	movs	r2, #208	; 0xd0
 80095d2:	2380      	movs	r3, #128	; 0x80
{
 80095d4:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80095d6:	4c0a      	ldr	r4, [pc, #40]	; (8009600 <PrepareRxDoneAbort+0x30>)
 80095d8:	0092      	lsls	r2, r2, #2
 80095da:	58a1      	ldr	r1, [r4, r2]
 80095dc:	430b      	orrs	r3, r1
 80095de:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == true )
 80095e0:	4b08      	ldr	r3, [pc, #32]	; (8009604 <PrepareRxDoneAbort+0x34>)
 80095e2:	5ce3      	ldrb	r3, [r4, r3]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d002      	beq.n	80095ee <PrepareRxDoneAbort+0x1e>
        OnAckTimeoutTimerEvent( NULL );
 80095e8:	2000      	movs	r0, #0
 80095ea:	f7ff ffc3 	bl	8009574 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80095ee:	2322      	movs	r3, #34	; 0x22
 80095f0:	4905      	ldr	r1, [pc, #20]	; (8009608 <PrepareRxDoneAbort+0x38>)
 80095f2:	5c62      	ldrb	r2, [r4, r1]
 80095f4:	439a      	bics	r2, r3
 80095f6:	4313      	orrs	r3, r2
 80095f8:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 80095fa:	f7ff ff2b 	bl	8009454 <UpdateRxSlotIdleState>
}
 80095fe:	bd10      	pop	{r4, pc}
 8009600:	2000071c 	.word	0x2000071c
 8009604:	00000414 	.word	0x00000414
 8009608:	00000481 	.word	0x00000481

0800960c <HandleRadioRxErrorTimeout>:
{
 800960c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800960e:	4c33      	ldr	r4, [pc, #204]	; (80096dc <HandleRadioRxErrorTimeout+0xd0>)
 8009610:	4d33      	ldr	r5, [pc, #204]	; (80096e0 <HandleRadioRxErrorTimeout+0xd4>)
{
 8009612:	9000      	str	r0, [sp, #0]
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009614:	5963      	ldr	r3, [r4, r5]
{
 8009616:	000f      	movs	r7, r1
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009618:	337c      	adds	r3, #124	; 0x7c
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	2b02      	cmp	r3, #2
 800961e:	d003      	beq.n	8009628 <HandleRadioRxErrorTimeout+0x1c>
        Radio.Sleep( );
 8009620:	4b30      	ldr	r3, [pc, #192]	; (80096e4 <HandleRadioRxErrorTimeout+0xd8>)
 8009622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009624:	9301      	str	r3, [sp, #4]
 8009626:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009628:	f002 fd8e 	bl	800c148 <LoRaMacClassBIsBeaconExpected>
 800962c:	1e06      	subs	r6, r0, #0
 800962e:	d005      	beq.n	800963c <HandleRadioRxErrorTimeout+0x30>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 8009630:	2002      	movs	r0, #2
 8009632:	f002 fd7f 	bl	800c134 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 8009636:	2000      	movs	r0, #0
 8009638:	f002 fd81 	bl	800c13e <LoRaMacClassBBeaconTimerEvent>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800963c:	5963      	ldr	r3, [r4, r5]
 800963e:	337c      	adds	r3, #124	; 0x7c
 8009640:	781b      	ldrb	r3, [r3, #0]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d118      	bne.n	8009678 <HandleRadioRxErrorTimeout+0x6c>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009646:	f002 fd81 	bl	800c14c <LoRaMacClassBIsPingExpected>
 800964a:	9001      	str	r0, [sp, #4]
 800964c:	2800      	cmp	r0, #0
 800964e:	d006      	beq.n	800965e <HandleRadioRxErrorTimeout+0x52>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009650:	2000      	movs	r0, #0
 8009652:	f002 fd70 	bl	800c136 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009656:	2000      	movs	r0, #0
 8009658:	f002 fd72 	bl	800c140 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800965c:	9e01      	ldr	r6, [sp, #4]
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800965e:	f002 fd77 	bl	800c150 <LoRaMacClassBIsMulticastExpected>
 8009662:	2800      	cmp	r0, #0
 8009664:	d008      	beq.n	8009678 <HandleRadioRxErrorTimeout+0x6c>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009666:	2000      	movs	r0, #0
 8009668:	f002 fd66 	bl	800c138 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800966c:	2000      	movs	r0, #0
 800966e:	f002 fd68 	bl	800c142 <LoRaMacClassBMulticastSlotTimerEvent>
    UpdateRxSlotIdleState( );
 8009672:	f7ff feef 	bl	8009454 <UpdateRxSlotIdleState>
}
 8009676:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if( classBRx == false )
 8009678:	2e00      	cmp	r6, #0
 800967a:	d1fa      	bne.n	8009672 <HandleRadioRxErrorTimeout+0x66>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800967c:	2290      	movs	r2, #144	; 0x90
 800967e:	00d2      	lsls	r2, r2, #3
 8009680:	4b19      	ldr	r3, [pc, #100]	; (80096e8 <HandleRadioRxErrorTimeout+0xdc>)
 8009682:	5ca2      	ldrb	r2, [r4, r2]
 8009684:	5ce3      	ldrb	r3, [r4, r3]
 8009686:	2a00      	cmp	r2, #0
 8009688:	d11a      	bne.n	80096c0 <HandleRadioRxErrorTimeout+0xb4>
            if( MacCtx.NodeAckRequested == true )
 800968a:	2b00      	cmp	r3, #0
 800968c:	d002      	beq.n	8009694 <HandleRadioRxErrorTimeout+0x88>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800968e:	4b17      	ldr	r3, [pc, #92]	; (80096ec <HandleRadioRxErrorTimeout+0xe0>)
 8009690:	9a00      	ldr	r2, [sp, #0]
 8009692:	54e2      	strb	r2, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8009694:	9800      	ldr	r0, [sp, #0]
 8009696:	f002 ff4d 	bl	800c534 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800969a:	5963      	ldr	r3, [r4, r5]
 800969c:	33fc      	adds	r3, #252	; 0xfc
 800969e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80096a0:	f006 fab4 	bl	800fc0c <UTIL_TIMER_GetElapsedTime>
 80096a4:	23ed      	movs	r3, #237	; 0xed
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	58e3      	ldr	r3, [r4, r3]
 80096aa:	4298      	cmp	r0, r3
 80096ac:	d3e1      	bcc.n	8009672 <HandleRadioRxErrorTimeout+0x66>
                TimerStop( &MacCtx.RxWindowTimer2 );
 80096ae:	4810      	ldr	r0, [pc, #64]	; (80096f0 <HandleRadioRxErrorTimeout+0xe4>)
 80096b0:	f006 fae6 	bl	800fc80 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 80096b4:	2320      	movs	r3, #32
 80096b6:	4a0f      	ldr	r2, [pc, #60]	; (80096f4 <HandleRadioRxErrorTimeout+0xe8>)
 80096b8:	5ca1      	ldrb	r1, [r4, r2]
 80096ba:	430b      	orrs	r3, r1
 80096bc:	54a3      	strb	r3, [r4, r2]
 80096be:	e7d8      	b.n	8009672 <HandleRadioRxErrorTimeout+0x66>
            if( MacCtx.NodeAckRequested == true )
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d001      	beq.n	80096c8 <HandleRadioRxErrorTimeout+0xbc>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 80096c4:	4b09      	ldr	r3, [pc, #36]	; (80096ec <HandleRadioRxErrorTimeout+0xe0>)
 80096c6:	54e7      	strb	r7, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 80096c8:	0038      	movs	r0, r7
 80096ca:	f002 ff33 	bl	800c534 <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80096ce:	5963      	ldr	r3, [r4, r5]
 80096d0:	337c      	adds	r3, #124	; 0x7c
 80096d2:	781b      	ldrb	r3, [r3, #0]
 80096d4:	2b02      	cmp	r3, #2
 80096d6:	d1ed      	bne.n	80096b4 <HandleRadioRxErrorTimeout+0xa8>
 80096d8:	e7cb      	b.n	8009672 <HandleRadioRxErrorTimeout+0x66>
 80096da:	46c0      	nop			; (mov r8, r8)
 80096dc:	2000071c 	.word	0x2000071c
 80096e0:	00000484 	.word	0x00000484
 80096e4:	080117e4 	.word	0x080117e4
 80096e8:	00000414 	.word	0x00000414
 80096ec:	0000043d 	.word	0x0000043d
 80096f0:	20000ab4 	.word	0x20000ab4
 80096f4:	00000481 	.word	0x00000481

080096f8 <ResetMacParameters>:
{
 80096f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 80096fa:	22b2      	movs	r2, #178	; 0xb2
 80096fc:	2500      	movs	r5, #0
 80096fe:	4c2e      	ldr	r4, [pc, #184]	; (80097b8 <ResetMacParameters+0xc0>)
 8009700:	4e2e      	ldr	r6, [pc, #184]	; (80097bc <ResetMacParameters+0xc4>)
 8009702:	0052      	lsls	r2, r2, #1
 8009704:	59a3      	ldr	r3, [r4, r6]
    MacCtx.ChannelsNbTransCounter = 0;
 8009706:	492e      	ldr	r1, [pc, #184]	; (80097c0 <ResetMacParameters+0xc8>)
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 8009708:	549d      	strb	r5, [r3, r2]
    MacCtx.NvmCtx->AdrAckCounter = 0;
 800970a:	1d1a      	adds	r2, r3, #4
 800970c:	67d5      	str	r5, [r2, #124]	; 0x7c
    MacCtx.ChannelsNbTransCounter = 0;
 800970e:	2282      	movs	r2, #130	; 0x82
 8009710:	00d2      	lsls	r2, r2, #3
 8009712:	50a1      	str	r1, [r4, r2]
    MacCtx.NvmCtx->MaxDCycle = 0;
 8009714:	001a      	movs	r2, r3
 8009716:	32c8      	adds	r2, #200	; 0xc8
 8009718:	7015      	strb	r5, [r2, #0]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 800971a:	2201      	movs	r2, #1
 800971c:	4694      	mov	ip, r2
 800971e:	4661      	mov	r1, ip
 8009720:	324c      	adds	r2, #76	; 0x4c
 8009722:	32ff      	adds	r2, #255	; 0xff
 8009724:	5299      	strh	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 8009726:	001a      	movs	r2, r3
 8009728:	8899      	ldrh	r1, [r3, #4]
 800972a:	3284      	adds	r2, #132	; 0x84
 800972c:	8011      	strh	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 800972e:	1d99      	adds	r1, r3, #6
 8009730:	7fc9      	ldrb	r1, [r1, #31]
 8009732:	3221      	adds	r2, #33	; 0x21
 8009734:	7011      	strb	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 8009736:	0019      	movs	r1, r3
 8009738:	3a7d      	subs	r2, #125	; 0x7d
 800973a:	31a8      	adds	r1, #168	; 0xa8
 800973c:	ca81      	ldmia	r2!, {r0, r7}
 800973e:	c181      	stmia	r1!, {r0, r7}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 8009740:	ca81      	ldmia	r2!, {r0, r7}
 8009742:	c181      	stmia	r1!, {r0, r7}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 8009744:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 8009746:	3280      	adds	r2, #128	; 0x80
 8009748:	8011      	strh	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 800974a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    params.NvmCtx = NULL;
 800974c:	9500      	str	r5, [sp, #0]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 800974e:	6051      	str	r1, [r2, #4]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 8009750:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009752:	6091      	str	r1, [r2, #8]
    MacCtx.NodeAckRequested = false;
 8009754:	4a1b      	ldr	r2, [pc, #108]	; (80097c4 <ResetMacParameters+0xcc>)
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8009756:	4661      	mov	r1, ip
    MacCtx.NodeAckRequested = false;
 8009758:	54a5      	strb	r5, [r4, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 800975a:	224c      	movs	r2, #76	; 0x4c
 800975c:	32ff      	adds	r2, #255	; 0xff
 800975e:	549d      	strb	r5, [r3, r2]
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8009760:	466a      	mov	r2, sp
 8009762:	7111      	strb	r1, [r2, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 8009764:	7818      	ldrb	r0, [r3, #0]
 8009766:	4669      	mov	r1, sp
 8009768:	f003 fbd7 	bl	800cf1a <RegionInitDefaults>
    MacCtx.Channel = 0;
 800976c:	4b16      	ldr	r3, [pc, #88]	; (80097c8 <ResetMacParameters+0xd0>)
 800976e:	54e5      	strb	r5, [r4, r3]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009770:	3b49      	subs	r3, #73	; 0x49
 8009772:	54e5      	strb	r5, [r4, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8009774:	59a3      	ldr	r3, [r4, r6]
 8009776:	001a      	movs	r2, r3
 8009778:	32a8      	adds	r2, #168	; 0xa8
 800977a:	6811      	ldr	r1, [r2, #0]
 800977c:	22f4      	movs	r2, #244	; 0xf4
 800977e:	0092      	lsls	r2, r2, #2
 8009780:	50a1      	str	r1, [r4, r2]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009782:	001a      	movs	r2, r3
 8009784:	32b9      	adds	r2, #185	; 0xb9
 8009786:	7811      	ldrb	r1, [r2, #0]
 8009788:	22f7      	movs	r2, #247	; 0xf7
 800978a:	0092      	lsls	r2, r2, #2
 800978c:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800978e:	33ca      	adds	r3, #202	; 0xca
 8009790:	781a      	ldrb	r2, [r3, #0]
 8009792:	4b0e      	ldr	r3, [pc, #56]	; (80097cc <ResetMacParameters+0xd4>)
 8009794:	54e2      	strb	r2, [r4, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009796:	2280      	movs	r2, #128	; 0x80
 8009798:	4b0d      	ldr	r3, [pc, #52]	; (80097d0 <ResetMacParameters+0xd8>)
 800979a:	0052      	lsls	r2, r2, #1
 800979c:	52e2      	strh	r2, [r4, r3]
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800979e:	22f3      	movs	r2, #243	; 0xf3
 80097a0:	3302      	adds	r3, #2
 80097a2:	0092      	lsls	r2, r2, #2
 80097a4:	18e3      	adds	r3, r4, r3
 80097a6:	18a2      	adds	r2, r4, r2
 80097a8:	ca23      	ldmia	r2!, {r0, r1, r5}
 80097aa:	c323      	stmia	r3!, {r0, r1, r5}
 80097ac:	ca03      	ldmia	r2!, {r0, r1}
 80097ae:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80097b0:	4b08      	ldr	r3, [pc, #32]	; (80097d4 <ResetMacParameters+0xdc>)
 80097b2:	4a09      	ldr	r2, [pc, #36]	; (80097d8 <ResetMacParameters+0xe0>)
 80097b4:	52e2      	strh	r2, [r4, r3]
}
 80097b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80097b8:	2000071c 	.word	0x2000071c
 80097bc:	00000484 	.word	0x00000484
 80097c0:	00010100 	.word	0x00010100
 80097c4:	00000414 	.word	0x00000414
 80097c8:	00000415 	.word	0x00000415
 80097cc:	000003dd 	.word	0x000003dd
 80097d0:	000003de 	.word	0x000003de
 80097d4:	000003f2 	.word	0x000003f2
 80097d8:	00000201 	.word	0x00000201

080097dc <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80097dc:	2301      	movs	r3, #1
 80097de:	4a0b      	ldr	r2, [pc, #44]	; (800980c <OnRadioRxTimeout+0x30>)
{
 80097e0:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 80097e2:	7811      	ldrb	r1, [r2, #0]
 80097e4:	430b      	orrs	r3, r1
 80097e6:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80097e8:	23d2      	movs	r3, #210	; 0xd2
 80097ea:	4a09      	ldr	r2, [pc, #36]	; (8009810 <OnRadioRxTimeout+0x34>)
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	58d3      	ldr	r3, [r2, r3]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d003      	beq.n	80097fc <OnRadioRxTimeout+0x20>
 80097f4:	68db      	ldr	r3, [r3, #12]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d000      	beq.n	80097fc <OnRadioRxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80097fa:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 80097fc:	2201      	movs	r2, #1
 80097fe:	2100      	movs	r1, #0
 8009800:	2002      	movs	r0, #2
 8009802:	4b04      	ldr	r3, [pc, #16]	; (8009814 <OnRadioRxTimeout+0x38>)
 8009804:	f005 ff66 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
}
 8009808:	bd10      	pop	{r4, pc}
 800980a:	46c0      	nop			; (mov r8, r8)
 800980c:	20000574 	.word	0x20000574
 8009810:	2000071c 	.word	0x2000071c
 8009814:	08011f09 	.word	0x08011f09

08009818 <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8009818:	2304      	movs	r3, #4
 800981a:	4a0b      	ldr	r2, [pc, #44]	; (8009848 <OnRadioTxTimeout+0x30>)
{
 800981c:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800981e:	7811      	ldrb	r1, [r2, #0]
 8009820:	430b      	orrs	r3, r1
 8009822:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009824:	23d2      	movs	r3, #210	; 0xd2
 8009826:	4a09      	ldr	r2, [pc, #36]	; (800984c <OnRadioTxTimeout+0x34>)
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	58d3      	ldr	r3, [r2, r3]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d003      	beq.n	8009838 <OnRadioTxTimeout+0x20>
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d000      	beq.n	8009838 <OnRadioTxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009836:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8009838:	2201      	movs	r2, #1
 800983a:	2100      	movs	r1, #0
 800983c:	2002      	movs	r0, #2
 800983e:	4b04      	ldr	r3, [pc, #16]	; (8009850 <OnRadioTxTimeout+0x38>)
 8009840:	f005 ff48 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
}
 8009844:	bd10      	pop	{r4, pc}
 8009846:	46c0      	nop			; (mov r8, r8)
 8009848:	20000574 	.word	0x20000574
 800984c:	2000071c 	.word	0x2000071c
 8009850:	08011f19 	.word	0x08011f19

08009854 <OnRadioRxDone>:
{
 8009854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009856:	000e      	movs	r6, r1
 8009858:	0015      	movs	r5, r2
 800985a:	001c      	movs	r4, r3
 800985c:	0007      	movs	r7, r0
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800985e:	f006 f9cb 	bl	800fbf8 <UTIL_TIMER_GetCurrentTime>
 8009862:	4b0e      	ldr	r3, [pc, #56]	; (800989c <OnRadioRxDone+0x48>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 8009864:	4a0e      	ldr	r2, [pc, #56]	; (80098a0 <OnRadioRxDone+0x4c>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8009866:	6018      	str	r0, [r3, #0]
    RxDoneParams.Payload = payload;
 8009868:	605f      	str	r7, [r3, #4]
    RxDoneParams.Size = size;
 800986a:	811e      	strh	r6, [r3, #8]
    RxDoneParams.Rssi = rssi;
 800986c:	815d      	strh	r5, [r3, #10]
    RxDoneParams.Snr = snr;
 800986e:	731c      	strb	r4, [r3, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8009870:	2308      	movs	r3, #8
 8009872:	7811      	ldrb	r1, [r2, #0]
 8009874:	430b      	orrs	r3, r1
 8009876:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009878:	23d2      	movs	r3, #210	; 0xd2
 800987a:	4a0a      	ldr	r2, [pc, #40]	; (80098a4 <OnRadioRxDone+0x50>)
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	58d3      	ldr	r3, [r2, r3]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d003      	beq.n	800988c <OnRadioRxDone+0x38>
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d000      	beq.n	800988c <OnRadioRxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800988a:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800988c:	2201      	movs	r2, #1
 800988e:	2100      	movs	r1, #0
 8009890:	4b05      	ldr	r3, [pc, #20]	; (80098a8 <OnRadioRxDone+0x54>)
 8009892:	2002      	movs	r0, #2
 8009894:	f005 ff1e 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
}
 8009898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800989a:	46c0      	nop			; (mov r8, r8)
 800989c:	200014c0 	.word	0x200014c0
 80098a0:	20000574 	.word	0x20000574
 80098a4:	2000071c 	.word	0x2000071c
 80098a8:	08011f29 	.word	0x08011f29

080098ac <OnRadioTxDone>:
{
 80098ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80098ae:	f006 f9a3 	bl	800fbf8 <UTIL_TIMER_GetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 80098b2:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80098b4:	4b0f      	ldr	r3, [pc, #60]	; (80098f4 <OnRadioTxDone+0x48>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 80098b6:	4d10      	ldr	r5, [pc, #64]	; (80098f8 <OnRadioTxDone+0x4c>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80098b8:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 80098ba:	0020      	movs	r0, r4
 80098bc:	f006 f936 	bl	800fb2c <SysTimeGet>
 80098c0:	23ce      	movs	r3, #206	; 0xce
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	18eb      	adds	r3, r5, r3
 80098c6:	cc06      	ldmia	r4!, {r1, r2}
 80098c8:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 80098ca:	2310      	movs	r3, #16
 80098cc:	4a0b      	ldr	r2, [pc, #44]	; (80098fc <OnRadioTxDone+0x50>)
 80098ce:	7811      	ldrb	r1, [r2, #0]
 80098d0:	430b      	orrs	r3, r1
 80098d2:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80098d4:	23d2      	movs	r3, #210	; 0xd2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	58eb      	ldr	r3, [r5, r3]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d003      	beq.n	80098e6 <OnRadioTxDone+0x3a>
 80098de:	68db      	ldr	r3, [r3, #12]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d000      	beq.n	80098e6 <OnRadioTxDone+0x3a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80098e4:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 80098e6:	2201      	movs	r2, #1
 80098e8:	2100      	movs	r1, #0
 80098ea:	4b05      	ldr	r3, [pc, #20]	; (8009900 <OnRadioTxDone+0x54>)
 80098ec:	2002      	movs	r0, #2
 80098ee:	f005 fef1 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
}
 80098f2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 80098f4:	200014bc 	.word	0x200014bc
 80098f8:	2000071c 	.word	0x2000071c
 80098fc:	20000574 	.word	0x20000574
 8009900:	08011f36 	.word	0x08011f36

08009904 <ScheduleTx>:
{
 8009904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009906:	b095      	sub	sp, #84	; 0x54
 8009908:	9003      	str	r0, [sp, #12]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800990a:	f002 fc1d 	bl	800c148 <LoRaMacClassBIsBeaconExpected>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800990e:	250e      	movs	r5, #14
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8009910:	2800      	cmp	r0, #0
 8009912:	d11b      	bne.n	800994c <ScheduleTx+0x48>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8009914:	4ccf      	ldr	r4, [pc, #828]	; (8009c54 <ScheduleTx+0x350>)
 8009916:	4ed0      	ldr	r6, [pc, #832]	; (8009c58 <ScheduleTx+0x354>)
 8009918:	59a3      	ldr	r3, [r4, r6]
 800991a:	337c      	adds	r3, #124	; 0x7c
 800991c:	781b      	ldrb	r3, [r3, #0]
 800991e:	2b01      	cmp	r3, #1
 8009920:	d00f      	beq.n	8009942 <ScheduleTx+0x3e>
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 8009922:	59a3      	ldr	r3, [r4, r6]
 8009924:	0019      	movs	r1, r3
 8009926:	31fc      	adds	r1, #252	; 0xfc
 8009928:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 800992a:	2a00      	cmp	r2, #0
 800992c:	d016      	beq.n	800995c <ScheduleTx+0x58>
    switch( MacCtx.TxMsg.Type )
 800992e:	0025      	movs	r5, r4
 8009930:	35ff      	adds	r5, #255	; 0xff
 8009932:	796b      	ldrb	r3, [r5, #5]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d01b      	beq.n	8009970 <ScheduleTx+0x6c>
 8009938:	2b04      	cmp	r3, #4
 800993a:	d100      	bne.n	800993e <ScheduleTx+0x3a>
 800993c:	e079      	b.n	8009a32 <ScheduleTx+0x12e>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800993e:	2503      	movs	r5, #3
 8009940:	e004      	b.n	800994c <ScheduleTx+0x48>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009942:	f002 fc03 	bl	800c14c <LoRaMacClassBIsPingExpected>
 8009946:	2800      	cmp	r0, #0
 8009948:	d003      	beq.n	8009952 <ScheduleTx+0x4e>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800994a:	250f      	movs	r5, #15
}
 800994c:	0028      	movs	r0, r5
 800994e:	b015      	add	sp, #84	; 0x54
 8009950:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009952:	f002 fbfd 	bl	800c150 <LoRaMacClassBIsMulticastExpected>
 8009956:	2800      	cmp	r0, #0
 8009958:	d0e3      	beq.n	8009922 <ScheduleTx+0x1e>
 800995a:	e7f6      	b.n	800994a <ScheduleTx+0x46>
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 800995c:	22a6      	movs	r2, #166	; 0xa6
 800995e:	0052      	lsls	r2, r2, #1
 8009960:	5a9a      	ldrh	r2, [r3, r2]
 8009962:	2383      	movs	r3, #131	; 0x83
 8009964:	00db      	lsls	r3, r3, #3
 8009966:	58e3      	ldr	r3, [r4, r3]
 8009968:	3a01      	subs	r2, #1
 800996a:	4353      	muls	r3, r2
 800996c:	658b      	str	r3, [r1, #88]	; 0x58
 800996e:	e7de      	b.n	800992e <ScheduleTx+0x2a>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8009970:	48ba      	ldr	r0, [pc, #744]	; (8009c5c <ScheduleTx+0x358>)
 8009972:	f003 fa16 	bl	800cda2 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8009976:	2800      	cmp	r0, #0
 8009978:	d000      	beq.n	800997c <ScheduleTx+0x78>
 800997a:	e166      	b.n	8009c4a <ScheduleTx+0x346>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800997c:	7b6b      	ldrb	r3, [r5, #13]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 800997e:	ad0e      	add	r5, sp, #56	; 0x38
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009980:	8023      	strh	r3, [r4, #0]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8009982:	59a3      	ldr	r3, [r4, r6]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8009984:	a808      	add	r0, sp, #32
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8009986:	001a      	movs	r2, r3
 8009988:	32fc      	adds	r2, #252	; 0xfc
 800998a:	6d92      	ldr	r2, [r2, #88]	; 0x58
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800998c:	af04      	add	r7, sp, #16
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 800998e:	920e      	str	r2, [sp, #56]	; 0x38
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009990:	001a      	movs	r2, r3
 8009992:	3285      	adds	r2, #133	; 0x85
 8009994:	7812      	ldrb	r2, [r2, #0]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8009996:	33c9      	adds	r3, #201	; 0xc9
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009998:	722a      	strb	r2, [r5, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	72ab      	strb	r3, [r5, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800999e:	f006 f8f1 	bl	800fb84 <SysTimeGetMcuTime>
 80099a2:	59a3      	ldr	r3, [r4, r6]
 80099a4:	9908      	ldr	r1, [sp, #32]
 80099a6:	001a      	movs	r2, r3
 80099a8:	325d      	adds	r2, #93	; 0x5d
 80099aa:	32ff      	adds	r2, #255	; 0xff
 80099ac:	6812      	ldr	r2, [r2, #0]
 80099ae:	0038      	movs	r0, r7
 80099b0:	9200      	str	r2, [sp, #0]
 80099b2:	22ac      	movs	r2, #172	; 0xac
 80099b4:	0052      	lsls	r2, r2, #1
 80099b6:	589b      	ldr	r3, [r3, r2]
 80099b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099ba:	f006 f879 	bl	800fab0 <SysTimeSub>
 80099be:	ab11      	add	r3, sp, #68	; 0x44
 80099c0:	cf06      	ldmia	r7!, {r1, r2}
 80099c2:	c306      	stmia	r3!, {r1, r2}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 80099c4:	59a3      	ldr	r3, [r4, r6]
    nextChan.Joined = true;
 80099c6:	2101      	movs	r1, #1
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 80099c8:	001a      	movs	r2, r3
 80099ca:	32fc      	adds	r2, #252	; 0xfc
 80099cc:	6d52      	ldr	r2, [r2, #84]	; 0x54
    nextChan.Joined = true;
 80099ce:	7269      	strb	r1, [r5, #9]
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 80099d0:	606a      	str	r2, [r5, #4]
    nextChan.LastTxIsJoinRequest = false;
 80099d2:	2200      	movs	r2, #0
 80099d4:	752a      	strb	r2, [r5, #20]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80099d6:	8822      	ldrh	r2, [r4, #0]
 80099d8:	82ea      	strh	r2, [r5, #22]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80099da:	22b2      	movs	r2, #178	; 0xb2
 80099dc:	0052      	lsls	r2, r2, #1
 80099de:	5c9a      	ldrb	r2, [r3, r2]
 80099e0:	2a00      	cmp	r2, #0
 80099e2:	d101      	bne.n	80099e8 <ScheduleTx+0xe4>
        nextChan.LastTxIsJoinRequest = true;
 80099e4:	7529      	strb	r1, [r5, #20]
        nextChan.Joined = false;
 80099e6:	726a      	strb	r2, [r5, #9]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 80099e8:	7818      	ldrb	r0, [r3, #0]
 80099ea:	3355      	adds	r3, #85	; 0x55
 80099ec:	33ff      	adds	r3, #255	; 0xff
 80099ee:	0029      	movs	r1, r5
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	4a9b      	ldr	r2, [pc, #620]	; (8009c60 <ScheduleTx+0x35c>)
 80099f4:	4b9b      	ldr	r3, [pc, #620]	; (8009c64 <ScheduleTx+0x360>)
 80099f6:	f003 fb26 	bl	800d046 <RegionNextChannel>
 80099fa:	1e05      	subs	r5, r0, #0
    if( status != LORAMAC_STATUS_OK )
 80099fc:	d01d      	beq.n	8009a3a <ScheduleTx+0x136>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80099fe:	280b      	cmp	r0, #11
 8009a00:	d1a4      	bne.n	800994c <ScheduleTx+0x48>
 8009a02:	9b03      	ldr	r3, [sp, #12]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d0a1      	beq.n	800994c <ScheduleTx+0x48>
            if( MacCtx.DutyCycleWaitTime != 0 )
 8009a08:	2291      	movs	r2, #145	; 0x91
            return LORAMAC_STATUS_OK;
 8009a0a:	2500      	movs	r5, #0
            if( MacCtx.DutyCycleWaitTime != 0 )
 8009a0c:	4b91      	ldr	r3, [pc, #580]	; (8009c54 <ScheduleTx+0x350>)
 8009a0e:	00d2      	lsls	r2, r2, #3
 8009a10:	5899      	ldr	r1, [r3, r2]
 8009a12:	42a9      	cmp	r1, r5
 8009a14:	d09a      	beq.n	800994c <ScheduleTx+0x48>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8009a16:	20d0      	movs	r0, #208	; 0xd0
 8009a18:	2220      	movs	r2, #32
 8009a1a:	0080      	lsls	r0, r0, #2
 8009a1c:	581c      	ldr	r4, [r3, r0]
 8009a1e:	4322      	orrs	r2, r4
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8009a20:	4c91      	ldr	r4, [pc, #580]	; (8009c68 <ScheduleTx+0x364>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8009a22:	501a      	str	r2, [r3, r0]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8009a24:	0020      	movs	r0, r4
 8009a26:	f006 f9c1 	bl	800fdac <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8009a2a:	0020      	movs	r0, r4
 8009a2c:	f006 f97c 	bl	800fd28 <UTIL_TIMER_Start>
 8009a30:	e78c      	b.n	800994c <ScheduleTx+0x48>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8009a32:	488a      	ldr	r0, [pc, #552]	; (8009c5c <ScheduleTx+0x358>)
 8009a34:	f003 f9ea 	bl	800ce0c <LoRaMacSerializerData>
 8009a38:	e79d      	b.n	8009976 <ScheduleTx+0x72>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009a3a:	59a1      	ldr	r1, [r4, r6]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8009a3c:	000b      	movs	r3, r1
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8009a3e:	000a      	movs	r2, r1
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 8009a40:	33a5      	adds	r3, #165	; 0xa5
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8009a42:	3285      	adds	r2, #133	; 0x85
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009a44:	780f      	ldrb	r7, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	7812      	ldrb	r2, [r2, #0]
 8009a4a:	31b9      	adds	r1, #185	; 0xb9
 8009a4c:	0038      	movs	r0, r7
 8009a4e:	7809      	ldrb	r1, [r1, #0]
 8009a50:	b25b      	sxtb	r3, r3
 8009a52:	b252      	sxtb	r2, r2
 8009a54:	f003 fb0c 	bl	800d070 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009a58:	2288      	movs	r2, #136	; 0x88
 8009a5a:	4694      	mov	ip, r2
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 8009a5c:	59a3      	ldr	r3, [r4, r6]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009a5e:	b241      	sxtb	r1, r0
 8009a60:	449c      	add	ip, r3
 8009a62:	338c      	adds	r3, #140	; 0x8c
 8009a64:	781a      	ldrb	r2, [r3, #0]
 8009a66:	4b81      	ldr	r3, [pc, #516]	; (8009c6c <ScheduleTx+0x368>)
 8009a68:	0038      	movs	r0, r7
 8009a6a:	9300      	str	r3, [sp, #0]
 8009a6c:	4663      	mov	r3, ip
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 fa81 	bl	800cf76 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009a74:	59a3      	ldr	r3, [r4, r6]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8009a76:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009a78:	001a      	movs	r2, r3
 8009a7a:	001f      	movs	r7, r3
 8009a7c:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8009a7e:	31ac      	adds	r1, #172	; 0xac
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009a80:	4b7b      	ldr	r3, [pc, #492]	; (8009c70 <ScheduleTx+0x36c>)
 8009a82:	7809      	ldrb	r1, [r1, #0]
 8009a84:	328c      	adds	r2, #140	; 0x8c
 8009a86:	7812      	ldrb	r2, [r2, #0]
 8009a88:	3788      	adds	r7, #136	; 0x88
 8009a8a:	9300      	str	r3, [sp, #0]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	b249      	sxtb	r1, r1
 8009a90:	f003 fa71 	bl	800cf76 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009a94:	22f1      	movs	r2, #241	; 0xf1
 8009a96:	0092      	lsls	r2, r2, #2
 8009a98:	59a3      	ldr	r3, [r4, r6]
 8009a9a:	58a2      	ldr	r2, [r4, r2]
 8009a9c:	27ec      	movs	r7, #236	; 0xec
 8009a9e:	4694      	mov	ip, r2
 8009aa0:	001a      	movs	r2, r3
 8009aa2:	3294      	adds	r2, #148	; 0x94
 8009aa4:	6812      	ldr	r2, [r2, #0]
 8009aa6:	00bf      	lsls	r7, r7, #2
 8009aa8:	4462      	add	r2, ip
 8009aaa:	51e2      	str	r2, [r4, r7]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009aac:	22f6      	movs	r2, #246	; 0xf6
 8009aae:	0092      	lsls	r2, r2, #2
 8009ab0:	58a0      	ldr	r0, [r4, r2]
 8009ab2:	001a      	movs	r2, r3
 8009ab4:	21ed      	movs	r1, #237	; 0xed
 8009ab6:	3298      	adds	r2, #152	; 0x98
 8009ab8:	6812      	ldr	r2, [r2, #0]
 8009aba:	0089      	lsls	r1, r1, #2
 8009abc:	1812      	adds	r2, r2, r0
 8009abe:	5062      	str	r2, [r4, r1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8009ac0:	22b2      	movs	r2, #178	; 0xb2
 8009ac2:	0052      	lsls	r2, r2, #1
 8009ac4:	5c9a      	ldrb	r2, [r3, r2]
 8009ac6:	9203      	str	r2, [sp, #12]
 8009ac8:	2a00      	cmp	r2, #0
 8009aca:	d108      	bne.n	8009ade <ScheduleTx+0x1da>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009acc:	001a      	movs	r2, r3
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009ace:	33a0      	adds	r3, #160	; 0xa0
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009ad0:	329c      	adds	r2, #156	; 0x9c
 8009ad2:	6812      	ldr	r2, [r2, #0]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009ad4:	681b      	ldr	r3, [r3, #0]
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009ad6:	4462      	add	r2, ip
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009ad8:	1818      	adds	r0, r3, r0
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009ada:	51e2      	str	r2, [r4, r7]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8009adc:	5060      	str	r0, [r4, r1]
    size_t macCmdsSize = 0;
 8009ade:	2300      	movs	r3, #0
 8009ae0:	930a      	str	r3, [sp, #40]	; 0x28
    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 8009ae2:	9b03      	ldr	r3, [sp, #12]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d012      	beq.n	8009b0e <ScheduleTx+0x20a>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8009ae8:	a80a      	add	r0, sp, #40	; 0x28
 8009aea:	f002 fc1f 	bl	800c32c <LoRaMacCommandsGetSizeSerializedCmds>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d155      	bne.n	8009b9e <ScheduleTx+0x29a>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8009af2:	2085      	movs	r0, #133	; 0x85
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8009af4:	4b57      	ldr	r3, [pc, #348]	; (8009c54 <ScheduleTx+0x350>)
 8009af6:	4a5f      	ldr	r2, [pc, #380]	; (8009c74 <ScheduleTx+0x370>)
 8009af8:	5c9c      	ldrb	r4, [r3, r2]
 8009afa:	599b      	ldr	r3, [r3, r6]
 8009afc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8009afe:	5618      	ldrsb	r0, [r3, r0]
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 8009b00:	b2d7      	uxtb	r7, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8009b02:	f7ff fd19 	bl	8009538 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8009b06:	19e4      	adds	r4, r4, r7
 8009b08:	b280      	uxth	r0, r0
 8009b0a:	42a0      	cmp	r0, r4
 8009b0c:	d345      	bcc.n	8009b9a <ScheduleTx+0x296>
    return SendFrameOnChannel( MacCtx.Channel );
 8009b0e:	4c51      	ldr	r4, [pc, #324]	; (8009c54 <ScheduleTx+0x350>)
 8009b10:	4b59      	ldr	r3, [pc, #356]	; (8009c78 <ScheduleTx+0x374>)
    int8_t txPower = 0;
 8009b12:	aa02      	add	r2, sp, #8
    return SendFrameOnChannel( MacCtx.Channel );
 8009b14:	5ce7      	ldrb	r7, [r4, r3]
    int8_t txPower = 0;
 8009b16:	2300      	movs	r3, #0
 8009b18:	74d3      	strb	r3, [r2, #19]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009b1a:	59a3      	ldr	r3, [r4, r6]
    txConfig.Channel = channel;
 8009b1c:	a90a      	add	r1, sp, #40	; 0x28
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009b1e:	001a      	movs	r2, r3
    txConfig.Channel = channel;
 8009b20:	700f      	strb	r7, [r1, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009b22:	3285      	adds	r2, #133	; 0x85
 8009b24:	7812      	ldrb	r2, [r2, #0]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009b26:	a802      	add	r0, sp, #8
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009b28:	704a      	strb	r2, [r1, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8009b2a:	001a      	movs	r2, r3
 8009b2c:	3284      	adds	r2, #132	; 0x84
 8009b2e:	7812      	ldrb	r2, [r2, #0]
 8009b30:	708a      	strb	r2, [r1, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8009b32:	001a      	movs	r2, r3
 8009b34:	32bc      	adds	r2, #188	; 0xbc
 8009b36:	6812      	ldr	r2, [r2, #0]
 8009b38:	604a      	str	r2, [r1, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8009b3a:	001a      	movs	r2, r3
 8009b3c:	32c0      	adds	r2, #192	; 0xc0
 8009b3e:	6812      	ldr	r2, [r2, #0]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009b40:	781b      	ldrb	r3, [r3, #0]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8009b42:	608a      	str	r2, [r1, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8009b44:	8822      	ldrh	r2, [r4, #0]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009b46:	469c      	mov	ip, r3
    txConfig.PktLen = MacCtx.PktBufferLen;
 8009b48:	818a      	strh	r2, [r1, #12]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009b4a:	2213      	movs	r2, #19
 8009b4c:	4b4b      	ldr	r3, [pc, #300]	; (8009c7c <ScheduleTx+0x378>)
 8009b4e:	1812      	adds	r2, r2, r0
 8009b50:	4660      	mov	r0, ip
 8009b52:	f003 fa27 	bl	800cfa4 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009b56:	2201      	movs	r2, #1
 8009b58:	4b49      	ldr	r3, [pc, #292]	; (8009c80 <ScheduleTx+0x37c>)
 8009b5a:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009b5c:	59a3      	ldr	r3, [r4, r6]
 8009b5e:	3385      	adds	r3, #133	; 0x85
 8009b60:	781a      	ldrb	r2, [r3, #0]
 8009b62:	4b48      	ldr	r3, [pc, #288]	; (8009c84 <ScheduleTx+0x380>)
 8009b64:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 8009b66:	ab02      	add	r3, sp, #8
 8009b68:	7cda      	ldrb	r2, [r3, #19]
 8009b6a:	4b47      	ldr	r3, [pc, #284]	; (8009c88 <ScheduleTx+0x384>)
 8009b6c:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
 8009b6e:	4b47      	ldr	r3, [pc, #284]	; (8009c8c <ScheduleTx+0x388>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009b70:	4a47      	ldr	r2, [pc, #284]	; (8009c90 <ScheduleTx+0x38c>)
    MacCtx.McpsConfirm.Channel = channel;
 8009b72:	50e7      	str	r7, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009b74:	2783      	movs	r7, #131	; 0x83
 8009b76:	00ff      	lsls	r7, r7, #3
 8009b78:	59e3      	ldr	r3, [r4, r7]
 8009b7a:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009b7c:	4a45      	ldr	r2, [pc, #276]	; (8009c94 <ScheduleTx+0x390>)
 8009b7e:	50a3      	str	r3, [r4, r2]
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8009b80:	f002 fae8 	bl	800c154 <LoRaMacClassBIsBeaconModeActive>
 8009b84:	4b3c      	ldr	r3, [pc, #240]	; (8009c78 <ScheduleTx+0x374>)
 8009b86:	9303      	str	r3, [sp, #12]
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	d00a      	beq.n	8009ba2 <ScheduleTx+0x29e>
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8009b8c:	59e0      	ldr	r0, [r4, r7]
 8009b8e:	f002 faf3 	bl	800c178 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 8009b92:	2800      	cmp	r0, #0
 8009b94:	d005      	beq.n	8009ba2 <ScheduleTx+0x29e>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8009b96:	2510      	movs	r5, #16
    return SendFrameOnChannel( MacCtx.Channel );
 8009b98:	e6d8      	b.n	800994c <ScheduleTx+0x48>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8009b9a:	2508      	movs	r5, #8
 8009b9c:	e6d6      	b.n	800994c <ScheduleTx+0x48>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009b9e:	2513      	movs	r5, #19
 8009ba0:	e6d4      	b.n	800994c <ScheduleTx+0x48>
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 8009ba2:	59a3      	ldr	r3, [r4, r6]
 8009ba4:	337c      	adds	r3, #124	; 0x7c
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d101      	bne.n	8009bb0 <ScheduleTx+0x2ac>
        LoRaMacClassBStopRxSlots( );
 8009bac:	f002 fae6 	bl	800c17c <LoRaMacClassBStopRxSlots>
    LoRaMacClassBHaltBeaconing( );
 8009bb0:	f002 fad3 	bl	800c15a <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8009bb4:	59a3      	ldr	r3, [r4, r6]
    switch( MacCtx.TxMsg.Type )
 8009bb6:	0026      	movs	r6, r4
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8009bb8:	3385      	adds	r3, #133	; 0x85
 8009bba:	781b      	ldrb	r3, [r3, #0]
    switch( MacCtx.TxMsg.Type )
 8009bbc:	36ff      	adds	r6, #255	; 0xff
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8009bbe:	b25b      	sxtb	r3, r3
 8009bc0:	9303      	str	r3, [sp, #12]
 8009bc2:	4b2d      	ldr	r3, [pc, #180]	; (8009c78 <ScheduleTx+0x374>)
 8009bc4:	5ce7      	ldrb	r7, [r4, r3]
    uint32_t fCntUp = 0;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	9307      	str	r3, [sp, #28]
    switch( MacCtx.TxMsg.Type )
 8009bca:	7973      	ldrb	r3, [r6, #5]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d020      	beq.n	8009c12 <ScheduleTx+0x30e>
 8009bd0:	2b04      	cmp	r3, #4
 8009bd2:	d000      	beq.n	8009bd6 <ScheduleTx+0x2d2>
 8009bd4:	e6b3      	b.n	800993e <ScheduleTx+0x3a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009bd6:	a807      	add	r0, sp, #28
 8009bd8:	f002 fe56 	bl	800c888 <LoRaMacCryptoGetFCntUp>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d136      	bne.n	8009c4e <ScheduleTx+0x34a>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8009be0:	2382      	movs	r3, #130	; 0x82
 8009be2:	00db      	lsls	r3, r3, #3
 8009be4:	5ce3      	ldrb	r3, [r4, r3]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d103      	bne.n	8009bf2 <ScheduleTx+0x2ee>
 8009bea:	4b2b      	ldr	r3, [pc, #172]	; (8009c98 <ScheduleTx+0x394>)
 8009bec:	5ce3      	ldrb	r3, [r4, r3]
 8009bee:	2b01      	cmp	r3, #1
 8009bf0:	d902      	bls.n	8009bf8 <ScheduleTx+0x2f4>
                fCntUp -= 1;
 8009bf2:	9b07      	ldr	r3, [sp, #28]
 8009bf4:	3b01      	subs	r3, #1
 8009bf6:	9307      	str	r3, [sp, #28]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8009bf8:	466b      	mov	r3, sp
 8009bfa:	003a      	movs	r2, r7
 8009bfc:	7b19      	ldrb	r1, [r3, #12]
 8009bfe:	9807      	ldr	r0, [sp, #28]
 8009c00:	4b16      	ldr	r3, [pc, #88]	; (8009c5c <ScheduleTx+0x358>)
 8009c02:	f002 fec9 	bl	800c998 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8009c06:	2800      	cmp	r0, #0
 8009c08:	d11f      	bne.n	8009c4a <ScheduleTx+0x346>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009c0a:	0023      	movs	r3, r4
 8009c0c:	33ff      	adds	r3, #255	; 0xff
 8009c0e:	7b5b      	ldrb	r3, [r3, #13]
 8009c10:	e005      	b.n	8009c1e <ScheduleTx+0x31a>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8009c12:	4812      	ldr	r0, [pc, #72]	; (8009c5c <ScheduleTx+0x358>)
 8009c14:	f002 fe90 	bl	800c938 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	d116      	bne.n	8009c4a <ScheduleTx+0x346>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8009c1c:	7b73      	ldrb	r3, [r6, #13]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009c1e:	22d0      	movs	r2, #208	; 0xd0
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009c20:	8023      	strh	r3, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009c22:	2302      	movs	r3, #2
 8009c24:	0092      	lsls	r2, r2, #2
 8009c26:	58a1      	ldr	r1, [r4, r2]
 8009c28:	430b      	orrs	r3, r1
 8009c2a:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == false )
 8009c2c:	4b1b      	ldr	r3, [pc, #108]	; (8009c9c <ScheduleTx+0x398>)
 8009c2e:	5ce3      	ldrb	r3, [r4, r3]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d103      	bne.n	8009c3c <ScheduleTx+0x338>
        MacCtx.ChannelsNbTransCounter++;
 8009c34:	32d0      	adds	r2, #208	; 0xd0
 8009c36:	5ca3      	ldrb	r3, [r4, r2]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	54a3      	strb	r3, [r4, r2]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8009c3c:	4b18      	ldr	r3, [pc, #96]	; (8009ca0 <ScheduleTx+0x39c>)
 8009c3e:	7821      	ldrb	r1, [r4, #0]
 8009c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c42:	4818      	ldr	r0, [pc, #96]	; (8009ca4 <ScheduleTx+0x3a0>)
 8009c44:	9303      	str	r3, [sp, #12]
 8009c46:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 8009c48:	e680      	b.n	800994c <ScheduleTx+0x48>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009c4a:	2511      	movs	r5, #17
 8009c4c:	e67e      	b.n	800994c <ScheduleTx+0x48>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009c4e:	2512      	movs	r5, #18
 8009c50:	e67c      	b.n	800994c <ScheduleTx+0x48>
 8009c52:	46c0      	nop			; (mov r8, r8)
 8009c54:	2000071c 	.word	0x2000071c
 8009c58:	00000484 	.word	0x00000484
 8009c5c:	20000824 	.word	0x20000824
 8009c60:	20000b31 	.word	0x20000b31
 8009c64:	20000ba4 	.word	0x20000ba4
 8009c68:	20000a84 	.word	0x20000a84
 8009c6c:	20000ad4 	.word	0x20000ad4
 8009c70:	20000ae8 	.word	0x20000ae8
 8009c74:	00000237 	.word	0x00000237
 8009c78:	00000415 	.word	0x00000415
 8009c7c:	20000b34 	.word	0x20000b34
 8009c80:	0000043d 	.word	0x0000043d
 8009c84:	0000043e 	.word	0x0000043e
 8009c88:	0000043f 	.word	0x0000043f
 8009c8c:	0000044c 	.word	0x0000044c
 8009c90:	00000444 	.word	0x00000444
 8009c94:	00000454 	.word	0x00000454
 8009c98:	00000412 	.word	0x00000412
 8009c9c:	00000414 	.word	0x00000414
 8009ca0:	080117e4 	.word	0x080117e4
 8009ca4:	2000071e 	.word	0x2000071e

08009ca8 <OnTxDelayedTimerEvent>:
{
 8009ca8:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 8009caa:	4811      	ldr	r0, [pc, #68]	; (8009cf0 <OnTxDelayedTimerEvent+0x48>)
 8009cac:	f005 ffe8 	bl	800fc80 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009cb0:	22d0      	movs	r2, #208	; 0xd0
 8009cb2:	2320      	movs	r3, #32
 8009cb4:	4c0f      	ldr	r4, [pc, #60]	; (8009cf4 <OnTxDelayedTimerEvent+0x4c>)
 8009cb6:	0092      	lsls	r2, r2, #2
 8009cb8:	58a1      	ldr	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 8009cba:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009cbc:	4399      	bics	r1, r3
 8009cbe:	50a1      	str	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 8009cc0:	f7ff fe20 	bl	8009904 <ScheduleTx>
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d012      	beq.n	8009cee <OnTxDelayedTimerEvent+0x46>
 8009cc8:	280b      	cmp	r0, #11
 8009cca:	d010      	beq.n	8009cee <OnTxDelayedTimerEvent+0x46>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009ccc:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009cce:	4b0a      	ldr	r3, [pc, #40]	; (8009cf8 <OnTxDelayedTimerEvent+0x50>)
 8009cd0:	58e3      	ldr	r3, [r4, r3]
 8009cd2:	3385      	adds	r3, #133	; 0x85
 8009cd4:	781a      	ldrb	r2, [r3, #0]
 8009cd6:	4b09      	ldr	r3, [pc, #36]	; (8009cfc <OnTxDelayedTimerEvent+0x54>)
 8009cd8:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009cda:	4b09      	ldr	r3, [pc, #36]	; (8009d00 <OnTxDelayedTimerEvent+0x58>)
 8009cdc:	5ce2      	ldrb	r2, [r4, r3]
 8009cde:	4b09      	ldr	r3, [pc, #36]	; (8009d04 <OnTxDelayedTimerEvent+0x5c>)
 8009ce0:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009ce2:	4b09      	ldr	r3, [pc, #36]	; (8009d08 <OnTxDelayedTimerEvent+0x60>)
 8009ce4:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8009ce6:	f002 fc25 	bl	800c534 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8009cea:	f7ff fbc3 	bl	8009474 <StopRetransmission>
}
 8009cee:	bd10      	pop	{r4, pc}
 8009cf0:	20000a84 	.word	0x20000a84
 8009cf4:	2000071c 	.word	0x2000071c
 8009cf8:	00000484 	.word	0x00000484
 8009cfc:	0000043e 	.word	0x0000043e
 8009d00:	00000412 	.word	0x00000412
 8009d04:	00000441 	.word	0x00000441
 8009d08:	0000043d 	.word	0x0000043d

08009d0c <OpenContinuousRxCWindow>:
{
 8009d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009d0e:	4c14      	ldr	r4, [pc, #80]	; (8009d60 <OpenContinuousRxCWindow+0x54>)
 8009d10:	4e14      	ldr	r6, [pc, #80]	; (8009d64 <OpenContinuousRxCWindow+0x58>)
 8009d12:	4d15      	ldr	r5, [pc, #84]	; (8009d68 <OpenContinuousRxCWindow+0x5c>)
 8009d14:	59a3      	ldr	r3, [r4, r6]
{
 8009d16:	b085      	sub	sp, #20
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8009d18:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009d1a:	001a      	movs	r2, r3
 8009d1c:	001f      	movs	r7, r3
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 8009d1e:	31b4      	adds	r1, #180	; 0xb4
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009d20:	7809      	ldrb	r1, [r1, #0]
 8009d22:	328c      	adds	r2, #140	; 0x8c
 8009d24:	7818      	ldrb	r0, [r3, #0]
 8009d26:	7812      	ldrb	r2, [r2, #0]
 8009d28:	3788      	adds	r7, #136	; 0x88
 8009d2a:	9500      	str	r5, [sp, #0]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	b249      	sxtb	r1, r1
 8009d30:	f003 f921 	bl	800cf76 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009d34:	4b0d      	ldr	r3, [pc, #52]	; (8009d6c <OpenContinuousRxCWindow+0x60>)
 8009d36:	4a0e      	ldr	r2, [pc, #56]	; (8009d70 <OpenContinuousRxCWindow+0x64>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009d38:	0029      	movs	r1, r5
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009d3a:	52e2      	strh	r2, [r4, r3]
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009d3c:	59a3      	ldr	r3, [r4, r6]
 8009d3e:	4a0d      	ldr	r2, [pc, #52]	; (8009d74 <OpenContinuousRxCWindow+0x68>)
 8009d40:	7818      	ldrb	r0, [r3, #0]
 8009d42:	f003 f923 	bl	800cf8c <RegionRxConfig>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d008      	beq.n	8009d5c <OpenContinuousRxCWindow+0x50>
        Radio.Rx( 0 ); // Continuous mode
 8009d4a:	4b0b      	ldr	r3, [pc, #44]	; (8009d78 <OpenContinuousRxCWindow+0x6c>)
 8009d4c:	2000      	movs	r0, #0
 8009d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d50:	9303      	str	r3, [sp, #12]
 8009d52:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8009d54:	4b09      	ldr	r3, [pc, #36]	; (8009d7c <OpenContinuousRxCWindow+0x70>)
 8009d56:	5ce2      	ldrb	r2, [r4, r3]
 8009d58:	338d      	adds	r3, #141	; 0x8d
 8009d5a:	54e2      	strb	r2, [r4, r3]
}
 8009d5c:	b005      	add	sp, #20
 8009d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d60:	2000071c 	.word	0x2000071c
 8009d64:	00000484 	.word	0x00000484
 8009d68:	20000afc 	.word	0x20000afc
 8009d6c:	000003f2 	.word	0x000003f2
 8009d70:	00000201 	.word	0x00000201
 8009d74:	20000b3c 	.word	0x20000b3c
 8009d78:	080117e4 	.word	0x080117e4
 8009d7c:	000003f3 	.word	0x000003f3

08009d80 <SwitchClass>:
{
 8009d80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch( MacCtx.NvmCtx->DeviceClass )
 8009d82:	4e34      	ldr	r6, [pc, #208]	; (8009e54 <SwitchClass+0xd4>)
 8009d84:	4f34      	ldr	r7, [pc, #208]	; (8009e58 <SwitchClass+0xd8>)
{
 8009d86:	0005      	movs	r5, r0
    switch( MacCtx.NvmCtx->DeviceClass )
 8009d88:	59f3      	ldr	r3, [r6, r7]
 8009d8a:	001a      	movs	r2, r3
 8009d8c:	327c      	adds	r2, #124	; 0x7c
 8009d8e:	7814      	ldrb	r4, [r2, #0]
 8009d90:	469c      	mov	ip, r3
 8009d92:	2c01      	cmp	r4, #1
 8009d94:	d04a      	beq.n	8009e2c <SwitchClass+0xac>
 8009d96:	2c02      	cmp	r4, #2
 8009d98:	d051      	beq.n	8009e3e <SwitchClass+0xbe>
 8009d9a:	2c00      	cmp	r4, #0
 8009d9c:	d10c      	bne.n	8009db8 <SwitchClass+0x38>
            if( deviceClass == CLASS_A )
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d106      	bne.n	8009db0 <SwitchClass+0x30>
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8009da2:	3234      	adds	r2, #52	; 0x34
 8009da4:	33a8      	adds	r3, #168	; 0xa8
 8009da6:	cb03      	ldmia	r3!, {r0, r1}
 8009da8:	c203      	stmia	r2!, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009daa:	3403      	adds	r4, #3
}
 8009dac:	0020      	movs	r0, r4
 8009dae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_B )
 8009db0:	2801      	cmp	r0, #1
 8009db2:	d03b      	beq.n	8009e2c <SwitchClass+0xac>
            if( deviceClass == CLASS_C )
 8009db4:	2802      	cmp	r0, #2
 8009db6:	d001      	beq.n	8009dbc <SwitchClass+0x3c>
    switch( MacCtx.NvmCtx->DeviceClass )
 8009db8:	2403      	movs	r4, #3
 8009dba:	e7f7      	b.n	8009dac <SwitchClass+0x2c>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8009dbc:	7010      	strb	r0, [r2, #0]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009dbe:	21f3      	movs	r1, #243	; 0xf3
 8009dc0:	22f8      	movs	r2, #248	; 0xf8
 8009dc2:	0089      	lsls	r1, r1, #2
 8009dc4:	0092      	lsls	r2, r2, #2
 8009dc6:	18b2      	adds	r2, r6, r2
 8009dc8:	1871      	adds	r1, r6, r1
 8009dca:	c989      	ldmia	r1!, {r0, r3, r7}
 8009dcc:	c289      	stmia	r2!, {r0, r3, r7}
 8009dce:	c909      	ldmia	r1!, {r0, r3}
 8009dd0:	c209      	stmia	r2!, {r0, r3}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8009dd2:	4a22      	ldr	r2, [pc, #136]	; (8009e5c <SwitchClass+0xdc>)
 8009dd4:	54b5      	strb	r5, [r6, r2]
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8009dd6:	4662      	mov	r2, ip
 8009dd8:	3252      	adds	r2, #82	; 0x52
 8009dda:	7812      	ldrb	r2, [r2, #0]
 8009ddc:	2a00      	cmp	r2, #0
 8009dde:	d01b      	beq.n	8009e18 <SwitchClass+0x98>
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8009de0:	4663      	mov	r3, ip
 8009de2:	4661      	mov	r1, ip
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009de4:	4660      	mov	r0, ip
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8009de6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009de8:	31b0      	adds	r1, #176	; 0xb0
 8009dea:	600a      	str	r2, [r1, #0]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009dec:	306c      	adds	r0, #108	; 0x6c
 8009dee:	7800      	ldrb	r0, [r0, #0]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009df0:	33ca      	adds	r3, #202	; 0xca
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009df2:	7108      	strb	r0, [r1, #4]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009df4:	491a      	ldr	r1, [pc, #104]	; (8009e60 <SwitchClass+0xe0>)
 8009df6:	5c70      	ldrb	r0, [r6, r1]
 8009df8:	3935      	subs	r1, #53	; 0x35
 8009dfa:	5470      	strb	r0, [r6, r1]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 8009dfc:	3104      	adds	r1, #4
 8009dfe:	5072      	str	r2, [r6, r1]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009e00:	4662      	mov	r2, ip
 8009e02:	32b9      	adds	r2, #185	; 0xb9
 8009e04:	7811      	ldrb	r1, [r2, #0]
 8009e06:	22fc      	movs	r2, #252	; 0xfc
 8009e08:	0092      	lsls	r2, r2, #2
 8009e0a:	54b1      	strb	r1, [r6, r2]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009e0c:	781a      	ldrb	r2, [r3, #0]
 8009e0e:	4b15      	ldr	r3, [pc, #84]	; (8009e64 <SwitchClass+0xe4>)
 8009e10:	54f2      	strb	r2, [r6, r3]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009e12:	4b15      	ldr	r3, [pc, #84]	; (8009e68 <SwitchClass+0xe8>)
 8009e14:	4a15      	ldr	r2, [pc, #84]	; (8009e6c <SwitchClass+0xec>)
 8009e16:	52f2      	strh	r2, [r6, r3]
                MacCtx.NodeAckRequested = false;
 8009e18:	2200      	movs	r2, #0
 8009e1a:	4b15      	ldr	r3, [pc, #84]	; (8009e70 <SwitchClass+0xf0>)
 8009e1c:	54f2      	strb	r2, [r6, r3]
                Radio.Sleep( );
 8009e1e:	4b15      	ldr	r3, [pc, #84]	; (8009e74 <SwitchClass+0xf4>)
 8009e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e22:	9301      	str	r3, [sp, #4]
 8009e24:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8009e26:	f7ff ff71 	bl	8009d0c <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8009e2a:	e7bf      	b.n	8009dac <SwitchClass+0x2c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8009e2c:	0028      	movs	r0, r5
 8009e2e:	f002 f996 	bl	800c15e <LoRaMacClassBSwitchClass>
 8009e32:	1e04      	subs	r4, r0, #0
            if( status == LORAMAC_STATUS_OK )
 8009e34:	d1ba      	bne.n	8009dac <SwitchClass+0x2c>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8009e36:	59f3      	ldr	r3, [r6, r7]
 8009e38:	337c      	adds	r3, #124	; 0x7c
 8009e3a:	701d      	strb	r5, [r3, #0]
 8009e3c:	e7b6      	b.n	8009dac <SwitchClass+0x2c>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8009e3e:	2403      	movs	r4, #3
            if( deviceClass == CLASS_A )
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d1b3      	bne.n	8009dac <SwitchClass+0x2c>
                Radio.Sleep( );
 8009e44:	4b0b      	ldr	r3, [pc, #44]	; (8009e74 <SwitchClass+0xf4>)
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8009e46:	7010      	strb	r0, [r2, #0]
                Radio.Sleep( );
 8009e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                status = LORAMAC_STATUS_OK;
 8009e4a:	002c      	movs	r4, r5
                Radio.Sleep( );
 8009e4c:	9301      	str	r3, [sp, #4]
 8009e4e:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8009e50:	e7ac      	b.n	8009dac <SwitchClass+0x2c>
 8009e52:	46c0      	nop			; (mov r8, r8)
 8009e54:	2000071c 	.word	0x2000071c
 8009e58:	00000484 	.word	0x00000484
 8009e5c:	000003f3 	.word	0x000003f3
 8009e60:	00000415 	.word	0x00000415
 8009e64:	000003f1 	.word	0x000003f1
 8009e68:	000003f2 	.word	0x000003f2
 8009e6c:	00000301 	.word	0x00000301
 8009e70:	00000414 	.word	0x00000414
 8009e74:	080117e4 	.word	0x080117e4

08009e78 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8009e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e7a:	000c      	movs	r4, r1
    TimerStop( rxTimer );
 8009e7c:	f005 ff00 	bl	800fc80 <UTIL_TIMER_Stop>
    Radio.Standby( );
 8009e80:	4e0c      	ldr	r6, [pc, #48]	; (8009eb4 <RxWindowSetup.constprop.0+0x3c>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009e82:	4f0d      	ldr	r7, [pc, #52]	; (8009eb8 <RxWindowSetup.constprop.0+0x40>)
    Radio.Standby( );
 8009e84:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8009e86:	9301      	str	r3, [sp, #4]
 8009e88:	4798      	blx	r3
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009e8a:	4d0c      	ldr	r5, [pc, #48]	; (8009ebc <RxWindowSetup.constprop.0+0x44>)
 8009e8c:	0021      	movs	r1, r4
 8009e8e:	59eb      	ldr	r3, [r5, r7]
 8009e90:	4a0b      	ldr	r2, [pc, #44]	; (8009ec0 <RxWindowSetup.constprop.0+0x48>)
 8009e92:	7818      	ldrb	r0, [r3, #0]
 8009e94:	f003 f87a 	bl	800cf8c <RegionRxConfig>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	d009      	beq.n	8009eb0 <RxWindowSetup.constprop.0+0x38>
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 8009e9c:	59eb      	ldr	r3, [r5, r7]
 8009e9e:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8009ea0:	3390      	adds	r3, #144	; 0x90
 8009ea2:	6818      	ldr	r0, [r3, #0]
 8009ea4:	9201      	str	r2, [sp, #4]
 8009ea6:	4790      	blx	r2
        MacCtx.RxSlot = rxConfig->RxSlot;
 8009ea8:	2390      	movs	r3, #144	; 0x90
 8009eaa:	7ce2      	ldrb	r2, [r4, #19]
 8009eac:	00db      	lsls	r3, r3, #3
 8009eae:	54ea      	strb	r2, [r5, r3]
}
 8009eb0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009eb2:	46c0      	nop			; (mov r8, r8)
 8009eb4:	080117e4 	.word	0x080117e4
 8009eb8:	00000484 	.word	0x00000484
 8009ebc:	2000071c 	.word	0x2000071c
 8009ec0:	20000b3c 	.word	0x20000b3c

08009ec4 <OnRxWindow1TimerEvent>:
{
 8009ec4:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8009ec6:	4b0f      	ldr	r3, [pc, #60]	; (8009f04 <OnRxWindow1TimerEvent+0x40>)
 8009ec8:	4a0f      	ldr	r2, [pc, #60]	; (8009f08 <OnRxWindow1TimerEvent+0x44>)
 8009eca:	5c99      	ldrb	r1, [r3, r2]
 8009ecc:	3a5d      	subs	r2, #93	; 0x5d
 8009ece:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 8009ed0:	4a0e      	ldr	r2, [pc, #56]	; (8009f0c <OnRxWindow1TimerEvent+0x48>)
 8009ed2:	589a      	ldr	r2, [r3, r2]
 8009ed4:	0011      	movs	r1, r2
 8009ed6:	31a5      	adds	r1, #165	; 0xa5
 8009ed8:	7808      	ldrb	r0, [r1, #0]
 8009eda:	490d      	ldr	r1, [pc, #52]	; (8009f10 <OnRxWindow1TimerEvent+0x4c>)
 8009edc:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009ede:	0011      	movs	r1, r2
 8009ee0:	31b9      	adds	r1, #185	; 0xb9
 8009ee2:	7808      	ldrb	r0, [r1, #0]
 8009ee4:	21f2      	movs	r1, #242	; 0xf2
 8009ee6:	0089      	lsls	r1, r1, #2
 8009ee8:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009eea:	32ca      	adds	r2, #202	; 0xca
 8009eec:	7811      	ldrb	r1, [r2, #0]
 8009eee:	4a09      	ldr	r2, [pc, #36]	; (8009f14 <OnRxWindow1TimerEvent+0x50>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8009ef0:	4809      	ldr	r0, [pc, #36]	; (8009f18 <OnRxWindow1TimerEvent+0x54>)
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009ef2:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 8009ef4:	2100      	movs	r1, #0
 8009ef6:	4a09      	ldr	r2, [pc, #36]	; (8009f1c <OnRxWindow1TimerEvent+0x58>)
 8009ef8:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8009efa:	4909      	ldr	r1, [pc, #36]	; (8009f20 <OnRxWindow1TimerEvent+0x5c>)
 8009efc:	f7ff ffbc 	bl	8009e78 <RxWindowSetup.constprop.0>
}
 8009f00:	bd10      	pop	{r4, pc}
 8009f02:	46c0      	nop			; (mov r8, r8)
 8009f04:	2000071c 	.word	0x2000071c
 8009f08:	00000415 	.word	0x00000415
 8009f0c:	00000484 	.word	0x00000484
 8009f10:	000003bb 	.word	0x000003bb
 8009f14:	000003c9 	.word	0x000003c9
 8009f18:	20000a9c 	.word	0x20000a9c
 8009f1c:	000003ca 	.word	0x000003ca
 8009f20:	20000ad4 	.word	0x20000ad4

08009f24 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009f24:	2290      	movs	r2, #144	; 0x90
{
 8009f26:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009f28:	4b11      	ldr	r3, [pc, #68]	; (8009f70 <OnRxWindow2TimerEvent+0x4c>)
 8009f2a:	00d2      	lsls	r2, r2, #3
 8009f2c:	5c9a      	ldrb	r2, [r3, r2]
 8009f2e:	2a00      	cmp	r2, #0
 8009f30:	d01d      	beq.n	8009f6e <OnRxWindow2TimerEvent+0x4a>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009f32:	4a10      	ldr	r2, [pc, #64]	; (8009f74 <OnRxWindow2TimerEvent+0x50>)
 8009f34:	5c99      	ldrb	r1, [r3, r2]
 8009f36:	3a49      	subs	r2, #73	; 0x49
 8009f38:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8009f3a:	4a0f      	ldr	r2, [pc, #60]	; (8009f78 <OnRxWindow2TimerEvent+0x54>)
 8009f3c:	589a      	ldr	r2, [r3, r2]
 8009f3e:	0011      	movs	r1, r2
 8009f40:	31a8      	adds	r1, #168	; 0xa8
 8009f42:	6808      	ldr	r0, [r1, #0]
 8009f44:	21f4      	movs	r1, #244	; 0xf4
 8009f46:	0089      	lsls	r1, r1, #2
 8009f48:	5058      	str	r0, [r3, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009f4a:	0011      	movs	r1, r2
 8009f4c:	31b9      	adds	r1, #185	; 0xb9
 8009f4e:	7808      	ldrb	r0, [r1, #0]
 8009f50:	21f7      	movs	r1, #247	; 0xf7
 8009f52:	0089      	lsls	r1, r1, #2
 8009f54:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009f56:	32ca      	adds	r2, #202	; 0xca
 8009f58:	7811      	ldrb	r1, [r2, #0]
 8009f5a:	4a08      	ldr	r2, [pc, #32]	; (8009f7c <OnRxWindow2TimerEvent+0x58>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8009f5c:	4808      	ldr	r0, [pc, #32]	; (8009f80 <OnRxWindow2TimerEvent+0x5c>)
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009f5e:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8009f60:	2180      	movs	r1, #128	; 0x80
 8009f62:	4a08      	ldr	r2, [pc, #32]	; (8009f84 <OnRxWindow2TimerEvent+0x60>)
 8009f64:	0049      	lsls	r1, r1, #1
 8009f66:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8009f68:	4907      	ldr	r1, [pc, #28]	; (8009f88 <OnRxWindow2TimerEvent+0x64>)
 8009f6a:	f7ff ff85 	bl	8009e78 <RxWindowSetup.constprop.0>
}
 8009f6e:	bd10      	pop	{r4, pc}
 8009f70:	2000071c 	.word	0x2000071c
 8009f74:	00000415 	.word	0x00000415
 8009f78:	00000484 	.word	0x00000484
 8009f7c:	000003dd 	.word	0x000003dd
 8009f80:	20000ab4 	.word	0x20000ab4
 8009f84:	000003de 	.word	0x000003de
 8009f88:	20000ae8 	.word	0x20000ae8

08009f8c <ProcessMacCommands.isra.0.constprop.0>:
    uint8_t status = 0;
 8009f8c:	2300      	movs	r3, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8009f8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f90:	b097      	sub	sp, #92	; 0x5c
 8009f92:	9208      	str	r2, [sp, #32]
    uint8_t status = 0;
 8009f94:	220d      	movs	r2, #13
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8009f96:	0007      	movs	r7, r0
    while( macIndex < commandsSize )
 8009f98:	001c      	movs	r4, r3
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8009f9a:	9105      	str	r1, [sp, #20]
    uint8_t status = 0;
 8009f9c:	a908      	add	r1, sp, #32
 8009f9e:	1852      	adds	r2, r2, r1
 8009fa0:	7013      	strb	r3, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009fa2:	aa0c      	add	r2, sp, #48	; 0x30
 8009fa4:	8013      	strh	r3, [r2, #0]
    bool adrBlockFound = false;
 8009fa6:	9303      	str	r3, [sp, #12]
    while( macIndex < commandsSize )
 8009fa8:	9b05      	ldr	r3, [sp, #20]
 8009faa:	429c      	cmp	r4, r3
 8009fac:	d301      	bcc.n	8009fb2 <ProcessMacCommands.isra.0.constprop.0+0x26>
}
 8009fae:	b017      	add	sp, #92	; 0x5c
 8009fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 8009fb2:	5d38      	ldrb	r0, [r7, r4]
 8009fb4:	f002 fa0e 	bl	800c3d4 <LoRaMacCommandsGetCmdSize>
 8009fb8:	9b05      	ldr	r3, [sp, #20]
 8009fba:	1900      	adds	r0, r0, r4
 8009fbc:	193e      	adds	r6, r7, r4
 8009fbe:	4298      	cmp	r0, r3
 8009fc0:	dcf5      	bgt.n	8009fae <ProcessMacCommands.isra.0.constprop.0+0x22>
        switch( payload[macIndex++] )
 8009fc2:	7830      	ldrb	r0, [r6, #0]
 8009fc4:	1c65      	adds	r5, r4, #1
 8009fc6:	3802      	subs	r0, #2
 8009fc8:	b2ed      	uxtb	r5, r5
 8009fca:	2811      	cmp	r0, #17
 8009fcc:	d8ef      	bhi.n	8009fae <ProcessMacCommands.isra.0.constprop.0+0x22>
 8009fce:	f7f6 f8b7 	bl	8000140 <__gnu_thumb1_case_shi>
 8009fd2:	0012      	.short	0x0012
 8009fd4:	00900029 	.word	0x00900029
 8009fd8:	00ee00a8 	.word	0x00ee00a8
 8009fdc:	01340106 	.word	0x01340106
 8009fe0:	01ac0158 	.word	0x01ac0158
 8009fe4:	ffeeffee 	.word	0xffeeffee
 8009fe8:	ffee01e3 	.word	0xffee01e3
 8009fec:	0233ffee 	.word	0x0233ffee
 8009ff0:	02630248 	.word	0x02630248
 8009ff4:	027d      	.short	0x027d
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8009ff6:	2004      	movs	r0, #4
 8009ff8:	f002 fab8 	bl	800c56c <LoRaMacConfirmQueueIsCmdActive>
 8009ffc:	2800      	cmp	r0, #0
 8009ffe:	d00f      	beq.n	800a020 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800a000:	2104      	movs	r1, #4
 800a002:	2000      	movs	r0, #0
 800a004:	f002 fa70 	bl	800c4e8 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800a008:	228b      	movs	r2, #139	; 0x8b
 800a00a:	5d79      	ldrb	r1, [r7, r5]
 800a00c:	4bdd      	ldr	r3, [pc, #884]	; (800a384 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 800a00e:	00d2      	lsls	r2, r2, #3
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800a010:	1ce5      	adds	r5, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800a012:	3402      	adds	r4, #2
 800a014:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800a016:	b2e4      	uxtb	r4, r4
 800a018:	5d39      	ldrb	r1, [r7, r4]
 800a01a:	4adb      	ldr	r2, [pc, #876]	; (800a388 <ProcessMacCommands.isra.0.constprop.0+0x3fc>)
 800a01c:	b2ed      	uxtb	r5, r5
 800a01e:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 800a020:	002c      	movs	r4, r5
 800a022:	e7c1      	b.n	8009fa8 <ProcessMacCommands.isra.0.constprop.0+0x1c>
                int8_t linkAdrDatarate = DR_0;
 800a024:	2300      	movs	r3, #0
 800a026:	aa08      	add	r2, sp, #32
 800a028:	7393      	strb	r3, [r2, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 800a02a:	73d3      	strb	r3, [r2, #15]
                uint8_t linkAdrNbRep = 0;
 800a02c:	ae0d      	add	r6, sp, #52	; 0x34
                uint8_t linkAdrNbBytesParsed = 0;
 800a02e:	aa0e      	add	r2, sp, #56	; 0x38
                uint8_t linkAdrNbRep = 0;
 800a030:	7033      	strb	r3, [r6, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 800a032:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 800a034:	9b03      	ldr	r3, [sp, #12]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d158      	bne.n	800a0ec <ProcessMacCommands.isra.0.constprop.0+0x160>
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800a03a:	9b05      	ldr	r3, [sp, #20]
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800a03c:	3d01      	subs	r5, #1
 800a03e:	a912      	add	r1, sp, #72	; 0x48
 800a040:	197d      	adds	r5, r7, r5
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800a042:	1b1b      	subs	r3, r3, r4
 800a044:	720b      	strb	r3, [r1, #8]
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800a046:	604d      	str	r5, [r1, #4]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800a048:	4bce      	ldr	r3, [pc, #824]	; (800a384 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 800a04a:	4dd0      	ldr	r5, [pc, #832]	; (800a38c <ProcessMacCommands.isra.0.constprop.0+0x400>)
 800a04c:	595b      	ldr	r3, [r3, r5]
 800a04e:	0018      	movs	r0, r3
 800a050:	307e      	adds	r0, #126	; 0x7e
 800a052:	7800      	ldrb	r0, [r0, #0]
 800a054:	7288      	strb	r0, [r1, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a056:	0018      	movs	r0, r3
 800a058:	30b8      	adds	r0, #184	; 0xb8
 800a05a:	7800      	ldrb	r0, [r0, #0]
 800a05c:	7248      	strb	r0, [r1, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a05e:	0018      	movs	r0, r3
 800a060:	3085      	adds	r0, #133	; 0x85
 800a062:	7800      	ldrb	r0, [r0, #0]
 800a064:	72c8      	strb	r0, [r1, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800a066:	0018      	movs	r0, r3
 800a068:	3084      	adds	r0, #132	; 0x84
 800a06a:	7800      	ldrb	r0, [r0, #0]
 800a06c:	7308      	strb	r0, [r1, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800a06e:	0018      	movs	r0, r3
 800a070:	30a4      	adds	r0, #164	; 0xa4
 800a072:	7800      	ldrb	r0, [r0, #0]
 800a074:	7348      	strb	r0, [r1, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800a076:	0018      	movs	r0, r3
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800a078:	781b      	ldrb	r3, [r3, #0]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800a07a:	30fc      	adds	r0, #252	; 0xfc
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800a07c:	469c      	mov	ip, r3
 800a07e:	230f      	movs	r3, #15
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800a080:	6e40      	ldr	r0, [r0, #100]	; 0x64
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800a082:	9201      	str	r2, [sp, #4]
 800a084:	aa08      	add	r2, sp, #32
 800a086:	189b      	adds	r3, r3, r2
 800a088:	220e      	movs	r2, #14
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 800a08a:	9012      	str	r0, [sp, #72]	; 0x48
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 800a08c:	a808      	add	r0, sp, #32
 800a08e:	1812      	adds	r2, r2, r0
 800a090:	9600      	str	r6, [sp, #0]
 800a092:	4660      	mov	r0, ip
 800a094:	f002 ff93 	bl	800cfbe <RegionLinkAdrReq>
 800a098:	ab08      	add	r3, sp, #32
 800a09a:	7358      	strb	r0, [r3, #13]
                    if( ( status & 0x07 ) == 0x07 )
 800a09c:	43c0      	mvns	r0, r0
 800a09e:	0743      	lsls	r3, r0, #29
 800a0a0:	d10d      	bne.n	800a0be <ProcessMacCommands.isra.0.constprop.0+0x132>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 800a0a2:	4bb8      	ldr	r3, [pc, #736]	; (800a384 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 800a0a4:	a908      	add	r1, sp, #32
 800a0a6:	595b      	ldr	r3, [r3, r5]
 800a0a8:	7b89      	ldrb	r1, [r1, #14]
 800a0aa:	001a      	movs	r2, r3
 800a0ac:	3285      	adds	r2, #133	; 0x85
 800a0ae:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 800a0b0:	a908      	add	r1, sp, #32
 800a0b2:	7bc9      	ldrb	r1, [r1, #15]
 800a0b4:	3a01      	subs	r2, #1
 800a0b6:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 800a0b8:	7832      	ldrb	r2, [r6, #0]
 800a0ba:	33a4      	adds	r3, #164	; 0xa4
 800a0bc:	701a      	strb	r2, [r3, #0]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 800a0be:	2600      	movs	r6, #0
 800a0c0:	e009      	b.n	800a0d6 <ProcessMacCommands.isra.0.constprop.0+0x14a>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800a0c2:	230d      	movs	r3, #13
 800a0c4:	a908      	add	r1, sp, #32
 800a0c6:	185b      	adds	r3, r3, r1
 800a0c8:	2201      	movs	r2, #1
 800a0ca:	0019      	movs	r1, r3
 800a0cc:	2003      	movs	r0, #3
 800a0ce:	f002 f887 	bl	800c1e0 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800a0d2:	3601      	adds	r6, #1
 800a0d4:	b2f6      	uxtb	r6, r6
 800a0d6:	ab0e      	add	r3, sp, #56	; 0x38
 800a0d8:	781d      	ldrb	r5, [r3, #0]
 800a0da:	2105      	movs	r1, #5
 800a0dc:	0028      	movs	r0, r5
 800a0de:	f7f6 f843 	bl	8000168 <__udivsi3>
 800a0e2:	b2c0      	uxtb	r0, r0
 800a0e4:	4286      	cmp	r6, r0
 800a0e6:	d3ec      	bcc.n	800a0c2 <ProcessMacCommands.isra.0.constprop.0+0x136>
                    macIndex += linkAdrNbBytesParsed - 1;
 800a0e8:	1965      	adds	r5, r4, r5
 800a0ea:	b2ed      	uxtb	r5, r5
                break;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	9303      	str	r3, [sp, #12]
 800a0f0:	e796      	b.n	800a020 <ProcessMacCommands.isra.0.constprop.0+0x94>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 800a0f2:	4aa4      	ldr	r2, [pc, #656]	; (800a384 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 800a0f4:	4ba5      	ldr	r3, [pc, #660]	; (800a38c <ProcessMacCommands.isra.0.constprop.0+0x400>)
 800a0f6:	3402      	adds	r4, #2
 800a0f8:	58d1      	ldr	r1, [r2, r3]
 800a0fa:	220f      	movs	r2, #15
 800a0fc:	5d7b      	ldrb	r3, [r7, r5]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800a0fe:	2004      	movs	r0, #4
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 800a100:	4013      	ands	r3, r2
 800a102:	000a      	movs	r2, r1
 800a104:	32c8      	adds	r2, #200	; 0xc8
 800a106:	7013      	strb	r3, [r2, #0]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 800a108:	2201      	movs	r2, #1
 800a10a:	409a      	lsls	r2, r3
 800a10c:	0013      	movs	r3, r2
 800a10e:	22a6      	movs	r2, #166	; 0xa6
 800a110:	0052      	lsls	r2, r2, #1
 800a112:	528b      	strh	r3, [r1, r2]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800a114:	2200      	movs	r2, #0
 800a116:	a90c      	add	r1, sp, #48	; 0x30
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 800a118:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800a11a:	f002 f861 	bl	800c1e0 <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800a11e:	0025      	movs	r5, r4
}
 800a120:	e77e      	b.n	800a020 <ProcessMacCommands.isra.0.constprop.0+0x94>
                status = 0x07;
 800a122:	2107      	movs	r1, #7
 800a124:	ab08      	add	r3, sp, #32
 800a126:	7359      	strb	r1, [r3, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800a128:	5d7b      	ldrb	r3, [r7, r5]
 800a12a:	ae12      	add	r6, sp, #72	; 0x48
 800a12c:	091a      	lsrs	r2, r3, #4
 800a12e:	400a      	ands	r2, r1
 800a130:	7072      	strb	r2, [r6, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800a132:	220f      	movs	r2, #15
 800a134:	4013      	ands	r3, r2
 800a136:	7033      	strb	r3, [r6, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a138:	1d22      	adds	r2, r4, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800a13a:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a13c:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a13e:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a140:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a142:	5cba      	ldrb	r2, [r7, r2]
 800a144:	1d65      	adds	r5, r4, #5
                macIndex++;
 800a146:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a148:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800a14a:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a14c:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a14e:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800a150:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800a152:	4c8e      	ldr	r4, [pc, #568]	; (800a38c <ProcessMacCommands.isra.0.constprop.0+0x400>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a154:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 800a156:	2264      	movs	r2, #100	; 0x64
 800a158:	4353      	muls	r3, r2
 800a15a:	9313      	str	r3, [sp, #76]	; 0x4c
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800a15c:	4b89      	ldr	r3, [pc, #548]	; (800a384 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 800a15e:	0031      	movs	r1, r6
 800a160:	591b      	ldr	r3, [r3, r4]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a162:	b2ed      	uxtb	r5, r5
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 800a164:	7818      	ldrb	r0, [r3, #0]
 800a166:	9304      	str	r3, [sp, #16]
 800a168:	f002 ff39 	bl	800cfde <RegionRxParamSetupReq>
 800a16c:	ab08      	add	r3, sp, #32
 800a16e:	7358      	strb	r0, [r3, #13]
                if( ( status & 0x07 ) == 0x07 )
 800a170:	2307      	movs	r3, #7
 800a172:	4003      	ands	r3, r0
 800a174:	2b07      	cmp	r3, #7
 800a176:	d10d      	bne.n	800a194 <ProcessMacCommands.isra.0.constprop.0+0x208>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800a178:	4b82      	ldr	r3, [pc, #520]	; (800a384 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 800a17a:	7832      	ldrb	r2, [r6, #0]
 800a17c:	591b      	ldr	r3, [r3, r4]
 800a17e:	0019      	movs	r1, r3
 800a180:	31ac      	adds	r1, #172	; 0xac
 800a182:	700a      	strb	r2, [r1, #0]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800a184:	720a      	strb	r2, [r1, #8]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800a186:	6872      	ldr	r2, [r6, #4]
 800a188:	3904      	subs	r1, #4
 800a18a:	600a      	str	r2, [r1, #0]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800a18c:	608a      	str	r2, [r1, #8]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800a18e:	7872      	ldrb	r2, [r6, #1]
 800a190:	33a5      	adds	r3, #165	; 0xa5
 800a192:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 800a194:	a90c      	add	r1, sp, #48	; 0x30
 800a196:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800a198:	2201      	movs	r2, #1
 800a19a:	2005      	movs	r0, #5
 800a19c:	f002 f820 	bl	800c1e0 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800a1a0:	2310      	movs	r3, #16
 800a1a2:	4978      	ldr	r1, [pc, #480]	; (800a384 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 800a1a4:	4a7a      	ldr	r2, [pc, #488]	; (800a390 <ProcessMacCommands.isra.0.constprop.0+0x404>)
 800a1a6:	5c88      	ldrb	r0, [r1, r2]
 800a1a8:	4303      	orrs	r3, r0
 800a1aa:	548b      	strb	r3, [r1, r2]
                break;
 800a1ac:	e738      	b.n	800a020 <ProcessMacCommands.isra.0.constprop.0+0x94>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800a1ae:	23d2      	movs	r3, #210	; 0xd2
 800a1b0:	4a74      	ldr	r2, [pc, #464]	; (800a384 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 800a1b2:	009b      	lsls	r3, r3, #2
 800a1b4:	58d3      	ldr	r3, [r2, r3]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800a1b6:	20ff      	movs	r0, #255	; 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d003      	beq.n	800a1c4 <ProcessMacCommands.isra.0.constprop.0+0x238>
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d000      	beq.n	800a1c4 <ProcessMacCommands.isra.0.constprop.0+0x238>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800a1c2:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 800a1c4:	ab08      	add	r3, sp, #32
 800a1c6:	7418      	strb	r0, [r3, #16]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800a1c8:	233f      	movs	r3, #63	; 0x3f
 800a1ca:	9a08      	ldr	r2, [sp, #32]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800a1cc:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800a1ce:	4013      	ands	r3, r2
 800a1d0:	aa08      	add	r2, sp, #32
 800a1d2:	7453      	strb	r3, [r2, #17]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800a1d4:	2202      	movs	r2, #2
 800a1d6:	a90c      	add	r1, sp, #48	; 0x30
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800a1d8:	f002 f802 	bl	800c1e0 <LoRaMacCommandsAddCmd>
                break;
 800a1dc:	e720      	b.n	800a020 <ProcessMacCommands.isra.0.constprop.0+0x94>
                status = 0x03;
 800a1de:	260d      	movs	r6, #13
 800a1e0:	ab08      	add	r3, sp, #32
 800a1e2:	18f6      	adds	r6, r6, r3
 800a1e4:	2303      	movs	r3, #3
 800a1e6:	7033      	strb	r3, [r6, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 800a1e8:	5d7b      	ldrb	r3, [r7, r5]
 800a1ea:	a90e      	add	r1, sp, #56	; 0x38
 800a1ec:	710b      	strb	r3, [r1, #4]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800a1ee:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a1f0:	b2db      	uxtb	r3, r3
 800a1f2:	5cf8      	ldrb	r0, [r7, r3]
 800a1f4:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a1f6:	b2db      	uxtb	r3, r3
 800a1f8:	5cfb      	ldrb	r3, [r7, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a1fa:	0200      	lsls	r0, r0, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a1fc:	041b      	lsls	r3, r3, #16
 800a1fe:	4303      	orrs	r3, r0
                newChannelReq.ChannelId = payload[macIndex++];
 800a200:	1ca0      	adds	r0, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800a202:	b2c0      	uxtb	r0, r0
 800a204:	5c38      	ldrb	r0, [r7, r0]
                chParam.DrRange.Value = payload[macIndex++];
 800a206:	1da5      	adds	r5, r4, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a208:	4303      	orrs	r3, r0
                chParam.Frequency *= 100;
 800a20a:	2064      	movs	r0, #100	; 0x64
 800a20c:	4343      	muls	r3, r0
 800a20e:	9312      	str	r3, [sp, #72]	; 0x48
                chParam.Rx1Frequency = 0;
 800a210:	2300      	movs	r3, #0
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a212:	3405      	adds	r4, #5
                chParam.DrRange.Value = payload[macIndex++];
 800a214:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
 800a216:	9313      	str	r3, [sp, #76]	; 0x4c
                chParam.DrRange.Value = payload[macIndex++];
 800a218:	5d3b      	ldrb	r3, [r7, r4]
                newChannelReq.NewChannel = &chParam;
 800a21a:	aa12      	add	r2, sp, #72	; 0x48
                chParam.DrRange.Value = payload[macIndex++];
 800a21c:	7213      	strb	r3, [r2, #8]
                newChannelReq.NewChannel = &chParam;
 800a21e:	920e      	str	r2, [sp, #56]	; 0x38
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800a220:	4b5a      	ldr	r3, [pc, #360]	; (800a38c <ProcessMacCommands.isra.0.constprop.0+0x400>)
 800a222:	4a58      	ldr	r2, [pc, #352]	; (800a384 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
                chParam.DrRange.Value = payload[macIndex++];
 800a224:	b2ed      	uxtb	r5, r5
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800a226:	58d3      	ldr	r3, [r2, r3]
 800a228:	7818      	ldrb	r0, [r3, #0]
 800a22a:	f002 fee2 	bl	800cff2 <RegionNewChannelReq>
                macCmdPayload[0] = status;
 800a22e:	a90c      	add	r1, sp, #48	; 0x30
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 800a230:	7030      	strb	r0, [r6, #0]
                macCmdPayload[0] = status;
 800a232:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800a234:	2201      	movs	r2, #1
 800a236:	2007      	movs	r0, #7
 800a238:	e7ce      	b.n	800a1d8 <ProcessMacCommands.isra.0.constprop.0+0x24c>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800a23a:	230f      	movs	r3, #15
 800a23c:	5d79      	ldrb	r1, [r7, r5]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800a23e:	4a51      	ldr	r2, [pc, #324]	; (800a384 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
                uint8_t delay = payload[macIndex++] & 0x0F;
 800a240:	4019      	ands	r1, r3
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800a242:	4b52      	ldr	r3, [pc, #328]	; (800a38c <ProcessMacCommands.isra.0.constprop.0+0x400>)
                uint8_t delay = payload[macIndex++] & 0x0F;
 800a244:	3402      	adds	r4, #2
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800a246:	58d2      	ldr	r2, [r2, r3]
                uint8_t delay = payload[macIndex++] & 0x0F;
 800a248:	b2e4      	uxtb	r4, r4
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 800a24a:	1c0b      	adds	r3, r1, #0
 800a24c:	2900      	cmp	r1, #0
 800a24e:	d100      	bne.n	800a252 <ProcessMacCommands.isra.0.constprop.0+0x2c6>
 800a250:	2301      	movs	r3, #1
 800a252:	b2d9      	uxtb	r1, r3
 800a254:	23fa      	movs	r3, #250	; 0xfa
 800a256:	009b      	lsls	r3, r3, #2
 800a258:	434b      	muls	r3, r1
 800a25a:	0011      	movs	r1, r2
 800a25c:	3194      	adds	r1, #148	; 0x94
 800a25e:	600b      	str	r3, [r1, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800a260:	21fa      	movs	r1, #250	; 0xfa
 800a262:	0089      	lsls	r1, r1, #2
 800a264:	185b      	adds	r3, r3, r1
 800a266:	3298      	adds	r2, #152	; 0x98
 800a268:	6013      	str	r3, [r2, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800a26a:	a90c      	add	r1, sp, #48	; 0x30
 800a26c:	2200      	movs	r2, #0
 800a26e:	2008      	movs	r0, #8
 800a270:	f001 ffb6 	bl	800c1e0 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800a274:	2310      	movs	r3, #16
 800a276:	4943      	ldr	r1, [pc, #268]	; (800a384 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 800a278:	4a45      	ldr	r2, [pc, #276]	; (800a390 <ProcessMacCommands.isra.0.constprop.0+0x404>)
 800a27a:	5c88      	ldrb	r0, [r1, r2]
 800a27c:	4303      	orrs	r3, r0
 800a27e:	548b      	strb	r3, [r1, r2]
 800a280:	e74d      	b.n	800a11e <ProcessMacCommands.isra.0.constprop.0+0x192>
                uint8_t eirpDwellTime = payload[macIndex++];
 800a282:	3402      	adds	r4, #2
 800a284:	b2e3      	uxtb	r3, r4
 800a286:	9306      	str	r3, [sp, #24]
 800a288:	5d7b      	ldrb	r3, [r7, r5]
                txParamSetupReq.UplinkDwellTime = 0;
 800a28a:	2200      	movs	r2, #0
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800a28c:	0019      	movs	r1, r3
                txParamSetupReq.UplinkDwellTime = 0;
 800a28e:	ac0d      	add	r4, sp, #52	; 0x34
 800a290:	7022      	strb	r2, [r4, #0]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800a292:	3220      	adds	r2, #32
 800a294:	4011      	ands	r1, r2
 800a296:	4213      	tst	r3, r2
 800a298:	d144      	bne.n	800a324 <ProcessMacCommands.isra.0.constprop.0+0x398>
                txParamSetupReq.DownlinkDwellTime = 0;
 800a29a:	7061      	strb	r1, [r4, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800a29c:	06da      	lsls	r2, r3, #27
 800a29e:	d501      	bpl.n	800a2a4 <ProcessMacCommands.isra.0.constprop.0+0x318>
                    txParamSetupReq.UplinkDwellTime = 1;
 800a2a0:	2201      	movs	r2, #1
 800a2a2:	7022      	strb	r2, [r4, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800a2a4:	220f      	movs	r2, #15
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 800a2a6:	4d37      	ldr	r5, [pc, #220]	; (800a384 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 800a2a8:	4e38      	ldr	r6, [pc, #224]	; (800a38c <ProcessMacCommands.isra.0.constprop.0+0x400>)
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800a2aa:	4013      	ands	r3, r2
 800a2ac:	70a3      	strb	r3, [r4, #2]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 800a2ae:	59ab      	ldr	r3, [r5, r6]
 800a2b0:	0021      	movs	r1, r4
 800a2b2:	7818      	ldrb	r0, [r3, #0]
 800a2b4:	f002 fea7 	bl	800d006 <RegionTxParamSetupReq>
 800a2b8:	1c43      	adds	r3, r0, #1
 800a2ba:	d031      	beq.n	800a320 <ProcessMacCommands.isra.0.constprop.0+0x394>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800a2bc:	59ab      	ldr	r3, [r5, r6]
 800a2be:	8822      	ldrh	r2, [r4, #0]
 800a2c0:	9304      	str	r3, [sp, #16]
 800a2c2:	7823      	ldrb	r3, [r4, #0]
 800a2c4:	9307      	str	r3, [sp, #28]
 800a2c6:	9b04      	ldr	r3, [sp, #16]
 800a2c8:	33b8      	adds	r3, #184	; 0xb8
 800a2ca:	801a      	strh	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800a2cc:	9b04      	ldr	r3, [sp, #16]
 800a2ce:	4a31      	ldr	r2, [pc, #196]	; (800a394 <ProcessMacCommands.isra.0.constprop.0+0x408>)
 800a2d0:	33bc      	adds	r3, #188	; 0xbc
 800a2d2:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d4:	78a3      	ldrb	r3, [r4, #2]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 800a2d6:	2400      	movs	r4, #0
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800a2d8:	5cd0      	ldrb	r0, [r2, r3]
 800a2da:	f7f6 ff49 	bl	8001170 <__aeabi_ui2f>
 800a2de:	9b09      	ldr	r3, [sp, #36]	; 0x24
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800a2e0:	2128      	movs	r1, #40	; 0x28
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800a2e2:	6018      	str	r0, [r3, #0]
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	aa08      	add	r2, sp, #32
 800a2e8:	1852      	adds	r2, r2, r1
 800a2ea:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a2ec:	222a      	movs	r2, #42	; 0x2a
 800a2ee:	ab08      	add	r3, sp, #32
 800a2f0:	189b      	adds	r3, r3, r2
 800a2f2:	9a07      	ldr	r2, [sp, #28]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a2f4:	a912      	add	r1, sp, #72	; 0x48
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a2f6:	701a      	strb	r2, [r3, #0]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a2f8:	9b04      	ldr	r3, [sp, #16]
 800a2fa:	7818      	ldrb	r0, [r3, #0]
 800a2fc:	f002 fdfa 	bl	800cef4 <RegionGetPhyParam>
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 800a300:	59ab      	ldr	r3, [r5, r6]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a302:	900e      	str	r0, [sp, #56]	; 0x38
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 800a304:	3385      	adds	r3, #133	; 0x85
 800a306:	571c      	ldrsb	r4, [r3, r4]
 800a308:	1c02      	adds	r2, r0, #0
 800a30a:	b240      	sxtb	r0, r0
 800a30c:	7819      	ldrb	r1, [r3, #0]
 800a30e:	42a0      	cmp	r0, r4
 800a310:	da00      	bge.n	800a314 <ProcessMacCommands.isra.0.constprop.0+0x388>
 800a312:	1c0a      	adds	r2, r1, #0
 800a314:	701a      	strb	r2, [r3, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800a316:	2009      	movs	r0, #9
 800a318:	2200      	movs	r2, #0
 800a31a:	a90c      	add	r1, sp, #48	; 0x30
 800a31c:	f001 ff60 	bl	800c1e0 <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 800a320:	9d06      	ldr	r5, [sp, #24]
 800a322:	e67d      	b.n	800a020 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    txParamSetupReq.DownlinkDwellTime = 1;
 800a324:	2201      	movs	r2, #1
 800a326:	7062      	strb	r2, [r4, #1]
 800a328:	e7b8      	b.n	800a29c <ProcessMacCommands.isra.0.constprop.0+0x310>
                status = 0x03;
 800a32a:	260d      	movs	r6, #13
 800a32c:	ab08      	add	r3, sp, #32
 800a32e:	18f6      	adds	r6, r6, r3
 800a330:	2303      	movs	r3, #3
 800a332:	7033      	strb	r3, [r6, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 800a334:	5d7b      	ldrb	r3, [r7, r5]
 800a336:	a912      	add	r1, sp, #72	; 0x48
 800a338:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a33a:	1d22      	adds	r2, r4, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800a33c:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a33e:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a340:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a342:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a344:	5cba      	ldrb	r2, [r7, r2]
 800a346:	1d65      	adds	r5, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 800a348:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a34a:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800a34c:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800a34e:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a350:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800a352:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800a354:	4c0b      	ldr	r4, [pc, #44]	; (800a384 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a356:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 800a358:	2264      	movs	r2, #100	; 0x64
 800a35a:	4353      	muls	r3, r2
 800a35c:	604b      	str	r3, [r1, #4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800a35e:	4b0b      	ldr	r3, [pc, #44]	; (800a38c <ProcessMacCommands.isra.0.constprop.0+0x400>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800a360:	b2ed      	uxtb	r5, r5
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800a362:	58e3      	ldr	r3, [r4, r3]
 800a364:	7818      	ldrb	r0, [r3, #0]
 800a366:	f002 fe58 	bl	800d01a <RegionDlChannelReq>
                macCmdPayload[0] = status;
 800a36a:	a90c      	add	r1, sp, #48	; 0x30
 800a36c:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800a36e:	2201      	movs	r2, #1
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 800a370:	7030      	strb	r0, [r6, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800a372:	200a      	movs	r0, #10
 800a374:	f001 ff34 	bl	800c1e0 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800a378:	2310      	movs	r3, #16
 800a37a:	4a05      	ldr	r2, [pc, #20]	; (800a390 <ProcessMacCommands.isra.0.constprop.0+0x404>)
 800a37c:	5ca1      	ldrb	r1, [r4, r2]
 800a37e:	430b      	orrs	r3, r1
 800a380:	54a3      	strb	r3, [r4, r2]
                break;
 800a382:	e64d      	b.n	800a020 <ProcessMacCommands.isra.0.constprop.0+0x94>
 800a384:	2000071c 	.word	0x2000071c
 800a388:	00000459 	.word	0x00000459
 800a38c:	00000484 	.word	0x00000484
 800a390:	00000481 	.word	0x00000481
 800a394:	08011659 	.word	0x08011659
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800a398:	200a      	movs	r0, #10
 800a39a:	f002 f8e7 	bl	800c56c <LoRaMacConfirmQueueIsCmdActive>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	d100      	bne.n	800a3a4 <ProcessMacCommands.isra.0.constprop.0+0x418>
 800a3a2:	e63d      	b.n	800a020 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800a3a4:	210a      	movs	r1, #10
 800a3a6:	2000      	movs	r0, #0
 800a3a8:	f002 f89e 	bl	800c4e8 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 800a3ac:	231e      	movs	r3, #30
 800a3ae:	aa08      	add	r2, sp, #32
 800a3b0:	189b      	adds	r3, r3, r2
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	801a      	strh	r2, [r3, #0]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800a3b6:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	5cfe      	ldrb	r6, [r7, r3]
 800a3bc:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800a3c2:	0236      	lsls	r6, r6, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800a3c4:	0409      	lsls	r1, r1, #16
 800a3c6:	430e      	orrs	r6, r1
 800a3c8:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800a3ca:	5d79      	ldrb	r1, [r7, r5]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800a3cc:	b2db      	uxtb	r3, r3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800a3ce:	430e      	orrs	r6, r1
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800a3d0:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800a3d2:	23fa      	movs	r3, #250	; 0xfa
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800a3d4:	1da5      	adds	r5, r4, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800a3d6:	3405      	adds	r4, #5
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800a3d8:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800a3da:	5d3a      	ldrb	r2, [r7, r4]
 800a3dc:	009b      	lsls	r3, r3, #2
 800a3de:	4353      	muls	r3, r2
 800a3e0:	aa08      	add	r2, sp, #32
 800a3e2:	121b      	asrs	r3, r3, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800a3e4:	0609      	lsls	r1, r1, #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800a3e6:	8393      	strh	r3, [r2, #28]
                    sysTimeCurrent = SysTimeGet( );
 800a3e8:	a812      	add	r0, sp, #72	; 0x48
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800a3ea:	430e      	orrs	r6, r1
                    sysTimeCurrent = SysTimeGet( );
 800a3ec:	f005 fb9e 	bl	800fb2c <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800a3f0:	4b41      	ldr	r3, [pc, #260]	; (800a4f8 <ProcessMacCommands.isra.0.constprop.0+0x56c>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800a3f2:	4c42      	ldr	r4, [pc, #264]	; (800a4fc <ProcessMacCommands.isra.0.constprop.0+0x570>)
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800a3f4:	18f1      	adds	r1, r6, r3
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800a3f6:	23cf      	movs	r3, #207	; 0xcf
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	18e3      	adds	r3, r4, r3
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a400:	9300      	str	r3, [sp, #0]
 800a402:	23ce      	movs	r3, #206	; 0xce
 800a404:	009b      	lsls	r3, r3, #2
 800a406:	58e3      	ldr	r3, [r4, r3]
 800a408:	a810      	add	r0, sp, #64	; 0x40
 800a40a:	910e      	str	r1, [sp, #56]	; 0x38
 800a40c:	f005 fb50 	bl	800fab0 <SysTimeSub>
 800a410:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a412:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a414:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a416:	9300      	str	r3, [sp, #0]
 800a418:	a80e      	add	r0, sp, #56	; 0x38
 800a41a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a41c:	f005 fb2e 	bl	800fa7c <SysTimeAdd>
                    SysTimeSet( sysTime );
 800a420:	980e      	ldr	r0, [sp, #56]	; 0x38
 800a422:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a424:	f005 fb5a 	bl	800fadc <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800a428:	f001 fea3 	bl	800c172 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800a42c:	2387      	movs	r3, #135	; 0x87
 800a42e:	2201      	movs	r2, #1
 800a430:	00db      	lsls	r3, r3, #3
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800a432:	b2ed      	uxtb	r5, r5
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800a434:	54e2      	strb	r2, [r4, r3]
 800a436:	e5f3      	b.n	800a020 <ProcessMacCommands.isra.0.constprop.0+0x94>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800a438:	200d      	movs	r0, #13
 800a43a:	f002 f897 	bl	800c56c <LoRaMacConfirmQueueIsCmdActive>
 800a43e:	2800      	cmp	r0, #0
 800a440:	d100      	bne.n	800a444 <ProcessMacCommands.isra.0.constprop.0+0x4b8>
 800a442:	e5ed      	b.n	800a020 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800a444:	210d      	movs	r1, #13
 800a446:	2000      	movs	r0, #0
 800a448:	f002 f84e 	bl	800c4e8 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800a44c:	2390      	movs	r3, #144	; 0x90
 800a44e:	4a2b      	ldr	r2, [pc, #172]	; (800a4fc <ProcessMacCommands.isra.0.constprop.0+0x570>)
 800a450:	00db      	lsls	r3, r3, #3
 800a452:	5cd3      	ldrb	r3, [r2, r3]
 800a454:	3b04      	subs	r3, #4
 800a456:	2b01      	cmp	r3, #1
 800a458:	d800      	bhi.n	800a45c <ProcessMacCommands.isra.0.constprop.0+0x4d0>
 800a45a:	e5e1      	b.n	800a020 <ProcessMacCommands.isra.0.constprop.0+0x94>
                        LoRaMacClassBPingSlotInfoAns( );
 800a45c:	f001 fe85 	bl	800c16a <LoRaMacClassBPingSlotInfoAns>
 800a460:	e5de      	b.n	800a020 <ProcessMacCommands.isra.0.constprop.0+0x94>
                frequency = ( uint32_t )payload[macIndex++];
 800a462:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800a464:	b2db      	uxtb	r3, r3
 800a466:	5cf9      	ldrb	r1, [r7, r3]
 800a468:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	5cfb      	ldrb	r3, [r7, r3]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800a46e:	0209      	lsls	r1, r1, #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a470:	041b      	lsls	r3, r3, #16
 800a472:	4319      	orrs	r1, r3
                frequency *= 100;
 800a474:	2364      	movs	r3, #100	; 0x64
                frequency = ( uint32_t )payload[macIndex++];
 800a476:	5d7a      	ldrb	r2, [r7, r5]
                datarate = payload[macIndex++] & 0x0F;
 800a478:	1d65      	adds	r5, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a47a:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
 800a47c:	b2e4      	uxtb	r4, r4
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a47e:	4311      	orrs	r1, r2
                datarate = payload[macIndex++] & 0x0F;
 800a480:	5d38      	ldrb	r0, [r7, r4]
                frequency *= 100;
 800a482:	4359      	muls	r1, r3
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800a484:	3b55      	subs	r3, #85	; 0x55
 800a486:	4018      	ands	r0, r3
 800a488:	f001 fe70 	bl	800c16c <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 800a48c:	a90c      	add	r1, sp, #48	; 0x30
 800a48e:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800a490:	2201      	movs	r2, #1
 800a492:	2011      	movs	r0, #17
                datarate = payload[macIndex++] & 0x0F;
 800a494:	b2ed      	uxtb	r5, r5
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800a496:	e69f      	b.n	800a1d8 <ProcessMacCommands.isra.0.constprop.0+0x24c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800a498:	200e      	movs	r0, #14
 800a49a:	f002 f867 	bl	800c56c <LoRaMacConfirmQueueIsCmdActive>
 800a49e:	2800      	cmp	r0, #0
 800a4a0:	d100      	bne.n	800a4a4 <ProcessMacCommands.isra.0.constprop.0+0x518>
 800a4a2:	e5bd      	b.n	800a020 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800a4a4:	210e      	movs	r1, #14
 800a4a6:	2000      	movs	r0, #0
 800a4a8:	f002 f81e 	bl	800c4e8 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800a4ac:	1ca3      	adds	r3, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800a4ae:	b2db      	uxtb	r3, r3
 800a4b0:	5cf8      	ldrb	r0, [r7, r3]
 800a4b2:	5d7b      	ldrb	r3, [r7, r5]
 800a4b4:	0200      	lsls	r0, r0, #8
 800a4b6:	4318      	orrs	r0, r3
                    beaconTimingChannel = payload[macIndex++];
 800a4b8:	1d25      	adds	r5, r4, #4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800a4ba:	4b11      	ldr	r3, [pc, #68]	; (800a500 <ProcessMacCommands.isra.0.constprop.0+0x574>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800a4bc:	3403      	adds	r4, #3
                    beaconTimingChannel = payload[macIndex++];
 800a4be:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800a4c0:	5d39      	ldrb	r1, [r7, r4]
 800a4c2:	681a      	ldr	r2, [r3, #0]
                    beaconTimingChannel = payload[macIndex++];
 800a4c4:	b2ed      	uxtb	r5, r5
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800a4c6:	f001 fe53 	bl	800c170 <LoRaMacClassBBeaconTimingAns>
 800a4ca:	e5a9      	b.n	800a020 <ProcessMacCommands.isra.0.constprop.0+0x94>
                    frequency = ( uint32_t )payload[macIndex++];
 800a4cc:	5d7a      	ldrb	r2, [r7, r5]
 800a4ce:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a4d0:	1d25      	adds	r5, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800a4d2:	3403      	adds	r4, #3
 800a4d4:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a4d6:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800a4d8:	5cf8      	ldrb	r0, [r7, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a4da:	5d3b      	ldrb	r3, [r7, r4]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800a4dc:	0200      	lsls	r0, r0, #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a4de:	041b      	lsls	r3, r3, #16
 800a4e0:	4318      	orrs	r0, r3
                    frequency *= 100;
 800a4e2:	2364      	movs	r3, #100	; 0x64
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a4e4:	4310      	orrs	r0, r2
                    frequency *= 100;
 800a4e6:	4358      	muls	r0, r3
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800a4e8:	f001 fe44 	bl	800c174 <LoRaMacClassBBeaconFreqReq>
 800a4ec:	a90c      	add	r1, sp, #48	; 0x30
 800a4ee:	7008      	strb	r0, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	2013      	movs	r0, #19
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800a4f4:	b2ed      	uxtb	r5, r5
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800a4f6:	e66f      	b.n	800a1d8 <ProcessMacCommands.isra.0.constprop.0+0x24c>
 800a4f8:	12d53d80 	.word	0x12d53d80
 800a4fc:	2000071c 	.word	0x2000071c
 800a500:	200014c0 	.word	0x200014c0

0800a504 <LoRaMacIsBusy>:
}

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a504:	22d0      	movs	r2, #208	; 0xd0
 800a506:	4b06      	ldr	r3, [pc, #24]	; (800a520 <LoRaMacIsBusy+0x1c>)
 800a508:	0092      	lsls	r2, r2, #2
 800a50a:	589a      	ldr	r2, [r3, r2]
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
    {
        return false;
    }
    return true;
 800a50c:	2001      	movs	r0, #1
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a50e:	2a00      	cmp	r2, #0
 800a510:	d105      	bne.n	800a51e <LoRaMacIsBusy+0x1a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800a512:	4a04      	ldr	r2, [pc, #16]	; (800a524 <LoRaMacIsBusy+0x20>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800a514:	5c98      	ldrb	r0, [r3, r2]
 800a516:	3801      	subs	r0, #1
 800a518:	1e43      	subs	r3, r0, #1
 800a51a:	4198      	sbcs	r0, r3
 800a51c:	b2c0      	uxtb	r0, r0
}
 800a51e:	4770      	bx	lr
 800a520:	2000071c 	.word	0x2000071c
 800a524:	00000482 	.word	0x00000482

0800a528 <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 800a528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a52a:	b0ab      	sub	sp, #172	; 0xac
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a52c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a530:	b672      	cpsid	i
    LoRaMacRadioEvents.Value = 0;
 800a532:	2000      	movs	r0, #0
    events = LoRaMacRadioEvents;
 800a534:	4acc      	ldr	r2, [pc, #816]	; (800a868 <LoRaMacProcess+0x340>)
 800a536:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800a538:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a53a:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800a53e:	4fcb      	ldr	r7, [pc, #812]	; (800a86c <LoRaMacProcess+0x344>)
 800a540:	4283      	cmp	r3, r0
 800a542:	d100      	bne.n	800a546 <LoRaMacProcess+0x1e>
 800a544:	e0ec      	b.n	800a720 <LoRaMacProcess+0x1f8>
        if( events.Events.TxDone == 1 )
 800a546:	b2da      	uxtb	r2, r3
 800a548:	9206      	str	r2, [sp, #24]
 800a54a:	06db      	lsls	r3, r3, #27
 800a54c:	d571      	bpl.n	800a632 <LoRaMacProcess+0x10a>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a54e:	4cc8      	ldr	r4, [pc, #800]	; (800a870 <LoRaMacProcess+0x348>)
 800a550:	4dc8      	ldr	r5, [pc, #800]	; (800a874 <LoRaMacProcess+0x34c>)
 800a552:	5963      	ldr	r3, [r4, r5]
 800a554:	337c      	adds	r3, #124	; 0x7c
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	2b02      	cmp	r3, #2
 800a55a:	d003      	beq.n	800a564 <LoRaMacProcess+0x3c>
        Radio.Sleep( );
 800a55c:	4bc6      	ldr	r3, [pc, #792]	; (800a878 <LoRaMacProcess+0x350>)
 800a55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a560:	9303      	str	r3, [sp, #12]
 800a562:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800a564:	23ec      	movs	r3, #236	; 0xec
 800a566:	4ec5      	ldr	r6, [pc, #788]	; (800a87c <LoRaMacProcess+0x354>)
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	58e1      	ldr	r1, [r4, r3]
 800a56c:	0030      	movs	r0, r6
 800a56e:	f005 fc1d 	bl	800fdac <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800a572:	0030      	movs	r0, r6
 800a574:	f005 fbd8 	bl	800fd28 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800a578:	23ed      	movs	r3, #237	; 0xed
 800a57a:	4ec1      	ldr	r6, [pc, #772]	; (800a880 <LoRaMacProcess+0x358>)
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	58e1      	ldr	r1, [r4, r3]
 800a580:	0030      	movs	r0, r6
 800a582:	f005 fc13 	bl	800fdac <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800a586:	0030      	movs	r0, r6
 800a588:	f005 fbce 	bl	800fd28 <UTIL_TIMER_Start>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 800a58c:	5963      	ldr	r3, [r4, r5]
 800a58e:	001a      	movs	r2, r3
 800a590:	327c      	adds	r2, #124	; 0x7c
 800a592:	7812      	ldrb	r2, [r2, #0]
 800a594:	2a02      	cmp	r2, #2
 800a596:	d003      	beq.n	800a5a0 <LoRaMacProcess+0x78>
 800a598:	4aba      	ldr	r2, [pc, #744]	; (800a884 <LoRaMacProcess+0x35c>)
 800a59a:	5ca2      	ldrb	r2, [r4, r2]
 800a59c:	2a00      	cmp	r2, #0
 800a59e:	d011      	beq.n	800a5c4 <LoRaMacProcess+0x9c>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 800a5a0:	2216      	movs	r2, #22
 800a5a2:	a914      	add	r1, sp, #80	; 0x50
 800a5a4:	700a      	strb	r2, [r1, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a5a6:	7818      	ldrb	r0, [r3, #0]
 800a5a8:	f002 fca4 	bl	800cef4 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800a5ac:	23ed      	movs	r3, #237	; 0xed
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	4eb5      	ldr	r6, [pc, #724]	; (800a888 <LoRaMacProcess+0x360>)
 800a5b2:	58e1      	ldr	r1, [r4, r3]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a5b4:	9012      	str	r0, [sp, #72]	; 0x48
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800a5b6:	1809      	adds	r1, r1, r0
 800a5b8:	0030      	movs	r0, r6
 800a5ba:	f005 fbf7 	bl	800fdac <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 800a5be:	0030      	movs	r0, r6
 800a5c0:	f005 fbb2 	bl	800fd28 <UTIL_TIMER_Start>
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800a5c4:	4bb1      	ldr	r3, [pc, #708]	; (800a88c <LoRaMacProcess+0x364>)
    txDone.Channel = MacCtx.Channel;
 800a5c6:	ae1e      	add	r6, sp, #120	; 0x78
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800a5c8:	681a      	ldr	r2, [r3, #0]
 800a5ca:	5963      	ldr	r3, [r4, r5]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800a5cc:	a810      	add	r0, sp, #64	; 0x40
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 800a5ce:	33fc      	adds	r3, #252	; 0xfc
 800a5d0:	655a      	str	r2, [r3, #84]	; 0x54
    txDone.Channel = MacCtx.Channel;
 800a5d2:	4baf      	ldr	r3, [pc, #700]	; (800a890 <LoRaMacProcess+0x368>)
 800a5d4:	5ce3      	ldrb	r3, [r4, r3]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800a5d6:	6072      	str	r2, [r6, #4]
    txDone.Channel = MacCtx.Channel;
 800a5d8:	7033      	strb	r3, [r6, #0]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800a5da:	f005 fad3 	bl	800fb84 <SysTimeGetMcuTime>
 800a5de:	5963      	ldr	r3, [r4, r5]
 800a5e0:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a5e2:	001a      	movs	r2, r3
 800a5e4:	325d      	adds	r2, #93	; 0x5d
 800a5e6:	32ff      	adds	r2, #255	; 0xff
 800a5e8:	6812      	ldr	r2, [r2, #0]
 800a5ea:	a80a      	add	r0, sp, #40	; 0x28
 800a5ec:	9200      	str	r2, [sp, #0]
 800a5ee:	22ac      	movs	r2, #172	; 0xac
 800a5f0:	0052      	lsls	r2, r2, #1
 800a5f2:	589b      	ldr	r3, [r3, r2]
 800a5f4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a5f6:	f005 fa5b 	bl	800fab0 <SysTimeSub>
 800a5fa:	ab21      	add	r3, sp, #132	; 0x84
 800a5fc:	aa0a      	add	r2, sp, #40	; 0x28
 800a5fe:	ca03      	ldmia	r2!, {r0, r1}
 800a600:	c303      	stmia	r3!, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800a602:	2383      	movs	r3, #131	; 0x83
 800a604:	00db      	lsls	r3, r3, #3
 800a606:	58e3      	ldr	r3, [r4, r3]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800a608:	22b2      	movs	r2, #178	; 0xb2
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800a60a:	60b3      	str	r3, [r6, #8]
    txDone.Joined  = true;
 800a60c:	2301      	movs	r3, #1
 800a60e:	7073      	strb	r3, [r6, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800a610:	5963      	ldr	r3, [r4, r5]
 800a612:	0052      	lsls	r2, r2, #1
 800a614:	5c9a      	ldrb	r2, [r3, r2]
 800a616:	2a00      	cmp	r2, #0
 800a618:	d100      	bne.n	800a61c <LoRaMacProcess+0xf4>
        txDone.Joined  = false;
 800a61a:	7072      	strb	r2, [r6, #1]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 800a61c:	7818      	ldrb	r0, [r3, #0]
 800a61e:	0031      	movs	r1, r6
 800a620:	f002 fc74 	bl	800cf0c <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 800a624:	4b92      	ldr	r3, [pc, #584]	; (800a870 <LoRaMacProcess+0x348>)
 800a626:	4a97      	ldr	r2, [pc, #604]	; (800a884 <LoRaMacProcess+0x35c>)
 800a628:	5c9a      	ldrb	r2, [r3, r2]
 800a62a:	2a00      	cmp	r2, #0
 800a62c:	d101      	bne.n	800a632 <LoRaMacProcess+0x10a>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a62e:	4999      	ldr	r1, [pc, #612]	; (800a894 <LoRaMacProcess+0x36c>)
 800a630:	545a      	strb	r2, [r3, r1]
        if( events.Events.RxDone == 1 )
 800a632:	9b06      	ldr	r3, [sp, #24]
 800a634:	071b      	lsls	r3, r3, #28
 800a636:	d545      	bpl.n	800a6c4 <LoRaMacProcess+0x19c>
    uint8_t *payload = RxDoneParams.Payload;
 800a638:	4b97      	ldr	r3, [pc, #604]	; (800a898 <LoRaMacProcess+0x370>)
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800a63a:	4c8d      	ldr	r4, [pc, #564]	; (800a870 <LoRaMacProcess+0x348>)
    uint8_t *payload = RxDoneParams.Payload;
 800a63c:	685a      	ldr	r2, [r3, #4]
 800a63e:	9203      	str	r2, [sp, #12]
    int16_t rssi = RxDoneParams.Rssi;
 800a640:	210a      	movs	r1, #10
 800a642:	5e5a      	ldrsh	r2, [r3, r1]
    uint16_t size = RxDoneParams.Size;
 800a644:	891e      	ldrh	r6, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 800a646:	9205      	str	r2, [sp, #20]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800a648:	4a8a      	ldr	r2, [pc, #552]	; (800a874 <LoRaMacProcess+0x34c>)
    int8_t snr = RxDoneParams.Snr;
 800a64a:	7b1b      	ldrb	r3, [r3, #12]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800a64c:	58a2      	ldr	r2, [r4, r2]
    int8_t snr = RxDoneParams.Snr;
 800a64e:	b25b      	sxtb	r3, r3
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800a650:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    int8_t snr = RxDoneParams.Snr;
 800a652:	9304      	str	r3, [sp, #16]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 800a654:	9208      	str	r2, [sp, #32]
    MacCtx.McpsConfirm.AckReceived = false;
 800a656:	2288      	movs	r2, #136	; 0x88
    uint32_t downLinkCounter = 0;
 800a658:	2300      	movs	r3, #0
    MacCtx.McpsConfirm.AckReceived = false;
 800a65a:	00d2      	lsls	r2, r2, #3
 800a65c:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Rssi = rssi;
 800a65e:	9905      	ldr	r1, [sp, #20]
 800a660:	4a8e      	ldr	r2, [pc, #568]	; (800a89c <LoRaMacProcess+0x374>)
    uint32_t downLinkCounter = 0;
 800a662:	930d      	str	r3, [sp, #52]	; 0x34
    MacCtx.McpsIndication.Rssi = rssi;
 800a664:	52a1      	strh	r1, [r4, r2]
    MacCtx.McpsIndication.Snr = snr;
 800a666:	9904      	ldr	r1, [sp, #16]
 800a668:	4a8d      	ldr	r2, [pc, #564]	; (800a8a0 <LoRaMacProcess+0x378>)
 800a66a:	54a1      	strb	r1, [r4, r2]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 800a66c:	3254      	adds	r2, #84	; 0x54
 800a66e:	5ca2      	ldrb	r2, [r4, r2]
 800a670:	498c      	ldr	r1, [pc, #560]	; (800a8a4 <LoRaMacProcess+0x37c>)
 800a672:	5462      	strb	r2, [r4, r1]
    MacCtx.McpsIndication.Multicast = 0;
 800a674:	4a8c      	ldr	r2, [pc, #560]	; (800a8a8 <LoRaMacProcess+0x380>)
 800a676:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.FramePending = 0;
 800a678:	4a8c      	ldr	r2, [pc, #560]	; (800a8ac <LoRaMacProcess+0x384>)
 800a67a:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 800a67c:	4a8c      	ldr	r2, [pc, #560]	; (800a8b0 <LoRaMacProcess+0x388>)
 800a67e:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 800a680:	3204      	adds	r2, #4
 800a682:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.AckReceived = false;
 800a684:	4a8b      	ldr	r2, [pc, #556]	; (800a8b4 <LoRaMacProcess+0x38c>)
 800a686:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800a688:	3202      	adds	r2, #2
 800a68a:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a68c:	4a8a      	ldr	r2, [pc, #552]	; (800a8b8 <LoRaMacProcess+0x390>)
 800a68e:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 800a690:	4a8a      	ldr	r2, [pc, #552]	; (800a8bc <LoRaMacProcess+0x394>)
 800a692:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800a694:	3204      	adds	r2, #4
 800a696:	54a3      	strb	r3, [r4, r2]
    Radio.Sleep( );
 800a698:	4b77      	ldr	r3, [pc, #476]	; (800a878 <LoRaMacProcess+0x350>)
 800a69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69c:	9307      	str	r3, [sp, #28]
 800a69e:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 800a6a0:	4877      	ldr	r0, [pc, #476]	; (800a880 <LoRaMacProcess+0x358>)
 800a6a2:	f005 faed 	bl	800fc80 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800a6a6:	0031      	movs	r1, r6
 800a6a8:	9803      	ldr	r0, [sp, #12]
 800a6aa:	f001 fd4b 	bl	800c144 <LoRaMacClassBRxBeacon>
 800a6ae:	4b83      	ldr	r3, [pc, #524]	; (800a8bc <LoRaMacProcess+0x394>)
 800a6b0:	1e05      	subs	r5, r0, #0
 800a6b2:	9307      	str	r3, [sp, #28]
 800a6b4:	d100      	bne.n	800a6b8 <LoRaMacProcess+0x190>
 800a6b6:	e111      	b.n	800a8dc <LoRaMacProcess+0x3b4>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800a6b8:	4b81      	ldr	r3, [pc, #516]	; (800a8c0 <LoRaMacProcess+0x398>)
 800a6ba:	9a05      	ldr	r2, [sp, #20]
 800a6bc:	52e2      	strh	r2, [r4, r3]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800a6be:	9a04      	ldr	r2, [sp, #16]
 800a6c0:	3302      	adds	r3, #2
 800a6c2:	54e2      	strb	r2, [r4, r3]
        if( events.Events.TxTimeout == 1 )
 800a6c4:	9b06      	ldr	r3, [sp, #24]
 800a6c6:	075b      	lsls	r3, r3, #29
 800a6c8:	d51c      	bpl.n	800a704 <LoRaMacProcess+0x1dc>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 800a6ca:	4c69      	ldr	r4, [pc, #420]	; (800a870 <LoRaMacProcess+0x348>)
 800a6cc:	4b69      	ldr	r3, [pc, #420]	; (800a874 <LoRaMacProcess+0x34c>)
 800a6ce:	58e3      	ldr	r3, [r4, r3]
 800a6d0:	337c      	adds	r3, #124	; 0x7c
 800a6d2:	781b      	ldrb	r3, [r3, #0]
 800a6d4:	2b02      	cmp	r3, #2
 800a6d6:	d003      	beq.n	800a6e0 <LoRaMacProcess+0x1b8>
        Radio.Sleep( );
 800a6d8:	4b67      	ldr	r3, [pc, #412]	; (800a878 <LoRaMacProcess+0x350>)
 800a6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6dc:	9303      	str	r3, [sp, #12]
 800a6de:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800a6e0:	f7fe feb8 	bl	8009454 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800a6e4:	2002      	movs	r0, #2
 800a6e6:	4b6b      	ldr	r3, [pc, #428]	; (800a894 <LoRaMacProcess+0x36c>)
 800a6e8:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800a6ea:	f001 ff23 	bl	800c534 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800a6ee:	4b65      	ldr	r3, [pc, #404]	; (800a884 <LoRaMacProcess+0x35c>)
 800a6f0:	5ce3      	ldrb	r3, [r4, r3]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d002      	beq.n	800a6fc <LoRaMacProcess+0x1d4>
        MacCtx.AckTimeoutRetry = true;
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	4b72      	ldr	r3, [pc, #456]	; (800a8c4 <LoRaMacProcess+0x39c>)
 800a6fa:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a6fc:	2320      	movs	r3, #32
 800a6fe:	5de2      	ldrb	r2, [r4, r7]
 800a700:	4313      	orrs	r3, r2
 800a702:	55e3      	strb	r3, [r4, r7]
        if( events.Events.RxError == 1 )
 800a704:	9b06      	ldr	r3, [sp, #24]
 800a706:	079b      	lsls	r3, r3, #30
 800a708:	d503      	bpl.n	800a712 <LoRaMacProcess+0x1ea>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800a70a:	2106      	movs	r1, #6
 800a70c:	2005      	movs	r0, #5
 800a70e:	f7fe ff7d 	bl	800960c <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 800a712:	9b06      	ldr	r3, [sp, #24]
 800a714:	07db      	lsls	r3, r3, #31
 800a716:	d503      	bpl.n	800a720 <LoRaMacProcess+0x1f8>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800a718:	2104      	movs	r1, #4
 800a71a:	2003      	movs	r0, #3
 800a71c:	f7fe ff76 	bl	800960c <HandleRadioRxErrorTimeout>
    uint8_t noTx = 0x00;

    LoRaMacHandleIrqEvents( );
    LoRaMacClassBProcess( );
 800a720:	f001 fd2d 	bl	800c17e <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800a724:	4c52      	ldr	r4, [pc, #328]	; (800a870 <LoRaMacProcess+0x348>)
 800a726:	5de2      	ldrb	r2, [r4, r7]
 800a728:	0693      	lsls	r3, r2, #26
 800a72a:	d56c      	bpl.n	800a806 <LoRaMacProcess+0x2de>
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800a72c:	21d0      	movs	r1, #208	; 0xd0
    MacCtx.AllowRequests = requestState;
 800a72e:	2300      	movs	r3, #0
 800a730:	4865      	ldr	r0, [pc, #404]	; (800a8c8 <LoRaMacProcess+0x3a0>)
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800a732:	0089      	lsls	r1, r1, #2
    MacCtx.AllowRequests = requestState;
 800a734:	5423      	strb	r3, [r4, r0]
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800a736:	5863      	ldr	r3, [r4, r1]
 800a738:	9003      	str	r0, [sp, #12]
 800a73a:	0618      	lsls	r0, r3, #24
 800a73c:	d502      	bpl.n	800a744 <LoRaMacProcess+0x21c>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a73e:	2082      	movs	r0, #130	; 0x82
 800a740:	4383      	bics	r3, r0
 800a742:	5063      	str	r3, [r4, r1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800a744:	2305      	movs	r3, #5
 800a746:	421a      	tst	r2, r3
 800a748:	d100      	bne.n	800a74c <LoRaMacProcess+0x224>
 800a74a:	e31f      	b.n	800ad8c <LoRaMacProcess+0x864>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800a74c:	200c      	movs	r0, #12
 800a74e:	f001 ff0d 	bl	800c56c <LoRaMacConfirmQueueIsCmdActive>
 800a752:	2800      	cmp	r0, #0
 800a754:	d100      	bne.n	800a758 <LoRaMacProcess+0x230>
 800a756:	e319      	b.n	800ad8c <LoRaMacProcess+0x864>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800a758:	5de3      	ldrb	r3, [r4, r7]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800a75a:	07da      	lsls	r2, r3, #31
 800a75c:	d500      	bpl.n	800a760 <LoRaMacProcess+0x238>
 800a75e:	e315      	b.n	800ad8c <LoRaMacProcess+0x864>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a760:	075b      	lsls	r3, r3, #29
 800a762:	d400      	bmi.n	800a766 <LoRaMacProcess+0x23e>
 800a764:	e328      	b.n	800adb8 <LoRaMacProcess+0x890>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a766:	22d0      	movs	r2, #208	; 0xd0
 800a768:	2302      	movs	r3, #2
 800a76a:	0092      	lsls	r2, r2, #2
 800a76c:	58a1      	ldr	r1, [r4, r2]
 800a76e:	4399      	bics	r1, r3
 800a770:	50a1      	str	r1, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a772:	23d0      	movs	r3, #208	; 0xd0
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	58e3      	ldr	r3, [r4, r3]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d141      	bne.n	800a800 <LoRaMacProcess+0x2d8>
 800a77c:	5de6      	ldrb	r6, [r4, r7]
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a77e:	3301      	adds	r3, #1
 800a780:	0031      	movs	r1, r6
 800a782:	4019      	ands	r1, r3
 800a784:	421e      	tst	r6, r3
 800a786:	d002      	beq.n	800a78e <LoRaMacProcess+0x266>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800a788:	0032      	movs	r2, r6
 800a78a:	439a      	bics	r2, r3
 800a78c:	55e2      	strb	r2, [r4, r7]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a78e:	2204      	movs	r2, #4
 800a790:	5de3      	ldrb	r3, [r4, r7]
 800a792:	4213      	tst	r3, r2
 800a794:	d001      	beq.n	800a79a <LoRaMacProcess+0x272>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a796:	4393      	bics	r3, r2
 800a798:	55e3      	strb	r3, [r4, r7]
    MacCtx.AllowRequests = requestState;
 800a79a:	2301      	movs	r3, #1
 800a79c:	9a03      	ldr	r2, [sp, #12]
 800a79e:	54a3      	strb	r3, [r4, r2]
        if( reqEvents.Bits.McpsReq == 1 )
 800a7a0:	2900      	cmp	r1, #0
 800a7a2:	d005      	beq.n	800a7b0 <LoRaMacProcess+0x288>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800a7a4:	23d1      	movs	r3, #209	; 0xd1
 800a7a6:	009b      	lsls	r3, r3, #2
 800a7a8:	58e3      	ldr	r3, [r4, r3]
 800a7aa:	4848      	ldr	r0, [pc, #288]	; (800a8cc <LoRaMacProcess+0x3a4>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800a7b0:	2504      	movs	r5, #4
 800a7b2:	422e      	tst	r6, r5
 800a7b4:	d009      	beq.n	800a7ca <LoRaMacProcess+0x2a2>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800a7b6:	4846      	ldr	r0, [pc, #280]	; (800a8d0 <LoRaMacProcess+0x3a8>)
 800a7b8:	f001 fee4 	bl	800c584 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800a7bc:	f001 ff0e 	bl	800c5dc <LoRaMacConfirmQueueGetCnt>
 800a7c0:	2800      	cmp	r0, #0
 800a7c2:	d002      	beq.n	800a7ca <LoRaMacProcess+0x2a2>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a7c4:	5de3      	ldrb	r3, [r4, r7]
 800a7c6:	431d      	orrs	r5, r3
 800a7c8:	55e5      	strb	r5, [r4, r7]
        LoRaMacClassBResumeBeaconing( );
 800a7ca:	f001 fcc7 	bl	800c15c <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800a7ce:	2220      	movs	r2, #32
 800a7d0:	5de3      	ldrb	r3, [r4, r7]
 800a7d2:	4393      	bics	r3, r2
 800a7d4:	55e3      	strb	r3, [r4, r7]
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a7d6:	23d0      	movs	r3, #208	; 0xd0
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	58e3      	ldr	r3, [r4, r3]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10f      	bne.n	800a800 <LoRaMacProcess+0x2d8>
        bool isStickyMacCommandPending = false;
 800a7e0:	2558      	movs	r5, #88	; 0x58
 800a7e2:	aa08      	add	r2, sp, #32
 800a7e4:	1952      	adds	r2, r2, r5
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800a7e6:	a81e      	add	r0, sp, #120	; 0x78
        bool isStickyMacCommandPending = false;
 800a7e8:	7013      	strb	r3, [r2, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800a7ea:	f001 fddd 	bl	800c3a8 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800a7ee:	ab08      	add	r3, sp, #32
 800a7f0:	195b      	adds	r3, r3, r5
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d003      	beq.n	800a800 <LoRaMacProcess+0x2d8>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800a7f8:	2310      	movs	r3, #16
 800a7fa:	5de2      	ldrb	r2, [r4, r7]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	55e3      	strb	r3, [r4, r7]
    MacCtx.AllowRequests = requestState;
 800a800:	2301      	movs	r3, #1
 800a802:	9a03      	ldr	r2, [sp, #12]
 800a804:	54a3      	strb	r3, [r4, r2]
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800a806:	2208      	movs	r2, #8
 800a808:	5de3      	ldrb	r3, [r4, r7]
 800a80a:	4213      	tst	r3, r2
 800a80c:	d007      	beq.n	800a81e <LoRaMacProcess+0x2f6>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800a80e:	4393      	bics	r3, r2
 800a810:	55e3      	strb	r3, [r4, r7]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800a812:	23d1      	movs	r3, #209	; 0xd1
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	58e3      	ldr	r3, [r4, r3]
 800a818:	482e      	ldr	r0, [pc, #184]	; (800a8d4 <LoRaMacProcess+0x3ac>)
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800a81e:	2510      	movs	r5, #16
 800a820:	5de3      	ldrb	r3, [r4, r7]
 800a822:	422b      	tst	r3, r5
 800a824:	d00a      	beq.n	800a83c <LoRaMacProcess+0x314>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800a826:	2307      	movs	r3, #7
 800a828:	a81e      	add	r0, sp, #120	; 0x78
 800a82a:	8003      	strh	r3, [r0, #0]
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 800a82c:	23d1      	movs	r3, #209	; 0xd1
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	58e3      	ldr	r3, [r4, r3]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800a836:	5de3      	ldrb	r3, [r4, r7]
 800a838:	43ab      	bics	r3, r5
 800a83a:	55e3      	strb	r3, [r4, r7]
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800a83c:	2202      	movs	r2, #2
 800a83e:	5de3      	ldrb	r3, [r4, r7]
 800a840:	4213      	tst	r3, r2
 800a842:	d007      	beq.n	800a854 <LoRaMacProcess+0x32c>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800a844:	4393      	bics	r3, r2
 800a846:	55e3      	strb	r3, [r4, r7]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800a848:	23d1      	movs	r3, #209	; 0xd1
 800a84a:	009b      	lsls	r3, r3, #2
 800a84c:	58e3      	ldr	r3, [r4, r3]
 800a84e:	4822      	ldr	r0, [pc, #136]	; (800a8d8 <LoRaMacProcess+0x3b0>)
 800a850:	685b      	ldr	r3, [r3, #4]
 800a852:	4798      	blx	r3
        LoRaMacHandleRequestEvents( );
        LoRaMacHandleScheduleUplinkEvent( );
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
    }
    LoRaMacHandleIndicationEvents( );
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800a854:	2390      	movs	r3, #144	; 0x90
 800a856:	00db      	lsls	r3, r3, #3
 800a858:	5ce3      	ldrb	r3, [r4, r3]
 800a85a:	2b02      	cmp	r3, #2
 800a85c:	d101      	bne.n	800a862 <LoRaMacProcess+0x33a>
    {
        OpenContinuousRxCWindow( );
 800a85e:	f7ff fa55 	bl	8009d0c <OpenContinuousRxCWindow>
    }
}
 800a862:	b02b      	add	sp, #172	; 0xac
 800a864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a866:	46c0      	nop			; (mov r8, r8)
 800a868:	20000574 	.word	0x20000574
 800a86c:	00000481 	.word	0x00000481
 800a870:	2000071c 	.word	0x2000071c
 800a874:	00000484 	.word	0x00000484
 800a878:	080117e4 	.word	0x080117e4
 800a87c:	20000a9c 	.word	0x20000a9c
 800a880:	20000ab4 	.word	0x20000ab4
 800a884:	00000414 	.word	0x00000414
 800a888:	20000b14 	.word	0x20000b14
 800a88c:	200014bc 	.word	0x200014bc
 800a890:	00000415 	.word	0x00000415
 800a894:	0000043d 	.word	0x0000043d
 800a898:	200014c0 	.word	0x200014c0
 800a89c:	0000042a 	.word	0x0000042a
 800a8a0:	0000042c 	.word	0x0000042c
 800a8a4:	0000042d 	.word	0x0000042d
 800a8a8:	0000041e 	.word	0x0000041e
 800a8ac:	00000421 	.word	0x00000421
 800a8b0:	00000424 	.word	0x00000424
 800a8b4:	0000042e 	.word	0x0000042e
 800a8b8:	0000041c 	.word	0x0000041c
 800a8bc:	00000434 	.word	0x00000434
 800a8c0:	00000476 	.word	0x00000476
 800a8c4:	00000413 	.word	0x00000413
 800a8c8:	00000482 	.word	0x00000482
 800a8cc:	20000b58 	.word	0x20000b58
 800a8d0:	20000b6c 	.word	0x20000b6c
 800a8d4:	20000b80 	.word	0x20000b80
 800a8d8:	20000b38 	.word	0x20000b38
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800a8dc:	4bcb      	ldr	r3, [pc, #812]	; (800ac0c <LoRaMacProcess+0x6e4>)
 800a8de:	58e3      	ldr	r3, [r4, r3]
 800a8e0:	9305      	str	r3, [sp, #20]
 800a8e2:	337c      	adds	r3, #124	; 0x7c
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	2b01      	cmp	r3, #1
 800a8e8:	d10d      	bne.n	800a906 <LoRaMacProcess+0x3de>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a8ea:	f001 fc2f 	bl	800c14c <LoRaMacClassBIsPingExpected>
 800a8ee:	9005      	str	r0, [sp, #20]
 800a8f0:	2800      	cmp	r0, #0
 800a8f2:	d019      	beq.n	800a928 <LoRaMacProcess+0x400>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a8f4:	0028      	movs	r0, r5
 800a8f6:	f001 fc1e 	bl	800c136 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a8fa:	0028      	movs	r0, r5
 800a8fc:	f001 fc20 	bl	800c140 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800a900:	2304      	movs	r3, #4
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a902:	4ac3      	ldr	r2, [pc, #780]	; (800ac10 <LoRaMacProcess+0x6e8>)
 800a904:	54a3      	strb	r3, [r4, r2]
    macHdr.Value = payload[pktHeaderLen++];
 800a906:	9b03      	ldr	r3, [sp, #12]
 800a908:	781b      	ldrb	r3, [r3, #0]
 800a90a:	0958      	lsrs	r0, r3, #5
 800a90c:	3801      	subs	r0, #1
 800a90e:	9307      	str	r3, [sp, #28]
    switch( macHdr.Bits.MType )
 800a910:	2806      	cmp	r0, #6
 800a912:	d900      	bls.n	800a916 <LoRaMacProcess+0x3ee>
 800a914:	e22c      	b.n	800ad70 <LoRaMacProcess+0x848>
 800a916:	f7f5 fc1d 	bl	8000154 <__gnu_thumb1_case_uhi>
 800a91a:	0013      	.short	0x0013
 800a91c:	009a022b 	.word	0x009a022b
 800a920:	0097022b 	.word	0x0097022b
 800a924:	021b022b 	.word	0x021b022b
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a928:	f001 fc12 	bl	800c150 <LoRaMacClassBIsMulticastExpected>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d0ea      	beq.n	800a906 <LoRaMacProcess+0x3de>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a930:	9805      	ldr	r0, [sp, #20]
 800a932:	f001 fc01 	bl	800c138 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a936:	9805      	ldr	r0, [sp, #20]
 800a938:	f001 fc03 	bl	800c142 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800a93c:	2305      	movs	r3, #5
 800a93e:	e7e0      	b.n	800a902 <LoRaMacProcess+0x3da>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800a940:	2e10      	cmp	r6, #16
 800a942:	d806      	bhi.n	800a952 <LoRaMacProcess+0x42a>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a944:	2101      	movs	r1, #1
 800a946:	4ab3      	ldr	r2, [pc, #716]	; (800ac14 <LoRaMacProcess+0x6ec>)
 800a948:	4bb3      	ldr	r3, [pc, #716]	; (800ac18 <LoRaMacProcess+0x6f0>)
 800a94a:	54d1      	strb	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800a94c:	f7fe fe40 	bl	80095d0 <PrepareRxDoneAbort>
                return;
 800a950:	e6b8      	b.n	800a6c4 <LoRaMacProcess+0x19c>
            macMsgJoinAccept.Buffer = payload;
 800a952:	9b03      	ldr	r3, [sp, #12]
 800a954:	ad14      	add	r5, sp, #80	; 0x50
 800a956:	9314      	str	r3, [sp, #80]	; 0x50
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800a958:	4bac      	ldr	r3, [pc, #688]	; (800ac0c <LoRaMacProcess+0x6e4>)
            macMsgJoinAccept.BufSize = size;
 800a95a:	b2f6      	uxtb	r6, r6
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800a95c:	58e3      	ldr	r3, [r4, r3]
            macMsgJoinAccept.BufSize = size;
 800a95e:	712e      	strb	r6, [r5, #4]
            if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 800a960:	9303      	str	r3, [sp, #12]
 800a962:	23b2      	movs	r3, #178	; 0xb2
 800a964:	9a03      	ldr	r2, [sp, #12]
 800a966:	005b      	lsls	r3, r3, #1
 800a968:	5cd3      	ldrb	r3, [r2, r3]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d1ea      	bne.n	800a944 <LoRaMacProcess+0x41c>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800a96e:	f7fe f87d 	bl	8008a6c <SecureElementGetJoinEui>
 800a972:	002a      	movs	r2, r5
 800a974:	0001      	movs	r1, r0
 800a976:	20ff      	movs	r0, #255	; 0xff
 800a978:	f002 f90e 	bl	800cb98 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800a97c:	2800      	cmp	r0, #0
 800a97e:	d15b      	bne.n	800aa38 <LoRaMacProcess+0x510>
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800a980:	7aaa      	ldrb	r2, [r5, #10]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a982:	7ae9      	ldrb	r1, [r5, #11]
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a984:	4ba1      	ldr	r3, [pc, #644]	; (800ac0c <LoRaMacProcess+0x6e4>)
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a986:	0409      	lsls	r1, r1, #16
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800a988:	0212      	lsls	r2, r2, #8
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a98a:	58e3      	ldr	r3, [r4, r3]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a98c:	430a      	orrs	r2, r1
                MacCtx.NvmCtx->NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800a98e:	7a69      	ldrb	r1, [r5, #9]
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a990:	430a      	orrs	r2, r1
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a992:	0019      	movs	r1, r3
                MacCtx.NvmCtx->NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800a994:	649a      	str	r2, [r3, #72]	; 0x48
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800a996:	68ea      	ldr	r2, [r5, #12]
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a998:	31a5      	adds	r1, #165	; 0xa5
                MacCtx.NvmCtx->DevAddr = macMsgJoinAccept.DevAddr;
 800a99a:	64da      	str	r2, [r3, #76]	; 0x4c
                MacCtx.NvmCtx->MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800a99c:	7c2a      	ldrb	r2, [r5, #16]
 800a99e:	0652      	lsls	r2, r2, #25
 800a9a0:	0f52      	lsrs	r2, r2, #29
 800a9a2:	700a      	strb	r2, [r1, #0]
                MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a9a4:	7c2a      	ldrb	r2, [r5, #16]
 800a9a6:	0712      	lsls	r2, r2, #28
 800a9a8:	0f12      	lsrs	r2, r2, #28
 800a9aa:	71ca      	strb	r2, [r1, #7]
                MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800a9ac:	73ca      	strb	r2, [r1, #15]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800a9ae:	7c6a      	ldrb	r2, [r5, #17]
                if( MacCtx.NvmCtx->MacParams.ReceiveDelay1 == 0 )
 800a9b0:	3911      	subs	r1, #17
 800a9b2:	2a00      	cmp	r2, #0
 800a9b4:	d03e      	beq.n	800aa34 <LoRaMacProcess+0x50c>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800a9b6:	600a      	str	r2, [r1, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800a9b8:	22fa      	movs	r2, #250	; 0xfa
 800a9ba:	6808      	ldr	r0, [r1, #0]
 800a9bc:	0092      	lsls	r2, r2, #2
 800a9be:	4342      	muls	r2, r0
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800a9c0:	20fa      	movs	r0, #250	; 0xfa
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 *= 1000;
 800a9c2:	600a      	str	r2, [r1, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 800a9c4:	0019      	movs	r1, r3
 800a9c6:	0080      	lsls	r0, r0, #2
 800a9c8:	1812      	adds	r2, r2, r0
 800a9ca:	3198      	adds	r1, #152	; 0x98
 800a9cc:	600a      	str	r2, [r1, #0]
                MacCtx.NvmCtx->Version.Fields.Minor = 0;
 800a9ce:	22b1      	movs	r2, #177	; 0xb1
 800a9d0:	2500      	movs	r5, #0
 800a9d2:	0052      	lsls	r2, r2, #1
 800a9d4:	549d      	strb	r5, [r3, r2]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a9d6:	a912      	add	r1, sp, #72	; 0x48
 800a9d8:	3a21      	subs	r2, #33	; 0x21
                applyCFList.Size = size - 17;
 800a9da:	3e11      	subs	r6, #17
 800a9dc:	710e      	strb	r6, [r1, #4]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a9de:	a808      	add	r0, sp, #32
 800a9e0:	3aff      	subs	r2, #255	; 0xff
 800a9e2:	1812      	adds	r2, r2, r0
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800a9e4:	7818      	ldrb	r0, [r3, #0]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800a9e6:	9212      	str	r2, [sp, #72]	; 0x48
                RegionApplyCFList( MacCtx.NvmCtx->Region, &applyCFList );
 800a9e8:	f002 fab4 	bl	800cf54 <RegionApplyCFList>
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a9ec:	4b87      	ldr	r3, [pc, #540]	; (800ac0c <LoRaMacProcess+0x6e4>)
 800a9ee:	2102      	movs	r1, #2
 800a9f0:	58e2      	ldr	r2, [r4, r3]
 800a9f2:	23b2      	movs	r3, #178	; 0xb2
 800a9f4:	005b      	lsls	r3, r3, #1
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a9f6:	2001      	movs	r0, #1
                MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_OTAA;
 800a9f8:	54d1      	strb	r1, [r2, r3]
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a9fa:	f001 fdb7 	bl	800c56c <LoRaMacConfirmQueueIsCmdActive>
 800a9fe:	42a8      	cmp	r0, r5
 800aa00:	d003      	beq.n	800aa0a <LoRaMacProcess+0x4e2>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800aa02:	2101      	movs	r1, #1
 800aa04:	0028      	movs	r0, r5
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800aa06:	f001 fd6f 	bl	800c4e8 <LoRaMacConfirmQueueSetStatus>
    if( MacCtx.NodeAckRequested == true )
 800aa0a:	4c82      	ldr	r4, [pc, #520]	; (800ac14 <LoRaMacProcess+0x6ec>)
 800aa0c:	4b83      	ldr	r3, [pc, #524]	; (800ac1c <LoRaMacProcess+0x6f4>)
 800aa0e:	5ce3      	ldrb	r3, [r4, r3]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d100      	bne.n	800aa16 <LoRaMacProcess+0x4ee>
 800aa14:	e1b2      	b.n	800ad7c <LoRaMacProcess+0x854>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800aa16:	2388      	movs	r3, #136	; 0x88
 800aa18:	00db      	lsls	r3, r3, #3
 800aa1a:	5ce3      	ldrb	r3, [r4, r3]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <LoRaMacProcess+0x4fe>
            OnAckTimeoutTimerEvent( NULL );
 800aa20:	2000      	movs	r0, #0
 800aa22:	f7fe fda7 	bl	8009574 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800aa26:	2320      	movs	r3, #32
 800aa28:	5de2      	ldrb	r2, [r4, r7]
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	55e3      	strb	r3, [r4, r7]
    UpdateRxSlotIdleState( );
 800aa2e:	f7fe fd11 	bl	8009454 <UpdateRxSlotIdleState>
 800aa32:	e647      	b.n	800a6c4 <LoRaMacProcess+0x19c>
                    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = 1;
 800aa34:	2201      	movs	r2, #1
 800aa36:	e7be      	b.n	800a9b6 <LoRaMacProcess+0x48e>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800aa38:	2001      	movs	r0, #1
 800aa3a:	f001 fd97 	bl	800c56c <LoRaMacConfirmQueueIsCmdActive>
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	d0e3      	beq.n	800aa0a <LoRaMacProcess+0x4e2>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800aa42:	2101      	movs	r1, #1
 800aa44:	2007      	movs	r0, #7
 800aa46:	e7de      	b.n	800aa06 <LoRaMacProcess+0x4de>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800aa48:	2301      	movs	r3, #1
 800aa4a:	4a75      	ldr	r2, [pc, #468]	; (800ac20 <LoRaMacProcess+0x6f8>)
 800aa4c:	54a3      	strb	r3, [r4, r2]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800aa4e:	4c71      	ldr	r4, [pc, #452]	; (800ac14 <LoRaMacProcess+0x6ec>)
 800aa50:	4b6e      	ldr	r3, [pc, #440]	; (800ac0c <LoRaMacProcess+0x6e4>)
 800aa52:	a90e      	add	r1, sp, #56	; 0x38
 800aa54:	58e3      	ldr	r3, [r4, r3]
 800aa56:	001a      	movs	r2, r3
 800aa58:	32b9      	adds	r2, #185	; 0xb9
 800aa5a:	7812      	ldrb	r2, [r2, #0]
 800aa5c:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800aa5e:	2284      	movs	r2, #132	; 0x84
 800aa60:	00d2      	lsls	r2, r2, #3
 800aa62:	5ca2      	ldrb	r2, [r4, r2]
 800aa64:	704a      	strb	r2, [r1, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800aa66:	220d      	movs	r2, #13
 800aa68:	700a      	strb	r2, [r1, #0]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 800aa6a:	001a      	movs	r2, r3
 800aa6c:	32ca      	adds	r2, #202	; 0xca
 800aa6e:	7812      	ldrb	r2, [r2, #0]
 800aa70:	2a00      	cmp	r2, #0
 800aa72:	d001      	beq.n	800aa78 <LoRaMacProcess+0x550>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800aa74:	220e      	movs	r2, #14
 800aa76:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800aa78:	7818      	ldrb	r0, [r3, #0]
 800aa7a:	f002 fa3b 	bl	800cef4 <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800aa7e:	0032      	movs	r2, r6
 800aa80:	3a0d      	subs	r2, #13
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800aa82:	900c      	str	r0, [sp, #48]	; 0x30
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800aa84:	1c13      	adds	r3, r2, #0
 800aa86:	0412      	lsls	r2, r2, #16
 800aa88:	d500      	bpl.n	800aa8c <LoRaMacProcess+0x564>
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa8e:	b21b      	sxth	r3, r3
 800aa90:	b212      	sxth	r2, r2
 800aa92:	4293      	cmp	r3, r2
 800aa94:	dd00      	ble.n	800aa98 <LoRaMacProcess+0x570>
 800aa96:	e755      	b.n	800a944 <LoRaMacProcess+0x41c>
 800aa98:	2e0b      	cmp	r6, #11
 800aa9a:	d800      	bhi.n	800aa9e <LoRaMacProcess+0x576>
 800aa9c:	e752      	b.n	800a944 <LoRaMacProcess+0x41c>
            macMsgData.BufSize = size;
 800aa9e:	225c      	movs	r2, #92	; 0x5c
            macMsgData.Buffer = payload;
 800aaa0:	9b03      	ldr	r3, [sp, #12]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800aaa2:	a81e      	add	r0, sp, #120	; 0x78
            macMsgData.Buffer = payload;
 800aaa4:	931e      	str	r3, [sp, #120]	; 0x78
            macMsgData.BufSize = size;
 800aaa6:	ab08      	add	r3, sp, #32
 800aaa8:	189b      	adds	r3, r3, r2
 800aaaa:	701e      	strb	r6, [r3, #0]
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800aaac:	4b5d      	ldr	r3, [pc, #372]	; (800ac24 <LoRaMacProcess+0x6fc>)
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800aaae:	32a3      	adds	r2, #163	; 0xa3
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800aab0:	9327      	str	r3, [sp, #156]	; 0x9c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800aab2:	ab28      	add	r3, sp, #160	; 0xa0
 800aab4:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800aab6:	f002 f919 	bl	800ccec <LoRaMacParserData>
 800aaba:	9005      	str	r0, [sp, #20]
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d000      	beq.n	800aac2 <LoRaMacProcess+0x59a>
 800aac0:	e740      	b.n	800a944 <LoRaMacProcess+0x41c>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800aac2:	2264      	movs	r2, #100	; 0x64
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800aac4:	4b58      	ldr	r3, [pc, #352]	; (800ac28 <LoRaMacProcess+0x700>)
 800aac6:	9920      	ldr	r1, [sp, #128]	; 0x80
 800aac8:	50e1      	str	r1, [r4, r3]
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800aaca:	ab08      	add	r3, sp, #32
 800aacc:	189b      	adds	r3, r3, r2
 800aace:	781a      	ldrb	r2, [r3, #0]
 800aad0:	230f      	movs	r3, #15
 800aad2:	0010      	movs	r0, r2
 800aad4:	4018      	ands	r0, r3
 800aad6:	421a      	tst	r2, r3
 800aad8:	d005      	beq.n	800aae6 <LoRaMacProcess+0x5be>
 800aada:	334a      	adds	r3, #74	; 0x4a
 800aadc:	ac08      	add	r4, sp, #32
 800aade:	191b      	adds	r3, r3, r4
 800aae0:	7fdb      	ldrb	r3, [r3, #31]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d151      	bne.n	800ab8a <LoRaMacProcess+0x662>
    else if( macMsg->FRMPayloadSize == 0 )
 800aae6:	ab28      	add	r3, sp, #160	; 0xa0
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d04f      	beq.n	800ab8e <LoRaMacProcess+0x666>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d000      	beq.n	800aaf4 <LoRaMacProcess+0x5cc>
 800aaf2:	e727      	b.n	800a944 <LoRaMacProcess+0x41c>
 800aaf4:	2359      	movs	r3, #89	; 0x59
 800aaf6:	a808      	add	r0, sp, #32
 800aaf8:	181b      	adds	r3, r3, r0
 800aafa:	7fdb      	ldrb	r3, [r3, #31]
        *fType = FRAME_TYPE_D;
 800aafc:	1e58      	subs	r0, r3, #1
 800aafe:	4183      	sbcs	r3, r0
 800ab00:	3302      	adds	r3, #2
        *fType = FRAME_TYPE_B;
 800ab02:	9303      	str	r3, [sp, #12]
            downLinkCounter = 0;
 800ab04:	2300      	movs	r3, #0
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ab06:	4c43      	ldr	r4, [pc, #268]	; (800ac14 <LoRaMacProcess+0x6ec>)
            downLinkCounter = 0;
 800ab08:	930d      	str	r3, [sp, #52]	; 0x34
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ab0a:	4b40      	ldr	r3, [pc, #256]	; (800ac0c <LoRaMacProcess+0x6e4>)
 800ab0c:	58e3      	ldr	r3, [r4, r3]
 800ab0e:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ab10:	4281      	cmp	r1, r0
 800ab12:	d13e      	bne.n	800ab92 <LoRaMacProcess+0x66a>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800ab14:	0019      	movs	r1, r3
 800ab16:	3152      	adds	r1, #82	; 0x52
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800ab18:	7809      	ldrb	r1, [r1, #0]
 800ab1a:	2501      	movs	r5, #1
 800ab1c:	2900      	cmp	r1, #0
 800ab1e:	d018      	beq.n	800ab52 <LoRaMacProcess+0x62a>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800ab20:	0019      	movs	r1, r3
 800ab22:	3153      	adds	r1, #83	; 0x53
 800ab24:	780d      	ldrb	r5, [r1, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800ab26:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ab28:	6809      	ldr	r1, [r1, #0]
 800ab2a:	910d      	str	r1, [sp, #52]	; 0x34
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800ab2c:	0019      	movs	r1, r3
 800ab2e:	317c      	adds	r1, #124	; 0x7c
 800ab30:	7809      	ldrb	r1, [r1, #0]
 800ab32:	2902      	cmp	r1, #2
 800ab34:	d102      	bne.n	800ab3c <LoRaMacProcess+0x614>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800ab36:	4e36      	ldr	r6, [pc, #216]	; (800ac10 <LoRaMacProcess+0x6e8>)
 800ab38:	3101      	adds	r1, #1
 800ab3a:	55a1      	strb	r1, [r4, r6]
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800ab3c:	9903      	ldr	r1, [sp, #12]
 800ab3e:	2903      	cmp	r1, #3
 800ab40:	d000      	beq.n	800ab44 <LoRaMacProcess+0x61c>
 800ab42:	e6ff      	b.n	800a944 <LoRaMacProcess+0x41c>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800ab44:	2160      	movs	r1, #96	; 0x60
 800ab46:	420a      	tst	r2, r1
 800ab48:	d000      	beq.n	800ab4c <LoRaMacProcess+0x624>
 800ab4a:	e6fb      	b.n	800a944 <LoRaMacProcess+0x41c>
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	9008      	str	r0, [sp, #32]
 800ab50:	9205      	str	r2, [sp, #20]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800ab52:	2215      	movs	r2, #21
 800ab54:	a90e      	add	r1, sp, #56	; 0x38
 800ab56:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab58:	7818      	ldrb	r0, [r3, #0]
 800ab5a:	f002 f9cb 	bl	800cef4 <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800ab5e:	4a2b      	ldr	r2, [pc, #172]	; (800ac0c <LoRaMacProcess+0x6e4>)
 800ab60:	4b2c      	ldr	r3, [pc, #176]	; (800ac14 <LoRaMacProcess+0x6ec>)
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ab62:	900c      	str	r0, [sp, #48]	; 0x30
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800ab64:	589b      	ldr	r3, [r3, r2]
 800ab66:	9309      	str	r3, [sp, #36]	; 0x24
 800ab68:	23b1      	movs	r3, #177	; 0xb1
 800ab6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab6c:	005b      	lsls	r3, r3, #1
 800ab6e:	5cd4      	ldrb	r4, [r2, r3]
    switch( addrID )
 800ab70:	2d00      	cmp	r5, #0
 800ab72:	d010      	beq.n	800ab96 <LoRaMacProcess+0x66e>
 800ab74:	2d01      	cmp	r5, #1
 800ab76:	d145      	bne.n	800ac04 <LoRaMacProcess+0x6dc>
            if( lrWanVersion.Fields.Minor == 1 )
 800ab78:	2c01      	cmp	r4, #1
 800ab7a:	d13a      	bne.n	800abf2 <LoRaMacProcess+0x6ca>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800ab7c:	9b03      	ldr	r3, [sp, #12]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <LoRaMacProcess+0x65e>
 800ab82:	2b03      	cmp	r3, #3
 800ab84:	d108      	bne.n	800ab98 <LoRaMacProcess+0x670>
                    *fCntID = A_FCNT_DOWN;
 800ab86:	2402      	movs	r4, #2
 800ab88:	e006      	b.n	800ab98 <LoRaMacProcess+0x670>
        *fType = FRAME_TYPE_A;
 800ab8a:	9b05      	ldr	r3, [sp, #20]
 800ab8c:	e7b9      	b.n	800ab02 <LoRaMacProcess+0x5da>
        *fType = FRAME_TYPE_B;
 800ab8e:	2301      	movs	r3, #1
 800ab90:	e7b7      	b.n	800ab02 <LoRaMacProcess+0x5da>
 800ab92:	2501      	movs	r5, #1
 800ab94:	e7dd      	b.n	800ab52 <LoRaMacProcess+0x62a>
    switch( addrID )
 800ab96:	2404      	movs	r4, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800ab98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab9a:	ae1e      	add	r6, sp, #120	; 0x78
 800ab9c:	b299      	uxth	r1, r3
 800ab9e:	0020      	movs	r0, r4
 800aba0:	89f2      	ldrh	r2, [r6, #14]
 800aba2:	ab0d      	add	r3, sp, #52	; 0x34
 800aba4:	f001 fe7e 	bl	800c8a4 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800aba8:	2800      	cmp	r0, #0
 800abaa:	d03f      	beq.n	800ac2c <LoRaMacProcess+0x704>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800abac:	2807      	cmp	r0, #7
 800abae:	d122      	bne.n	800abf6 <LoRaMacProcess+0x6ce>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800abb0:	2308      	movs	r3, #8
 800abb2:	4a18      	ldr	r2, [pc, #96]	; (800ac14 <LoRaMacProcess+0x6ec>)
 800abb4:	4918      	ldr	r1, [pc, #96]	; (800ac18 <LoRaMacProcess+0x6f0>)
 800abb6:	5453      	strb	r3, [r2, r1]
                    if( ( MacCtx.NvmCtx->Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( MacCtx.NvmCtx->LastRxMic == macMsgData.MIC ) )
 800abb8:	0013      	movs	r3, r2
 800abba:	4a14      	ldr	r2, [pc, #80]	; (800ac0c <LoRaMacProcess+0x6e4>)
 800abbc:	589b      	ldr	r3, [r3, r2]
 800abbe:	22b1      	movs	r2, #177	; 0xb1
 800abc0:	0052      	lsls	r2, r2, #1
 800abc2:	5c9a      	ldrb	r2, [r3, r2]
 800abc4:	2a00      	cmp	r2, #0
 800abc6:	d10e      	bne.n	800abe6 <LoRaMacProcess+0x6be>
 800abc8:	9907      	ldr	r1, [sp, #28]
 800abca:	321f      	adds	r2, #31
 800abcc:	4391      	bics	r1, r2
 800abce:	29a0      	cmp	r1, #160	; 0xa0
 800abd0:	d109      	bne.n	800abe6 <LoRaMacProcess+0x6be>
 800abd2:	001a      	movs	r2, r3
 800abd4:	32fc      	adds	r2, #252	; 0xfc
 800abd6:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
 800abd8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800abda:	4291      	cmp	r1, r2
 800abdc:	d103      	bne.n	800abe6 <LoRaMacProcess+0x6be>
                        MacCtx.NvmCtx->SrvAckRequested = true;
 800abde:	224c      	movs	r2, #76	; 0x4c
 800abe0:	2101      	movs	r1, #1
 800abe2:	32ff      	adds	r2, #255	; 0xff
 800abe4:	5499      	strb	r1, [r3, r2]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800abe6:	2386      	movs	r3, #134	; 0x86
 800abe8:	4a0a      	ldr	r2, [pc, #40]	; (800ac14 <LoRaMacProcess+0x6ec>)
 800abea:	990d      	ldr	r1, [sp, #52]	; 0x34
 800abec:	00db      	lsls	r3, r3, #3
 800abee:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800abf0:	e6ac      	b.n	800a94c <LoRaMacProcess+0x424>
                *fCntID = FCNT_DOWN;
 800abf2:	2403      	movs	r4, #3
 800abf4:	e7d0      	b.n	800ab98 <LoRaMacProcess+0x670>
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800abf6:	2808      	cmp	r0, #8
 800abf8:	d104      	bne.n	800ac04 <LoRaMacProcess+0x6dc>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800abfa:	220a      	movs	r2, #10
 800abfc:	4b05      	ldr	r3, [pc, #20]	; (800ac14 <LoRaMacProcess+0x6ec>)
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800abfe:	4906      	ldr	r1, [pc, #24]	; (800ac18 <LoRaMacProcess+0x6f0>)
 800ac00:	545a      	strb	r2, [r3, r1]
 800ac02:	e7f0      	b.n	800abe6 <LoRaMacProcess+0x6be>
 800ac04:	2201      	movs	r2, #1
 800ac06:	4b03      	ldr	r3, [pc, #12]	; (800ac14 <LoRaMacProcess+0x6ec>)
 800ac08:	e7f9      	b.n	800abfe <LoRaMacProcess+0x6d6>
 800ac0a:	46c0      	nop			; (mov r8, r8)
 800ac0c:	00000484 	.word	0x00000484
 800ac10:	0000042d 	.word	0x0000042d
 800ac14:	2000071c 	.word	0x2000071c
 800ac18:	0000041d 	.word	0x0000041d
 800ac1c:	00000414 	.word	0x00000414
 800ac20:	0000041c 	.word	0x0000041c
 800ac24:	20000954 	.word	0x20000954
 800ac28:	00000434 	.word	0x00000434
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800ac2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac2e:	0022      	movs	r2, r4
 800ac30:	0028      	movs	r0, r5
 800ac32:	9908      	ldr	r1, [sp, #32]
 800ac34:	9600      	str	r6, [sp, #0]
 800ac36:	f001 ff0f 	bl	800ca58 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800ac3a:	4ba6      	ldr	r3, [pc, #664]	; (800aed4 <LoRaMacProcess+0x9ac>)
 800ac3c:	2800      	cmp	r0, #0
 800ac3e:	d006      	beq.n	800ac4e <LoRaMacProcess+0x726>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800ac40:	3802      	subs	r0, #2
 800ac42:	1e42      	subs	r2, r0, #1
 800ac44:	4190      	sbcs	r0, r2
 800ac46:	4aa4      	ldr	r2, [pc, #656]	; (800aed8 <LoRaMacProcess+0x9b0>)
 800ac48:	300b      	adds	r0, #11
 800ac4a:	5498      	strb	r0, [r3, r2]
 800ac4c:	e67e      	b.n	800a94c <LoRaMacProcess+0x424>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ac4e:	4aa2      	ldr	r2, [pc, #648]	; (800aed8 <LoRaMacProcess+0x9b0>)
            MacCtx.McpsIndication.Multicast = multicast;
 800ac50:	9905      	ldr	r1, [sp, #20]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ac52:	5498      	strb	r0, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 800ac54:	4aa1      	ldr	r2, [pc, #644]	; (800aedc <LoRaMacProcess+0x9b4>)
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800ac56:	4ca2      	ldr	r4, [pc, #648]	; (800aee0 <LoRaMacProcess+0x9b8>)
            MacCtx.McpsIndication.Multicast = multicast;
 800ac58:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800ac5a:	7b32      	ldrb	r2, [r6, #12]
 800ac5c:	06d1      	lsls	r1, r2, #27
 800ac5e:	0fc9      	lsrs	r1, r1, #31
 800ac60:	5519      	strb	r1, [r3, r4]
            MacCtx.McpsIndication.Buffer = NULL;
 800ac62:	49a0      	ldr	r1, [pc, #640]	; (800aee4 <LoRaMacProcess+0x9bc>)
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ac64:	9c0d      	ldr	r4, [sp, #52]	; 0x34
            MacCtx.McpsIndication.Buffer = NULL;
 800ac66:	5058      	str	r0, [r3, r1]
            MacCtx.McpsIndication.BufferSize = 0;
 800ac68:	3104      	adds	r1, #4
 800ac6a:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800ac6c:	3108      	adds	r1, #8
 800ac6e:	505c      	str	r4, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ac70:	0692      	lsls	r2, r2, #26
 800ac72:	499d      	ldr	r1, [pc, #628]	; (800aee8 <LoRaMacProcess+0x9c0>)
 800ac74:	0fd2      	lsrs	r2, r2, #31
 800ac76:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800ac78:	499c      	ldr	r1, [pc, #624]	; (800aeec <LoRaMacProcess+0x9c4>)
 800ac7a:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800ac7c:	3103      	adds	r1, #3
 800ac7e:	545a      	strb	r2, [r3, r1]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800ac80:	4a9b      	ldr	r2, [pc, #620]	; (800aef0 <LoRaMacProcess+0x9c8>)
 800ac82:	5c9a      	ldrb	r2, [r3, r2]
 800ac84:	2a01      	cmp	r2, #1
 800ac86:	d803      	bhi.n	800ac90 <LoRaMacProcess+0x768>
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800ac88:	499a      	ldr	r1, [pc, #616]	; (800aef4 <LoRaMacProcess+0x9cc>)
 800ac8a:	585b      	ldr	r3, [r3, r1]
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	67d8      	str	r0, [r3, #124]	; 0x7c
            if( multicast == 1 )
 800ac90:	9b05      	ldr	r3, [sp, #20]
 800ac92:	4c90      	ldr	r4, [pc, #576]	; (800aed4 <LoRaMacProcess+0x9ac>)
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d130      	bne.n	800acfa <LoRaMacProcess+0x7d2>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800ac98:	3301      	adds	r3, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ac9a:	4997      	ldr	r1, [pc, #604]	; (800aef8 <LoRaMacProcess+0x9d0>)
 800ac9c:	5463      	strb	r3, [r4, r1]
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800ac9e:	4b97      	ldr	r3, [pc, #604]	; (800aefc <LoRaMacProcess+0x9d4>)
 800aca0:	ad1e      	add	r5, sp, #120	; 0x78
 800aca2:	5ce1      	ldrb	r1, [r4, r3]
 800aca4:	7b2b      	ldrb	r3, [r5, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800aca6:	2a01      	cmp	r2, #1
 800aca8:	d805      	bhi.n	800acb6 <LoRaMacProcess+0x78e>
        if( request == MCPS_CONFIRMED )
 800acaa:	2901      	cmp	r1, #1
 800acac:	d101      	bne.n	800acb2 <LoRaMacProcess+0x78a>
            if( fCtrl.Bits.Ack == 1 )
 800acae:	069b      	lsls	r3, r3, #26
 800acb0:	d501      	bpl.n	800acb6 <LoRaMacProcess+0x78e>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800acb2:	f001 fb23 	bl	800c2fc <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 800acb6:	9b03      	ldr	r3, [sp, #12]
 800acb8:	4e91      	ldr	r6, [pc, #580]	; (800af00 <LoRaMacProcess+0x9d8>)
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d038      	beq.n	800ad30 <LoRaMacProcess+0x808>
 800acbe:	2b03      	cmp	r3, #3
 800acc0:	d008      	beq.n	800acd4 <LoRaMacProcess+0x7ac>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800acc2:	7b29      	ldrb	r1, [r5, #12]
 800acc4:	9a04      	ldr	r2, [sp, #16]
 800acc6:	0709      	lsls	r1, r1, #28
 800acc8:	0f09      	lsrs	r1, r1, #28
 800acca:	a822      	add	r0, sp, #136	; 0x88
 800accc:	2b01      	cmp	r3, #1
 800acce:	d033      	beq.n	800ad38 <LoRaMacProcess+0x810>
 800acd0:	f7ff f95c 	bl	8009f8c <ProcessMacCommands.isra.0.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800acd4:	2278      	movs	r2, #120	; 0x78
 800acd6:	ab08      	add	r3, sp, #32
 800acd8:	189b      	adds	r3, r3, r2
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	55a3      	strb	r3, [r4, r6]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800acde:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ace0:	9303      	str	r3, [sp, #12]
 800ace2:	9a03      	ldr	r2, [sp, #12]
 800ace4:	4b7f      	ldr	r3, [pc, #508]	; (800aee4 <LoRaMacProcess+0x9bc>)
 800ace6:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800ace8:	ab28      	add	r3, sp, #160	; 0xa0
 800acea:	781a      	ldrb	r2, [r3, #0]
 800acec:	2385      	movs	r3, #133	; 0x85
 800acee:	00db      	lsls	r3, r3, #3
 800acf0:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 800acf2:	2201      	movs	r2, #1
 800acf4:	4b83      	ldr	r3, [pc, #524]	; (800af04 <LoRaMacProcess+0x9dc>)
 800acf6:	54e2      	strb	r2, [r4, r3]
                    break;
 800acf8:	e025      	b.n	800ad46 <LoRaMacProcess+0x81e>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800acfa:	211f      	movs	r1, #31
 800acfc:	9807      	ldr	r0, [sp, #28]
 800acfe:	4b7d      	ldr	r3, [pc, #500]	; (800aef4 <LoRaMacProcess+0x9cc>)
 800ad00:	4388      	bics	r0, r1
 800ad02:	0001      	movs	r1, r0
 800ad04:	204c      	movs	r0, #76	; 0x4c
 800ad06:	58e3      	ldr	r3, [r4, r3]
 800ad08:	30ff      	adds	r0, #255	; 0xff
 800ad0a:	29a0      	cmp	r1, #160	; 0xa0
 800ad0c:	d10b      	bne.n	800ad26 <LoRaMacProcess+0x7fe>
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800ad0e:	399f      	subs	r1, #159	; 0x9f
 800ad10:	5419      	strb	r1, [r3, r0]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800ad12:	3162      	adds	r1, #98	; 0x62
 800ad14:	31ff      	adds	r1, #255	; 0xff
 800ad16:	5c59      	ldrb	r1, [r3, r1]
 800ad18:	2900      	cmp	r1, #0
 800ad1a:	d102      	bne.n	800ad22 <LoRaMacProcess+0x7fa>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800ad1c:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800ad1e:	33fc      	adds	r3, #252	; 0xfc
 800ad20:	66d9      	str	r1, [r3, #108]	; 0x6c
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800ad22:	2301      	movs	r3, #1
 800ad24:	e7b9      	b.n	800ac9a <LoRaMacProcess+0x772>
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800ad26:	2100      	movs	r1, #0
 800ad28:	5419      	strb	r1, [r3, r0]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800ad2a:	4b73      	ldr	r3, [pc, #460]	; (800aef8 <LoRaMacProcess+0x9d0>)
 800ad2c:	54e1      	strb	r1, [r4, r3]
 800ad2e:	e7b6      	b.n	800ac9e <LoRaMacProcess+0x776>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800ad30:	ab28      	add	r3, sp, #160	; 0xa0
 800ad32:	7819      	ldrb	r1, [r3, #0]
 800ad34:	9a04      	ldr	r2, [sp, #16]
 800ad36:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800ad38:	f7ff f928 	bl	8009f8c <ProcessMacCommands.isra.0.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800ad3c:	2278      	movs	r2, #120	; 0x78
 800ad3e:	ab08      	add	r3, sp, #32
 800ad40:	189b      	adds	r3, r3, r2
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	55a3      	strb	r3, [r4, r6]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800ad46:	2302      	movs	r3, #2
 800ad48:	5de2      	ldrb	r2, [r4, r7]
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	55e3      	strb	r3, [r4, r7]
            break;
 800ad4e:	e65c      	b.n	800aa0a <LoRaMacProcess+0x4e2>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800ad50:	1e75      	subs	r5, r6, #1
 800ad52:	9903      	ldr	r1, [sp, #12]
 800ad54:	4e6c      	ldr	r6, [pc, #432]	; (800af08 <LoRaMacProcess+0x9e0>)
 800ad56:	b2aa      	uxth	r2, r5
 800ad58:	0030      	movs	r0, r6
 800ad5a:	3101      	adds	r1, #1
 800ad5c:	f003 f9dc 	bl	800e118 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800ad60:	2303      	movs	r3, #3
 800ad62:	4a65      	ldr	r2, [pc, #404]	; (800aef8 <LoRaMacProcess+0x9d0>)
 800ad64:	52a3      	strh	r3, [r4, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800ad66:	4b5f      	ldr	r3, [pc, #380]	; (800aee4 <LoRaMacProcess+0x9bc>)
 800ad68:	50e6      	str	r6, [r4, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800ad6a:	3304      	adds	r3, #4
 800ad6c:	54e5      	strb	r5, [r4, r3]
 800ad6e:	e7ea      	b.n	800ad46 <LoRaMacProcess+0x81e>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800ad70:	2201      	movs	r2, #1
 800ad72:	4b59      	ldr	r3, [pc, #356]	; (800aed8 <LoRaMacProcess+0x9b0>)
 800ad74:	54e2      	strb	r2, [r4, r3]
            PrepareRxDoneAbort( );
 800ad76:	f7fe fc2b 	bl	80095d0 <PrepareRxDoneAbort>
            break;
 800ad7a:	e646      	b.n	800aa0a <LoRaMacProcess+0x4e2>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800ad7c:	4b5d      	ldr	r3, [pc, #372]	; (800aef4 <LoRaMacProcess+0x9cc>)
 800ad7e:	58e3      	ldr	r3, [r4, r3]
 800ad80:	337c      	adds	r3, #124	; 0x7c
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	2b02      	cmp	r3, #2
 800ad86:	d000      	beq.n	800ad8a <LoRaMacProcess+0x862>
 800ad88:	e64d      	b.n	800aa26 <LoRaMacProcess+0x4fe>
 800ad8a:	e649      	b.n	800aa20 <LoRaMacProcess+0x4f8>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ad8c:	5de3      	ldrb	r3, [r4, r7]
 800ad8e:	075b      	lsls	r3, r3, #29
 800ad90:	d512      	bpl.n	800adb8 <LoRaMacProcess+0x890>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ad92:	2001      	movs	r0, #1
 800ad94:	25d0      	movs	r5, #208	; 0xd0
 800ad96:	f001 fbe9 	bl	800c56c <LoRaMacConfirmQueueIsCmdActive>
 800ad9a:	00ad      	lsls	r5, r5, #2
 800ad9c:	2800      	cmp	r0, #0
 800ad9e:	d035      	beq.n	800ae0c <LoRaMacProcess+0x8e4>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800ada0:	2001      	movs	r0, #1
 800ada2:	f001 fbb5 	bl	800c510 <LoRaMacConfirmQueueGetStatus>
 800ada6:	2800      	cmp	r0, #0
 800ada8:	d102      	bne.n	800adb0 <LoRaMacProcess+0x888>
                MacCtx.ChannelsNbTransCounter = 0;
 800adaa:	2382      	movs	r3, #130	; 0x82
 800adac:	00db      	lsls	r3, r3, #3
 800adae:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800adb0:	2302      	movs	r3, #2
 800adb2:	5962      	ldr	r2, [r4, r5]
 800adb4:	439a      	bics	r2, r3
 800adb6:	5162      	str	r2, [r4, r5]
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800adb8:	5de1      	ldrb	r1, [r4, r7]
 800adba:	07cb      	lsls	r3, r1, #31
 800adbc:	d400      	bmi.n	800adc0 <LoRaMacProcess+0x898>
 800adbe:	e4d8      	b.n	800a772 <LoRaMacProcess+0x24a>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800adc0:	4b4e      	ldr	r3, [pc, #312]	; (800aefc <LoRaMacProcess+0x9d4>)
 800adc2:	5ce3      	ldrb	r3, [r4, r3]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d001      	beq.n	800adcc <LoRaMacProcess+0x8a4>
 800adc8:	2b03      	cmp	r3, #3
 800adca:	d12a      	bne.n	800ae22 <LoRaMacProcess+0x8fa>
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800adcc:	4b49      	ldr	r3, [pc, #292]	; (800aef4 <LoRaMacProcess+0x9cc>)
    if( MacCtx.ChannelsNbTransCounter >=
 800adce:	2082      	movs	r0, #130	; 0x82
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800add0:	58e3      	ldr	r3, [r4, r3]
    if( MacCtx.ChannelsNbTransCounter >=
 800add2:	00c0      	lsls	r0, r0, #3
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800add4:	001a      	movs	r2, r3
 800add6:	32a4      	adds	r2, #164	; 0xa4
    if( MacCtx.ChannelsNbTransCounter >=
 800add8:	5c20      	ldrb	r0, [r4, r0]
 800adda:	7812      	ldrb	r2, [r2, #0]
 800addc:	4290      	cmp	r0, r2
 800adde:	d209      	bcs.n	800adf4 <LoRaMacProcess+0x8cc>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ade0:	078a      	lsls	r2, r1, #30
 800ade2:	d554      	bpl.n	800ae8e <LoRaMacProcess+0x966>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800ade4:	337c      	adds	r3, #124	; 0x7c
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d003      	beq.n	800adf4 <LoRaMacProcess+0x8cc>
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 800adec:	4b40      	ldr	r3, [pc, #256]	; (800aef0 <LoRaMacProcess+0x9c8>)
 800adee:	5ce3      	ldrb	r3, [r4, r3]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d14c      	bne.n	800ae8e <LoRaMacProcess+0x966>
            TimerStop( &MacCtx.TxDelayedTimer );
 800adf4:	4845      	ldr	r0, [pc, #276]	; (800af0c <LoRaMacProcess+0x9e4>)
 800adf6:	f004 ff43 	bl	800fc80 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800adfa:	22d0      	movs	r2, #208	; 0xd0
 800adfc:	2320      	movs	r3, #32
 800adfe:	0092      	lsls	r2, r2, #2
 800ae00:	58a1      	ldr	r1, [r4, r2]
 800ae02:	4399      	bics	r1, r3
 800ae04:	50a1      	str	r1, [r4, r2]
            StopRetransmission( );
 800ae06:	f7fe fb35 	bl	8009474 <StopRetransmission>
 800ae0a:	e4b2      	b.n	800a772 <LoRaMacProcess+0x24a>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800ae0c:	2005      	movs	r0, #5
 800ae0e:	f001 fbad 	bl	800c56c <LoRaMacConfirmQueueIsCmdActive>
 800ae12:	2800      	cmp	r0, #0
 800ae14:	d1cc      	bne.n	800adb0 <LoRaMacProcess+0x888>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800ae16:	2006      	movs	r0, #6
 800ae18:	f001 fba8 	bl	800c56c <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800ae1c:	2800      	cmp	r0, #0
 800ae1e:	d1c7      	bne.n	800adb0 <LoRaMacProcess+0x888>
 800ae20:	e7ca      	b.n	800adb8 <LoRaMacProcess+0x890>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d133      	bne.n	800ae8e <LoRaMacProcess+0x966>
            if( MacCtx.AckTimeoutRetry == true )
 800ae26:	4b3a      	ldr	r3, [pc, #232]	; (800af10 <LoRaMacProcess+0x9e8>)
 800ae28:	5ce2      	ldrb	r2, [r4, r3]
 800ae2a:	2a00      	cmp	r2, #0
 800ae2c:	d100      	bne.n	800ae30 <LoRaMacProcess+0x908>
 800ae2e:	e4a0      	b.n	800a772 <LoRaMacProcess+0x24a>
    if( MacCtx.AckTimeoutRetriesCounter >=
 800ae30:	4d38      	ldr	r5, [pc, #224]	; (800af14 <LoRaMacProcess+0x9ec>)
        MacCtx.AckTimeoutRetries )
 800ae32:	4839      	ldr	r0, [pc, #228]	; (800af18 <LoRaMacProcess+0x9f0>)
    if( MacCtx.AckTimeoutRetriesCounter >=
 800ae34:	5d63      	ldrb	r3, [r4, r5]
        MacCtx.AckTimeoutRetries )
 800ae36:	5c20      	ldrb	r0, [r4, r0]
 800ae38:	4684      	mov	ip, r0
    if( MacCtx.AckTimeoutRetriesCounter >=
 800ae3a:	4283      	cmp	r3, r0
 800ae3c:	d205      	bcs.n	800ae4a <LoRaMacProcess+0x922>
    return false;
 800ae3e:	2200      	movs	r2, #0
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800ae40:	0789      	lsls	r1, r1, #30
 800ae42:	d502      	bpl.n	800ae4a <LoRaMacProcess+0x922>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800ae44:	2288      	movs	r2, #136	; 0x88
 800ae46:	00d2      	lsls	r2, r2, #3
 800ae48:	5ca2      	ldrb	r2, [r4, r2]
                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800ae4a:	21b1      	movs	r1, #177	; 0xb1
 800ae4c:	4e29      	ldr	r6, [pc, #164]	; (800aef4 <LoRaMacProcess+0x9cc>)
 800ae4e:	0049      	lsls	r1, r1, #1
 800ae50:	59a0      	ldr	r0, [r4, r6]
 800ae52:	5c41      	ldrb	r1, [r0, r1]
 800ae54:	2900      	cmp	r1, #0
 800ae56:	d13a      	bne.n	800aece <LoRaMacProcess+0x9a6>
                    if( stopRetransmission == false )
 800ae58:	2a00      	cmp	r2, #0
 800ae5a:	d122      	bne.n	800aea2 <LoRaMacProcess+0x97a>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800ae5c:	4563      	cmp	r3, ip
 800ae5e:	d216      	bcs.n	800ae8e <LoRaMacProcess+0x966>
        MacCtx.AckTimeoutRetriesCounter++;
 800ae60:	3301      	adds	r3, #1
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	5563      	strb	r3, [r4, r5]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800ae66:	07db      	lsls	r3, r3, #31
 800ae68:	d511      	bpl.n	800ae8e <LoRaMacProcess+0x966>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800ae6a:	2322      	movs	r3, #34	; 0x22
 800ae6c:	a91e      	add	r1, sp, #120	; 0x78
 800ae6e:	700b      	strb	r3, [r1, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ae70:	0003      	movs	r3, r0
 800ae72:	33b8      	adds	r3, #184	; 0xb8
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	708b      	strb	r3, [r1, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800ae78:	0003      	movs	r3, r0
 800ae7a:	3385      	adds	r3, #133	; 0x85
 800ae7c:	781b      	ldrb	r3, [r3, #0]
 800ae7e:	704b      	strb	r3, [r1, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ae80:	7800      	ldrb	r0, [r0, #0]
 800ae82:	f002 f837 	bl	800cef4 <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800ae86:	59a3      	ldr	r3, [r4, r6]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ae88:	9014      	str	r0, [sp, #80]	; 0x50
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800ae8a:	3385      	adds	r3, #133	; 0x85
 800ae8c:	7018      	strb	r0, [r3, #0]
            MacCtx.MacFlags.Bits.MacDone = 0;
 800ae8e:	2220      	movs	r2, #32
            MacCtx.AckTimeoutRetry = false;
 800ae90:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 800ae92:	5de3      	ldrb	r3, [r4, r7]
 800ae94:	4393      	bics	r3, r2
 800ae96:	55e3      	strb	r3, [r4, r7]
            MacCtx.AckTimeoutRetry = false;
 800ae98:	4b1d      	ldr	r3, [pc, #116]	; (800af10 <LoRaMacProcess+0x9e8>)
 800ae9a:	54e0      	strb	r0, [r4, r3]
            OnTxDelayedTimerEvent( NULL );
 800ae9c:	f7fe ff04 	bl	8009ca8 <OnTxDelayedTimerEvent>
 800aea0:	e467      	b.n	800a772 <LoRaMacProcess+0x24a>
    if( MacCtx.McpsConfirm.AckReceived == false )
 800aea2:	2388      	movs	r3, #136	; 0x88
 800aea4:	00db      	lsls	r3, r3, #3
 800aea6:	5ce6      	ldrb	r6, [r4, r3]
 800aea8:	2e00      	cmp	r6, #0
 800aeaa:	d10c      	bne.n	800aec6 <LoRaMacProcess+0x99e>
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800aeac:	2302      	movs	r3, #2
 800aeae:	a91e      	add	r1, sp, #120	; 0x78
 800aeb0:	710b      	strb	r3, [r1, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800aeb2:	4b1a      	ldr	r3, [pc, #104]	; (800af1c <LoRaMacProcess+0x9f4>)
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800aeb4:	7800      	ldrb	r0, [r0, #0]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	931e      	str	r3, [sp, #120]	; 0x78
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800aeba:	f002 f82e 	bl	800cf1a <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 800aebe:	4b18      	ldr	r3, [pc, #96]	; (800af20 <LoRaMacProcess+0x9f8>)
 800aec0:	54e6      	strb	r6, [r4, r3]
        MacCtx.McpsConfirm.AckReceived = false;
 800aec2:	332c      	adds	r3, #44	; 0x2c
 800aec4:	54e6      	strb	r6, [r4, r3]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800aec6:	5d62      	ldrb	r2, [r4, r5]
 800aec8:	4b16      	ldr	r3, [pc, #88]	; (800af24 <LoRaMacProcess+0x9fc>)
 800aeca:	54e2      	strb	r2, [r4, r3]
        if( stopRetransmission == true )
 800aecc:	e792      	b.n	800adf4 <LoRaMacProcess+0x8cc>
 800aece:	2a00      	cmp	r2, #0
 800aed0:	d0dd      	beq.n	800ae8e <LoRaMacProcess+0x966>
 800aed2:	e78f      	b.n	800adf4 <LoRaMacProcess+0x8cc>
 800aed4:	2000071c 	.word	0x2000071c
 800aed8:	0000041d 	.word	0x0000041d
 800aedc:	0000041e 	.word	0x0000041e
 800aee0:	00000421 	.word	0x00000421
 800aee4:	00000424 	.word	0x00000424
 800aee8:	0000042e 	.word	0x0000042e
 800aeec:	0000043d 	.word	0x0000043d
 800aef0:	0000042d 	.word	0x0000042d
 800aef4:	00000484 	.word	0x00000484
 800aef8:	0000041c 	.word	0x0000041c
 800aefc:	0000043c 	.word	0x0000043c
 800af00:	0000041f 	.word	0x0000041f
 800af04:	00000429 	.word	0x00000429
 800af08:	20000954 	.word	0x20000954
 800af0c:	20000a84 	.word	0x20000a84
 800af10:	00000413 	.word	0x00000413
 800af14:	00000412 	.word	0x00000412
 800af18:	00000411 	.word	0x00000411
 800af1c:	20000574 	.word	0x20000574
 800af20:	00000414 	.word	0x00000414
 800af24:	00000441 	.word	0x00000441

0800af28 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800af28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af2a:	b097      	sub	sp, #92	; 0x5c
 800af2c:	0007      	movs	r7, r0
    LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800af2e:	2503      	movs	r5, #3
{
 800af30:	9102      	str	r1, [sp, #8]
 800af32:	9203      	str	r2, [sp, #12]
    if( ( primitives == NULL ) ||
 800af34:	2800      	cmp	r0, #0
 800af36:	d100      	bne.n	800af3a <LoRaMacInitialization+0x12>
 800af38:	e170      	b.n	800b21c <LoRaMacInitialization+0x2f4>
 800af3a:	2900      	cmp	r1, #0
 800af3c:	d100      	bne.n	800af40 <LoRaMacInitialization+0x18>
 800af3e:	e16d      	b.n	800b21c <LoRaMacInitialization+0x2f4>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800af40:	6803      	ldr	r3, [r0, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d100      	bne.n	800af48 <LoRaMacInitialization+0x20>
 800af46:	e169      	b.n	800b21c <LoRaMacInitialization+0x2f4>
 800af48:	6843      	ldr	r3, [r0, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d100      	bne.n	800af50 <LoRaMacInitialization+0x28>
 800af4e:	e165      	b.n	800b21c <LoRaMacInitialization+0x2f4>
        ( primitives->MacMcpsIndication == NULL ) ||
 800af50:	6883      	ldr	r3, [r0, #8]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d100      	bne.n	800af58 <LoRaMacInitialization+0x30>
 800af56:	e161      	b.n	800b21c <LoRaMacInitialization+0x2f4>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800af58:	68c3      	ldr	r3, [r0, #12]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d100      	bne.n	800af60 <LoRaMacInitialization+0x38>
 800af5e:	e15d      	b.n	800b21c <LoRaMacInitialization+0x2f4>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800af60:	0010      	movs	r0, r2
 800af62:	f001 ffc2 	bl	800ceea <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800af66:	3506      	adds	r5, #6
    if( RegionIsActive( region ) == false )
 800af68:	2800      	cmp	r0, #0
 800af6a:	d100      	bne.n	800af6e <LoRaMacInitialization+0x46>
 800af6c:	e156      	b.n	800b21c <LoRaMacInitialization+0x2f4>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 800af6e:	0038      	movs	r0, r7
 800af70:	49cc      	ldr	r1, [pc, #816]	; (800b2a4 <LoRaMacInitialization+0x37c>)
 800af72:	f001 fa57 	bl	800c424 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 800af76:	22b6      	movs	r2, #182	; 0xb6
 800af78:	4dcb      	ldr	r5, [pc, #812]	; (800b2a8 <LoRaMacInitialization+0x380>)
 800af7a:	2100      	movs	r1, #0
 800af7c:	0028      	movs	r0, r5
 800af7e:	0052      	lsls	r2, r2, #1
 800af80:	f003 f8e0 	bl	800e144 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800af84:	4cc9      	ldr	r4, [pc, #804]	; (800b2ac <LoRaMacInitialization+0x384>)
 800af86:	2100      	movs	r1, #0
 800af88:	0020      	movs	r0, r4
 800af8a:	4ac9      	ldr	r2, [pc, #804]	; (800b2b0 <LoRaMacInitialization+0x388>)
 800af8c:	f003 f8da 	bl	800e144 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800af90:	2101      	movs	r1, #1
 800af92:	4bc8      	ldr	r3, [pc, #800]	; (800b2b4 <LoRaMacInitialization+0x38c>)
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.NvmCtx->Region = region;
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800af94:	2200      	movs	r2, #0
    MacCtx.AckTimeoutRetriesCounter = 1;
 800af96:	54e1      	strb	r1, [r4, r3]
    MacCtx.AckTimeoutRetries = 1;
 800af98:	4bc7      	ldr	r3, [pc, #796]	; (800b2b8 <LoRaMacInitialization+0x390>)
    MacCtx.NvmCtx = &NvmMacCtx;
 800af9a:	4ec8      	ldr	r6, [pc, #800]	; (800b2bc <LoRaMacInitialization+0x394>)
    MacCtx.AckTimeoutRetries = 1;
 800af9c:	54e1      	strb	r1, [r4, r3]
    MacCtx.NvmCtx->Region = region;
 800af9e:	9b03      	ldr	r3, [sp, #12]
    MacCtx.NvmCtx = &NvmMacCtx;
 800afa0:	51a5      	str	r5, [r4, r6]
    MacCtx.NvmCtx->Region = region;
 800afa2:	702b      	strb	r3, [r5, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800afa4:	002b      	movs	r3, r5
 800afa6:	337c      	adds	r3, #124	; 0x7c
 800afa8:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->RepeaterSupport = false;
 800afaa:	002b      	movs	r3, r5
 800afac:	33ca      	adds	r3, #202	; 0xca
 800afae:	701a      	strb	r2, [r3, #0]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 800afb0:	4bc3      	ldr	r3, [pc, #780]	; (800b2c0 <LoRaMacInitialization+0x398>)
 800afb2:	35fc      	adds	r5, #252	; 0xfc
 800afb4:	666b      	str	r3, [r5, #100]	; 0x64

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800afb6:	230f      	movs	r3, #15
 800afb8:	ad08      	add	r5, sp, #32
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800afba:	0029      	movs	r1, r5
 800afbc:	9803      	ldr	r0, [sp, #12]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800afbe:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800afc0:	f001 ff98 	bl	800cef4 <RegionGetPhyParam>
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800afc4:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800afc6:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800afc8:	1e42      	subs	r2, r0, #1
 800afca:	4190      	sbcs	r0, r2
 800afcc:	001a      	movs	r2, r3
 800afce:	32c9      	adds	r2, #201	; 0xc9
 800afd0:	7010      	strb	r0, [r2, #0]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800afd2:	200a      	movs	r0, #10
 800afd4:	7028      	strb	r0, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800afd6:	0029      	movs	r1, r5
 800afd8:	7818      	ldrb	r0, [r3, #0]
 800afda:	f001 ff8b 	bl	800cef4 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 800afde:	2206      	movs	r2, #6
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800afe0:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_TX_DR;
 800afe2:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800afe4:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800afe6:	7118      	strb	r0, [r3, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800afe8:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800afea:	7818      	ldrb	r0, [r3, #0]
 800afec:	f001 ff82 	bl	800cef4 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800aff0:	2210      	movs	r2, #16
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800aff2:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800aff4:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800aff6:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800aff8:	7158      	strb	r0, [r3, #5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800affa:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800affc:	7818      	ldrb	r0, [r3, #0]
 800affe:	f001 ff79 	bl	800cef4 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800b002:	2211      	movs	r2, #17
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800b004:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800b006:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b008:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800b00a:	6118      	str	r0, [r3, #16]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b00c:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b00e:	7818      	ldrb	r0, [r3, #0]
 800b010:	f001 ff70 	bl	800cef4 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800b014:	2212      	movs	r2, #18
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800b016:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800b018:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b01a:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800b01c:	6158      	str	r0, [r3, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b01e:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b020:	7818      	ldrb	r0, [r3, #0]
 800b022:	f001 ff67 	bl	800cef4 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800b026:	2213      	movs	r2, #19
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800b028:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800b02a:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b02c:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800b02e:	6198      	str	r0, [r3, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b030:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b032:	7818      	ldrb	r0, [r3, #0]
 800b034:	f001 ff5e 	bl	800cef4 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800b038:	2214      	movs	r2, #20
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800b03a:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800b03c:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b03e:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800b040:	61d8      	str	r0, [r3, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b042:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b044:	7818      	ldrb	r0, [r3, #0]
 800b046:	f001 ff55 	bl	800cef4 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800b04a:	2217      	movs	r2, #23
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800b04c:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800b04e:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b050:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800b052:	6218      	str	r0, [r3, #32]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b054:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b056:	7818      	ldrb	r0, [r3, #0]
 800b058:	f001 ff4c 	bl	800cef4 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800b05c:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b05e:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800b060:	1d9a      	adds	r2, r3, #6
 800b062:	77d0      	strb	r0, [r2, #31]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800b064:	2218      	movs	r2, #24
 800b066:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b068:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b06a:	7818      	ldrb	r0, [r3, #0]
 800b06c:	f001 ff42 	bl	800cef4 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800b070:	2219      	movs	r2, #25
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800b072:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_RX2_DR;
 800b074:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b076:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800b078:	6298      	str	r0, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800b07a:	6318      	str	r0, [r3, #48]	; 0x30
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b07c:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b07e:	7818      	ldrb	r0, [r3, #0]
 800b080:	f001 ff38 	bl	800cef4 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800b084:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b086:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800b088:	001a      	movs	r2, r3
 800b08a:	b2c0      	uxtb	r0, r0
 800b08c:	322c      	adds	r2, #44	; 0x2c
 800b08e:	7010      	strb	r0, [r2, #0]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800b090:	7210      	strb	r0, [r2, #8]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800b092:	221e      	movs	r2, #30
 800b094:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b096:	0029      	movs	r1, r5
 800b098:	7818      	ldrb	r0, [r3, #0]
 800b09a:	f001 ff2b 	bl	800cef4 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800b09e:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b0a0:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800b0a2:	001a      	movs	r2, r3
 800b0a4:	3238      	adds	r2, #56	; 0x38
 800b0a6:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800b0a8:	221f      	movs	r2, #31
 800b0aa:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b0ac:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b0ae:	7818      	ldrb	r0, [r3, #0]
 800b0b0:	f001 ff20 	bl	800cef4 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800b0b4:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b0b6:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800b0b8:	001a      	movs	r2, r3
 800b0ba:	3239      	adds	r2, #57	; 0x39
 800b0bc:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800b0be:	2220      	movs	r2, #32
 800b0c0:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b0c2:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b0c4:	7818      	ldrb	r0, [r3, #0]
 800b0c6:	f001 ff15 	bl	800cef4 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800b0ca:	2221      	movs	r2, #33	; 0x21
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800b0cc:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800b0ce:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b0d0:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800b0d2:	63d8      	str	r0, [r3, #60]	; 0x3c
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b0d4:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b0d6:	7818      	ldrb	r0, [r3, #0]
 800b0d8:	f001 ff0c 	bl	800cef4 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800b0dc:	220b      	movs	r2, #11
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800b0de:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800b0e0:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b0e2:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800b0e4:	6418      	str	r0, [r3, #64]	; 0x40
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b0e6:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b0e8:	7818      	ldrb	r0, [r3, #0]
 800b0ea:	f001 ff03 	bl	800cef4 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 800b0ee:	23fd      	movs	r3, #253	; 0xfd
 800b0f0:	009b      	lsls	r3, r3, #2
 800b0f2:	52e0      	strh	r0, [r4, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800b0f4:	230c      	movs	r3, #12
 800b0f6:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b0f8:	59a3      	ldr	r3, [r4, r6]
 800b0fa:	0029      	movs	r1, r5
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b0fc:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b0fe:	7818      	ldrb	r0, [r3, #0]
 800b100:	f001 fef8 	bl	800cef4 <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800b104:	2101      	movs	r1, #1
    MacCtx.AdrAckDelay = phyParam.Value;
 800b106:	4b6f      	ldr	r3, [pc, #444]	; (800b2c4 <LoRaMacInitialization+0x39c>)
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800b108:	2506      	movs	r5, #6
    MacCtx.AdrAckDelay = phyParam.Value;
 800b10a:	52e0      	strh	r0, [r4, r3]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800b10c:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b10e:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800b110:	1d5a      	adds	r2, r3, #5
 800b112:	77d1      	strb	r1, [r2, #31]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800b114:	001a      	movs	r2, r3
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 800b116:	200a      	movs	r0, #10
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800b118:	3288      	adds	r2, #136	; 0x88
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 800b11a:	6098      	str	r0, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800b11c:	731d      	strb	r5, [r3, #12]
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800b11e:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 800b120:	0018      	movs	r0, r3
 800b122:	308c      	adds	r0, #140	; 0x8c
 800b124:	7005      	strb	r5, [r0, #0]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800b126:	0018      	movs	r0, r3
 800b128:	3090      	adds	r0, #144	; 0x90
 800b12a:	0002      	movs	r2, r0
 800b12c:	6918      	ldr	r0, [r3, #16]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800b12e:	2500      	movs	r5, #0
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800b130:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800b132:	0018      	movs	r0, r3
 800b134:	3094      	adds	r0, #148	; 0x94
 800b136:	0002      	movs	r2, r0
 800b138:	6958      	ldr	r0, [r3, #20]
    params.NvmCtx = NULL;
 800b13a:	950c      	str	r5, [sp, #48]	; 0x30
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800b13c:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 800b13e:	0018      	movs	r0, r3
 800b140:	3098      	adds	r0, #152	; 0x98
 800b142:	0002      	movs	r2, r0
 800b144:	6998      	ldr	r0, [r3, #24]
 800b146:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 800b148:	0018      	movs	r0, r3
 800b14a:	309c      	adds	r0, #156	; 0x9c
 800b14c:	0002      	movs	r2, r0
 800b14e:	69d8      	ldr	r0, [r3, #28]
 800b150:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 800b152:	0018      	movs	r0, r3
 800b154:	30a0      	adds	r0, #160	; 0xa0
 800b156:	0002      	movs	r2, r0
 800b158:	6a18      	ldr	r0, [r3, #32]
 800b15a:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 800b15c:	0018      	movs	r0, r3
 800b15e:	30a4      	adds	r0, #164	; 0xa4
 800b160:	7001      	strb	r1, [r0, #0]
    params.Type = INIT_TYPE_DEFAULTS;
 800b162:	a90c      	add	r1, sp, #48	; 0x30
 800b164:	710d      	strb	r5, [r1, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800b166:	7818      	ldrb	r0, [r3, #0]
 800b168:	f001 fed7 	bl	800cf1a <RegionInitDefaults>

    ResetMacParameters( );
 800b16c:	f7fe fac4 	bl	80096f8 <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 800b170:	59a3      	ldr	r3, [r4, r6]
 800b172:	2101      	movs	r1, #1
 800b174:	001a      	movs	r2, r3
 800b176:	327d      	adds	r2, #125	; 0x7d
 800b178:	7011      	strb	r1, [r2, #0]

    MacCtx.MacPrimitives = primitives;
 800b17a:	22d1      	movs	r2, #209	; 0xd1
    MacCtx.MacCallbacks = callbacks;
 800b17c:	9802      	ldr	r0, [sp, #8]
    MacCtx.MacPrimitives = primitives;
 800b17e:	0092      	lsls	r2, r2, #2
 800b180:	50a7      	str	r7, [r4, r2]
    MacCtx.MacCallbacks = callbacks;
 800b182:	3204      	adds	r2, #4
 800b184:	50a0      	str	r0, [r4, r2]
    MacCtx.MacFlags.Value = 0;
 800b186:	4a50      	ldr	r2, [pc, #320]	; (800b2c8 <LoRaMacInitialization+0x3a0>)
    MacCtx.MacState = LORAMAC_STOPPED;

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 800b188:	33fc      	adds	r3, #252	; 0xfc
    MacCtx.MacFlags.Value = 0;
 800b18a:	54a5      	strb	r5, [r4, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 800b18c:	3a42      	subs	r2, #66	; 0x42
 800b18e:	3aff      	subs	r2, #255	; 0xff
 800b190:	50a1      	str	r1, [r4, r2]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800b192:	484e      	ldr	r0, [pc, #312]	; (800b2cc <LoRaMacInitialization+0x3a4>)
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 800b194:	655d      	str	r5, [r3, #84]	; 0x54
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800b196:	659d      	str	r5, [r3, #88]	; 0x58
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800b198:	002a      	movs	r2, r5
 800b19a:	4b4d      	ldr	r3, [pc, #308]	; (800b2d0 <LoRaMacInitialization+0x3a8>)
 800b19c:	9500      	str	r5, [sp, #0]
 800b19e:	3902      	subs	r1, #2
 800b1a0:	f004 fd0e 	bl	800fbc0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	002a      	movs	r2, r5
 800b1a8:	4b4a      	ldr	r3, [pc, #296]	; (800b2d4 <LoRaMacInitialization+0x3ac>)
 800b1aa:	9500      	str	r5, [sp, #0]
 800b1ac:	4249      	negs	r1, r1
 800b1ae:	484a      	ldr	r0, [pc, #296]	; (800b2d8 <LoRaMacInitialization+0x3b0>)
 800b1b0:	f004 fd06 	bl	800fbc0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800b1b4:	2101      	movs	r1, #1
 800b1b6:	002a      	movs	r2, r5
 800b1b8:	4b48      	ldr	r3, [pc, #288]	; (800b2dc <LoRaMacInitialization+0x3b4>)
 800b1ba:	9500      	str	r5, [sp, #0]
 800b1bc:	4249      	negs	r1, r1
 800b1be:	4848      	ldr	r0, [pc, #288]	; (800b2e0 <LoRaMacInitialization+0x3b8>)
 800b1c0:	f004 fcfe 	bl	800fbc0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800b1c4:	2101      	movs	r1, #1
 800b1c6:	002a      	movs	r2, r5
 800b1c8:	4b46      	ldr	r3, [pc, #280]	; (800b2e4 <LoRaMacInitialization+0x3bc>)
 800b1ca:	4249      	negs	r1, r1
 800b1cc:	9500      	str	r5, [sp, #0]
 800b1ce:	4846      	ldr	r0, [pc, #280]	; (800b2e8 <LoRaMacInitialization+0x3c0>)
 800b1d0:	f004 fcf6 	bl	800fbc0 <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 800b1d4:	59a5      	ldr	r5, [r4, r6]
 800b1d6:	af04      	add	r7, sp, #16
 800b1d8:	3559      	adds	r5, #89	; 0x59
 800b1da:	0038      	movs	r0, r7
 800b1dc:	35ff      	adds	r5, #255	; 0xff
 800b1de:	f004 fcd1 	bl	800fb84 <SysTimeGetMcuTime>
 800b1e2:	cf0c      	ldmia	r7!, {r2, r3}
 800b1e4:	c50c      	stmia	r5!, {r2, r3}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800b1e6:	23d3      	movs	r3, #211	; 0xd3
 800b1e8:	4a40      	ldr	r2, [pc, #256]	; (800b2ec <LoRaMacInitialization+0x3c4>)
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800b1ee:	4a40      	ldr	r2, [pc, #256]	; (800b2f0 <LoRaMacInitialization+0x3c8>)
 800b1f0:	3308      	adds	r3, #8
 800b1f2:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800b1f4:	4a3f      	ldr	r2, [pc, #252]	; (800b2f4 <LoRaMacInitialization+0x3cc>)
 800b1f6:	3308      	adds	r3, #8
 800b1f8:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800b1fa:	4a3f      	ldr	r2, [pc, #252]	; (800b2f8 <LoRaMacInitialization+0x3d0>)
 800b1fc:	3b0c      	subs	r3, #12
 800b1fe:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 800b200:	4f3e      	ldr	r7, [pc, #248]	; (800b2fc <LoRaMacInitialization+0x3d4>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800b202:	4a3f      	ldr	r2, [pc, #252]	; (800b300 <LoRaMacInitialization+0x3d8>)
 800b204:	3308      	adds	r3, #8
 800b206:	50e2      	str	r2, [r4, r3]
    Radio.Init( &MacCtx.RadioEvents );
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	483e      	ldr	r0, [pc, #248]	; (800b304 <LoRaMacInitialization+0x3dc>)
 800b20c:	9303      	str	r3, [sp, #12]
 800b20e:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 800b210:	483d      	ldr	r0, [pc, #244]	; (800b308 <LoRaMacInitialization+0x3e0>)
 800b212:	f7fd fa01 	bl	8008618 <SecureElementInit>
 800b216:	2800      	cmp	r0, #0
 800b218:	d003      	beq.n	800b222 <LoRaMacInitialization+0x2fa>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b21a:	2511      	movs	r5, #17
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 800b21c:	0028      	movs	r0, r5
 800b21e:	b017      	add	sp, #92	; 0x5c
 800b220:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 800b222:	483a      	ldr	r0, [pc, #232]	; (800b30c <LoRaMacInitialization+0x3e4>)
 800b224:	f001 faea 	bl	800c7fc <LoRaMacCryptoInit>
 800b228:	2800      	cmp	r0, #0
 800b22a:	d1f6      	bne.n	800b21a <LoRaMacInitialization+0x2f2>
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800b22c:	4838      	ldr	r0, [pc, #224]	; (800b310 <LoRaMacInitialization+0x3e8>)
 800b22e:	f000 ffb1 	bl	800c194 <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b232:	2513      	movs	r5, #19
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800b234:	2800      	cmp	r0, #0
 800b236:	d1f1      	bne.n	800b21c <LoRaMacInitialization+0x2f4>
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800b238:	59a0      	ldr	r0, [r4, r6]
 800b23a:	3050      	adds	r0, #80	; 0x50
 800b23c:	f001 fb70 	bl	800c920 <LoRaMacCryptoSetMulticastReference>
 800b240:	1e05      	subs	r5, r0, #0
 800b242:	d1ea      	bne.n	800b21a <LoRaMacInitialization+0x2f2>
    srand1( Radio.Random( ) );
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	9303      	str	r3, [sp, #12]
 800b248:	4798      	blx	r3
 800b24a:	f002 ff43 	bl	800e0d4 <srand1>
    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800b24e:	59a3      	ldr	r3, [r4, r6]
 800b250:	337d      	adds	r3, #125	; 0x7d
 800b252:	7818      	ldrb	r0, [r3, #0]
 800b254:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b256:	9303      	str	r3, [sp, #12]
 800b258:	4798      	blx	r3
    Radio.Sleep( );
 800b25a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b25c:	9303      	str	r3, [sp, #12]
 800b25e:	4798      	blx	r3
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800b260:	9b02      	ldr	r3, [sp, #8]
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800b262:	a90a      	add	r1, sp, #40	; 0x28
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800b264:	685b      	ldr	r3, [r3, #4]
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800b266:	a80e      	add	r0, sp, #56	; 0x38
        classBCallbacks.GetTemperatureLevel = callbacks->GetTemperatureLevel;
 800b268:	9303      	str	r3, [sp, #12]
 800b26a:	930a      	str	r3, [sp, #40]	; 0x28
        classBCallbacks.MacProcessNotify = callbacks->MacProcessNotify;
 800b26c:	9b02      	ldr	r3, [sp, #8]
 800b26e:	68db      	ldr	r3, [r3, #12]
 800b270:	9302      	str	r3, [sp, #8]
 800b272:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800b274:	4b27      	ldr	r3, [pc, #156]	; (800b314 <LoRaMacInitialization+0x3ec>)
 800b276:	930e      	str	r3, [sp, #56]	; 0x38
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800b278:	4b27      	ldr	r3, [pc, #156]	; (800b318 <LoRaMacInitialization+0x3f0>)
 800b27a:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800b27c:	4b27      	ldr	r3, [pc, #156]	; (800b31c <LoRaMacInitialization+0x3f4>)
 800b27e:	9310      	str	r3, [sp, #64]	; 0x40
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800b280:	4b27      	ldr	r3, [pc, #156]	; (800b320 <LoRaMacInitialization+0x3f8>)
 800b282:	9311      	str	r3, [sp, #68]	; 0x44
    classBParams.LoRaMacDevAddr = &MacCtx.NvmCtx->DevAddr;
 800b284:	59a3      	ldr	r3, [r4, r6]
 800b286:	001a      	movs	r2, r3
 800b288:	324c      	adds	r2, #76	; 0x4c
 800b28a:	9212      	str	r2, [sp, #72]	; 0x48
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 800b28c:	3238      	adds	r2, #56	; 0x38
    classBParams.LoRaMacRegion = &MacCtx.NvmCtx->Region;
 800b28e:	9313      	str	r3, [sp, #76]	; 0x4c
    classBParams.LoRaMacParams = &MacCtx.NvmCtx->MacParams;
 800b290:	9214      	str	r2, [sp, #80]	; 0x50
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 800b292:	3350      	adds	r3, #80	; 0x50
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800b294:	4a23      	ldr	r2, [pc, #140]	; (800b324 <LoRaMacInitialization+0x3fc>)
    classBParams.MulticastChannels = &MacCtx.NvmCtx->MulticastChannelList[0];
 800b296:	9315      	str	r3, [sp, #84]	; 0x54
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
 800b298:	f000 ff45 	bl	800c126 <LoRaMacClassBInit>
    MacCtx.AllowRequests = requestState;
 800b29c:	2201      	movs	r2, #1
 800b29e:	4b22      	ldr	r3, [pc, #136]	; (800b328 <LoRaMacInitialization+0x400>)
 800b2a0:	54e2      	strb	r2, [r4, r3]
    return LORAMAC_STATUS_OK;
 800b2a2:	e7bb      	b.n	800b21c <LoRaMacInitialization+0x2f4>
 800b2a4:	0800952d 	.word	0x0800952d
 800b2a8:	200005b0 	.word	0x200005b0
 800b2ac:	2000071c 	.word	0x2000071c
 800b2b0:	0000048c 	.word	0x0000048c
 800b2b4:	00000412 	.word	0x00000412
 800b2b8:	00000411 	.word	0x00000411
 800b2bc:	00000484 	.word	0x00000484
 800b2c0:	01000300 	.word	0x01000300
 800b2c4:	000003f6 	.word	0x000003f6
 800b2c8:	00000481 	.word	0x00000481
 800b2cc:	20000a84 	.word	0x20000a84
 800b2d0:	08009ca9 	.word	0x08009ca9
 800b2d4:	08009ec5 	.word	0x08009ec5
 800b2d8:	20000a9c 	.word	0x20000a9c
 800b2dc:	08009f25 	.word	0x08009f25
 800b2e0:	20000ab4 	.word	0x20000ab4
 800b2e4:	08009575 	.word	0x08009575
 800b2e8:	20000b14 	.word	0x20000b14
 800b2ec:	080098ad 	.word	0x080098ad
 800b2f0:	08009855 	.word	0x08009855
 800b2f4:	08009429 	.word	0x08009429
 800b2f8:	08009819 	.word	0x08009819
 800b2fc:	080117e4 	.word	0x080117e4
 800b300:	080097dd 	.word	0x080097dd
 800b304:	20000a68 	.word	0x20000a68
 800b308:	0800950f 	.word	0x0800950f
 800b30c:	08009505 	.word	0x08009505
 800b310:	08009519 	.word	0x08009519
 800b314:	20000b80 	.word	0x20000b80
 800b318:	20000b38 	.word	0x20000b38
 800b31c:	20000b6c 	.word	0x20000b6c
 800b320:	20000b9d 	.word	0x20000b9d
 800b324:	08009523 	.word	0x08009523
 800b328:	00000482 	.word	0x00000482

0800b32c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800b32c:	23d0      	movs	r3, #208	; 0xd0
 800b32e:	2000      	movs	r0, #0
 800b330:	4a01      	ldr	r2, [pc, #4]	; (800b338 <LoRaMacStart+0xc>)
 800b332:	009b      	lsls	r3, r3, #2
 800b334:	50d0      	str	r0, [r2, r3]
    return LORAMAC_STATUS_OK;
}
 800b336:	4770      	bx	lr
 800b338:	2000071c 	.word	0x2000071c

0800b33c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800b33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b33e:	b089      	sub	sp, #36	; 0x24
 800b340:	0005      	movs	r5, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800b342:	4668      	mov	r0, sp
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800b344:	4a29      	ldr	r2, [pc, #164]	; (800b3ec <LoRaMacQueryTxPossible+0xb0>)
 800b346:	4b2a      	ldr	r3, [pc, #168]	; (800b3f0 <LoRaMacQueryTxPossible+0xb4>)
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    size_t macCmdsSize = 0;
 800b348:	2700      	movs	r7, #0
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800b34a:	58d3      	ldr	r3, [r2, r3]
{
 800b34c:	000c      	movs	r4, r1
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800b34e:	1d1a      	adds	r2, r3, #4
 800b350:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
 800b352:	9601      	str	r6, [sp, #4]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800b354:	795a      	ldrb	r2, [r3, #5]
 800b356:	7082      	strb	r2, [r0, #2]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800b358:	466a      	mov	r2, sp
 800b35a:	7918      	ldrb	r0, [r3, #4]
 800b35c:	3203      	adds	r2, #3
 800b35e:	7010      	strb	r0, [r2, #0]
    size_t macCmdsSize = 0;
 800b360:	9702      	str	r7, [sp, #8]

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b362:	2003      	movs	r0, #3
    if( txInfo == NULL )
 800b364:	42b9      	cmp	r1, r7
 800b366:	d038      	beq.n	800b3da <LoRaMacQueryTxPossible+0x9e>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800b368:	21fc      	movs	r1, #252	; 0xfc
 800b36a:	468c      	mov	ip, r1
 800b36c:	449c      	add	ip, r3
 800b36e:	4661      	mov	r1, ip
 800b370:	a803      	add	r0, sp, #12
    adrNext.UpdateChanMask = false;
 800b372:	7107      	strb	r7, [r0, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800b374:	001f      	movs	r7, r3
    adrNext.Version = MacCtx.NvmCtx->Version;
 800b376:	6e49      	ldr	r1, [r1, #100]	; 0x64
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800b378:	377e      	adds	r7, #126	; 0x7e
    adrNext.Version = MacCtx.NvmCtx->Version;
 800b37a:	9103      	str	r1, [sp, #12]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800b37c:	783f      	ldrb	r7, [r7, #0]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800b37e:	6086      	str	r6, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b380:	26fd      	movs	r6, #253	; 0xfd
 800b382:	491a      	ldr	r1, [pc, #104]	; (800b3ec <LoRaMacQueryTxPossible+0xb0>)
 800b384:	00b6      	lsls	r6, r6, #2
 800b386:	5989      	ldr	r1, [r1, r6]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800b388:	7147      	strb	r7, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b38a:	9106      	str	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b38c:	0019      	movs	r1, r3
 800b38e:	3184      	adds	r1, #132	; 0x84
 800b390:	8809      	ldrh	r1, [r1, #0]
 800b392:	ba49      	rev16	r1, r1
 800b394:	8201      	strh	r1, [r0, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b396:	0019      	movs	r1, r3
 800b398:	31b8      	adds	r1, #184	; 0xb8
 800b39a:	7809      	ldrb	r1, [r1, #0]
 800b39c:	7481      	strb	r1, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800b39e:	4669      	mov	r1, sp
    adrNext.Region = MacCtx.NvmCtx->Region;
 800b3a0:	781b      	ldrb	r3, [r3, #0]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800b3a2:	3102      	adds	r1, #2
    adrNext.Region = MacCtx.NvmCtx->Region;
 800b3a4:	74c3      	strb	r3, [r0, #19]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800b3a6:	ab01      	add	r3, sp, #4
 800b3a8:	f000 fe54 	bl	800c054 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800b3ac:	466b      	mov	r3, sp
 800b3ae:	2002      	movs	r0, #2
 800b3b0:	5618      	ldrsb	r0, [r3, r0]
 800b3b2:	f7fe f8c1 	bl	8009538 <GetMaxAppPayloadWithoutFOptsLength>
 800b3b6:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b3b8:	a802      	add	r0, sp, #8
 800b3ba:	f000 ffb7 	bl	800c32c <LoRaMacCommandsGetSizeSerializedCmds>
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	d111      	bne.n	800b3e6 <LoRaMacQueryTxPossible+0xaa>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800b3c2:	9b02      	ldr	r3, [sp, #8]
 800b3c4:	2b0f      	cmp	r3, #15
 800b3c6:	d80a      	bhi.n	800b3de <LoRaMacQueryTxPossible+0xa2>
 800b3c8:	7862      	ldrb	r2, [r4, #1]
 800b3ca:	4293      	cmp	r3, r2
 800b3cc:	d807      	bhi.n	800b3de <LoRaMacQueryTxPossible+0xa2>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800b3ce:	1ad1      	subs	r1, r2, r3

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800b3d0:	18ed      	adds	r5, r5, r3
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800b3d2:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800b3d4:	42aa      	cmp	r2, r5
 800b3d6:	d200      	bcs.n	800b3da <LoRaMacQueryTxPossible+0x9e>
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800b3d8:	3008      	adds	r0, #8
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800b3da:	b009      	add	sp, #36	; 0x24
 800b3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800b3de:	2300      	movs	r3, #0
        return LORAMAC_STATUS_LENGTH_ERROR;
 800b3e0:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
 800b3e2:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800b3e4:	e7f9      	b.n	800b3da <LoRaMacQueryTxPossible+0x9e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b3e6:	2013      	movs	r0, #19
 800b3e8:	e7f7      	b.n	800b3da <LoRaMacQueryTxPossible+0x9e>
 800b3ea:	46c0      	nop			; (mov r8, r8)
 800b3ec:	2000071c 	.word	0x2000071c
 800b3f0:	00000484 	.word	0x00000484

0800b3f4 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800b3f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3f6:	0004      	movs	r4, r0
 800b3f8:	b085      	sub	sp, #20
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b3fa:	2003      	movs	r0, #3
    if( mibGet == NULL )
 800b3fc:	2c00      	cmp	r4, #0
 800b3fe:	d034      	beq.n	800b46a <LoRaMacMibGetRequestConfirm+0x76>
    }

    switch( mibGet->Type )
 800b400:	7820      	ldrb	r0, [r4, #0]
 800b402:	2828      	cmp	r0, #40	; 0x28
 800b404:	d900      	bls.n	800b408 <LoRaMacMibGetRequestConfirm+0x14>
 800b406:	e107      	b.n	800b618 <LoRaMacMibGetRequestConfirm+0x224>
 800b408:	f7f4 fea4 	bl	8000154 <__gnu_thumb1_case_uhi>
 800b40c:	00310029 	.word	0x00310029
 800b410:	003e0039 	.word	0x003e0039
 800b414:	00470041 	.word	0x00470041
 800b418:	0106004d 	.word	0x0106004d
 800b41c:	01060106 	.word	0x01060106
 800b420:	01060106 	.word	0x01060106
 800b424:	01060106 	.word	0x01060106
 800b428:	00520106 	.word	0x00520106
 800b42c:	005c0057 	.word	0x005c0057
 800b430:	006c0066 	.word	0x006c0066
 800b434:	00790074 	.word	0x00790074
 800b438:	007f0082 	.word	0x007f0082
 800b43c:	008a0085 	.word	0x008a0085
 800b440:	00950090 	.word	0x00950090
 800b444:	009f009a 	.word	0x009f009a
 800b448:	00a900a4 	.word	0x00a900a4
 800b44c:	00ae00b3 	.word	0x00ae00b3
 800b450:	00bd00b8 	.word	0x00bd00b8
 800b454:	00f700c2 	.word	0x00f700c2
 800b458:	010600c9 	.word	0x010600c9
 800b45c:	00fc      	.short	0x00fc
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 800b45e:	4a70      	ldr	r2, [pc, #448]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b460:	4b70      	ldr	r3, [pc, #448]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b462:	58d3      	ldr	r3, [r2, r3]
 800b464:	337c      	adds	r3, #124	; 0x7c
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800b46a:	b005      	add	sp, #20
 800b46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 800b46e:	4b6d      	ldr	r3, [pc, #436]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b470:	4a6b      	ldr	r2, [pc, #428]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b472:	58d2      	ldr	r2, [r2, r3]
 800b474:	23b2      	movs	r3, #178	; 0xb2
 800b476:	005b      	lsls	r3, r3, #1
 800b478:	5cd3      	ldrb	r3, [r2, r3]
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800b47a:	7123      	strb	r3, [r4, #4]
            break;
 800b47c:	e002      	b.n	800b484 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800b47e:	f7fd fadf 	bl	8008a40 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800b482:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b484:	2000      	movs	r0, #0
            break;
 800b486:	e7f0      	b.n	800b46a <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800b488:	f7fd faf0 	bl	8008a6c <SecureElementGetJoinEui>
 800b48c:	e7f9      	b.n	800b482 <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800b48e:	4a64      	ldr	r2, [pc, #400]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b490:	4b64      	ldr	r3, [pc, #400]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b492:	58d3      	ldr	r3, [r2, r3]
 800b494:	337e      	adds	r3, #126	; 0x7e
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	e7ef      	b.n	800b47a <LoRaMacMibGetRequestConfirm+0x86>
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 800b49a:	4a61      	ldr	r2, [pc, #388]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b49c:	4b61      	ldr	r3, [pc, #388]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b49e:	58d3      	ldr	r3, [r2, r3]
 800b4a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800b4a2:	6063      	str	r3, [r4, #4]
 800b4a4:	e7ee      	b.n	800b484 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 800b4a6:	4a5e      	ldr	r2, [pc, #376]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b4a8:	4b5e      	ldr	r3, [pc, #376]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b4aa:	58d3      	ldr	r3, [r2, r3]
 800b4ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4ae:	e7f8      	b.n	800b4a2 <LoRaMacMibGetRequestConfirm+0xae>
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 800b4b0:	4a5b      	ldr	r2, [pc, #364]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b4b2:	4b5c      	ldr	r3, [pc, #368]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b4b4:	58d3      	ldr	r3, [r2, r3]
 800b4b6:	337d      	adds	r3, #125	; 0x7d
 800b4b8:	e7ed      	b.n	800b496 <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800b4ba:	4a59      	ldr	r2, [pc, #356]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b4bc:	4b59      	ldr	r3, [pc, #356]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b4be:	58d3      	ldr	r3, [r2, r3]
 800b4c0:	33ca      	adds	r3, #202	; 0xca
 800b4c2:	e7e8      	b.n	800b496 <LoRaMacMibGetRequestConfirm+0xa2>
            getPhy.Attribute = PHY_CHANNELS;
 800b4c4:	231d      	movs	r3, #29
 800b4c6:	a902      	add	r1, sp, #8
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800b4c8:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b4ca:	4a55      	ldr	r2, [pc, #340]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b4cc:	4b55      	ldr	r3, [pc, #340]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b4ce:	58d3      	ldr	r3, [r2, r3]
 800b4d0:	7818      	ldrb	r0, [r3, #0]
 800b4d2:	f001 fd0f 	bl	800cef4 <RegionGetPhyParam>
 800b4d6:	e7d4      	b.n	800b482 <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800b4d8:	4a51      	ldr	r2, [pc, #324]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b4da:	4b52      	ldr	r3, [pc, #328]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b4dc:	58d3      	ldr	r3, [r2, r3]
 800b4de:	33a8      	adds	r3, #168	; 0xa8
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800b4e0:	3404      	adds	r4, #4
 800b4e2:	e004      	b.n	800b4ee <LoRaMacMibGetRequestConfirm+0xfa>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800b4e4:	4a4e      	ldr	r2, [pc, #312]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b4e6:	4b4f      	ldr	r3, [pc, #316]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b4e8:	3404      	adds	r4, #4
 800b4ea:	58d3      	ldr	r3, [r2, r3]
 800b4ec:	3328      	adds	r3, #40	; 0x28
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800b4ee:	cb06      	ldmia	r3!, {r1, r2}
 800b4f0:	c406      	stmia	r4!, {r1, r2}
            break;
 800b4f2:	e7c7      	b.n	800b484 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800b4f4:	4a4a      	ldr	r2, [pc, #296]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b4f6:	4b4b      	ldr	r3, [pc, #300]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b4f8:	58d3      	ldr	r3, [r2, r3]
 800b4fa:	33b0      	adds	r3, #176	; 0xb0
 800b4fc:	e7f0      	b.n	800b4e0 <LoRaMacMibGetRequestConfirm+0xec>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800b4fe:	4a48      	ldr	r2, [pc, #288]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b500:	4b48      	ldr	r3, [pc, #288]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b502:	3404      	adds	r4, #4
 800b504:	58d3      	ldr	r3, [r2, r3]
 800b506:	3330      	adds	r3, #48	; 0x30
 800b508:	e7f1      	b.n	800b4ee <LoRaMacMibGetRequestConfirm+0xfa>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800b50a:	231b      	movs	r3, #27
 800b50c:	a902      	add	r1, sp, #8
 800b50e:	e7db      	b.n	800b4c8 <LoRaMacMibGetRequestConfirm+0xd4>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800b510:	231a      	movs	r3, #26
 800b512:	a902      	add	r1, sp, #8
 800b514:	e7d8      	b.n	800b4c8 <LoRaMacMibGetRequestConfirm+0xd4>
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800b516:	4a42      	ldr	r2, [pc, #264]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b518:	4b42      	ldr	r3, [pc, #264]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b51a:	58d3      	ldr	r3, [r2, r3]
 800b51c:	33a4      	adds	r3, #164	; 0xa4
 800b51e:	e7ba      	b.n	800b496 <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 800b520:	4a3f      	ldr	r2, [pc, #252]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b522:	4b40      	ldr	r3, [pc, #256]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b524:	58d3      	ldr	r3, [r2, r3]
 800b526:	3390      	adds	r3, #144	; 0x90
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	e7ba      	b.n	800b4a2 <LoRaMacMibGetRequestConfirm+0xae>
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 800b52c:	4a3c      	ldr	r2, [pc, #240]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b52e:	4b3d      	ldr	r3, [pc, #244]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b530:	58d3      	ldr	r3, [r2, r3]
 800b532:	3394      	adds	r3, #148	; 0x94
 800b534:	e7f8      	b.n	800b528 <LoRaMacMibGetRequestConfirm+0x134>
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 800b536:	4a3a      	ldr	r2, [pc, #232]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b538:	4b3a      	ldr	r3, [pc, #232]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b53a:	58d3      	ldr	r3, [r2, r3]
 800b53c:	3398      	adds	r3, #152	; 0x98
 800b53e:	e7f3      	b.n	800b528 <LoRaMacMibGetRequestConfirm+0x134>
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 800b540:	4a37      	ldr	r2, [pc, #220]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b542:	4b38      	ldr	r3, [pc, #224]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b544:	58d3      	ldr	r3, [r2, r3]
 800b546:	339c      	adds	r3, #156	; 0x9c
 800b548:	e7ee      	b.n	800b528 <LoRaMacMibGetRequestConfirm+0x134>
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 800b54a:	4a35      	ldr	r2, [pc, #212]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b54c:	4b35      	ldr	r3, [pc, #212]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b54e:	58d3      	ldr	r3, [r2, r3]
 800b550:	33a0      	adds	r3, #160	; 0xa0
 800b552:	e7e9      	b.n	800b528 <LoRaMacMibGetRequestConfirm+0x134>
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800b554:	4a32      	ldr	r2, [pc, #200]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b556:	4b33      	ldr	r3, [pc, #204]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b558:	58d3      	ldr	r3, [r2, r3]
 800b55a:	795b      	ldrb	r3, [r3, #5]
 800b55c:	e78d      	b.n	800b47a <LoRaMacMibGetRequestConfirm+0x86>
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b55e:	4a30      	ldr	r2, [pc, #192]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b560:	4b30      	ldr	r3, [pc, #192]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b562:	58d3      	ldr	r3, [r2, r3]
 800b564:	3385      	adds	r3, #133	; 0x85
 800b566:	e796      	b.n	800b496 <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800b568:	4a2d      	ldr	r2, [pc, #180]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b56a:	4b2e      	ldr	r3, [pc, #184]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b56c:	58d3      	ldr	r3, [r2, r3]
 800b56e:	791b      	ldrb	r3, [r3, #4]
 800b570:	e783      	b.n	800b47a <LoRaMacMibGetRequestConfirm+0x86>
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800b572:	4a2b      	ldr	r2, [pc, #172]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b574:	4b2b      	ldr	r3, [pc, #172]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b576:	58d3      	ldr	r3, [r2, r3]
 800b578:	3384      	adds	r3, #132	; 0x84
 800b57a:	e78c      	b.n	800b496 <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800b57c:	4a28      	ldr	r2, [pc, #160]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b57e:	4b29      	ldr	r3, [pc, #164]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b580:	58d3      	ldr	r3, [r2, r3]
 800b582:	3388      	adds	r3, #136	; 0x88
 800b584:	e7d0      	b.n	800b528 <LoRaMacMibGetRequestConfirm+0x134>
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 800b586:	4a26      	ldr	r2, [pc, #152]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b588:	4b26      	ldr	r3, [pc, #152]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b58a:	58d3      	ldr	r3, [r2, r3]
 800b58c:	338c      	adds	r3, #140	; 0x8c
 800b58e:	e782      	b.n	800b496 <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800b590:	4a23      	ldr	r2, [pc, #140]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b592:	4b24      	ldr	r3, [pc, #144]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b594:	58d3      	ldr	r3, [r2, r3]
 800b596:	33c0      	adds	r3, #192	; 0xc0
 800b598:	681b      	ldr	r3, [r3, #0]
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800b59a:	6063      	str	r3, [r4, #4]
 800b59c:	e772      	b.n	800b484 <LoRaMacMibGetRequestConfirm+0x90>
    Contexts.MacNvmCtx = &NvmMacCtx;
 800b59e:	4e22      	ldr	r6, [pc, #136]	; (800b628 <LoRaMacMibGetRequestConfirm+0x234>)
 800b5a0:	4b22      	ldr	r3, [pc, #136]	; (800b62c <LoRaMacMibGetRequestConfirm+0x238>)
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800b5a2:	0030      	movs	r0, r6
    Contexts.MacNvmCtx = &NvmMacCtx;
 800b5a4:	6073      	str	r3, [r6, #4]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800b5a6:	23b6      	movs	r3, #182	; 0xb6
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800b5a8:	3018      	adds	r0, #24
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800b5aa:	005b      	lsls	r3, r3, #1
 800b5ac:	60b3      	str	r3, [r6, #8]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800b5ae:	f001 f963 	bl	800c878 <LoRaMacCryptoGetNvmCtx>
    GetNvmCtxParams_t params ={ 0 };
 800b5b2:	2500      	movs	r5, #0
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800b5b4:	4a1a      	ldr	r2, [pc, #104]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b5b6:	4b1b      	ldr	r3, [pc, #108]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b5b8:	a902      	add	r1, sp, #8
 800b5ba:	58d3      	ldr	r3, [r2, r3]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800b5bc:	6170      	str	r0, [r6, #20]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800b5be:	7818      	ldrb	r0, [r3, #0]
    GetNvmCtxParams_t params ={ 0 };
 800b5c0:	9502      	str	r5, [sp, #8]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800b5c2:	f001 fcb1 	bl	800cf28 <RegionGetNvmCtx>
 800b5c6:	60f0      	str	r0, [r6, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800b5c8:	0030      	movs	r0, r6
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800b5ca:	9b02      	ldr	r3, [sp, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800b5cc:	3020      	adds	r0, #32
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800b5ce:	6133      	str	r3, [r6, #16]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800b5d0:	f7fd f91a 	bl	8008808 <SecureElementGetNvmCtx>
 800b5d4:	61f0      	str	r0, [r6, #28]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 800b5d6:	0030      	movs	r0, r6
 800b5d8:	3028      	adds	r0, #40	; 0x28
 800b5da:	f000 fdfb 	bl	800c1d4 <LoRaMacCommandsGetNvmCtx>
 800b5de:	6270      	str	r0, [r6, #36]	; 0x24
    Contexts.ClassBNvmCtx = LoRaMacClassBGetNvmCtx( &Contexts.ClassBNvmCtxSize );
 800b5e0:	0030      	movs	r0, r6
 800b5e2:	3030      	adds	r0, #48	; 0x30
 800b5e4:	f000 fda2 	bl	800c12c <LoRaMacClassBGetNvmCtx>
 800b5e8:	62f0      	str	r0, [r6, #44]	; 0x2c
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800b5ea:	0030      	movs	r0, r6
 800b5ec:	3038      	adds	r0, #56	; 0x38
 800b5ee:	f000 ff3f 	bl	800c470 <LoRaMacConfirmQueueGetNvmCtx>
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800b5f2:	1d37      	adds	r7, r6, #4
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800b5f4:	6370      	str	r0, [r6, #52]	; 0x34
            mibGet->Param.Contexts = GetCtxs( );
 800b5f6:	6067      	str	r7, [r4, #4]
            break;
 800b5f8:	e744      	b.n	800b484 <LoRaMacMibGetRequestConfirm+0x90>
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800b5fa:	4a09      	ldr	r2, [pc, #36]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b5fc:	4b09      	ldr	r3, [pc, #36]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b5fe:	58d3      	ldr	r3, [r2, r3]
 800b600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b602:	e7ca      	b.n	800b59a <LoRaMacMibGetRequestConfirm+0x1a6>
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 800b604:	4a06      	ldr	r2, [pc, #24]	; (800b620 <LoRaMacMibGetRequestConfirm+0x22c>)
 800b606:	4b07      	ldr	r3, [pc, #28]	; (800b624 <LoRaMacMibGetRequestConfirm+0x230>)
 800b608:	58d3      	ldr	r3, [r2, r3]
 800b60a:	33fc      	adds	r3, #252	; 0xfc
 800b60c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b60e:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800b610:	f001 fd3c 	bl	800d08c <RegionGetVersion>
 800b614:	60a0      	str	r0, [r4, #8]
            break;
 800b616:	e735      	b.n	800b484 <LoRaMacMibGetRequestConfirm+0x90>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800b618:	0020      	movs	r0, r4
 800b61a:	f000 fda2 	bl	800c162 <LoRaMacClassBMibGetRequestConfirm>
            break;
 800b61e:	e724      	b.n	800b46a <LoRaMacMibGetRequestConfirm+0x76>
 800b620:	2000071c 	.word	0x2000071c
 800b624:	00000484 	.word	0x00000484
 800b628:	20000574 	.word	0x20000574
 800b62c:	200005b0 	.word	0x200005b0

0800b630 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800b630:	b570      	push	{r4, r5, r6, lr}
 800b632:	0004      	movs	r4, r0
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b634:	2603      	movs	r6, #3
{
 800b636:	b086      	sub	sp, #24
    if( mibSet == NULL )
 800b638:	2800      	cmp	r0, #0
 800b63a:	d06b      	beq.n	800b714 <LoRaMacMibSetRequestConfirm+0xe4>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800b63c:	23d0      	movs	r3, #208	; 0xd0
 800b63e:	4db9      	ldr	r5, [pc, #740]	; (800b924 <LoRaMacMibSetRequestConfirm+0x2f4>)
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	58eb      	ldr	r3, [r5, r3]
    {
        return LORAMAC_STATUS_BUSY;
 800b644:	3e02      	subs	r6, #2
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800b646:	079a      	lsls	r2, r3, #30
 800b648:	d464      	bmi.n	800b714 <LoRaMacMibSetRequestConfirm+0xe4>
    }

    switch( mibSet->Type )
 800b64a:	7800      	ldrb	r0, [r0, #0]
 800b64c:	2827      	cmp	r0, #39	; 0x27
 800b64e:	d900      	bls.n	800b652 <LoRaMacMibSetRequestConfirm+0x22>
 800b650:	e20a      	b.n	800ba68 <LoRaMacMibSetRequestConfirm+0x438>
 800b652:	f7f4 fd7f 	bl	8000154 <__gnu_thumb1_case_uhi>
 800b656:	0028      	.short	0x0028
 800b658:	0037002d 	.word	0x0037002d
 800b65c:	00460042 	.word	0x00460042
 800b660:	0051004c 	.word	0x0051004c
 800b664:	00620056 	.word	0x00620056
 800b668:	006c0067 	.word	0x006c0067
 800b66c:	00760071 	.word	0x00760071
 800b670:	0080007b 	.word	0x0080007b
 800b674:	00920085 	.word	0x00920085
 800b678:	00960209 	.word	0x00960209
 800b67c:	00ce00b9 	.word	0x00ce00b9
 800b680:	011b00f8 	.word	0x011b00f8
 800b684:	0120010d 	.word	0x0120010d
 800b688:	012f0129 	.word	0x012f0129
 800b68c:	01370133 	.word	0x01370133
 800b690:	013f013b 	.word	0x013f013b
 800b694:	017f0151 	.word	0x017f0151
 800b698:	0191016d 	.word	0x0191016d
 800b69c:	019d0197 	.word	0x019d0197
 800b6a0:	01a801a3 	.word	0x01a801a3
 800b6a4:	01fc      	.short	0x01fc
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800b6a6:	7920      	ldrb	r0, [r4, #4]
 800b6a8:	f7fe fb6a 	bl	8009d80 <SwitchClass>
            }
            break;
        }
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800b6ac:	0006      	movs	r6, r0
            break;
 800b6ae:	e00f      	b.n	800b6d0 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800b6b0:	7923      	ldrb	r3, [r4, #4]
 800b6b2:	2b02      	cmp	r3, #2
 800b6b4:	d00b      	beq.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 800b6b6:	4a9c      	ldr	r2, [pc, #624]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b6b8:	58a9      	ldr	r1, [r5, r2]
 800b6ba:	22b2      	movs	r2, #178	; 0xb2
 800b6bc:	0052      	lsls	r2, r2, #1
 800b6be:	548b      	strb	r3, [r1, r2]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800b6c0:	2600      	movs	r6, #0
            break;
 800b6c2:	e005      	b.n	800b6d0 <LoRaMacMibSetRequestConfirm+0xa0>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800b6c4:	6860      	ldr	r0, [r4, #4]
 800b6c6:	f7fd f9a9 	bl	8008a1c <SecureElementSetDevEui>
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	d0f8      	beq.n	800b6c0 <LoRaMacMibSetRequestConfirm+0x90>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b6ce:	2603      	movs	r6, #3
        }
    }
    EventRegionNvmCtxChanged( );
 800b6d0:	f7fd ff13 	bl	80094fa <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 800b6d4:	f7fd ff0c 	bl	80094f0 <EventMacNvmCtxChanged>
    return status;
 800b6d8:	e01c      	b.n	800b714 <LoRaMacMibSetRequestConfirm+0xe4>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800b6da:	6860      	ldr	r0, [r4, #4]
 800b6dc:	f7fd f9b4 	bl	8008a48 <SecureElementSetJoinEui>
 800b6e0:	e7f3      	b.n	800b6ca <LoRaMacMibSetRequestConfirm+0x9a>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 800b6e2:	4b91      	ldr	r3, [pc, #580]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b6e4:	58eb      	ldr	r3, [r5, r3]
 800b6e6:	337e      	adds	r3, #126	; 0x7e
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800b6e8:	7922      	ldrb	r2, [r4, #4]
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800b6ea:	701a      	strb	r2, [r3, #0]
 800b6ec:	e7e8      	b.n	800b6c0 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 800b6ee:	4b8e      	ldr	r3, [pc, #568]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b6f0:	6862      	ldr	r2, [r4, #4]
 800b6f2:	58eb      	ldr	r3, [r5, r3]
 800b6f4:	649a      	str	r2, [r3, #72]	; 0x48
 800b6f6:	e7e3      	b.n	800b6c0 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 800b6f8:	4b8b      	ldr	r3, [pc, #556]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b6fa:	6862      	ldr	r2, [r4, #4]
 800b6fc:	58eb      	ldr	r3, [r5, r3]
 800b6fe:	64da      	str	r2, [r3, #76]	; 0x4c
 800b700:	e7de      	b.n	800b6c0 <LoRaMacMibSetRequestConfirm+0x90>
            if( mibSet->Param.AppKey != NULL )
 800b702:	6861      	ldr	r1, [r4, #4]
 800b704:	2900      	cmp	r1, #0
 800b706:	d0e2      	beq.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800b708:	2000      	movs	r0, #0
 800b70a:	f001 fa31 	bl	800cb70 <LoRaMacCryptoSetKey>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800b70e:	2611      	movs	r6, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800b710:	2800      	cmp	r0, #0
 800b712:	d0d5      	beq.n	800b6c0 <LoRaMacMibSetRequestConfirm+0x90>
}
 800b714:	0030      	movs	r0, r6
 800b716:	b006      	add	sp, #24
 800b718:	bd70      	pop	{r4, r5, r6, pc}
            if( mibSet->Param.NwkKey != NULL )
 800b71a:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800b71c:	2001      	movs	r0, #1
            if( mibSet->Param.NwkKey != NULL )
 800b71e:	2900      	cmp	r1, #0
 800b720:	d1f3      	bne.n	800b70a <LoRaMacMibSetRequestConfirm+0xda>
 800b722:	e7d4      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.NwkSKey != NULL )
 800b724:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800b726:	2002      	movs	r0, #2
            if( mibSet->Param.NwkSKey != NULL )
 800b728:	2900      	cmp	r1, #0
 800b72a:	d1ee      	bne.n	800b70a <LoRaMacMibSetRequestConfirm+0xda>
 800b72c:	e7cf      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.AppSKey != NULL )
 800b72e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800b730:	2003      	movs	r0, #3
            if( mibSet->Param.AppSKey != NULL )
 800b732:	2900      	cmp	r1, #0
 800b734:	d1e9      	bne.n	800b70a <LoRaMacMibSetRequestConfirm+0xda>
 800b736:	e7ca      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.McKEKey != NULL )
 800b738:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800b73a:	207f      	movs	r0, #127	; 0x7f
            if( mibSet->Param.McKEKey != NULL )
 800b73c:	2900      	cmp	r1, #0
 800b73e:	d1e4      	bne.n	800b70a <LoRaMacMibSetRequestConfirm+0xda>
 800b740:	e7c5      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.McKey0 != NULL )
 800b742:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800b744:	2080      	movs	r0, #128	; 0x80
            if( mibSet->Param.McKey0 != NULL )
 800b746:	2900      	cmp	r1, #0
 800b748:	d1df      	bne.n	800b70a <LoRaMacMibSetRequestConfirm+0xda>
 800b74a:	e7c0      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.McAppSKey0 != NULL )
 800b74c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800b74e:	2081      	movs	r0, #129	; 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 800b750:	2900      	cmp	r1, #0
 800b752:	d1da      	bne.n	800b70a <LoRaMacMibSetRequestConfirm+0xda>
 800b754:	e7bb      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800b756:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800b758:	2082      	movs	r0, #130	; 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 800b75a:	2900      	cmp	r1, #0
 800b75c:	d1d5      	bne.n	800b70a <LoRaMacMibSetRequestConfirm+0xda>
 800b75e:	e7b6      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800b760:	4b71      	ldr	r3, [pc, #452]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b762:	7920      	ldrb	r0, [r4, #4]
 800b764:	58eb      	ldr	r3, [r5, r3]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800b766:	4c71      	ldr	r4, [pc, #452]	; (800b92c <LoRaMacMibSetRequestConfirm+0x2fc>)
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800b768:	337d      	adds	r3, #125	; 0x7d
 800b76a:	7018      	strb	r0, [r3, #0]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800b76c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b76e:	9301      	str	r3, [sp, #4]
 800b770:	4798      	blx	r3
            Radio.Sleep( );
 800b772:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b774:	9301      	str	r3, [sp, #4]
 800b776:	4798      	blx	r3
            break;
 800b778:	e7a2      	b.n	800b6c0 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800b77a:	4b6b      	ldr	r3, [pc, #428]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b77c:	58eb      	ldr	r3, [r5, r3]
 800b77e:	33ca      	adds	r3, #202	; 0xca
 800b780:	e7b2      	b.n	800b6e8 <LoRaMacMibSetRequestConfirm+0xb8>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b782:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b784:	4e68      	ldr	r6, [pc, #416]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b786:	aa02      	add	r2, sp, #8
 800b788:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b78a:	59ab      	ldr	r3, [r5, r6]
 800b78c:	a902      	add	r1, sp, #8
 800b78e:	001a      	movs	r2, r3
 800b790:	32b9      	adds	r2, #185	; 0xb9
 800b792:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 800b794:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b796:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 800b798:	2207      	movs	r2, #7
 800b79a:	a903      	add	r1, sp, #12
 800b79c:	f001 fbce 	bl	800cf3c <RegionVerify>
 800b7a0:	2800      	cmp	r0, #0
 800b7a2:	d100      	bne.n	800b7a6 <LoRaMacMibSetRequestConfirm+0x176>
 800b7a4:	e793      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800b7a6:	6863      	ldr	r3, [r4, #4]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 800b7a8:	2200      	movs	r2, #0
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800b7aa:	9303      	str	r3, [sp, #12]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 800b7ac:	59ab      	ldr	r3, [r5, r6]
 800b7ae:	a903      	add	r1, sp, #12
 800b7b0:	7818      	ldrb	r0, [r3, #0]
 800b7b2:	f001 fbc3 	bl	800cf3c <RegionVerify>
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	d100      	bne.n	800b7bc <LoRaMacMibSetRequestConfirm+0x18c>
 800b7ba:	e788      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800b7bc:	59ab      	ldr	r3, [r5, r6]
 800b7be:	33a8      	adds	r3, #168	; 0xa8
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800b7c0:	3404      	adds	r4, #4
 800b7c2:	cc06      	ldmia	r4!, {r1, r2}
 800b7c4:	c306      	stmia	r3!, {r1, r2}
 800b7c6:	e77b      	b.n	800b6c0 <LoRaMacMibSetRequestConfirm+0x90>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b7c8:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b7ca:	4e57      	ldr	r6, [pc, #348]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800b7cc:	aa02      	add	r2, sp, #8
 800b7ce:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b7d0:	59ab      	ldr	r3, [r5, r6]
 800b7d2:	a902      	add	r1, sp, #8
 800b7d4:	001a      	movs	r2, r3
 800b7d6:	32b9      	adds	r2, #185	; 0xb9
 800b7d8:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800b7da:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b7dc:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800b7de:	2207      	movs	r2, #7
 800b7e0:	a903      	add	r1, sp, #12
 800b7e2:	f001 fbab 	bl	800cf3c <RegionVerify>
 800b7e6:	2800      	cmp	r0, #0
 800b7e8:	d100      	bne.n	800b7ec <LoRaMacMibSetRequestConfirm+0x1bc>
 800b7ea:	e770      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800b7ec:	59ab      	ldr	r3, [r5, r6]
 800b7ee:	3328      	adds	r3, #40	; 0x28
 800b7f0:	e7e6      	b.n	800b7c0 <LoRaMacMibSetRequestConfirm+0x190>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b7f2:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b7f4:	4e4c      	ldr	r6, [pc, #304]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b7f6:	aa02      	add	r2, sp, #8
 800b7f8:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b7fa:	59ab      	ldr	r3, [r5, r6]
 800b7fc:	a902      	add	r1, sp, #8
 800b7fe:	001a      	movs	r2, r3
 800b800:	32b9      	adds	r2, #185	; 0xb9
 800b802:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800b804:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b806:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800b808:	2207      	movs	r2, #7
 800b80a:	a903      	add	r1, sp, #12
 800b80c:	f001 fb96 	bl	800cf3c <RegionVerify>
 800b810:	2800      	cmp	r0, #0
 800b812:	d100      	bne.n	800b816 <LoRaMacMibSetRequestConfirm+0x1e6>
 800b814:	e75b      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800b816:	59ab      	ldr	r3, [r5, r6]
 800b818:	3404      	adds	r4, #4
 800b81a:	001a      	movs	r2, r3
 800b81c:	32b0      	adds	r2, #176	; 0xb0
 800b81e:	cc03      	ldmia	r4!, {r0, r1}
 800b820:	c203      	stmia	r2!, {r0, r1}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800b822:	3a3c      	subs	r2, #60	; 0x3c
 800b824:	7812      	ldrb	r2, [r2, #0]
 800b826:	2a02      	cmp	r2, #2
 800b828:	d000      	beq.n	800b82c <LoRaMacMibSetRequestConfirm+0x1fc>
 800b82a:	e749      	b.n	800b6c0 <LoRaMacMibSetRequestConfirm+0x90>
 800b82c:	3263      	adds	r2, #99	; 0x63
 800b82e:	32ff      	adds	r2, #255	; 0xff
 800b830:	5c9b      	ldrb	r3, [r3, r2]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d100      	bne.n	800b838 <LoRaMacMibSetRequestConfirm+0x208>
 800b836:	e743      	b.n	800b6c0 <LoRaMacMibSetRequestConfirm+0x90>
                    Radio.Sleep( );
 800b838:	4b3c      	ldr	r3, [pc, #240]	; (800b92c <LoRaMacMibSetRequestConfirm+0x2fc>)
 800b83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b83c:	9301      	str	r3, [sp, #4]
 800b83e:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800b840:	f7fe fa64 	bl	8009d0c <OpenContinuousRxCWindow>
 800b844:	e73c      	b.n	800b6c0 <LoRaMacMibSetRequestConfirm+0x90>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b846:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b848:	4e37      	ldr	r6, [pc, #220]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800b84a:	aa02      	add	r2, sp, #8
 800b84c:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b84e:	59ab      	ldr	r3, [r5, r6]
 800b850:	a902      	add	r1, sp, #8
 800b852:	001a      	movs	r2, r3
 800b854:	32b9      	adds	r2, #185	; 0xb9
 800b856:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800b858:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b85a:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800b85c:	2207      	movs	r2, #7
 800b85e:	a903      	add	r1, sp, #12
 800b860:	f001 fb6c 	bl	800cf3c <RegionVerify>
 800b864:	2800      	cmp	r0, #0
 800b866:	d100      	bne.n	800b86a <LoRaMacMibSetRequestConfirm+0x23a>
 800b868:	e731      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800b86a:	59ab      	ldr	r3, [r5, r6]
 800b86c:	3330      	adds	r3, #48	; 0x30
 800b86e:	e7a7      	b.n	800b7c0 <LoRaMacMibSetRequestConfirm+0x190>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800b870:	6863      	ldr	r3, [r4, #4]
 800b872:	a904      	add	r1, sp, #16
 800b874:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800b876:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800b878:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800b87a:	4b2b      	ldr	r3, [pc, #172]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b87c:	58eb      	ldr	r3, [r5, r3]
 800b87e:	7818      	ldrb	r0, [r3, #0]
 800b880:	f001 fb6f 	bl	800cf62 <RegionChanMaskSet>
 800b884:	2800      	cmp	r0, #0
 800b886:	d000      	beq.n	800b88a <LoRaMacMibSetRequestConfirm+0x25a>
 800b888:	e71a      	b.n	800b6c0 <LoRaMacMibSetRequestConfirm+0x90>
 800b88a:	e720      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800b88c:	6863      	ldr	r3, [r4, #4]
 800b88e:	a904      	add	r1, sp, #16
 800b890:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800b892:	2300      	movs	r3, #0
 800b894:	e7f0      	b.n	800b878 <LoRaMacMibSetRequestConfirm+0x248>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800b896:	7922      	ldrb	r2, [r4, #4]
 800b898:	1e53      	subs	r3, r2, #1
 800b89a:	2b0e      	cmp	r3, #14
 800b89c:	d900      	bls.n	800b8a0 <LoRaMacMibSetRequestConfirm+0x270>
 800b89e:	e716      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800b8a0:	4b21      	ldr	r3, [pc, #132]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b8a2:	58eb      	ldr	r3, [r5, r3]
 800b8a4:	33a4      	adds	r3, #164	; 0xa4
 800b8a6:	e720      	b.n	800b6ea <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800b8a8:	4b1f      	ldr	r3, [pc, #124]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b8aa:	58eb      	ldr	r3, [r5, r3]
 800b8ac:	3390      	adds	r3, #144	; 0x90
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800b8ae:	6862      	ldr	r2, [r4, #4]
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800b8b0:	601a      	str	r2, [r3, #0]
 800b8b2:	e705      	b.n	800b6c0 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800b8b4:	4b1c      	ldr	r3, [pc, #112]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b8b6:	58eb      	ldr	r3, [r5, r3]
 800b8b8:	3394      	adds	r3, #148	; 0x94
 800b8ba:	e7f8      	b.n	800b8ae <LoRaMacMibSetRequestConfirm+0x27e>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800b8bc:	4b1a      	ldr	r3, [pc, #104]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b8be:	58eb      	ldr	r3, [r5, r3]
 800b8c0:	3398      	adds	r3, #152	; 0x98
 800b8c2:	e7f4      	b.n	800b8ae <LoRaMacMibSetRequestConfirm+0x27e>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800b8c4:	4b18      	ldr	r3, [pc, #96]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b8c6:	58eb      	ldr	r3, [r5, r3]
 800b8c8:	339c      	adds	r3, #156	; 0x9c
 800b8ca:	e7f0      	b.n	800b8ae <LoRaMacMibSetRequestConfirm+0x27e>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800b8cc:	4b16      	ldr	r3, [pc, #88]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
 800b8ce:	58eb      	ldr	r3, [r5, r3]
 800b8d0:	33a0      	adds	r3, #160	; 0xa0
 800b8d2:	e7ec      	b.n	800b8ae <LoRaMacMibSetRequestConfirm+0x27e>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800b8d4:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800b8d6:	4c14      	ldr	r4, [pc, #80]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800b8d8:	aa02      	add	r2, sp, #8
 800b8da:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800b8dc:	592b      	ldr	r3, [r5, r4]
 800b8de:	2206      	movs	r2, #6
 800b8e0:	7818      	ldrb	r0, [r3, #0]
 800b8e2:	a903      	add	r1, sp, #12
 800b8e4:	f001 fb2a 	bl	800cf3c <RegionVerify>
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	d100      	bne.n	800b8ee <LoRaMacMibSetRequestConfirm+0x2be>
 800b8ec:	e6ef      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b8ee:	aa02      	add	r2, sp, #8
 800b8f0:	592b      	ldr	r3, [r5, r4]
 800b8f2:	7912      	ldrb	r2, [r2, #4]
 800b8f4:	715a      	strb	r2, [r3, #5]
 800b8f6:	e6e3      	b.n	800b6c0 <LoRaMacMibSetRequestConfirm+0x90>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800b8f8:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b8fa:	4c0b      	ldr	r4, [pc, #44]	; (800b928 <LoRaMacMibSetRequestConfirm+0x2f8>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800b8fc:	ae03      	add	r6, sp, #12
 800b8fe:	7033      	strb	r3, [r6, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b900:	592b      	ldr	r3, [r5, r4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b902:	0031      	movs	r1, r6
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b904:	001a      	movs	r2, r3
 800b906:	32b8      	adds	r2, #184	; 0xb8
 800b908:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b90a:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b90c:	70b2      	strb	r2, [r6, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b90e:	2205      	movs	r2, #5
 800b910:	f001 fb14 	bl	800cf3c <RegionVerify>
 800b914:	2800      	cmp	r0, #0
 800b916:	d100      	bne.n	800b91a <LoRaMacMibSetRequestConfirm+0x2ea>
 800b918:	e6d9      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b91a:	592b      	ldr	r3, [r5, r4]
 800b91c:	7832      	ldrb	r2, [r6, #0]
 800b91e:	3385      	adds	r3, #133	; 0x85
 800b920:	e6e3      	b.n	800b6ea <LoRaMacMibSetRequestConfirm+0xba>
 800b922:	46c0      	nop			; (mov r8, r8)
 800b924:	2000071c 	.word	0x2000071c
 800b928:	00000484 	.word	0x00000484
 800b92c:	080117e4 	.word	0x080117e4
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800b930:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800b932:	4c4f      	ldr	r4, [pc, #316]	; (800ba70 <LoRaMacMibSetRequestConfirm+0x440>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800b934:	aa02      	add	r2, sp, #8
 800b936:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800b938:	592b      	ldr	r3, [r5, r4]
 800b93a:	220a      	movs	r2, #10
 800b93c:	7818      	ldrb	r0, [r3, #0]
 800b93e:	a903      	add	r1, sp, #12
 800b940:	f001 fafc 	bl	800cf3c <RegionVerify>
 800b944:	2800      	cmp	r0, #0
 800b946:	d100      	bne.n	800b94a <LoRaMacMibSetRequestConfirm+0x31a>
 800b948:	e6c1      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 800b94a:	aa02      	add	r2, sp, #8
 800b94c:	592b      	ldr	r3, [r5, r4]
 800b94e:	7912      	ldrb	r2, [r2, #4]
 800b950:	711a      	strb	r2, [r3, #4]
 800b952:	e6b5      	b.n	800b6c0 <LoRaMacMibSetRequestConfirm+0x90>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800b954:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800b956:	4c46      	ldr	r4, [pc, #280]	; (800ba70 <LoRaMacMibSetRequestConfirm+0x440>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800b958:	aa02      	add	r2, sp, #8
 800b95a:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800b95c:	592b      	ldr	r3, [r5, r4]
 800b95e:	2209      	movs	r2, #9
 800b960:	7818      	ldrb	r0, [r3, #0]
 800b962:	a903      	add	r1, sp, #12
 800b964:	f001 faea 	bl	800cf3c <RegionVerify>
 800b968:	2800      	cmp	r0, #0
 800b96a:	d100      	bne.n	800b96e <LoRaMacMibSetRequestConfirm+0x33e>
 800b96c:	e6af      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 800b96e:	592b      	ldr	r3, [r5, r4]
 800b970:	aa02      	add	r2, sp, #8
 800b972:	7912      	ldrb	r2, [r2, #4]
 800b974:	3384      	adds	r3, #132	; 0x84
 800b976:	e6b8      	b.n	800b6ea <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800b978:	4b3d      	ldr	r3, [pc, #244]	; (800ba70 <LoRaMacMibSetRequestConfirm+0x440>)
 800b97a:	6862      	ldr	r2, [r4, #4]
 800b97c:	58eb      	ldr	r3, [r5, r3]
 800b97e:	609a      	str	r2, [r3, #8]
 800b980:	3388      	adds	r3, #136	; 0x88
 800b982:	e795      	b.n	800b8b0 <LoRaMacMibSetRequestConfirm+0x280>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800b984:	4b3a      	ldr	r3, [pc, #232]	; (800ba70 <LoRaMacMibSetRequestConfirm+0x440>)
 800b986:	7922      	ldrb	r2, [r4, #4]
 800b988:	58eb      	ldr	r3, [r5, r3]
 800b98a:	731a      	strb	r2, [r3, #12]
 800b98c:	338c      	adds	r3, #140	; 0x8c
 800b98e:	e6ac      	b.n	800b6ea <LoRaMacMibSetRequestConfirm+0xba>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800b990:	4b37      	ldr	r3, [pc, #220]	; (800ba70 <LoRaMacMibSetRequestConfirm+0x440>)
 800b992:	6862      	ldr	r2, [r4, #4]
 800b994:	58eb      	ldr	r3, [r5, r3]
 800b996:	33c0      	adds	r3, #192	; 0xc0
 800b998:	601a      	str	r2, [r3, #0]
 800b99a:	e691      	b.n	800b6c0 <LoRaMacMibSetRequestConfirm+0x90>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800b99c:	4b34      	ldr	r3, [pc, #208]	; (800ba70 <LoRaMacMibSetRequestConfirm+0x440>)
 800b99e:	6862      	ldr	r2, [r4, #4]
 800b9a0:	58eb      	ldr	r3, [r5, r3]
 800b9a2:	641a      	str	r2, [r3, #64]	; 0x40
 800b9a4:	e68c      	b.n	800b6c0 <LoRaMacMibSetRequestConfirm+0x90>
            if( mibSet->Param.Contexts != 0 )
 800b9a6:	6864      	ldr	r4, [r4, #4]
 800b9a8:	2c00      	cmp	r4, #0
 800b9aa:	d100      	bne.n	800b9ae <LoRaMacMibSetRequestConfirm+0x37e>
 800b9ac:	e68f      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
        return LORAMAC_STATUS_BUSY;
 800b9ae:	2601      	movs	r6, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800b9b0:	42b3      	cmp	r3, r6
 800b9b2:	d000      	beq.n	800b9b6 <LoRaMacMibSetRequestConfirm+0x386>
 800b9b4:	e68c      	b.n	800b6d0 <LoRaMacMibSetRequestConfirm+0xa0>
    if( contexts->MacNvmCtx != NULL )
 800b9b6:	6821      	ldr	r1, [r4, #0]
 800b9b8:	2900      	cmp	r1, #0
 800b9ba:	d004      	beq.n	800b9c6 <LoRaMacMibSetRequestConfirm+0x396>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 800b9bc:	6863      	ldr	r3, [r4, #4]
 800b9be:	482d      	ldr	r0, [pc, #180]	; (800ba74 <LoRaMacMibSetRequestConfirm+0x444>)
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	f002 fba9 	bl	800e118 <memcpy1>
    params.Type = INIT_TYPE_RESTORE_CTX;
 800b9c6:	2303      	movs	r3, #3
 800b9c8:	a904      	add	r1, sp, #16
 800b9ca:	710b      	strb	r3, [r1, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 800b9cc:	68a3      	ldr	r3, [r4, #8]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800b9ce:	4e28      	ldr	r6, [pc, #160]	; (800ba70 <LoRaMacMibSetRequestConfirm+0x440>)
    params.NvmCtx = contexts->RegionNvmCtx;
 800b9d0:	9304      	str	r3, [sp, #16]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800b9d2:	59ab      	ldr	r3, [r5, r6]
 800b9d4:	7818      	ldrb	r0, [r3, #0]
 800b9d6:	f001 faa0 	bl	800cf1a <RegionInitDefaults>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b9da:	4b27      	ldr	r3, [pc, #156]	; (800ba78 <LoRaMacMibSetRequestConfirm+0x448>)
 800b9dc:	5cea      	ldrb	r2, [r5, r3]
 800b9de:	3b35      	subs	r3, #53	; 0x35
 800b9e0:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 800b9e2:	59ab      	ldr	r3, [r5, r6]
 800b9e4:	001a      	movs	r2, r3
 800b9e6:	32b0      	adds	r2, #176	; 0xb0
 800b9e8:	6811      	ldr	r1, [r2, #0]
 800b9ea:	22f9      	movs	r2, #249	; 0xf9
 800b9ec:	0092      	lsls	r2, r2, #2
 800b9ee:	50a9      	str	r1, [r5, r2]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b9f0:	001a      	movs	r2, r3
 800b9f2:	32b9      	adds	r2, #185	; 0xb9
 800b9f4:	7811      	ldrb	r1, [r2, #0]
 800b9f6:	22fc      	movs	r2, #252	; 0xfc
 800b9f8:	0092      	lsls	r2, r2, #2
 800b9fa:	54a9      	strb	r1, [r5, r2]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800b9fc:	33ca      	adds	r3, #202	; 0xca
 800b9fe:	781a      	ldrb	r2, [r3, #0]
 800ba00:	4b1e      	ldr	r3, [pc, #120]	; (800ba7c <LoRaMacMibSetRequestConfirm+0x44c>)
 800ba02:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800ba04:	4b1e      	ldr	r3, [pc, #120]	; (800ba80 <LoRaMacMibSetRequestConfirm+0x450>)
 800ba06:	4a1f      	ldr	r2, [pc, #124]	; (800ba84 <LoRaMacMibSetRequestConfirm+0x454>)
 800ba08:	52ea      	strh	r2, [r5, r3]
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 800ba0a:	69a0      	ldr	r0, [r4, #24]
 800ba0c:	f7fc feee 	bl	80087ec <SecureElementRestoreNvmCtx>
 800ba10:	2800      	cmp	r0, #0
 800ba12:	d001      	beq.n	800ba18 <LoRaMacMibSetRequestConfirm+0x3e8>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800ba14:	2611      	movs	r6, #17
 800ba16:	e65b      	b.n	800b6d0 <LoRaMacMibSetRequestConfirm+0xa0>
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 800ba18:	6920      	ldr	r0, [r4, #16]
 800ba1a:	f000 ff1f 	bl	800c85c <LoRaMacCryptoRestoreNvmCtx>
 800ba1e:	2800      	cmp	r0, #0
 800ba20:	d1f8      	bne.n	800ba14 <LoRaMacMibSetRequestConfirm+0x3e4>
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 800ba22:	6a20      	ldr	r0, [r4, #32]
 800ba24:	f000 fbc8 	bl	800c1b8 <LoRaMacCommandsRestoreNvmCtx>
 800ba28:	1e06      	subs	r6, r0, #0
 800ba2a:	d10c      	bne.n	800ba46 <LoRaMacMibSetRequestConfirm+0x416>
    if( LoRaMacClassBRestoreNvmCtx( contexts->ClassBNvmCtx ) != true )
 800ba2c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800ba2e:	f000 fb7b 	bl	800c128 <LoRaMacClassBRestoreNvmCtx>
 800ba32:	2800      	cmp	r0, #0
 800ba34:	d009      	beq.n	800ba4a <LoRaMacMibSetRequestConfirm+0x41a>
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 800ba36:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800ba38:	f000 fd0c 	bl	800c454 <LoRaMacConfirmQueueRestoreNvmCtx>
 800ba3c:	2800      	cmp	r0, #0
 800ba3e:	d000      	beq.n	800ba42 <LoRaMacMibSetRequestConfirm+0x412>
 800ba40:	e646      	b.n	800b6d0 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 800ba42:	3615      	adds	r6, #21
 800ba44:	e644      	b.n	800b6d0 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ba46:	2613      	movs	r6, #19
 800ba48:	e642      	b.n	800b6d0 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_CLASS_B_ERROR;
 800ba4a:	2614      	movs	r6, #20
 800ba4c:	e640      	b.n	800b6d0 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800ba4e:	79a3      	ldrb	r3, [r4, #6]
 800ba50:	2b01      	cmp	r3, #1
 800ba52:	d900      	bls.n	800ba56 <LoRaMacMibSetRequestConfirm+0x426>
 800ba54:	e63b      	b.n	800b6ce <LoRaMacMibSetRequestConfirm+0x9e>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800ba56:	4b06      	ldr	r3, [pc, #24]	; (800ba70 <LoRaMacMibSetRequestConfirm+0x440>)
 800ba58:	6862      	ldr	r2, [r4, #4]
 800ba5a:	58eb      	ldr	r3, [r5, r3]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800ba5c:	6860      	ldr	r0, [r4, #4]
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800ba5e:	33fc      	adds	r3, #252	; 0xfc
 800ba60:	665a      	str	r2, [r3, #100]	; 0x64
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800ba62:	f000 fef3 	bl	800c84c <LoRaMacCryptoSetLrWanVersion>
 800ba66:	e652      	b.n	800b70e <LoRaMacMibSetRequestConfirm+0xde>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800ba68:	0020      	movs	r0, r4
 800ba6a:	f000 fb7c 	bl	800c166 <LoRaMacMibClassBSetRequestConfirm>
 800ba6e:	e61d      	b.n	800b6ac <LoRaMacMibSetRequestConfirm+0x7c>
 800ba70:	00000484 	.word	0x00000484
 800ba74:	200005b0 	.word	0x200005b0
 800ba78:	00000415 	.word	0x00000415
 800ba7c:	000003f1 	.word	0x000003f1
 800ba80:	000003f2 	.word	0x000003f2
 800ba84:	00000201 	.word	0x00000201

0800ba88 <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ba88:	2300      	movs	r3, #0
{
 800ba8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba8c:	b089      	sub	sp, #36	; 0x24
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ba8e:	aa02      	add	r2, sp, #8
{
 800ba90:	0005      	movs	r5, r0

    if( mlmeRequest == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ba92:	2603      	movs	r6, #3
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800ba94:	8013      	strh	r3, [r2, #0]
    if( mlmeRequest == NULL )
 800ba96:	4298      	cmp	r0, r3
 800ba98:	d004      	beq.n	800baa4 <LoRaMacMlmeRequest+0x1c>
    }
    if( LoRaMacIsBusy( ) == true )
 800ba9a:	f7fe fd33 	bl	800a504 <LoRaMacIsBusy>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d003      	beq.n	800baaa <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800baa2:	2601      	movs	r6, #1
    {
        LoRaMacConfirmQueueAdd( &queueElement );
        EventMacNvmCtxChanged( );
    }
    return status;
}
 800baa4:	0030      	movs	r0, r6
 800baa6:	b009      	add	sp, #36	; 0x24
 800baa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800baaa:	f000 fd9d 	bl	800c5e8 <LoRaMacConfirmQueueIsFull>
 800baae:	2800      	cmp	r0, #0
 800bab0:	d1f7      	bne.n	800baa2 <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800bab2:	f000 fd93 	bl	800c5dc <LoRaMacConfirmQueueGetCnt>
 800bab6:	1e01      	subs	r1, r0, #0
 800bab8:	d103      	bne.n	800bac2 <LoRaMacMlmeRequest+0x3a>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800baba:	2214      	movs	r2, #20
 800babc:	486b      	ldr	r0, [pc, #428]	; (800bc6c <LoRaMacMlmeRequest+0x1e4>)
 800babe:	f002 fb41 	bl	800e144 <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bac2:	2301      	movs	r3, #1
 800bac4:	4c6a      	ldr	r4, [pc, #424]	; (800bc70 <LoRaMacMlmeRequest+0x1e8>)
 800bac6:	4a6b      	ldr	r2, [pc, #428]	; (800bc74 <LoRaMacMlmeRequest+0x1ec>)
    queueElement.RestrictCommonReadyToHandle = false;
 800bac8:	2600      	movs	r6, #0
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800baca:	54a3      	strb	r3, [r4, r2]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800bacc:	2204      	movs	r2, #4
 800bace:	496a      	ldr	r1, [pc, #424]	; (800bc78 <LoRaMacMlmeRequest+0x1f0>)
 800bad0:	5c60      	ldrb	r0, [r4, r1]
 800bad2:	9100      	str	r1, [sp, #0]
 800bad4:	4302      	orrs	r2, r0
    queueElement.Request = mlmeRequest->Type;
 800bad6:	7828      	ldrb	r0, [r5, #0]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800bad8:	5462      	strb	r2, [r4, r1]
    queueElement.Request = mlmeRequest->Type;
 800bada:	aa03      	add	r2, sp, #12
 800badc:	7010      	strb	r0, [r2, #0]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bade:	3801      	subs	r0, #1
 800bae0:	7053      	strb	r3, [r2, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 800bae2:	70d6      	strb	r6, [r2, #3]
    switch( mlmeRequest->Type )
 800bae4:	280d      	cmp	r0, #13
 800bae6:	d900      	bls.n	800baea <LoRaMacMlmeRequest+0x62>
 800bae8:	e0b8      	b.n	800bc5c <LoRaMacMlmeRequest+0x1d4>
 800baea:	f7f4 fb1f 	bl	800012c <__gnu_thumb1_case_uqi>
 800baee:	b707      	.short	0xb707
 800baf0:	88665cb7 	.word	0x88665cb7
 800baf4:	91b7b7b7 	.word	0x91b7b7b7
 800baf8:	a795abb7 	.word	0xa795abb7
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800bafc:	23d0      	movs	r3, #208	; 0xd0
 800bafe:	009b      	lsls	r3, r3, #2
 800bb00:	58e2      	ldr	r2, [r4, r3]
 800bb02:	2320      	movs	r3, #32
 800bb04:	0016      	movs	r6, r2
 800bb06:	401e      	ands	r6, r3
 800bb08:	421a      	tst	r2, r3
 800bb0a:	d1ca      	bne.n	800baa2 <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 800bb0c:	f7fd fdf4 	bl	80096f8 <ResetMacParameters>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800bb10:	2104      	movs	r1, #4
 800bb12:	4b5a      	ldr	r3, [pc, #360]	; (800bc7c <LoRaMacMlmeRequest+0x1f4>)
 800bb14:	0032      	movs	r2, r6
 800bb16:	58e7      	ldr	r7, [r4, r3]
 800bb18:	5669      	ldrsb	r1, [r5, r1]
 800bb1a:	7838      	ldrb	r0, [r7, #0]
 800bb1c:	f001 fa87 	bl	800d02e <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800bb20:	2207      	movs	r2, #7
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800bb22:	3785      	adds	r7, #133	; 0x85
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800bb24:	ab03      	add	r3, sp, #12
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800bb26:	7038      	strb	r0, [r7, #0]
            SwitchClass( CLASS_A );
 800bb28:	0030      	movs	r0, r6
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800bb2a:	705a      	strb	r2, [r3, #1]
            SwitchClass( CLASS_A );
 800bb2c:	f7fe f928 	bl	8009d80 <SwitchClass>
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800bb30:	0022      	movs	r2, r4
 800bb32:	4953      	ldr	r1, [pc, #332]	; (800bc80 <LoRaMacMlmeRequest+0x1f8>)
 800bb34:	32fc      	adds	r2, #252	; 0xfc
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800bb36:	0023      	movs	r3, r4
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800bb38:	60d1      	str	r1, [r2, #12]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800bb3a:	22ff      	movs	r2, #255	; 0xff
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800bb3c:	33ff      	adds	r3, #255	; 0xff
 800bb3e:	715e      	strb	r6, [r3, #5]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800bb40:	735a      	strb	r2, [r3, #13]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800bb42:	739e      	strb	r6, [r3, #14]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800bb44:	f7fc ff92 	bl	8008a6c <SecureElementGetJoinEui>
 800bb48:	2208      	movs	r2, #8
 800bb4a:	0001      	movs	r1, r0
 800bb4c:	484d      	ldr	r0, [pc, #308]	; (800bc84 <LoRaMacMlmeRequest+0x1fc>)
 800bb4e:	f002 fae3 	bl	800e118 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800bb52:	f7fc ff75 	bl	8008a40 <SecureElementGetDevEui>
 800bb56:	2208      	movs	r2, #8
 800bb58:	0001      	movs	r1, r0
 800bb5a:	484b      	ldr	r0, [pc, #300]	; (800bc88 <LoRaMacMlmeRequest+0x200>)
 800bb5c:	f002 fadc 	bl	800e118 <memcpy1>
    status = ScheduleTx( allowDelayedTx );
 800bb60:	0030      	movs	r0, r6
 800bb62:	f7fd fecf 	bl	8009904 <ScheduleTx>
 800bb66:	1e06      	subs	r6, r0, #0
            if( status != LORAMAC_STATUS_OK )
 800bb68:	d009      	beq.n	800bb7e <LoRaMacMlmeRequest+0xf6>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800bb6a:	2104      	movs	r1, #4
 800bb6c:	4b43      	ldr	r3, [pc, #268]	; (800bc7c <LoRaMacMlmeRequest+0x1f4>)
 800bb6e:	2201      	movs	r2, #1
 800bb70:	58e7      	ldr	r7, [r4, r3]
 800bb72:	5669      	ldrsb	r1, [r5, r1]
 800bb74:	7838      	ldrb	r0, [r7, #0]
 800bb76:	f001 fa5a 	bl	800d02e <RegionAlternateDr>
 800bb7a:	3785      	adds	r7, #133	; 0x85
 800bb7c:	7038      	strb	r0, [r7, #0]
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800bb7e:	2391      	movs	r3, #145	; 0x91
 800bb80:	00db      	lsls	r3, r3, #3
 800bb82:	58e3      	ldr	r3, [r4, r3]
 800bb84:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800bb86:	2e00      	cmp	r6, #0
 800bb88:	d06a      	beq.n	800bc60 <LoRaMacMlmeRequest+0x1d8>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800bb8a:	f000 fd27 	bl	800c5dc <LoRaMacConfirmQueueGetCnt>
 800bb8e:	2800      	cmp	r0, #0
 800bb90:	d000      	beq.n	800bb94 <LoRaMacMlmeRequest+0x10c>
 800bb92:	e787      	b.n	800baa4 <LoRaMacMlmeRequest+0x1c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800bb94:	2204      	movs	r2, #4
            MacCtx.NodeAckRequested = false;
 800bb96:	4b3d      	ldr	r3, [pc, #244]	; (800bc8c <LoRaMacMlmeRequest+0x204>)
 800bb98:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800bb9a:	9b00      	ldr	r3, [sp, #0]
 800bb9c:	5ce3      	ldrb	r3, [r4, r3]
 800bb9e:	4393      	bics	r3, r2
 800bba0:	9a00      	ldr	r2, [sp, #0]
 800bba2:	54a3      	strb	r3, [r4, r2]
 800bba4:	e77e      	b.n	800baa4 <LoRaMacMlmeRequest+0x1c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800bba6:	2200      	movs	r2, #0
 800bba8:	2002      	movs	r0, #2
 800bbaa:	a902      	add	r1, sp, #8
 800bbac:	f000 fb18 	bl	800c1e0 <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bbb0:	2613      	movs	r6, #19
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800bbb2:	2800      	cmp	r0, #0
 800bbb4:	d1e3      	bne.n	800bb7e <LoRaMacMlmeRequest+0xf6>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800bbb6:	2600      	movs	r6, #0
            break;
 800bbb8:	e7e1      	b.n	800bb7e <LoRaMacMlmeRequest+0xf6>
    continuousWave.Channel = MacCtx.Channel;
 800bbba:	4b35      	ldr	r3, [pc, #212]	; (800bc90 <LoRaMacMlmeRequest+0x208>)
 800bbbc:	a904      	add	r1, sp, #16
 800bbbe:	5ce3      	ldrb	r3, [r4, r3]
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800bbc0:	88aa      	ldrh	r2, [r5, #4]
    continuousWave.Channel = MacCtx.Channel;
 800bbc2:	700b      	strb	r3, [r1, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800bbc4:	4b2d      	ldr	r3, [pc, #180]	; (800bc7c <LoRaMacMlmeRequest+0x1f4>)
 800bbc6:	58e3      	ldr	r3, [r4, r3]
 800bbc8:	0018      	movs	r0, r3
 800bbca:	3085      	adds	r0, #133	; 0x85
 800bbcc:	7800      	ldrb	r0, [r0, #0]
 800bbce:	7048      	strb	r0, [r1, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	3084      	adds	r0, #132	; 0x84
 800bbd4:	7800      	ldrb	r0, [r0, #0]
    continuousWave.Timeout = timeout;
 800bbd6:	818a      	strh	r2, [r1, #12]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800bbd8:	7088      	strb	r0, [r1, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800bbda:	0018      	movs	r0, r3
 800bbdc:	30bc      	adds	r0, #188	; 0xbc
 800bbde:	6800      	ldr	r0, [r0, #0]
 800bbe0:	6048      	str	r0, [r1, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800bbe2:	0018      	movs	r0, r3
 800bbe4:	30c0      	adds	r0, #192	; 0xc0
 800bbe6:	6800      	ldr	r0, [r0, #0]
 800bbe8:	6088      	str	r0, [r1, #8]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 800bbea:	7818      	ldrb	r0, [r3, #0]
 800bbec:	f001 fa39 	bl	800d062 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800bbf0:	22d0      	movs	r2, #208	; 0xd0
 800bbf2:	2302      	movs	r3, #2
 800bbf4:	0092      	lsls	r2, r2, #2
 800bbf6:	58a1      	ldr	r1, [r4, r2]
 800bbf8:	430b      	orrs	r3, r1
 800bbfa:	50a3      	str	r3, [r4, r2]
 800bbfc:	e7db      	b.n	800bbb6 <LoRaMacMlmeRequest+0x12e>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800bbfe:	210c      	movs	r1, #12
 800bc00:	4b24      	ldr	r3, [pc, #144]	; (800bc94 <LoRaMacMlmeRequest+0x20c>)
 800bc02:	88aa      	ldrh	r2, [r5, #4]
 800bc04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc06:	5669      	ldrsb	r1, [r5, r1]
 800bc08:	68a8      	ldr	r0, [r5, #8]
 800bc0a:	9301      	str	r3, [sp, #4]
 800bc0c:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800bc0e:	e7ef      	b.n	800bbf0 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800bc10:	2200      	movs	r2, #0
 800bc12:	200d      	movs	r0, #13
 800bc14:	a902      	add	r1, sp, #8
 800bc16:	e7c9      	b.n	800bbac <LoRaMacMlmeRequest+0x124>
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800bc18:	4b18      	ldr	r3, [pc, #96]	; (800bc7c <LoRaMacMlmeRequest+0x1f4>)
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800bc1a:	2602      	movs	r6, #2
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800bc1c:	58e3      	ldr	r3, [r4, r3]
 800bc1e:	337c      	adds	r3, #124	; 0x7c
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d1ab      	bne.n	800bb7e <LoRaMacMlmeRequest+0xf6>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800bc26:	792e      	ldrb	r6, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800bc28:	0770      	lsls	r0, r6, #29
 800bc2a:	0f40      	lsrs	r0, r0, #29
 800bc2c:	f000 fa94 	bl	800c158 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800bc30:	ab02      	add	r3, sp, #8
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800bc32:	2201      	movs	r2, #1
 800bc34:	0019      	movs	r1, r3
 800bc36:	2010      	movs	r0, #16
                macCmdPayload[0] = value;
 800bc38:	701e      	strb	r6, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800bc3a:	e7b7      	b.n	800bbac <LoRaMacMlmeRequest+0x124>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	2012      	movs	r0, #18
 800bc40:	a902      	add	r1, sp, #8
 800bc42:	e7b3      	b.n	800bbac <LoRaMacMlmeRequest+0x124>
            queueElement.RestrictCommonReadyToHandle = true;
 800bc44:	70d3      	strb	r3, [r2, #3]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800bc46:	f000 fa78 	bl	800c13a <LoRaMacClassBIsAcquisitionInProgress>
                status = LORAMAC_STATUS_BUSY;
 800bc4a:	2601      	movs	r6, #1
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800bc4c:	1e07      	subs	r7, r0, #0
 800bc4e:	d196      	bne.n	800bb7e <LoRaMacMlmeRequest+0xf6>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800bc50:	f000 fa70 	bl	800c134 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800bc54:	0038      	movs	r0, r7
 800bc56:	f000 fa72 	bl	800c13e <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800bc5a:	e7ac      	b.n	800bbb6 <LoRaMacMlmeRequest+0x12e>
    queueElement.RestrictCommonReadyToHandle = false;
 800bc5c:	2602      	movs	r6, #2
 800bc5e:	e78e      	b.n	800bb7e <LoRaMacMlmeRequest+0xf6>
        LoRaMacConfirmQueueAdd( &queueElement );
 800bc60:	a803      	add	r0, sp, #12
 800bc62:	f000 fc0d 	bl	800c480 <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 800bc66:	f7fd fc43 	bl	80094f0 <EventMacNvmCtxChanged>
 800bc6a:	e71b      	b.n	800baa4 <LoRaMacMlmeRequest+0x1c>
 800bc6c:	20000b6c 	.word	0x20000b6c
 800bc70:	2000071c 	.word	0x2000071c
 800bc74:	00000451 	.word	0x00000451
 800bc78:	00000481 	.word	0x00000481
 800bc7c:	00000484 	.word	0x00000484
 800bc80:	2000071e 	.word	0x2000071e
 800bc84:	2000082a 	.word	0x2000082a
 800bc88:	20000832 	.word	0x20000832
 800bc8c:	00000414 	.word	0x00000414
 800bc90:	00000415 	.word	0x00000415
 800bc94:	080117e4 	.word	0x080117e4

0800bc98 <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800bc98:	2300      	movs	r3, #0
 800bc9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc9c:	b097      	sub	sp, #92	; 0x5c
 800bc9e:	9000      	str	r0, [sp, #0]
 800bca0:	9108      	str	r1, [sp, #32]
 800bca2:	9302      	str	r3, [sp, #8]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d103      	bne.n	800bcb0 <LoRaMacMcpsRequest+0x18>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bca8:	2703      	movs	r7, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800bcaa:	0038      	movs	r0, r7
 800bcac:	b017      	add	sp, #92	; 0x5c
 800bcae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 800bcb0:	f7fe fc28 	bl	800a504 <LoRaMacIsBusy>
        return LORAMAC_STATUS_BUSY;
 800bcb4:	2701      	movs	r7, #1
    if( LoRaMacIsBusy( ) == true )
 800bcb6:	1e04      	subs	r4, r0, #0
 800bcb8:	d1f7      	bne.n	800bcaa <LoRaMacMcpsRequest+0x12>
    macHdr.Value = 0;
 800bcba:	466b      	mov	r3, sp
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800bcbc:	0001      	movs	r1, r0
    macHdr.Value = 0;
 800bcbe:	7418      	strb	r0, [r3, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800bcc0:	2214      	movs	r2, #20
 800bcc2:	48cb      	ldr	r0, [pc, #812]	; (800bff0 <LoRaMacMcpsRequest+0x358>)
 800bcc4:	f002 fa3e 	bl	800e144 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bcc8:	4dca      	ldr	r5, [pc, #808]	; (800bff4 <LoRaMacMcpsRequest+0x35c>)
 800bcca:	4bcb      	ldr	r3, [pc, #812]	; (800bff8 <LoRaMacMcpsRequest+0x360>)
 800bccc:	54ef      	strb	r7, [r5, r3]
    MacCtx.AckTimeoutRetriesCounter = 1;
 800bcce:	4bcb      	ldr	r3, [pc, #812]	; (800bffc <LoRaMacMcpsRequest+0x364>)
 800bcd0:	54ef      	strb	r7, [r5, r3]
    switch( mcpsRequest->Type )
 800bcd2:	9b00      	ldr	r3, [sp, #0]
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	42bb      	cmp	r3, r7
 800bcd8:	d100      	bne.n	800bcdc <LoRaMacMcpsRequest+0x44>
 800bcda:	e115      	b.n	800bf08 <LoRaMacMcpsRequest+0x270>
 800bcdc:	2b03      	cmp	r3, #3
 800bcde:	d100      	bne.n	800bce2 <LoRaMacMcpsRequest+0x4a>
 800bce0:	e11c      	b.n	800bf1c <LoRaMacMcpsRequest+0x284>
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d000      	beq.n	800bce8 <LoRaMacMcpsRequest+0x50>
 800bce6:	e12b      	b.n	800bf40 <LoRaMacMcpsRequest+0x2a8>
            MacCtx.AckTimeoutRetries = 1;
 800bce8:	4bc5      	ldr	r3, [pc, #788]	; (800c000 <LoRaMacMcpsRequest+0x368>)
 800bcea:	54ef      	strb	r7, [r5, r3]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800bcec:	2340      	movs	r3, #64	; 0x40
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800bcee:	466a      	mov	r2, sp
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800bcf0:	260e      	movs	r6, #14
            readyToSend = true;
 800bcf2:	2401      	movs	r4, #1
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800bcf4:	7413      	strb	r3, [r2, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800bcf6:	9b00      	ldr	r3, [sp, #0]
 800bcf8:	791b      	ldrb	r3, [r3, #4]
 800bcfa:	9305      	str	r3, [sp, #20]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800bcfc:	9b00      	ldr	r3, [sp, #0]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	9303      	str	r3, [sp, #12]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800bd02:	9b00      	ldr	r3, [sp, #0]
 800bd04:	899b      	ldrh	r3, [r3, #12]
 800bd06:	9302      	str	r3, [sp, #8]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800bd08:	9b00      	ldr	r3, [sp, #0]
 800bd0a:	579e      	ldrsb	r6, [r3, r6]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800bd0c:	2202      	movs	r2, #2
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800bd0e:	4fbd      	ldr	r7, [pc, #756]	; (800c004 <LoRaMacMcpsRequest+0x36c>)
    getPhy.Attribute = PHY_MIN_TX_DR;
 800bd10:	ab0a      	add	r3, sp, #40	; 0x28
 800bd12:	751a      	strb	r2, [r3, #20]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800bd14:	59eb      	ldr	r3, [r5, r7]
 800bd16:	a90a      	add	r1, sp, #40	; 0x28
 800bd18:	001a      	movs	r2, r3
 800bd1a:	32b8      	adds	r2, #184	; 0xb8
 800bd1c:	7812      	ldrb	r2, [r2, #0]
 800bd1e:	758a      	strb	r2, [r1, #22]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800bd20:	7818      	ldrb	r0, [r3, #0]
 800bd22:	a90f      	add	r1, sp, #60	; 0x3c
 800bd24:	f001 f8e6 	bl	800cef4 <RegionGetPhyParam>
 800bd28:	9701      	str	r7, [sp, #4]
 800bd2a:	900a      	str	r0, [sp, #40]	; 0x28
    if( readyToSend == true )
 800bd2c:	2c00      	cmp	r4, #0
 800bd2e:	d100      	bne.n	800bd32 <LoRaMacMcpsRequest+0x9a>
 800bd30:	e150      	b.n	800bfd4 <LoRaMacMcpsRequest+0x33c>
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 800bd32:	59eb      	ldr	r3, [r5, r7]
 800bd34:	001a      	movs	r2, r3
 800bd36:	327e      	adds	r2, #126	; 0x7e
 800bd38:	7812      	ldrb	r2, [r2, #0]
 800bd3a:	2a00      	cmp	r2, #0
 800bd3c:	d117      	bne.n	800bd6e <LoRaMacMcpsRequest+0xd6>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800bd3e:	1c02      	adds	r2, r0, #0
 800bd40:	b240      	sxtb	r0, r0
            verify.DatarateParams.Datarate = datarate;
 800bd42:	ac0b      	add	r4, sp, #44	; 0x2c
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800bd44:	42b0      	cmp	r0, r6
 800bd46:	da00      	bge.n	800bd4a <LoRaMacMcpsRequest+0xb2>
 800bd48:	1c32      	adds	r2, r6, #0
            verify.DatarateParams.Datarate = datarate;
 800bd4a:	7022      	strb	r2, [r4, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800bd4c:	001a      	movs	r2, r3
 800bd4e:	32b8      	adds	r2, #184	; 0xb8
 800bd50:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800bd52:	0021      	movs	r1, r4
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800bd54:	70a2      	strb	r2, [r4, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800bd56:	7818      	ldrb	r0, [r3, #0]
 800bd58:	2205      	movs	r2, #5
 800bd5a:	f001 f8ef 	bl	800cf3c <RegionVerify>
 800bd5e:	2800      	cmp	r0, #0
 800bd60:	d0a2      	beq.n	800bca8 <LoRaMacMcpsRequest+0x10>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800bd62:	9a01      	ldr	r2, [sp, #4]
 800bd64:	4ba3      	ldr	r3, [pc, #652]	; (800bff4 <LoRaMacMcpsRequest+0x35c>)
 800bd66:	589b      	ldr	r3, [r3, r2]
 800bd68:	7822      	ldrb	r2, [r4, #0]
 800bd6a:	3385      	adds	r3, #133	; 0x85
 800bd6c:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800bd6e:	4ba1      	ldr	r3, [pc, #644]	; (800bff4 <LoRaMacMcpsRequest+0x35c>)
 800bd70:	9a01      	ldr	r2, [sp, #4]
 800bd72:	5899      	ldr	r1, [r3, r2]
 800bd74:	000a      	movs	r2, r1
 800bd76:	3284      	adds	r2, #132	; 0x84
 800bd78:	8812      	ldrh	r2, [r2, #0]
 800bd7a:	1d0b      	adds	r3, r1, #4
 800bd7c:	9206      	str	r2, [sp, #24]
 800bd7e:	ba57      	rev16	r7, r2
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800bd80:	6fda      	ldr	r2, [r3, #124]	; 0x7c
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800bd82:	23b2      	movs	r3, #178	; 0xb2
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800bd84:	920c      	str	r2, [sp, #48]	; 0x30
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800bd86:	005b      	lsls	r3, r3, #1
 800bd88:	5ccb      	ldrb	r3, [r1, r3]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d100      	bne.n	800bd90 <LoRaMacMcpsRequest+0xf8>
 800bd8e:	e11f      	b.n	800bfd0 <LoRaMacMcpsRequest+0x338>
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 800bd90:	000b      	movs	r3, r1
 800bd92:	33c8      	adds	r3, #200	; 0xc8
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d102      	bne.n	800bda0 <LoRaMacMcpsRequest+0x108>
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800bd9a:	0008      	movs	r0, r1
 800bd9c:	30fc      	adds	r0, #252	; 0xfc
 800bd9e:	6583      	str	r3, [r0, #88]	; 0x58
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 800bda0:	000b      	movs	r3, r1
 800bda2:	337e      	adds	r3, #126	; 0x7e
 800bda4:	781c      	ldrb	r4, [r3, #0]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_B )
 800bda6:	3b02      	subs	r3, #2
 800bda8:	7818      	ldrb	r0, [r3, #0]
 800bdaa:	3801      	subs	r0, #1
 800bdac:	4243      	negs	r3, r0
 800bdae:	4143      	adcs	r3, r0
 800bdb0:	0118      	lsls	r0, r3, #4
 800bdb2:	01e3      	lsls	r3, r4, #7
 800bdb4:	4303      	orrs	r3, r0
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800bdb6:	204c      	movs	r0, #76	; 0x4c
 800bdb8:	30ff      	adds	r0, #255	; 0xff
 800bdba:	5c0e      	ldrb	r6, [r1, r0]
 800bdbc:	1c1d      	adds	r5, r3, #0
 800bdbe:	9009      	str	r0, [sp, #36]	; 0x24
 800bdc0:	2e00      	cmp	r6, #0
 800bdc2:	d001      	beq.n	800bdc8 <LoRaMacMcpsRequest+0x130>
        fCtrl.Bits.Ack = 1;
 800bdc4:	2520      	movs	r5, #32
 800bdc6:	431d      	orrs	r5, r3
    adrNext.Version = MacCtx.NvmCtx->Version;
 800bdc8:	000b      	movs	r3, r1
 800bdca:	33fc      	adds	r3, #252	; 0xfc
 800bdcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bdce:	a811      	add	r0, sp, #68	; 0x44
 800bdd0:	9311      	str	r3, [sp, #68]	; 0x44
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800bdd2:	23fd      	movs	r3, #253	; 0xfd
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800bdd4:	7144      	strb	r4, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800bdd6:	4c87      	ldr	r4, [pc, #540]	; (800bff4 <LoRaMacMcpsRequest+0x35c>)
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	58e3      	ldr	r3, [r4, r3]
    adrNext.UpdateChanMask = true;
 800bddc:	2601      	movs	r6, #1
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800bdde:	9314      	str	r3, [sp, #80]	; 0x50
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800bde0:	000b      	movs	r3, r1
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800bde2:	6082      	str	r2, [r0, #8]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800bde4:	000a      	movs	r2, r1
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800bde6:	8207      	strh	r7, [r0, #16]
    adrNext.UpdateChanMask = true;
 800bde8:	7106      	strb	r6, [r0, #4]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800bdea:	33b8      	adds	r3, #184	; 0xb8
 800bdec:	781b      	ldrb	r3, [r3, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800bdee:	3284      	adds	r2, #132	; 0x84
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800bdf0:	7483      	strb	r3, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800bdf2:	780b      	ldrb	r3, [r1, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800bdf4:	3185      	adds	r1, #133	; 0x85
    adrNext.Region = MacCtx.NvmCtx->Region;
 800bdf6:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800bdf8:	ab0c      	add	r3, sp, #48	; 0x30
 800bdfa:	f000 f92b 	bl	800c054 <LoRaMacAdrCalcNext>
    MacCtx.PktBufferLen = 0;
 800bdfe:	2300      	movs	r3, #0
    MacCtx.NodeAckRequested = false;
 800be00:	4a81      	ldr	r2, [pc, #516]	; (800c008 <LoRaMacMcpsRequest+0x370>)
    MacCtx.PktBufferLen = 0;
 800be02:	8023      	strh	r3, [r4, #0]
    MacCtx.NodeAckRequested = false;
 800be04:	54a3      	strb	r3, [r4, r2]
    uint32_t fCntUp = 0;
 800be06:	930d      	str	r3, [sp, #52]	; 0x34
    size_t macCmdsSize = 0;
 800be08:	930e      	str	r3, [sp, #56]	; 0x38
        fBufferSize = 0;
 800be0a:	9b03      	ldr	r3, [sp, #12]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800be0c:	4030      	ands	r0, r6
        fBufferSize = 0;
 800be0e:	1e5a      	subs	r2, r3, #1
 800be10:	4193      	sbcs	r3, r2
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800be12:	0180      	lsls	r0, r0, #6
        fBufferSize = 0;
 800be14:	9a02      	ldr	r2, [sp, #8]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800be16:	4328      	orrs	r0, r5
        fBufferSize = 0;
 800be18:	425b      	negs	r3, r3
 800be1a:	401a      	ands	r2, r3
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800be1c:	9903      	ldr	r1, [sp, #12]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800be1e:	9007      	str	r0, [sp, #28]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800be20:	487a      	ldr	r0, [pc, #488]	; (800c00c <LoRaMacMcpsRequest+0x374>)
        fBufferSize = 0;
 800be22:	9202      	str	r2, [sp, #8]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800be24:	f002 f978 	bl	800e118 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800be28:	466b      	mov	r3, sp
    MacCtx.PktBuffer[0] = macHdr->Value;
 800be2a:	7c19      	ldrb	r1, [r3, #16]
    MacCtx.AppDataSize = fBufferSize;
 800be2c:	7a1a      	ldrb	r2, [r3, #8]
 800be2e:	4d78      	ldr	r5, [pc, #480]	; (800c010 <LoRaMacMcpsRequest+0x378>)
    switch( macHdr->Bits.MType )
 800be30:	060b      	lsls	r3, r1, #24
    MacCtx.AppDataSize = fBufferSize;
 800be32:	5562      	strb	r2, [r4, r5]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800be34:	70a1      	strb	r1, [r4, #2]
    switch( macHdr->Bits.MType )
 800be36:	0f5b      	lsrs	r3, r3, #29
 800be38:	2b04      	cmp	r3, #4
 800be3a:	d100      	bne.n	800be3e <LoRaMacMcpsRequest+0x1a6>
 800be3c:	e083      	b.n	800bf46 <LoRaMacMcpsRequest+0x2ae>
 800be3e:	2b07      	cmp	r3, #7
 800be40:	d100      	bne.n	800be44 <LoRaMacMcpsRequest+0x1ac>
 800be42:	e0b4      	b.n	800bfae <LoRaMacMcpsRequest+0x316>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800be44:	2702      	movs	r7, #2
    switch( macHdr->Bits.MType )
 800be46:	2b02      	cmp	r3, #2
 800be48:	d000      	beq.n	800be4c <LoRaMacMcpsRequest+0x1b4>
 800be4a:	e088      	b.n	800bf5e <LoRaMacMcpsRequest+0x2c6>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800be4c:	0025      	movs	r5, r4
 800be4e:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800be50:	0026      	movs	r6, r4
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800be52:	35ff      	adds	r5, #255	; 0xff
 800be54:	716b      	strb	r3, [r5, #5]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800be56:	4b6f      	ldr	r3, [pc, #444]	; (800c014 <LoRaMacMcpsRequest+0x37c>)
 800be58:	36fc      	adds	r6, #252	; 0xfc
 800be5a:	60f3      	str	r3, [r6, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800be5c:	23ff      	movs	r3, #255	; 0xff
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800be5e:	2798      	movs	r7, #152	; 0x98
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800be60:	73a9      	strb	r1, [r5, #14]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800be62:	9905      	ldr	r1, [sp, #20]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800be64:	736b      	strb	r3, [r5, #13]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800be66:	3329      	adds	r3, #41	; 0x29
 800be68:	54e1      	strb	r1, [r4, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800be6a:	9b01      	ldr	r3, [sp, #4]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800be6c:	007f      	lsls	r7, r7, #1
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800be6e:	58e3      	ldr	r3, [r4, r3]
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800be70:	a80d      	add	r0, sp, #52	; 0x34
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800be72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800be74:	55e2      	strb	r2, [r4, r7]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800be76:	6173      	str	r3, [r6, #20]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800be78:	9b07      	ldr	r3, [sp, #28]
 800be7a:	756b      	strb	r3, [r5, #21]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800be7c:	4b63      	ldr	r3, [pc, #396]	; (800c00c <LoRaMacMcpsRequest+0x374>)
 800be7e:	6333      	str	r3, [r6, #48]	; 0x30
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800be80:	f000 fd02 	bl	800c888 <LoRaMacCryptoGetFCntUp>
 800be84:	2800      	cmp	r0, #0
 800be86:	d000      	beq.n	800be8a <LoRaMacMcpsRequest+0x1f2>
 800be88:	e0a0      	b.n	800bfcc <LoRaMacMcpsRequest+0x334>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800be8a:	0022      	movs	r2, r4
 800be8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be8e:	32fe      	adds	r2, #254	; 0xfe
 800be90:	8313      	strh	r3, [r2, #24]
            MacCtx.McpsConfirm.AckReceived = false;
 800be92:	2288      	movs	r2, #136	; 0x88
 800be94:	00d2      	lsls	r2, r2, #3
 800be96:	52a0      	strh	r0, [r4, r2]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800be98:	3208      	adds	r2, #8
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800be9a:	a80e      	add	r0, sp, #56	; 0x38
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800be9c:	50a3      	str	r3, [r4, r2]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800be9e:	f000 fa45 	bl	800c32c <LoRaMacCommandsGetSizeSerializedCmds>
 800bea2:	2800      	cmp	r0, #0
 800bea4:	d15a      	bne.n	800bf5c <LoRaMacMcpsRequest+0x2c4>
            if( macCmdsSize > 0 )
 800bea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d01a      	beq.n	800bee2 <LoRaMacMcpsRequest+0x24a>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 800beac:	2085      	movs	r0, #133	; 0x85
 800beae:	9b01      	ldr	r3, [sp, #4]
 800beb0:	58e3      	ldr	r3, [r4, r3]
 800beb2:	9302      	str	r3, [sp, #8]
 800beb4:	5618      	ldrsb	r0, [r3, r0]
 800beb6:	f7fd fb3f 	bl	8009538 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800beba:	4b55      	ldr	r3, [pc, #340]	; (800c010 <LoRaMacMcpsRequest+0x378>)
 800bebc:	5ce3      	ldrb	r3, [r4, r3]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d060      	beq.n	800bf84 <LoRaMacMcpsRequest+0x2ec>
 800bec2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bec4:	2b0f      	cmp	r3, #15
 800bec6:	d841      	bhi.n	800bf4c <LoRaMacMcpsRequest+0x2b4>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800bec8:	200f      	movs	r0, #15
 800beca:	4a53      	ldr	r2, [pc, #332]	; (800c018 <LoRaMacMcpsRequest+0x380>)
 800becc:	a90e      	add	r1, sp, #56	; 0x38
 800bece:	f000 fa39 	bl	800c344 <LoRaMacCommandsSerializeCmds>
 800bed2:	2800      	cmp	r0, #0
 800bed4:	d142      	bne.n	800bf5c <LoRaMacMcpsRequest+0x2c4>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800bed6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bed8:	300f      	adds	r0, #15
 800beda:	4018      	ands	r0, r3
 800bedc:	9b07      	ldr	r3, [sp, #28]
 800bede:	4303      	orrs	r3, r0
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800bee0:	756b      	strb	r3, [r5, #21]
        status = ScheduleTx( allowDelayedTx );
 800bee2:	9808      	ldr	r0, [sp, #32]
 800bee4:	f7fd fd0e 	bl	8009904 <ScheduleTx>
 800bee8:	1e07      	subs	r7, r0, #0
    if( status != LORAMAC_STATUS_OK )
 800beea:	d138      	bne.n	800bf5e <LoRaMacMcpsRequest+0x2c6>
        MacCtx.NvmCtx->SrvAckRequested = false;
 800beec:	4c41      	ldr	r4, [pc, #260]	; (800bff4 <LoRaMacMcpsRequest+0x35c>)
 800beee:	9b01      	ldr	r3, [sp, #4]
 800bef0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bef2:	58e3      	ldr	r3, [r4, r3]
 800bef4:	5498      	strb	r0, [r3, r2]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 800bef6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bef8:	3304      	adds	r3, #4
 800befa:	67da      	str	r2, [r3, #124]	; 0x7c
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800befc:	f000 f9ea 	bl	800c2d4 <LoRaMacCommandsRemoveNoneStickyCmds>
 800bf00:	1e07      	subs	r7, r0, #0
 800bf02:	d069      	beq.n	800bfd8 <LoRaMacMcpsRequest+0x340>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bf04:	2713      	movs	r7, #19
 800bf06:	e030      	b.n	800bf6a <LoRaMacMcpsRequest+0x2d2>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800bf08:	9b00      	ldr	r3, [sp, #0]
 800bf0a:	7bda      	ldrb	r2, [r3, #15]
 800bf0c:	1c13      	adds	r3, r2, #0
 800bf0e:	2a08      	cmp	r2, #8
 800bf10:	d900      	bls.n	800bf14 <LoRaMacMcpsRequest+0x27c>
 800bf12:	2308      	movs	r3, #8
 800bf14:	4a3a      	ldr	r2, [pc, #232]	; (800c000 <LoRaMacMcpsRequest+0x368>)
 800bf16:	54ab      	strb	r3, [r5, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800bf18:	2380      	movs	r3, #128	; 0x80
 800bf1a:	e6e8      	b.n	800bcee <LoRaMacMcpsRequest+0x56>
            MacCtx.AckTimeoutRetries = 1;
 800bf1c:	4b38      	ldr	r3, [pc, #224]	; (800c000 <LoRaMacMcpsRequest+0x368>)
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800bf1e:	466a      	mov	r2, sp
            MacCtx.AckTimeoutRetries = 1;
 800bf20:	54ef      	strb	r7, [r5, r3]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800bf22:	23e0      	movs	r3, #224	; 0xe0
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800bf24:	260a      	movs	r6, #10
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800bf26:	7413      	strb	r3, [r2, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800bf28:	9b00      	ldr	r3, [sp, #0]
            readyToSend = true;
 800bf2a:	003c      	movs	r4, r7
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	9303      	str	r3, [sp, #12]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800bf30:	9b00      	ldr	r3, [sp, #0]
 800bf32:	891b      	ldrh	r3, [r3, #8]
 800bf34:	9302      	str	r3, [sp, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800bf36:	9b00      	ldr	r3, [sp, #0]
 800bf38:	579e      	ldrsb	r6, [r3, r6]
    uint8_t fPort = 0;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	9305      	str	r3, [sp, #20]
            break;
 800bf3e:	e6e5      	b.n	800bd0c <LoRaMacMcpsRequest+0x74>
    switch( mcpsRequest->Type )
 800bf40:	0026      	movs	r6, r4
 800bf42:	9405      	str	r4, [sp, #20]
 800bf44:	e6e2      	b.n	800bd0c <LoRaMacMcpsRequest+0x74>
            MacCtx.NodeAckRequested = true;
 800bf46:	4b30      	ldr	r3, [pc, #192]	; (800c008 <LoRaMacMcpsRequest+0x370>)
 800bf48:	54e6      	strb	r6, [r4, r3]
 800bf4a:	e77f      	b.n	800be4c <LoRaMacMcpsRequest+0x1b4>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800bf4c:	9b01      	ldr	r3, [sp, #4]
 800bf4e:	a90e      	add	r1, sp, #56	; 0x38
 800bf50:	58e2      	ldr	r2, [r4, r3]
 800bf52:	32cb      	adds	r2, #203	; 0xcb
 800bf54:	f000 f9f6 	bl	800c344 <LoRaMacCommandsSerializeCmds>
 800bf58:	2800      	cmp	r0, #0
 800bf5a:	d0c2      	beq.n	800bee2 <LoRaMacMcpsRequest+0x24a>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800bf5c:	2713      	movs	r7, #19
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 800bf5e:	9a01      	ldr	r2, [sp, #4]
 800bf60:	4b24      	ldr	r3, [pc, #144]	; (800bff4 <LoRaMacMcpsRequest+0x35c>)
 800bf62:	589b      	ldr	r3, [r3, r2]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 800bf64:	9a06      	ldr	r2, [sp, #24]
 800bf66:	3384      	adds	r3, #132	; 0x84
 800bf68:	801a      	strh	r2, [r3, #0]
            MacCtx.NodeAckRequested = false;
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	4b21      	ldr	r3, [pc, #132]	; (800bff4 <LoRaMacMcpsRequest+0x35c>)
 800bf6e:	4926      	ldr	r1, [pc, #152]	; (800c008 <LoRaMacMcpsRequest+0x370>)
 800bf70:	545a      	strb	r2, [r3, r1]
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800bf72:	2391      	movs	r3, #145	; 0x91
 800bf74:	4a1f      	ldr	r2, [pc, #124]	; (800bff4 <LoRaMacMcpsRequest+0x35c>)
 800bf76:	00db      	lsls	r3, r3, #3
 800bf78:	58d3      	ldr	r3, [r2, r3]
 800bf7a:	9301      	str	r3, [sp, #4]
 800bf7c:	9a01      	ldr	r2, [sp, #4]
 800bf7e:	9b00      	ldr	r3, [sp, #0]
 800bf80:	611a      	str	r2, [r3, #16]
    return status;
 800bf82:	e692      	b.n	800bcaa <LoRaMacMcpsRequest+0x12>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800bf84:	9b01      	ldr	r3, [sp, #4]
 800bf86:	a90e      	add	r1, sp, #56	; 0x38
 800bf88:	58e3      	ldr	r3, [r4, r3]
 800bf8a:	001a      	movs	r2, r3
 800bf8c:	32cb      	adds	r2, #203	; 0xcb
 800bf8e:	9302      	str	r3, [sp, #8]
 800bf90:	f000 f9d8 	bl	800c344 <LoRaMacCommandsSerializeCmds>
 800bf94:	2800      	cmp	r0, #0
 800bf96:	d1e1      	bne.n	800bf5c <LoRaMacMcpsRequest+0x2c4>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800bf98:	2394      	movs	r3, #148	; 0x94
 800bf9a:	005b      	lsls	r3, r3, #1
 800bf9c:	54e0      	strb	r0, [r4, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800bf9e:	9b01      	ldr	r3, [sp, #4]
 800bfa0:	58e3      	ldr	r3, [r4, r3]
 800bfa2:	9302      	str	r3, [sp, #8]
 800bfa4:	33cb      	adds	r3, #203	; 0xcb
 800bfa6:	6333      	str	r3, [r6, #48]	; 0x30
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800bfa8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bfaa:	55e3      	strb	r3, [r4, r7]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800bfac:	e799      	b.n	800bee2 <LoRaMacMcpsRequest+0x24a>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800bfae:	9b03      	ldr	r3, [sp, #12]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d096      	beq.n	800bee2 <LoRaMacMcpsRequest+0x24a>
 800bfb4:	2a00      	cmp	r2, #0
 800bfb6:	d094      	beq.n	800bee2 <LoRaMacMcpsRequest+0x24a>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800bfb8:	466b      	mov	r3, sp
 800bfba:	9903      	ldr	r1, [sp, #12]
 800bfbc:	7a1a      	ldrb	r2, [r3, #8]
 800bfbe:	4817      	ldr	r0, [pc, #92]	; (800c01c <LoRaMacMcpsRequest+0x384>)
 800bfc0:	f002 f8aa 	bl	800e118 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800bfc4:	5d63      	ldrb	r3, [r4, r5]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	8023      	strh	r3, [r4, #0]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800bfca:	e78a      	b.n	800bee2 <LoRaMacMcpsRequest+0x24a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800bfcc:	2712      	movs	r7, #18
 800bfce:	e7c6      	b.n	800bf5e <LoRaMacMcpsRequest+0x2c6>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800bfd0:	2707      	movs	r7, #7
 800bfd2:	e7ca      	b.n	800bf6a <LoRaMacMcpsRequest+0x2d2>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800bfd4:	2702      	movs	r7, #2
 800bfd6:	e7cc      	b.n	800bf72 <LoRaMacMcpsRequest+0x2da>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800bfd8:	9b00      	ldr	r3, [sp, #0]
 800bfda:	781a      	ldrb	r2, [r3, #0]
 800bfdc:	4b10      	ldr	r3, [pc, #64]	; (800c020 <LoRaMacMcpsRequest+0x388>)
 800bfde:	54e2      	strb	r2, [r4, r3]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	4a10      	ldr	r2, [pc, #64]	; (800c024 <LoRaMacMcpsRequest+0x38c>)
 800bfe4:	5ca1      	ldrb	r1, [r4, r2]
 800bfe6:	430b      	orrs	r3, r1
 800bfe8:	54a3      	strb	r3, [r4, r2]
            EventMacNvmCtxChanged( );
 800bfea:	f7fd fa81 	bl	80094f0 <EventMacNvmCtxChanged>
 800bfee:	e7c0      	b.n	800bf72 <LoRaMacMcpsRequest+0x2da>
 800bff0:	20000b58 	.word	0x20000b58
 800bff4:	2000071c 	.word	0x2000071c
 800bff8:	0000043d 	.word	0x0000043d
 800bffc:	00000412 	.word	0x00000412
 800c000:	00000411 	.word	0x00000411
 800c004:	00000484 	.word	0x00000484
 800c008:	00000414 	.word	0x00000414
 800c00c:	20000854 	.word	0x20000854
 800c010:	00000237 	.word	0x00000237
 800c014:	2000071e 	.word	0x2000071e
 800c018:	20000834 	.word	0x20000834
 800c01c:	2000071f 	.word	0x2000071f
 800c020:	0000043c 	.word	0x0000043c
 800c024:	00000481 	.word	0x00000481

0800c028 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800c028:	b573      	push	{r0, r1, r4, r5, r6, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800c02a:	4e08      	ldr	r6, [pc, #32]	; (800c04c <LoRaMacTestSetDutyCycleOn+0x24>)
 800c02c:	4d08      	ldr	r5, [pc, #32]	; (800c050 <LoRaMacTestSetDutyCycleOn+0x28>)
    verify.DutyCycle = enable;
 800c02e:	a901      	add	r1, sp, #4
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800c030:	5973      	ldr	r3, [r6, r5]
{
 800c032:	0004      	movs	r4, r0
    verify.DutyCycle = enable;
 800c034:	7008      	strb	r0, [r1, #0]
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800c036:	220f      	movs	r2, #15
 800c038:	7818      	ldrb	r0, [r3, #0]
 800c03a:	f000 ff7f 	bl	800cf3c <RegionVerify>
 800c03e:	2800      	cmp	r0, #0
 800c040:	d002      	beq.n	800c048 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 800c042:	5973      	ldr	r3, [r6, r5]
 800c044:	33c9      	adds	r3, #201	; 0xc9
 800c046:	701c      	strb	r4, [r3, #0]
    }
}
 800c048:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800c04a:	46c0      	nop			; (mov r8, r8)
 800c04c:	2000071c 	.word	0x2000071c
 800c050:	00000484 	.word	0x00000484

0800c054 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800c054:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( adrNext->Version.Fields.Minor == 0 )
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800c056:	2500      	movs	r5, #0
{
 800c058:	b08d      	sub	sp, #52	; 0x34
 800c05a:	9104      	str	r1, [sp, #16]
 800c05c:	9205      	str	r2, [sp, #20]
 800c05e:	001e      	movs	r6, r3
    if( adrNext->Version.Fields.Minor == 0 )
 800c060:	7883      	ldrb	r3, [r0, #2]
{
 800c062:	0004      	movs	r4, r0
    if( adrNext->Version.Fields.Minor == 0 )
 800c064:	42ab      	cmp	r3, r5
 800c066:	d12b      	bne.n	800c0c0 <LoRaMacAdrCalcNext+0x6c>
    int8_t datarate = adrNext->Datarate;
 800c068:	2310      	movs	r3, #16
 800c06a:	56c3      	ldrsb	r3, [r0, r3]
 800c06c:	9301      	str	r3, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800c06e:	2311      	movs	r3, #17
 800c070:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 800c072:	9f01      	ldr	r7, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800c074:	9303      	str	r3, [sp, #12]
    *adrAckCounter = adrNext->AdrAckCounter;
 800c076:	6883      	ldr	r3, [r0, #8]
 800c078:	6033      	str	r3, [r6, #0]
    if( adrNext->AdrEnabled == true )
 800c07a:	7945      	ldrb	r5, [r0, #5]
 800c07c:	2d00      	cmp	r5, #0
 800c07e:	d01a      	beq.n	800c0b6 <LoRaMacAdrCalcNext+0x62>
        getPhy.Attribute = PHY_MIN_TX_DR;
 800c080:	2302      	movs	r3, #2
 800c082:	aa06      	add	r2, sp, #24
 800c084:	7213      	strb	r3, [r2, #8]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800c086:	7c83      	ldrb	r3, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c088:	a908      	add	r1, sp, #32
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800c08a:	7293      	strb	r3, [r2, #10]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c08c:	7cc0      	ldrb	r0, [r0, #19]
 800c08e:	f000 ff31 	bl	800cef4 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800c092:	b243      	sxtb	r3, r0
 800c094:	9302      	str	r3, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800c096:	466b      	mov	r3, sp
 800c098:	9a02      	ldr	r2, [sp, #8]
 800c09a:	791f      	ldrb	r7, [r3, #4]
 800c09c:	9b01      	ldr	r3, [sp, #4]
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	da01      	bge.n	800c0a6 <LoRaMacAdrCalcNext+0x52>
 800c0a2:	466b      	mov	r3, sp
 800c0a4:	7a1f      	ldrb	r7, [r3, #8]
        if( datarate == minTxDatarate )
 800c0a6:	9b01      	ldr	r3, [sp, #4]
 800c0a8:	9a02      	ldr	r2, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800c0aa:	b27f      	sxtb	r7, r7
        if( datarate == minTxDatarate )
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	dc0a      	bgt.n	800c0c6 <LoRaMacAdrCalcNext+0x72>
            *adrAckCounter = 0;
 800c0b0:	2300      	movs	r3, #0
 800c0b2:	6033      	str	r3, [r6, #0]
                        adrAckReq = false;
 800c0b4:	2500      	movs	r5, #0
    *drOut = datarate;
 800c0b6:	9b04      	ldr	r3, [sp, #16]
    *txPowOut = txPower;
 800c0b8:	9a03      	ldr	r2, [sp, #12]
    *drOut = datarate;
 800c0ba:	701f      	strb	r7, [r3, #0]
    *txPowOut = txPower;
 800c0bc:	9b05      	ldr	r3, [sp, #20]
 800c0be:	701a      	strb	r2, [r3, #0]
}
 800c0c0:	0028      	movs	r0, r5
 800c0c2:	b00d      	add	sp, #52	; 0x34
 800c0c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800c0c6:	2500      	movs	r5, #0
 800c0c8:	89a1      	ldrh	r1, [r4, #12]
 800c0ca:	68a2      	ldr	r2, [r4, #8]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800c0cc:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800c0ce:	428a      	cmp	r2, r1
 800c0d0:	416d      	adcs	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800c0d2:	185b      	adds	r3, r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800c0d4:	b2ed      	uxtb	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d3ed      	bcc.n	800c0b6 <LoRaMacAdrCalcNext+0x62>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800c0da:	2308      	movs	r3, #8
 800c0dc:	ae08      	add	r6, sp, #32
 800c0de:	7033      	strb	r3, [r6, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c0e0:	0031      	movs	r1, r6
 800c0e2:	7ce0      	ldrb	r0, [r4, #19]
 800c0e4:	f000 ff06 	bl	800cef4 <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800c0e8:	89e1      	ldrh	r1, [r4, #14]
                txPower = phyParam.Value;
 800c0ea:	b243      	sxtb	r3, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800c0ec:	68a0      	ldr	r0, [r4, #8]
                txPower = phyParam.Value;
 800c0ee:	9303      	str	r3, [sp, #12]
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800c0f0:	f7f4 f8c0 	bl	8000274 <__aeabi_uidivmod>
 800c0f4:	2901      	cmp	r1, #1
 800c0f6:	d1de      	bne.n	800c0b6 <LoRaMacAdrCalcNext+0x62>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800c0f8:	2322      	movs	r3, #34	; 0x22
                    getPhy.Datarate = datarate;
 800c0fa:	7077      	strb	r7, [r6, #1]
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800c0fc:	7033      	strb	r3, [r6, #0]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800c0fe:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c100:	0031      	movs	r1, r6
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800c102:	70b3      	strb	r3, [r6, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c104:	7ce0      	ldrb	r0, [r4, #19]
 800c106:	f000 fef5 	bl	800cef4 <RegionGetPhyParam>
                    if( datarate == minTxDatarate )
 800c10a:	9b02      	ldr	r3, [sp, #8]
                    datarate = phyParam.Value;
 800c10c:	b247      	sxtb	r7, r0
                    if( datarate == minTxDatarate )
 800c10e:	42bb      	cmp	r3, r7
 800c110:	d1d1      	bne.n	800c0b6 <LoRaMacAdrCalcNext+0x62>
                        if( adrNext->UpdateChanMask == true )
 800c112:	7925      	ldrb	r5, [r4, #4]
 800c114:	2d00      	cmp	r5, #0
 800c116:	d0ce      	beq.n	800c0b6 <LoRaMacAdrCalcNext+0x62>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800c118:	2302      	movs	r3, #2
 800c11a:	a90a      	add	r1, sp, #40	; 0x28
 800c11c:	710b      	strb	r3, [r1, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 800c11e:	7ce0      	ldrb	r0, [r4, #19]
 800c120:	f000 fefb 	bl	800cf1a <RegionInitDefaults>
 800c124:	e7c6      	b.n	800c0b4 <LoRaMacAdrCalcNext+0x60>

0800c126 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif // LORAMAC_CLASSB_ENABLED
}
 800c126:	4770      	bx	lr

0800c128 <LoRaMacClassBRestoreNvmCtx>:
        return false;
    }
#else
    return true;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c128:	2001      	movs	r0, #1
 800c12a:	4770      	bx	lr

0800c12c <LoRaMacClassBGetNvmCtx>:

void* LoRaMacClassBGetNvmCtx( size_t* classBNvmCtxSize )
{
 800c12c:	0003      	movs	r3, r0
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    *classBNvmCtxSize = sizeof( NvmCtx );
    return &NvmCtx;
#else
    *classBNvmCtxSize = 0;
 800c12e:	2000      	movs	r0, #0
 800c130:	6018      	str	r0, [r3, #0]
    return NULL;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c132:	4770      	bx	lr

0800c134 <LoRaMacClassBSetBeaconState>:
            Ctx.BeaconState = beaconState;
        }
    }
    Ctx.NvmCtx->BeaconCtx.BeaconState = Ctx.BeaconState;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c134:	4770      	bx	lr

0800c136 <LoRaMacClassBSetPingSlotState>:
 800c136:	4770      	bx	lr

0800c138 <LoRaMacClassBSetMulticastSlotState>:
 800c138:	4770      	bx	lr

0800c13a <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c13a:	2000      	movs	r0, #0
 800c13c:	4770      	bx	lr

0800c13e <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800c13e:	4770      	bx	lr

0800c140 <LoRaMacClassBPingSlotTimerEvent>:
 800c140:	4770      	bx	lr

0800c142 <LoRaMacClassBMulticastSlotTimerEvent>:
 800c142:	4770      	bx	lr

0800c144 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c144:	2000      	movs	r0, #0
 800c146:	4770      	bx	lr

0800c148 <LoRaMacClassBIsBeaconExpected>:
 800c148:	2000      	movs	r0, #0
 800c14a:	4770      	bx	lr

0800c14c <LoRaMacClassBIsPingExpected>:
 800c14c:	2000      	movs	r0, #0
 800c14e:	4770      	bx	lr

0800c150 <LoRaMacClassBIsMulticastExpected>:
 800c150:	2000      	movs	r0, #0
 800c152:	4770      	bx	lr

0800c154 <LoRaMacClassBIsBeaconModeActive>:
 800c154:	2000      	movs	r0, #0
 800c156:	4770      	bx	lr

0800c158 <LoRaMacClassBSetPingSlotInfo>:
 800c158:	4770      	bx	lr

0800c15a <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800c15a:	4770      	bx	lr

0800c15c <LoRaMacClassBResumeBeaconing>:
 800c15c:	4770      	bx	lr

0800c15e <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c15e:	2002      	movs	r0, #2
 800c160:	4770      	bx	lr

0800c162 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c162:	2002      	movs	r0, #2
 800c164:	4770      	bx	lr

0800c166 <LoRaMacMibClassBSetRequestConfirm>:
 800c166:	2002      	movs	r0, #2
 800c168:	4770      	bx	lr

0800c16a <LoRaMacClassBPingSlotInfoAns>:
 800c16a:	4770      	bx	lr

0800c16c <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c16c:	2000      	movs	r0, #0
 800c16e:	4770      	bx	lr

0800c170 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif // LORAMAC_CLASSB_ENABLED
}
 800c170:	4770      	bx	lr

0800c172 <LoRaMacClassBDeviceTimeAns>:
 800c172:	4770      	bx	lr

0800c174 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c174:	2000      	movs	r0, #0
 800c176:	4770      	bx	lr

0800c178 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif // LORAMAC_CLASSB_ENABLED
}
 800c178:	2000      	movs	r0, #0
 800c17a:	4770      	bx	lr

0800c17c <LoRaMacClassBStopRxSlots>:
 800c17c:	4770      	bx	lr

0800c17e <LoRaMacClassBProcess>:
 800c17e:	4770      	bx	lr

0800c180 <NvmCtxCallback>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    if( CommandsNvmCtxChanged != NULL )
 800c180:	4b03      	ldr	r3, [pc, #12]	; (800c190 <NvmCtxCallback+0x10>)
{
 800c182:	b510      	push	{r4, lr}
    if( CommandsNvmCtxChanged != NULL )
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d000      	beq.n	800c18c <NvmCtxCallback+0xc>
    {
        CommandsNvmCtxChanged( );
 800c18a:	4798      	blx	r3
    }
}
 800c18c:	bd10      	pop	{r4, pc}
 800c18e:	46c0      	nop			; (mov r8, r8)
 800c190:	20000ba8 	.word	0x20000ba8

0800c194 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 800c194:	b570      	push	{r4, r5, r6, lr}
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800c196:	4d06      	ldr	r5, [pc, #24]	; (800c1b0 <LoRaMacCommandsInit+0x1c>)
{
 800c198:	0004      	movs	r4, r0
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800c19a:	22fc      	movs	r2, #252	; 0xfc
 800c19c:	0028      	movs	r0, r5
 800c19e:	2100      	movs	r1, #0
 800c1a0:	f001 ffd0 	bl	800e144 <memset1>
    list->First = NULL;
 800c1a4:	2000      	movs	r0, #0

    LinkedListInit( &NvmCtx.MacCommandList );

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800c1a6:	4b03      	ldr	r3, [pc, #12]	; (800c1b4 <LoRaMacCommandsInit+0x20>)
    list->First = NULL;
 800c1a8:	6028      	str	r0, [r5, #0]
    list->Last = NULL;
 800c1aa:	6068      	str	r0, [r5, #4]
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800c1ac:	601c      	str	r4, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c1ae:	bd70      	pop	{r4, r5, r6, pc}
 800c1b0:	20000bac 	.word	0x20000bac
 800c1b4:	20000ba8 	.word	0x20000ba8

0800c1b8 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 800c1b8:	0001      	movs	r1, r0
 800c1ba:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
        return LORAMAC_COMMANDS_SUCCESS;
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c1bc:	2001      	movs	r0, #1
    if( commandsNvmCtx != NULL )
 800c1be:	2900      	cmp	r1, #0
 800c1c0:	d004      	beq.n	800c1cc <LoRaMacCommandsRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 800c1c2:	4803      	ldr	r0, [pc, #12]	; (800c1d0 <LoRaMacCommandsRestoreNvmCtx+0x18>)
 800c1c4:	22fc      	movs	r2, #252	; 0xfc
 800c1c6:	f001 ffa7 	bl	800e118 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 800c1ca:	2000      	movs	r0, #0
    }
}
 800c1cc:	bd10      	pop	{r4, pc}
 800c1ce:	46c0      	nop			; (mov r8, r8)
 800c1d0:	20000bac 	.word	0x20000bac

0800c1d4 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
 800c1d4:	23fc      	movs	r3, #252	; 0xfc
 800c1d6:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800c1d8:	4800      	ldr	r0, [pc, #0]	; (800c1dc <LoRaMacCommandsGetNvmCtx+0x8>)
 800c1da:	4770      	bx	lr
 800c1dc:	20000bac 	.word	0x20000bac

0800c1e0 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800c1e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c1e2:	0015      	movs	r5, r2
    if( payload == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c1e4:	2701      	movs	r7, #1
{
 800c1e6:	9001      	str	r0, [sp, #4]
    if( payload == NULL )
 800c1e8:	2900      	cmp	r1, #0
 800c1ea:	d03b      	beq.n	800c264 <LoRaMacCommandsAddCmd+0x84>
 800c1ec:	2400      	movs	r4, #0
 800c1ee:	4b21      	ldr	r3, [pc, #132]	; (800c274 <LoRaMacCommandsAddCmd+0x94>)
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 800c1f0:	0122      	lsls	r2, r4, #4
 800c1f2:	0018      	movs	r0, r3
 800c1f4:	4694      	mov	ip, r2
 800c1f6:	001a      	movs	r2, r3
 800c1f8:	3010      	adds	r0, #16
        if( mem[size] != 0x00 )
 800c1fa:	7817      	ldrb	r7, [r2, #0]
 800c1fc:	2f00      	cmp	r7, #0
 800c1fe:	d133      	bne.n	800c268 <LoRaMacCommandsAddCmd+0x88>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800c200:	3201      	adds	r2, #1
 800c202:	4282      	cmp	r2, r0
 800c204:	d1f9      	bne.n	800c1fa <LoRaMacCommandsAddCmd+0x1a>
    if( list->First == NULL )
 800c206:	481c      	ldr	r0, [pc, #112]	; (800c278 <LoRaMacCommandsAddCmd+0x98>)
 800c208:	6802      	ldr	r2, [r0, #0]
 800c20a:	2a00      	cmp	r2, #0
 800c20c:	d100      	bne.n	800c210 <LoRaMacCommandsAddCmd+0x30>
        list->First = element;
 800c20e:	6003      	str	r3, [r0, #0]
    if( list->Last )
 800c210:	6842      	ldr	r2, [r0, #4]
 800c212:	2a00      	cmp	r2, #0
 800c214:	d000      	beq.n	800c218 <LoRaMacCommandsAddCmd+0x38>
        list->Last->Next = element;
 800c216:	6013      	str	r3, [r2, #0]
    list->Last = element;
 800c218:	6043      	str	r3, [r0, #4]
    element->Next = NULL;
 800c21a:	0122      	lsls	r2, r4, #4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800c21c:	9b01      	ldr	r3, [sp, #4]
    element->Next = NULL;
 800c21e:	1882      	adds	r2, r0, r2
    newCmd->PayloadSize = payloadSize;
 800c220:	3401      	adds	r4, #1
    newCmd->CID = cid;
 800c222:	7313      	strb	r3, [r2, #12]
    newCmd->PayloadSize = payloadSize;
 800c224:	0123      	lsls	r3, r4, #4
 800c226:	50c5      	str	r5, [r0, r3]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800c228:	4663      	mov	r3, ip
    element->Next = NULL;
 800c22a:	2600      	movs	r6, #0
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800c22c:	330d      	adds	r3, #13
    element->Next = NULL;
 800c22e:	6096      	str	r6, [r2, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800c230:	18c0      	adds	r0, r0, r3
 800c232:	b2aa      	uxth	r2, r5
 800c234:	f001 ff70 	bl	800e118 <memcpy1>
    switch( cid )
 800c238:	9b01      	ldr	r3, [sp, #4]
            return true;
 800c23a:	2201      	movs	r2, #1
    switch( cid )
 800c23c:	2b05      	cmp	r3, #5
 800c23e:	d006      	beq.n	800c24e <LoRaMacCommandsAddCmd+0x6e>
 800c240:	0018      	movs	r0, r3
 800c242:	2302      	movs	r3, #2
 800c244:	3808      	subs	r0, #8
 800c246:	b2c0      	uxtb	r0, r0
 800c248:	4283      	cmp	r3, r0
 800c24a:	4176      	adcs	r6, r6
 800c24c:	b2f2      	uxtb	r2, r6
    newCmd->IsSticky = IsSticky( cid );
 800c24e:	4b0a      	ldr	r3, [pc, #40]	; (800c278 <LoRaMacCommandsAddCmd+0x98>)
 800c250:	0124      	lsls	r4, r4, #4
 800c252:	191c      	adds	r4, r3, r4

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800c254:	33f8      	adds	r3, #248	; 0xf8
    newCmd->IsSticky = IsSticky( cid );
 800c256:	7122      	strb	r2, [r4, #4]
    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	3201      	adds	r2, #1
 800c25c:	1955      	adds	r5, r2, r5
 800c25e:	601d      	str	r5, [r3, #0]

    NvmCtxCallback( );
 800c260:	f7ff ff8e 	bl	800c180 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c264:	0038      	movs	r0, r7
 800c266:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 800c268:	3401      	adds	r4, #1
 800c26a:	0003      	movs	r3, r0
 800c26c:	2c0f      	cmp	r4, #15
 800c26e:	d1bf      	bne.n	800c1f0 <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800c270:	2702      	movs	r7, #2
 800c272:	e7f7      	b.n	800c264 <LoRaMacCommandsAddCmd+0x84>
 800c274:	20000bb4 	.word	0x20000bb4
 800c278:	20000bac 	.word	0x20000bac

0800c27c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800c27c:	b510      	push	{r4, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c27e:	2401      	movs	r4, #1
    if( macCmd == NULL )
 800c280:	2800      	cmp	r0, #0
 800c282:	d023      	beq.n	800c2cc <LoRaMacCommandsRemoveCmd+0x50>
    curElement = list->First;
 800c284:	4b12      	ldr	r3, [pc, #72]	; (800c2d0 <LoRaMacCommandsRemoveCmd+0x54>)
 800c286:	681a      	ldr	r2, [r3, #0]
    if( element != curElement )
 800c288:	4290      	cmp	r0, r2
 800c28a:	d104      	bne.n	800c296 <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 800c28c:	6802      	ldr	r2, [r0, #0]
 800c28e:	601a      	str	r2, [r3, #0]
 800c290:	2200      	movs	r2, #0
 800c292:	e005      	b.n	800c2a0 <LoRaMacCommandsRemoveCmd+0x24>
 800c294:	000a      	movs	r2, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800c296:	2a00      	cmp	r2, #0
 800c298:	d002      	beq.n	800c2a0 <LoRaMacCommandsRemoveCmd+0x24>
 800c29a:	6811      	ldr	r1, [r2, #0]
 800c29c:	4288      	cmp	r0, r1
 800c29e:	d1f9      	bne.n	800c294 <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 800c2a0:	6859      	ldr	r1, [r3, #4]
 800c2a2:	4288      	cmp	r0, r1
 800c2a4:	d100      	bne.n	800c2a8 <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 800c2a6:	605a      	str	r2, [r3, #4]
    if( PrevElement != NULL )
 800c2a8:	2a00      	cmp	r2, #0
 800c2aa:	d001      	beq.n	800c2b0 <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 800c2ac:	6801      	ldr	r1, [r0, #0]
 800c2ae:	6011      	str	r1, [r2, #0]
    element->Next = NULL;
 800c2b0:	2400      	movs	r4, #0
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800c2b2:	33f8      	adds	r3, #248	; 0xf8
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	6881      	ldr	r1, [r0, #8]
 800c2b8:	3a01      	subs	r2, #1
 800c2ba:	1a52      	subs	r2, r2, r1
    element->Next = NULL;
 800c2bc:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800c2be:	0021      	movs	r1, r4
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800c2c0:	601a      	str	r2, [r3, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800c2c2:	2210      	movs	r2, #16
 800c2c4:	f001 ff3e 	bl	800e144 <memset1>
    if( FreeMacCommandSlot( macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
 800c2c8:	f7ff ff5a 	bl	800c180 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c2cc:	0020      	movs	r0, r4
 800c2ce:	bd10      	pop	{r4, pc}
 800c2d0:	20000bac 	.word	0x20000bac

0800c2d4 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800c2d4:	4b08      	ldr	r3, [pc, #32]	; (800c2f8 <LoRaMacCommandsRemoveNoneStickyCmds+0x24>)
{
 800c2d6:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 800c2d8:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800c2da:	2c00      	cmp	r4, #0
 800c2dc:	d103      	bne.n	800c2e6 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
        {
            curElement = curElement->Next;
        }
    }

    NvmCtxCallback( );
 800c2de:	f7ff ff4f 	bl	800c180 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c2e2:	0020      	movs	r0, r4
 800c2e4:	bd70      	pop	{r4, r5, r6, pc}
        if( curElement->IsSticky == false )
 800c2e6:	7b23      	ldrb	r3, [r4, #12]
 800c2e8:	6825      	ldr	r5, [r4, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d102      	bne.n	800c2f4 <LoRaMacCommandsRemoveNoneStickyCmds+0x20>
            LoRaMacCommandsRemoveCmd( curElement );
 800c2ee:	0020      	movs	r0, r4
 800c2f0:	f7ff ffc4 	bl	800c27c <LoRaMacCommandsRemoveCmd>
{
 800c2f4:	002c      	movs	r4, r5
 800c2f6:	e7f0      	b.n	800c2da <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 800c2f8:	20000bac 	.word	0x20000bac

0800c2fc <LoRaMacCommandsRemoveStickyAnsCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800c2fc:	4b0a      	ldr	r3, [pc, #40]	; (800c328 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>)
{
 800c2fe:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 800c300:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800c302:	2c00      	cmp	r4, #0
 800c304:	d103      	bne.n	800c30e <LoRaMacCommandsRemoveStickyAnsCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
 800c306:	f7ff ff3b 	bl	800c180 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c30a:	0020      	movs	r0, r4
 800c30c:	bd70      	pop	{r4, r5, r6, pc}
        if( IsSticky( curElement->CID ) == true )
 800c30e:	7923      	ldrb	r3, [r4, #4]
        nexElement = curElement->Next;
 800c310:	6825      	ldr	r5, [r4, #0]
    switch( cid )
 800c312:	2b05      	cmp	r3, #5
 800c314:	d002      	beq.n	800c31c <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
 800c316:	3b08      	subs	r3, #8
 800c318:	2b02      	cmp	r3, #2
 800c31a:	d802      	bhi.n	800c322 <LoRaMacCommandsRemoveStickyAnsCmds+0x26>
            LoRaMacCommandsRemoveCmd( curElement );
 800c31c:	0020      	movs	r0, r4
 800c31e:	f7ff ffad 	bl	800c27c <LoRaMacCommandsRemoveCmd>
{
 800c322:	002c      	movs	r4, r5
 800c324:	e7ed      	b.n	800c302 <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
 800c326:	46c0      	nop			; (mov r8, r8)
 800c328:	20000bac 	.word	0x20000bac

0800c32c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800c32c:	0003      	movs	r3, r0
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c32e:	2001      	movs	r0, #1
    if( size == NULL )
 800c330:	2b00      	cmp	r3, #0
 800c332:	d004      	beq.n	800c33e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    }
    *size = NvmCtx.SerializedCmdsSize;
    return LORAMAC_COMMANDS_SUCCESS;
 800c334:	2000      	movs	r0, #0
    *size = NvmCtx.SerializedCmdsSize;
 800c336:	4a02      	ldr	r2, [pc, #8]	; (800c340 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800c338:	32f8      	adds	r2, #248	; 0xf8
 800c33a:	6812      	ldr	r2, [r2, #0]
 800c33c:	601a      	str	r2, [r3, #0]
}
 800c33e:	4770      	bx	lr
 800c340:	20000bac 	.word	0x20000bac

0800c344 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800c344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c346:	000f      	movs	r7, r1
 800c348:	9001      	str	r0, [sp, #4]
 800c34a:	0016      	movs	r6, r2
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c34c:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800c34e:	2a00      	cmp	r2, #0
 800c350:	d00a      	beq.n	800c368 <LoRaMacCommandsSerializeCmds+0x24>
 800c352:	2900      	cmp	r1, #0
 800c354:	d008      	beq.n	800c368 <LoRaMacCommandsSerializeCmds+0x24>
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 800c356:	4b13      	ldr	r3, [pc, #76]	; (800c3a4 <LoRaMacCommandsSerializeCmds+0x60>)
 800c358:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800c35a:	2300      	movs	r3, #0
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800c35c:	2c00      	cmp	r4, #0
 800c35e:	d104      	bne.n	800c36a <LoRaMacCommandsSerializeCmds+0x26>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800c360:	0038      	movs	r0, r7
 800c362:	f7ff ffe3 	bl	800c32c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800c366:	2000      	movs	r0, #0
}
 800c368:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800c36a:	9a01      	ldr	r2, [sp, #4]
 800c36c:	1ad1      	subs	r1, r2, r3
 800c36e:	68a2      	ldr	r2, [r4, #8]
 800c370:	3201      	adds	r2, #1
 800c372:	4291      	cmp	r1, r2
 800c374:	d30e      	bcc.n	800c394 <LoRaMacCommandsSerializeCmds+0x50>
            buffer[itr++] = curElement->CID;
 800c376:	7922      	ldrb	r2, [r4, #4]
 800c378:	1c5d      	adds	r5, r3, #1
 800c37a:	54f2      	strb	r2, [r6, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800c37c:	68a3      	ldr	r3, [r4, #8]
            buffer[itr++] = curElement->CID;
 800c37e:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800c380:	b29a      	uxth	r2, r3
 800c382:	1d61      	adds	r1, r4, #5
 800c384:	1970      	adds	r0, r6, r5
 800c386:	f001 fec7 	bl	800e118 <memcpy1>
            itr += curElement->PayloadSize;
 800c38a:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 800c38c:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 800c38e:	18ed      	adds	r5, r5, r3
 800c390:	b2eb      	uxtb	r3, r5
        curElement = curElement->Next;
 800c392:	e7e3      	b.n	800c35c <LoRaMacCommandsSerializeCmds+0x18>
        nextElement = curElement->Next;
 800c394:	0020      	movs	r0, r4
 800c396:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800c398:	f7ff ff70 	bl	800c27c <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 800c39c:	2c00      	cmp	r4, #0
 800c39e:	d1f9      	bne.n	800c394 <LoRaMacCommandsSerializeCmds+0x50>
 800c3a0:	e7de      	b.n	800c360 <LoRaMacCommandsSerializeCmds+0x1c>
 800c3a2:	46c0      	nop			; (mov r8, r8)
 800c3a4:	20000bac 	.word	0x20000bac

0800c3a8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800c3a8:	0003      	movs	r3, r0
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c3aa:	2001      	movs	r0, #1
    if( cmdsPending == NULL )
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d00b      	beq.n	800c3c8 <LoRaMacCommandsStickyCmdsPending+0x20>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800c3b0:	4a07      	ldr	r2, [pc, #28]	; (800c3d0 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800c3b2:	6810      	ldr	r0, [r2, #0]

    *cmdsPending = false;
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	d005      	beq.n	800c3c8 <LoRaMacCommandsStickyCmdsPending+0x20>
    {
        if( curElement->IsSticky == true )
 800c3bc:	7b02      	ldrb	r2, [r0, #12]
 800c3be:	2a00      	cmp	r2, #0
 800c3c0:	d003      	beq.n	800c3ca <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800c3c2:	2201      	movs	r2, #1
            return LORAMAC_COMMANDS_SUCCESS;
 800c3c4:	2000      	movs	r0, #0
            *cmdsPending = true;
 800c3c6:	701a      	strb	r2, [r3, #0]
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c3c8:	4770      	bx	lr
        curElement = curElement->Next;
 800c3ca:	6800      	ldr	r0, [r0, #0]
 800c3cc:	e7f4      	b.n	800c3b8 <LoRaMacCommandsStickyCmdsPending+0x10>
 800c3ce:	46c0      	nop			; (mov r8, r8)
 800c3d0:	20000bac 	.word	0x20000bac

0800c3d4 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800c3d4:	3802      	subs	r0, #2
 800c3d6:	b2c3      	uxtb	r3, r0
{
 800c3d8:	2000      	movs	r0, #0
 800c3da:	2b11      	cmp	r3, #17
 800c3dc:	d801      	bhi.n	800c3e2 <LoRaMacCommandsGetCmdSize+0xe>
 800c3de:	4a01      	ldr	r2, [pc, #4]	; (800c3e4 <LoRaMacCommandsGetCmdSize+0x10>)
 800c3e0:	5cd0      	ldrb	r0, [r2, r3]
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800c3e2:	4770      	bx	lr
 800c3e4:	08011669 	.word	0x08011669

0800c3e8 <GetElement.isra.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800c3e8:	b570      	push	{r4, r5, r6, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800c3ea:	4b0d      	ldr	r3, [pc, #52]	; (800c420 <GetElement.isra.0+0x38>)
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800c3ec:	0004      	movs	r4, r0
 800c3ee:	0008      	movs	r0, r1
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800c3f0:	6919      	ldr	r1, [r3, #16]
 800c3f2:	7d0a      	ldrb	r2, [r1, #20]
    if( count == 0 )
 800c3f4:	2a00      	cmp	r2, #0
 800c3f6:	d010      	beq.n	800c41a <GetElement.isra.0+0x32>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800c3f8:	000d      	movs	r5, r1
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	3510      	adds	r5, #16
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 800c3fe:	7806      	ldrb	r6, [r0, #0]
 800c400:	42a6      	cmp	r6, r4
 800c402:	d007      	beq.n	800c414 <GetElement.isra.0+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800c404:	42a8      	cmp	r0, r5
 800c406:	d106      	bne.n	800c416 <GetElement.isra.0+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800c408:	0008      	movs	r0, r1
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 800c40a:	3301      	adds	r3, #1
 800c40c:	b2db      	uxtb	r3, r3
 800c40e:	429a      	cmp	r2, r3
 800c410:	d1f5      	bne.n	800c3fe <GetElement.isra.0+0x16>
        return NULL;
 800c412:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 800c414:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 800c416:	3004      	adds	r0, #4
 800c418:	e7f7      	b.n	800c40a <GetElement.isra.0+0x22>
        return NULL;
 800c41a:	0010      	movs	r0, r2
 800c41c:	e7fa      	b.n	800c414 <GetElement.isra.0+0x2c>
 800c41e:	46c0      	nop			; (mov r8, r8)
 800c420:	20000ca8 	.word	0x20000ca8

0800c424 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives, LoRaMacConfirmQueueNvmEvent confirmQueueNvmCtxChanged )
{
 800c424:	b570      	push	{r4, r5, r6, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800c426:	4c0a      	ldr	r4, [pc, #40]	; (800c450 <LoRaMacConfirmQueueInit+0x2c>)

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800c428:	2200      	movs	r2, #0
 800c42a:	0023      	movs	r3, r4
    ConfirmQueueCtx.Primitives = primitives;
 800c42c:	6020      	str	r0, [r4, #0]
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800c42e:	0020      	movs	r0, r4
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800c430:	3328      	adds	r3, #40	; 0x28
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800c432:	3014      	adds	r0, #20
{
 800c434:	000d      	movs	r5, r1
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800c436:	701a      	strb	r2, [r3, #0]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800c438:	21ff      	movs	r1, #255	; 0xff
 800c43a:	3214      	adds	r2, #20
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800c43c:	6120      	str	r0, [r4, #16]
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800c43e:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800c440:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800c442:	f001 fe7f 	bl	800e144 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c446:	2301      	movs	r3, #1
 800c448:	6922      	ldr	r2, [r4, #16]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 800c44a:	60e5      	str	r5, [r4, #12]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c44c:	7553      	strb	r3, [r2, #21]
}
 800c44e:	bd70      	pop	{r4, r5, r6, pc}
 800c450:	20000ca8 	.word	0x20000ca8

0800c454 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 800c454:	0001      	movs	r1, r0
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
        return true;
    }
    else
    {
        return false;
 800c456:	2000      	movs	r0, #0
{
 800c458:	b510      	push	{r4, lr}
    if( confirmQueueNvmCtx != NULL )
 800c45a:	4281      	cmp	r1, r0
 800c45c:	d005      	beq.n	800c46a <LoRaMacConfirmQueueRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 800c45e:	4803      	ldr	r0, [pc, #12]	; (800c46c <LoRaMacConfirmQueueRestoreNvmCtx+0x18>)
 800c460:	2216      	movs	r2, #22
 800c462:	3014      	adds	r0, #20
 800c464:	f001 fe58 	bl	800e118 <memcpy1>
        return true;
 800c468:	2001      	movs	r0, #1
    }
}
 800c46a:	bd10      	pop	{r4, pc}
 800c46c:	20000ca8 	.word	0x20000ca8

0800c470 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 800c470:	2316      	movs	r3, #22
 800c472:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
 800c474:	4801      	ldr	r0, [pc, #4]	; (800c47c <LoRaMacConfirmQueueGetNvmCtx+0xc>)
}
 800c476:	3014      	adds	r0, #20
 800c478:	4770      	bx	lr
 800c47a:	46c0      	nop			; (mov r8, r8)
 800c47c:	20000ca8 	.word	0x20000ca8

0800c480 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800c480:	b510      	push	{r4, lr}
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800c482:	4c0e      	ldr	r4, [pc, #56]	; (800c4bc <LoRaMacConfirmQueueAdd+0x3c>)
{
 800c484:	0001      	movs	r1, r0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800c486:	6922      	ldr	r2, [r4, #16]
    {
        // Protect the buffer against overwrites
        return false;
 800c488:	2000      	movs	r0, #0
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800c48a:	7d13      	ldrb	r3, [r2, #20]
 800c48c:	2b04      	cmp	r3, #4
 800c48e:	d813      	bhi.n	800c4b8 <LoRaMacConfirmQueueAdd+0x38>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800c490:	7808      	ldrb	r0, [r1, #0]
 800c492:	68a3      	ldr	r3, [r4, #8]
 800c494:	7018      	strb	r0, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800c496:	7848      	ldrb	r0, [r1, #1]
 800c498:	7058      	strb	r0, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800c49a:	78c9      	ldrb	r1, [r1, #3]
        bufferPointer++;
 800c49c:	1d18      	adds	r0, r3, #4
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800c49e:	70d9      	strb	r1, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800c4a0:	2100      	movs	r1, #0
 800c4a2:	7099      	strb	r1, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800c4a4:	7d11      	ldrb	r1, [r2, #20]
 800c4a6:	3101      	adds	r1, #1
 800c4a8:	7511      	strb	r1, [r2, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800c4aa:	0011      	movs	r1, r2
 800c4ac:	3110      	adds	r1, #16
 800c4ae:	428b      	cmp	r3, r1
 800c4b0:	d100      	bne.n	800c4b4 <LoRaMacConfirmQueueAdd+0x34>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800c4b2:	0010      	movs	r0, r2
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800c4b4:	60a0      	str	r0, [r4, #8]

    return true;
 800c4b6:	2001      	movs	r0, #1
}
 800c4b8:	bd10      	pop	{r4, pc}
 800c4ba:	46c0      	nop			; (mov r8, r8)
 800c4bc:	20000ca8 	.word	0x20000ca8

0800c4c0 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800c4c0:	b510      	push	{r4, lr}
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800c4c2:	4908      	ldr	r1, [pc, #32]	; (800c4e4 <LoRaMacConfirmQueueRemoveFirst+0x24>)
 800c4c4:	690a      	ldr	r2, [r1, #16]
 800c4c6:	7d13      	ldrb	r3, [r2, #20]
    {
        return false;
 800c4c8:	1e18      	subs	r0, r3, #0
    if( count == 0 )
 800c4ca:	d00a      	beq.n	800c4e2 <LoRaMacConfirmQueueRemoveFirst+0x22>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 800c4cc:	3b01      	subs	r3, #1
 800c4ce:	7513      	strb	r3, [r2, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800c4d0:	0013      	movs	r3, r2
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800c4d2:	684c      	ldr	r4, [r1, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800c4d4:	3310      	adds	r3, #16
        bufferPointer++;
 800c4d6:	1d20      	adds	r0, r4, #4
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800c4d8:	429c      	cmp	r4, r3
 800c4da:	d100      	bne.n	800c4de <LoRaMacConfirmQueueRemoveFirst+0x1e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800c4dc:	0010      	movs	r0, r2
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800c4de:	6048      	str	r0, [r1, #4]

    return true;
 800c4e0:	2001      	movs	r0, #1
}
 800c4e2:	bd10      	pop	{r4, pc}
 800c4e4:	20000ca8 	.word	0x20000ca8

0800c4e8 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800c4e8:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 800c4ea:	4b08      	ldr	r3, [pc, #32]	; (800c50c <LoRaMacConfirmQueueSetStatus+0x24>)
{
 800c4ec:	0004      	movs	r4, r0
    if( count == 0 )
 800c4ee:	691a      	ldr	r2, [r3, #16]
{
 800c4f0:	0008      	movs	r0, r1
    if( count == 0 )
 800c4f2:	7d12      	ldrb	r2, [r2, #20]
 800c4f4:	2a00      	cmp	r2, #0
 800c4f6:	d007      	beq.n	800c508 <LoRaMacConfirmQueueSetStatus+0x20>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c4f8:	6859      	ldr	r1, [r3, #4]
 800c4fa:	f7ff ff75 	bl	800c3e8 <GetElement.isra.0>
        if( element != NULL )
 800c4fe:	2800      	cmp	r0, #0
 800c500:	d002      	beq.n	800c508 <LoRaMacConfirmQueueSetStatus+0x20>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 800c502:	2301      	movs	r3, #1
            element->Status = status;
 800c504:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800c506:	7083      	strb	r3, [r0, #2]
        }
    }
}
 800c508:	bd10      	pop	{r4, pc}
 800c50a:	46c0      	nop			; (mov r8, r8)
 800c50c:	20000ca8 	.word	0x20000ca8

0800c510 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800c510:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 800c512:	4b07      	ldr	r3, [pc, #28]	; (800c530 <LoRaMacConfirmQueueGetStatus+0x20>)
    if( count == 0 )
 800c514:	691a      	ldr	r2, [r3, #16]
 800c516:	7d11      	ldrb	r1, [r2, #20]
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c518:	2201      	movs	r2, #1
    if( count == 0 )
 800c51a:	2900      	cmp	r1, #0
 800c51c:	d006      	beq.n	800c52c <LoRaMacConfirmQueueGetStatus+0x1c>
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800c51e:	6859      	ldr	r1, [r3, #4]
 800c520:	f7ff ff62 	bl	800c3e8 <GetElement.isra.0>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c524:	2201      	movs	r2, #1
        if( element != NULL )
 800c526:	2800      	cmp	r0, #0
 800c528:	d000      	beq.n	800c52c <LoRaMacConfirmQueueGetStatus+0x1c>
            return element->Status;
 800c52a:	7842      	ldrb	r2, [r0, #1]
}
 800c52c:	0010      	movs	r0, r2
 800c52e:	bd10      	pop	{r4, pc}
 800c530:	20000ca8 	.word	0x20000ca8

0800c534 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800c534:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800c536:	490c      	ldr	r1, [pc, #48]	; (800c568 <LoRaMacConfirmQueueSetStatusCmn+0x34>)

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800c538:	690a      	ldr	r2, [r1, #16]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800c53a:	684b      	ldr	r3, [r1, #4]
    if( count == 0 )
 800c53c:	7d14      	ldrb	r4, [r2, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800c53e:	7550      	strb	r0, [r2, #21]
    if( count == 0 )
 800c540:	2c00      	cmp	r4, #0
 800c542:	d00d      	beq.n	800c560 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800c544:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 800c546:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800c548:	6889      	ldr	r1, [r1, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800c54a:	3410      	adds	r4, #16
            if( element->RestrictCommonReadyToHandle == false )
 800c54c:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 800c54e:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800c550:	2e00      	cmp	r6, #0
 800c552:	d100      	bne.n	800c556 <LoRaMacConfirmQueueSetStatusCmn+0x22>
                element->ReadyToHandle = true;
 800c554:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800c556:	42a3      	cmp	r3, r4
 800c558:	d103      	bne.n	800c562 <LoRaMacConfirmQueueSetStatusCmn+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800c55a:	0013      	movs	r3, r2
        }while( element != ConfirmQueueCtx.BufferEnd );
 800c55c:	4299      	cmp	r1, r3
 800c55e:	d1f5      	bne.n	800c54c <LoRaMacConfirmQueueSetStatusCmn+0x18>
    }
}
 800c560:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 800c562:	3304      	adds	r3, #4
 800c564:	e7fa      	b.n	800c55c <LoRaMacConfirmQueueSetStatusCmn+0x28>
 800c566:	46c0      	nop			; (mov r8, r8)
 800c568:	20000ca8 	.word	0x20000ca8

0800c56c <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800c56c:	4b04      	ldr	r3, [pc, #16]	; (800c580 <LoRaMacConfirmQueueIsCmdActive+0x14>)
{
 800c56e:	b510      	push	{r4, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800c570:	6859      	ldr	r1, [r3, #4]
 800c572:	f7ff ff39 	bl	800c3e8 <GetElement.isra.0>
 800c576:	1e43      	subs	r3, r0, #1
 800c578:	4198      	sbcs	r0, r3
    {
        return true;
    }
    return false;
}
 800c57a:	b2c0      	uxtb	r0, r0
 800c57c:	bd10      	pop	{r4, pc}
 800c57e:	46c0      	nop			; (mov r8, r8)
 800c580:	20000ca8 	.word	0x20000ca8

0800c584 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800c584:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c586:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800c588:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800c58a:	4e13      	ldr	r6, [pc, #76]	; (800c5d8 <LoRaMacConfirmQueueHandleCb+0x54>)
{
 800c58c:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800c58e:	6933      	ldr	r3, [r6, #16]
 800c590:	7d1b      	ldrb	r3, [r3, #20]
 800c592:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 800c594:	9b01      	ldr	r3, [sp, #4]
 800c596:	429c      	cmp	r4, r3
 800c598:	d101      	bne.n	800c59e <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 800c59a:	b005      	add	sp, #20
 800c59c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800c59e:	6873      	ldr	r3, [r6, #4]
 800c5a0:	7818      	ldrb	r0, [r3, #0]
 800c5a2:	7028      	strb	r0, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800c5a4:	7859      	ldrb	r1, [r3, #1]
 800c5a6:	7069      	strb	r1, [r5, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800c5a8:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 800c5aa:	2f00      	cmp	r7, #0
 800c5ac:	d00d      	beq.n	800c5ca <LoRaMacConfirmQueueHandleCb+0x46>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800c5ae:	6833      	ldr	r3, [r6, #0]
 800c5b0:	0028      	movs	r0, r5
 800c5b2:	689b      	ldr	r3, [r3, #8]
 800c5b4:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800c5b6:	f7ff ff83 	bl	800c4c0 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800c5ba:	2f00      	cmp	r7, #0
 800c5bc:	d102      	bne.n	800c5c4 <LoRaMacConfirmQueueHandleCb+0x40>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800c5be:	a803      	add	r0, sp, #12
 800c5c0:	f7ff ff5e 	bl	800c480 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800c5c4:	3401      	adds	r4, #1
 800c5c6:	b2e4      	uxtb	r4, r4
 800c5c8:	e7e4      	b.n	800c594 <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800c5ca:	aa03      	add	r2, sp, #12
 800c5cc:	7010      	strb	r0, [r2, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800c5ce:	7051      	strb	r1, [r2, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800c5d0:	78db      	ldrb	r3, [r3, #3]
 800c5d2:	70d3      	strb	r3, [r2, #3]
 800c5d4:	e7ef      	b.n	800c5b6 <LoRaMacConfirmQueueHandleCb+0x32>
 800c5d6:	46c0      	nop			; (mov r8, r8)
 800c5d8:	20000ca8 	.word	0x20000ca8

0800c5dc <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800c5dc:	4b01      	ldr	r3, [pc, #4]	; (800c5e4 <LoRaMacConfirmQueueGetCnt+0x8>)
 800c5de:	691b      	ldr	r3, [r3, #16]
 800c5e0:	7d18      	ldrb	r0, [r3, #20]
}
 800c5e2:	4770      	bx	lr
 800c5e4:	20000ca8 	.word	0x20000ca8

0800c5e8 <LoRaMacConfirmQueueIsFull>:
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800c5e8:	2004      	movs	r0, #4

bool LoRaMacConfirmQueueIsFull( void )
{
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800c5ea:	4b03      	ldr	r3, [pc, #12]	; (800c5f8 <LoRaMacConfirmQueueIsFull+0x10>)
 800c5ec:	691b      	ldr	r3, [r3, #16]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800c5ee:	7d1b      	ldrb	r3, [r3, #20]
 800c5f0:	4298      	cmp	r0, r3
 800c5f2:	4180      	sbcs	r0, r0
 800c5f4:	4240      	negs	r0, r0
    }
    else
    {
        return false;
    }
}
 800c5f6:	4770      	bx	lr
 800c5f8:	20000ca8 	.word	0x20000ca8

0800c5fc <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 800c5fc:	4770      	bx	lr
	...

0800c600 <DeriveSessionKey10x>:
{
 800c600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c602:	000f      	movs	r7, r1
    uint8_t compBase[16] = { 0 };
 800c604:	2100      	movs	r1, #0
{
 800c606:	b085      	sub	sp, #20
 800c608:	0004      	movs	r4, r0
 800c60a:	0016      	movs	r6, r2
    uint8_t compBase[16] = { 0 };
 800c60c:	a801      	add	r0, sp, #4
 800c60e:	220c      	movs	r2, #12
{
 800c610:	001d      	movs	r5, r3
    uint8_t compBase[16] = { 0 };
 800c612:	9100      	str	r1, [sp, #0]
 800c614:	f003 fd8d 	bl	8010132 <memset>
    switch( keyID )
 800c618:	466a      	mov	r2, sp
 800c61a:	1e63      	subs	r3, r4, #1
 800c61c:	7013      	strb	r3, [r2, #0]
    memcpy1( compBase + 1, joinNonce, 3 );
 800c61e:	466b      	mov	r3, sp
 800c620:	2203      	movs	r2, #3
 800c622:	1c58      	adds	r0, r3, #1
 800c624:	0039      	movs	r1, r7
 800c626:	f001 fd77 	bl	800e118 <memcpy1>
    memcpy1( compBase + 4, netID, 3 );
 800c62a:	2203      	movs	r2, #3
 800c62c:	0031      	movs	r1, r6
 800c62e:	a801      	add	r0, sp, #4
 800c630:	f001 fd72 	bl	800e118 <memcpy1>
    memcpy1( compBase + 7, devNonce, 2 );
 800c634:	466b      	mov	r3, sp
 800c636:	2202      	movs	r2, #2
 800c638:	1dd8      	adds	r0, r3, #7
 800c63a:	0029      	movs	r1, r5
 800c63c:	f001 fd6c 	bl	800e118 <memcpy1>
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800c640:	4b06      	ldr	r3, [pc, #24]	; (800c65c <DeriveSessionKey10x+0x5c>)
 800c642:	2201      	movs	r2, #1
 800c644:	6818      	ldr	r0, [r3, #0]
 800c646:	4669      	mov	r1, sp
 800c648:	0023      	movs	r3, r4
 800c64a:	6800      	ldr	r0, [r0, #0]
 800c64c:	f7fc f977 	bl	800893e <SecureElementDeriveAndStoreKey>
 800c650:	2800      	cmp	r0, #0
 800c652:	d000      	beq.n	800c656 <DeriveSessionKey10x+0x56>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c654:	200f      	movs	r0, #15
}
 800c656:	b005      	add	sp, #20
 800c658:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c65a:	46c0      	nop			; (mov r8, r8)
 800c65c:	20000cd4 	.word	0x20000cd4

0800c660 <PayloadEncrypt>:
{
 800c660:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c662:	b08d      	sub	sp, #52	; 0x34
 800c664:	001d      	movs	r5, r3
 800c666:	ab12      	add	r3, sp, #72	; 0x48
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	9001      	str	r0, [sp, #4]
 800c66c:	9302      	str	r3, [sp, #8]
    if( buffer == 0 )
 800c66e:	9b01      	ldr	r3, [sp, #4]
{
 800c670:	000f      	movs	r7, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c672:	200a      	movs	r0, #10
{
 800c674:	9203      	str	r2, [sp, #12]
    if( buffer == 0 )
 800c676:	2b00      	cmp	r3, #0
 800c678:	d026      	beq.n	800c6c8 <PayloadEncrypt+0x68>
    uint8_t sBlock[16] = { 0 };
 800c67a:	2600      	movs	r6, #0
 800c67c:	220c      	movs	r2, #12
 800c67e:	0031      	movs	r1, r6
 800c680:	a805      	add	r0, sp, #20
 800c682:	9604      	str	r6, [sp, #16]
 800c684:	f003 fd55 	bl	8010132 <memset>
    uint8_t aBlock[16] = { 0 };
 800c688:	220c      	movs	r2, #12
 800c68a:	0031      	movs	r1, r6
 800c68c:	a809      	add	r0, sp, #36	; 0x24
 800c68e:	9608      	str	r6, [sp, #32]
 800c690:	f003 fd4f 	bl	8010132 <memset>
    aBlock[0] = 0x01;
 800c694:	2201      	movs	r2, #1
    aBlock[5] = dir;
 800c696:	9b02      	ldr	r3, [sp, #8]
    uint8_t aBlock[16] = { 0 };
 800c698:	ac08      	add	r4, sp, #32
    aBlock[5] = dir;
 800c69a:	7163      	strb	r3, [r4, #5]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800c69c:	0c2b      	lsrs	r3, r5, #16
 800c69e:	7223      	strb	r3, [r4, #8]
    aBlock[10] = frameCounter & 0xFF;
 800c6a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[6] = address & 0xFF;
 800c6a2:	80e5      	strh	r5, [r4, #6]
    aBlock[10] = frameCounter & 0xFF;
 800c6a4:	8163      	strh	r3, [r4, #10]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800c6a6:	0c1b      	lsrs	r3, r3, #16
 800c6a8:	7323      	strb	r3, [r4, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c6aa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800c6ac:	0e2d      	lsrs	r5, r5, #24
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c6ae:	0e1b      	lsrs	r3, r3, #24
    aBlock[0] = 0x01;
 800c6b0:	7022      	strb	r2, [r4, #0]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800c6b2:	7265      	strb	r5, [r4, #9]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800c6b4:	7363      	strb	r3, [r4, #13]
    uint16_t ctr = 1;
 800c6b6:	0014      	movs	r4, r2
 800c6b8:	b2e2      	uxtb	r2, r4
 800c6ba:	0113      	lsls	r3, r2, #4
 800c6bc:	3b10      	subs	r3, #16
 800c6be:	b2db      	uxtb	r3, r3
 800c6c0:	9302      	str	r3, [sp, #8]
    while( size > 0 )
 800c6c2:	2f00      	cmp	r7, #0
 800c6c4:	dc02      	bgt.n	800c6cc <PayloadEncrypt+0x6c>
    return LORAMAC_CRYPTO_SUCCESS;
 800c6c6:	2000      	movs	r0, #0
}
 800c6c8:	b00d      	add	sp, #52	; 0x34
 800c6ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        aBlock[15] = ctr & 0xFF;
 800c6cc:	a808      	add	r0, sp, #32
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c6ce:	ad04      	add	r5, sp, #16
        aBlock[15] = ctr & 0xFF;
 800c6d0:	73c2      	strb	r2, [r0, #15]
        ctr++;
 800c6d2:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c6d4:	002b      	movs	r3, r5
 800c6d6:	2110      	movs	r1, #16
 800c6d8:	9a03      	ldr	r2, [sp, #12]
        ctr++;
 800c6da:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800c6dc:	f7fc f8bd 	bl	800885a <SecureElementAesEncrypt>
 800c6e0:	2800      	cmp	r0, #0
 800c6e2:	d115      	bne.n	800c710 <PayloadEncrypt+0xb0>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800c6e4:	1c39      	adds	r1, r7, #0
 800c6e6:	1c0b      	adds	r3, r1, #0
 800c6e8:	2f10      	cmp	r7, #16
 800c6ea:	dd00      	ble.n	800c6ee <PayloadEncrypt+0x8e>
 800c6ec:	2310      	movs	r3, #16
 800c6ee:	b21b      	sxth	r3, r3
 800c6f0:	4298      	cmp	r0, r3
 800c6f2:	db02      	blt.n	800c6fa <PayloadEncrypt+0x9a>
        size -= 16;
 800c6f4:	3f10      	subs	r7, #16
 800c6f6:	b23f      	sxth	r7, r7
        bufferIndex += 16;
 800c6f8:	e7de      	b.n	800c6b8 <PayloadEncrypt+0x58>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c6fa:	9b02      	ldr	r3, [sp, #8]
 800c6fc:	5c2e      	ldrb	r6, [r5, r0]
 800c6fe:	181a      	adds	r2, r3, r0
 800c700:	9b01      	ldr	r3, [sp, #4]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800c702:	3001      	adds	r0, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c704:	5c9b      	ldrb	r3, [r3, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800c706:	b2c0      	uxtb	r0, r0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800c708:	4073      	eors	r3, r6
 800c70a:	9e01      	ldr	r6, [sp, #4]
 800c70c:	54b3      	strb	r3, [r6, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800c70e:	e7ea      	b.n	800c6e6 <PayloadEncrypt+0x86>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c710:	200f      	movs	r0, #15
 800c712:	e7d9      	b.n	800c6c8 <PayloadEncrypt+0x68>

0800c714 <GetLastFcntDown>:
    switch( fCntID )
 800c714:	3801      	subs	r0, #1
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800c716:	2305      	movs	r3, #5
{
 800c718:	b500      	push	{lr}
 800c71a:	2803      	cmp	r0, #3
 800c71c:	d80b      	bhi.n	800c736 <GetLastFcntDown+0x22>
 800c71e:	4b0d      	ldr	r3, [pc, #52]	; (800c754 <GetLastFcntDown+0x40>)
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	f7f3 fd03 	bl	800012c <__gnu_thumb1_case_uqi>
 800c726:	0a02      	.short	0x0a02
 800c728:	140f      	.short	0x140f
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800c72a:	691a      	ldr	r2, [r3, #16]
 800c72c:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800c72e:	001a      	movs	r2, r3
 800c730:	3210      	adds	r2, #16
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800c732:	621a      	str	r2, [r3, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800c734:	2300      	movs	r3, #0
}
 800c736:	0018      	movs	r0, r3
 800c738:	bd00      	pop	{pc}
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800c73a:	695a      	ldr	r2, [r3, #20]
 800c73c:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800c73e:	001a      	movs	r2, r3
 800c740:	3214      	adds	r2, #20
 800c742:	e7f6      	b.n	800c732 <GetLastFcntDown+0x1e>
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 800c744:	699a      	ldr	r2, [r3, #24]
 800c746:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800c748:	001a      	movs	r2, r3
 800c74a:	3218      	adds	r2, #24
 800c74c:	e7f1      	b.n	800c732 <GetLastFcntDown+0x1e>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800c74e:	69db      	ldr	r3, [r3, #28]
 800c750:	600b      	str	r3, [r1, #0]
 800c752:	e7ef      	b.n	800c734 <GetLastFcntDown+0x20>
 800c754:	20000cd4 	.word	0x20000cd4

0800c758 <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 800c758:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800c75a:	2100      	movs	r1, #0
 800c75c:	220c      	movs	r2, #12
 800c75e:	a801      	add	r0, sp, #4
 800c760:	9100      	str	r1, [sp, #0]
 800c762:	f003 fce6 	bl	8010132 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800c766:	4b06      	ldr	r3, [pc, #24]	; (800c780 <LoRaMacCryptoDeriveMcKEKey.part.0+0x28>)
 800c768:	2204      	movs	r2, #4
 800c76a:	6818      	ldr	r0, [r3, #0]
 800c76c:	4669      	mov	r1, sp
 800c76e:	237f      	movs	r3, #127	; 0x7f
 800c770:	6800      	ldr	r0, [r0, #0]
 800c772:	f7fc f8e4 	bl	800893e <SecureElementDeriveAndStoreKey>
 800c776:	2800      	cmp	r0, #0
 800c778:	d000      	beq.n	800c77c <LoRaMacCryptoDeriveMcKEKey.part.0+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c77a:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800c77c:	b005      	add	sp, #20
 800c77e:	bd00      	pop	{pc}
 800c780:	20000cd4 	.word	0x20000cd4

0800c784 <VerifyCmacB0.isra.0.constprop.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800c784:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c786:	b0c7      	sub	sp, #284	; 0x11c
 800c788:	0007      	movs	r7, r0
 800c78a:	000c      	movs	r4, r1
 800c78c:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c78e:	200a      	movs	r0, #10
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800c790:	9201      	str	r2, [sp, #4]
    if( msg == 0 )
 800c792:	2f00      	cmp	r7, #0
 800c794:	d030      	beq.n	800c7f8 <VerifyCmacB0.isra.0.constprop.0+0x74>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c796:	2680      	movs	r6, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800c798:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c79a:	0076      	lsls	r6, r6, #1
 800c79c:	42b1      	cmp	r1, r6
 800c79e:	d82b      	bhi.n	800c7f8 <VerifyCmacB0.isra.0.constprop.0+0x74>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800c7a0:	2288      	movs	r2, #136	; 0x88
 800c7a2:	2100      	movs	r1, #0
 800c7a4:	0052      	lsls	r2, r2, #1
 800c7a6:	a802      	add	r0, sp, #8
 800c7a8:	f001 fccc 	bl	800e144 <memset1>
    b0[0] = 0x49;
 800c7ac:	2349      	movs	r3, #73	; 0x49
 800c7ae:	9302      	str	r3, [sp, #8]
    b0[4] = 0x00;
 800c7b0:	ab02      	add	r3, sp, #8
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800c7b2:	aa02      	add	r2, sp, #8
    b0[4] = 0x00;
 800c7b4:	809e      	strh	r6, [r3, #4]
    b0[6] = devAddr & 0xFF;
 800c7b6:	80dd      	strh	r5, [r3, #6]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800c7b8:	0c2b      	lsrs	r3, r5, #16
 800c7ba:	7213      	strb	r3, [r2, #8]
    b0[10] = fCnt & 0xFF;
 800c7bc:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800c7be:	0e2d      	lsrs	r5, r5, #24
    b0[10] = fCnt & 0xFF;
 800c7c0:	8153      	strh	r3, [r2, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800c7c2:	0c1b      	lsrs	r3, r3, #16
 800c7c4:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800c7c6:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800c7c8:	0039      	movs	r1, r7
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800c7ca:	0e1e      	lsrs	r6, r3, #24
    b0[14] = 0x00;
 800c7cc:	2300      	movs	r3, #0
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800c7ce:	7255      	strb	r5, [r2, #9]
    b0[14] = 0x00;
 800c7d0:	7393      	strb	r3, [r2, #14]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800c7d2:	7356      	strb	r6, [r2, #13]
    b0[15] = msgLen & 0xFF;
 800c7d4:	73d4      	strb	r4, [r2, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800c7d6:	a806      	add	r0, sp, #24
 800c7d8:	0022      	movs	r2, r4
 800c7da:	f001 fc9d 	bl	800e118 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800c7de:	0021      	movs	r1, r4
 800c7e0:	3110      	adds	r1, #16
 800c7e2:	9b01      	ldr	r3, [sp, #4]
 800c7e4:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800c7e6:	b289      	uxth	r1, r1
 800c7e8:	a802      	add	r0, sp, #8
 800c7ea:	f7fc f81e 	bl	800882a <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800c7ee:	2800      	cmp	r0, #0
 800c7f0:	d002      	beq.n	800c7f8 <VerifyCmacB0.isra.0.constprop.0+0x74>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800c7f2:	2801      	cmp	r0, #1
 800c7f4:	d000      	beq.n	800c7f8 <VerifyCmacB0.isra.0.constprop.0+0x74>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c7f6:	200f      	movs	r0, #15
}
 800c7f8:	b047      	add	sp, #284	; 0x11c
 800c7fa:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c7fc <LoRaMacCryptoInit>:
{
 800c7fc:	b570      	push	{r4, r5, r6, lr}
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 800c7fe:	4c10      	ldr	r4, [pc, #64]	; (800c840 <LoRaMacCryptoInit+0x44>)
 800c800:	0023      	movs	r3, r4
 800c802:	3308      	adds	r3, #8
 800c804:	6023      	str	r3, [r4, #0]
    if( cryptoNvmCtxChanged != 0 )
 800c806:	2800      	cmp	r0, #0
 800c808:	d100      	bne.n	800c80c <LoRaMacCryptoInit+0x10>
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 800c80a:	480e      	ldr	r0, [pc, #56]	; (800c844 <LoRaMacCryptoInit+0x48>)
 800c80c:	6060      	str	r0, [r4, #4]
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 800c80e:	0020      	movs	r0, r4
 800c810:	2224      	movs	r2, #36	; 0x24
 800c812:	3008      	adds	r0, #8
 800c814:	2100      	movs	r1, #0
 800c816:	f001 fc95 	bl	800e144 <memset1>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 800c81a:	6823      	ldr	r3, [r4, #0]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 800c81c:	4a0a      	ldr	r2, [pc, #40]	; (800c848 <LoRaMacCryptoInit+0x4c>)
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800c81e:	0019      	movs	r1, r3
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 800c820:	601a      	str	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c822:	2201      	movs	r2, #1
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800c824:	2500      	movs	r5, #0
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c826:	4252      	negs	r2, r2
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800c828:	3118      	adds	r1, #24
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800c82a:	60dd      	str	r5, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c82c:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800c82e:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800c830:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800c832:	6219      	str	r1, [r3, #32]
    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 800c834:	61da      	str	r2, [r3, #28]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c836:	6863      	ldr	r3, [r4, #4]
 800c838:	4798      	blx	r3
}
 800c83a:	0028      	movs	r0, r5
 800c83c:	bd70      	pop	{r4, r5, r6, pc}
 800c83e:	46c0      	nop			; (mov r8, r8)
 800c840:	20000cd4 	.word	0x20000cd4
 800c844:	0800c5fd 	.word	0x0800c5fd
 800c848:	01010100 	.word	0x01010100

0800c84c <LoRaMacCryptoSetLrWanVersion>:
    CryptoCtx.NvmCtx->LrWanVersion = version;
 800c84c:	4b02      	ldr	r3, [pc, #8]	; (800c858 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	6018      	str	r0, [r3, #0]
}
 800c852:	2000      	movs	r0, #0
 800c854:	4770      	bx	lr
 800c856:	46c0      	nop			; (mov r8, r8)
 800c858:	20000cd4 	.word	0x20000cd4

0800c85c <LoRaMacCryptoRestoreNvmCtx>:
{
 800c85c:	0001      	movs	r1, r0
 800c85e:	b510      	push	{r4, lr}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c860:	200a      	movs	r0, #10
    if( cryptoNvmCtx != 0 )
 800c862:	2900      	cmp	r1, #0
 800c864:	d005      	beq.n	800c872 <LoRaMacCryptoRestoreNvmCtx+0x16>
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 800c866:	4803      	ldr	r0, [pc, #12]	; (800c874 <LoRaMacCryptoRestoreNvmCtx+0x18>)
 800c868:	2224      	movs	r2, #36	; 0x24
 800c86a:	3008      	adds	r0, #8
 800c86c:	f001 fc54 	bl	800e118 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 800c870:	2000      	movs	r0, #0
}
 800c872:	bd10      	pop	{r4, pc}
 800c874:	20000cd4 	.word	0x20000cd4

0800c878 <LoRaMacCryptoGetNvmCtx>:
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 800c878:	2324      	movs	r3, #36	; 0x24
 800c87a:	6003      	str	r3, [r0, #0]
    return &NvmCryptoCtx;
 800c87c:	4801      	ldr	r0, [pc, #4]	; (800c884 <LoRaMacCryptoGetNvmCtx+0xc>)
}
 800c87e:	3008      	adds	r0, #8
 800c880:	4770      	bx	lr
 800c882:	46c0      	nop			; (mov r8, r8)
 800c884:	20000cd4 	.word	0x20000cd4

0800c888 <LoRaMacCryptoGetFCntUp>:
{
 800c888:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c88a:	200a      	movs	r0, #10
    if( currentUp == NULL )
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d005      	beq.n	800c89c <LoRaMacCryptoGetFCntUp+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800c890:	2000      	movs	r0, #0
    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 800c892:	4a03      	ldr	r2, [pc, #12]	; (800c8a0 <LoRaMacCryptoGetFCntUp+0x18>)
 800c894:	6812      	ldr	r2, [r2, #0]
 800c896:	68d2      	ldr	r2, [r2, #12]
 800c898:	3201      	adds	r2, #1
 800c89a:	601a      	str	r2, [r3, #0]
}
 800c89c:	4770      	bx	lr
 800c89e:	46c0      	nop			; (mov r8, r8)
 800c8a0:	20000cd4 	.word	0x20000cd4

0800c8a4 <LoRaMacCryptoGetFCntDown>:
{
 800c8a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8a6:	001c      	movs	r4, r3
    uint32_t lastDown = 0;
 800c8a8:	2300      	movs	r3, #0
{
 800c8aa:	0007      	movs	r7, r0
 800c8ac:	000d      	movs	r5, r1
 800c8ae:	0016      	movs	r6, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c8b0:	200a      	movs	r0, #10
    uint32_t lastDown = 0;
 800c8b2:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
 800c8b4:	429c      	cmp	r4, r3
 800c8b6:	d026      	beq.n	800c906 <LoRaMacCryptoGetFCntDown+0x62>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800c8b8:	0038      	movs	r0, r7
 800c8ba:	a901      	add	r1, sp, #4
 800c8bc:	f7ff ff2a 	bl	800c714 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800c8c0:	2800      	cmp	r0, #0
 800c8c2:	d120      	bne.n	800c906 <LoRaMacCryptoGetFCntDown+0x62>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800c8c4:	9f01      	ldr	r7, [sp, #4]
 800c8c6:	1c7b      	adds	r3, r7, #1
 800c8c8:	d101      	bne.n	800c8ce <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800c8ca:	6026      	str	r6, [r4, #0]
 800c8cc:	e005      	b.n	800c8da <LoRaMacCryptoGetFCntDown+0x36>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800c8ce:	b2bb      	uxth	r3, r7
 800c8d0:	1af3      	subs	r3, r6, r3
        if( fCntDiff > 0 )
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	dd13      	ble.n	800c8fe <LoRaMacCryptoGetFCntDown+0x5a>
            *currentDown = lastDown + fCntDiff;
 800c8d6:	18fb      	adds	r3, r7, r3
 800c8d8:	6023      	str	r3, [r4, #0]
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 0 )
 800c8da:	4b10      	ldr	r3, [pc, #64]	; (800c91c <LoRaMacCryptoGetFCntDown+0x78>)
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	789e      	ldrb	r6, [r3, #2]
 800c8e0:	2e00      	cmp	r6, #0
 800c8e2:	d110      	bne.n	800c906 <LoRaMacCryptoGetFCntDown+0x62>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800c8e4:	0033      	movs	r3, r6
 800c8e6:	0038      	movs	r0, r7
 800c8e8:	0031      	movs	r1, r6
 800c8ea:	6822      	ldr	r2, [r4, #0]
 800c8ec:	1a12      	subs	r2, r2, r0
 800c8ee:	418b      	sbcs	r3, r1
 800c8f0:	429e      	cmp	r6, r3
 800c8f2:	dc10      	bgt.n	800c916 <LoRaMacCryptoGetFCntDown+0x72>
 800c8f4:	d101      	bne.n	800c8fa <LoRaMacCryptoGetFCntDown+0x56>
 800c8f6:	4295      	cmp	r5, r2
 800c8f8:	d80d      	bhi.n	800c916 <LoRaMacCryptoGetFCntDown+0x72>
            return LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT;
 800c8fa:	2008      	movs	r0, #8
 800c8fc:	e003      	b.n	800c906 <LoRaMacCryptoGetFCntDown+0x62>
        else if( fCntDiff == 0 )
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d102      	bne.n	800c908 <LoRaMacCryptoGetFCntDown+0x64>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800c902:	2007      	movs	r0, #7
            *currentDown = lastDown;
 800c904:	6027      	str	r7, [r4, #0]
}
 800c906:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800c908:	2380      	movs	r3, #128	; 0x80
 800c90a:	0c3a      	lsrs	r2, r7, #16
 800c90c:	0412      	lsls	r2, r2, #16
 800c90e:	025b      	lsls	r3, r3, #9
 800c910:	18d2      	adds	r2, r2, r3
 800c912:	1996      	adds	r6, r2, r6
 800c914:	e7d9      	b.n	800c8ca <LoRaMacCryptoGetFCntDown+0x26>
    return LORAMAC_CRYPTO_SUCCESS;
 800c916:	2000      	movs	r0, #0
 800c918:	e7f5      	b.n	800c906 <LoRaMacCryptoGetFCntDown+0x62>
 800c91a:	46c0      	nop			; (mov r8, r8)
 800c91c:	20000cd4 	.word	0x20000cd4

0800c920 <LoRaMacCryptoSetMulticastReference>:
{
 800c920:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c922:	200a      	movs	r0, #10
    if( multicastList == NULL )
 800c924:	2b00      	cmp	r3, #0
 800c926:	d004      	beq.n	800c932 <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800c928:	2000      	movs	r0, #0
    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800c92a:	4a02      	ldr	r2, [pc, #8]	; (800c934 <LoRaMacCryptoSetMulticastReference+0x14>)
 800c92c:	6812      	ldr	r2, [r2, #0]
 800c92e:	321c      	adds	r2, #28
 800c930:	621a      	str	r2, [r3, #32]
}
 800c932:	4770      	bx	lr
 800c934:	20000cd4 	.word	0x20000cd4

0800c938 <LoRaMacCryptoPrepareJoinRequest>:
{
 800c938:	b530      	push	{r4, r5, lr}
 800c93a:	0004      	movs	r4, r0
 800c93c:	b085      	sub	sp, #20
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c93e:	200a      	movs	r0, #10
    if( macMsg == 0 )
 800c940:	2c00      	cmp	r4, #0
 800c942:	d024      	beq.n	800c98e <LoRaMacCryptoPrepareJoinRequest+0x56>
    uint32_t devNonce = 0;
 800c944:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 800c946:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 800c948:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800c94a:	f7fc f859 	bl	8008a00 <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 800c94e:	4d11      	ldr	r5, [pc, #68]	; (800c994 <LoRaMacCryptoPrepareJoinRequest+0x5c>)
 800c950:	9b03      	ldr	r3, [sp, #12]
 800c952:	682a      	ldr	r2, [r5, #0]
 800c954:	8093      	strh	r3, [r2, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c956:	686b      	ldr	r3, [r5, #4]
 800c958:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800c95a:	682b      	ldr	r3, [r5, #0]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c95c:	0020      	movs	r0, r4
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800c95e:	889b      	ldrh	r3, [r3, #4]
 800c960:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c962:	f000 fa1e 	bl	800cda2 <LoRaMacSerializerJoinRequest>
 800c966:	2800      	cmp	r0, #0
 800c968:	d110      	bne.n	800c98c <LoRaMacCryptoPrepareJoinRequest+0x54>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800c96a:	0023      	movs	r3, r4
 800c96c:	3318      	adds	r3, #24
 800c96e:	9300      	str	r3, [sp, #0]
 800c970:	2213      	movs	r2, #19
 800c972:	2301      	movs	r3, #1
 800c974:	6821      	ldr	r1, [r4, #0]
 800c976:	f7fb ff4d 	bl	8008814 <SecureElementComputeAesCmac>
 800c97a:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c97c:	200f      	movs	r0, #15
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d105      	bne.n	800c98e <LoRaMacCryptoPrepareJoinRequest+0x56>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c982:	0020      	movs	r0, r4
 800c984:	f000 fa0d 	bl	800cda2 <LoRaMacSerializerJoinRequest>
 800c988:	2800      	cmp	r0, #0
 800c98a:	d000      	beq.n	800c98e <LoRaMacCryptoPrepareJoinRequest+0x56>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c98c:	2011      	movs	r0, #17
}
 800c98e:	b005      	add	sp, #20
 800c990:	bd30      	pop	{r4, r5, pc}
 800c992:	46c0      	nop			; (mov r8, r8)
 800c994:	20000cd4 	.word	0x20000cd4

0800c998 <LoRaMacCryptoSecureMessage>:
{
 800c998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c99a:	0006      	movs	r6, r0
 800c99c:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c99e:	240a      	movs	r4, #10
{
 800c9a0:	b087      	sub	sp, #28
    if( macMsg == NULL )
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d01f      	beq.n	800c9e6 <LoRaMacCryptoSecureMessage+0x4e>
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800c9a6:	4b2b      	ldr	r3, [pc, #172]	; (800ca54 <LoRaMacCryptoSecureMessage+0xbc>)
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800c9a8:	3c04      	subs	r4, #4
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	4283      	cmp	r3, r0
 800c9b0:	d819      	bhi.n	800c9e6 <LoRaMacCryptoSecureMessage+0x4e>
    if( macMsg->FPort == 0 )
 800c9b2:	1c6a      	adds	r2, r5, #1
 800c9b4:	7fd2      	ldrb	r2, [r2, #31]
        payloadDecryptionKeyID = NWK_S_KEY;
 800c9b6:	1e51      	subs	r1, r2, #1
 800c9b8:	418a      	sbcs	r2, r1
 800c9ba:	3202      	adds	r2, #2
    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 800c9bc:	4283      	cmp	r3, r0
 800c9be:	d306      	bcc.n	800c9ce <LoRaMacCryptoSecureMessage+0x36>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c9c0:	0028      	movs	r0, r5
 800c9c2:	f000 fa23 	bl	800ce0c <LoRaMacSerializerData>
 800c9c6:	1e03      	subs	r3, r0, #0
 800c9c8:	d010      	beq.n	800c9ec <LoRaMacCryptoSecureMessage+0x54>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c9ca:	2411      	movs	r4, #17
 800c9cc:	e00b      	b.n	800c9e6 <LoRaMacCryptoSecureMessage+0x4e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800c9ce:	002b      	movs	r3, r5
 800c9d0:	3328      	adds	r3, #40	; 0x28
 800c9d2:	7819      	ldrb	r1, [r3, #0]
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	9001      	str	r0, [sp, #4]
 800c9d8:	9300      	str	r3, [sp, #0]
 800c9da:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c9dc:	68ab      	ldr	r3, [r5, #8]
 800c9de:	f7ff fe3f 	bl	800c660 <PayloadEncrypt>
 800c9e2:	1e04      	subs	r4, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c9e4:	d0ec      	beq.n	800c9c0 <LoRaMacCryptoSecureMessage+0x28>
}
 800c9e6:	0020      	movs	r0, r4
 800c9e8:	b007      	add	sp, #28
 800c9ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800c9ec:	792f      	ldrb	r7, [r5, #4]
 800c9ee:	6829      	ldr	r1, [r5, #0]
 800c9f0:	3f04      	subs	r7, #4
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c9f2:	240a      	movs	r4, #10
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800c9f4:	b2ba      	uxth	r2, r7
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800c9f6:	2900      	cmp	r1, #0
 800c9f8:	d0f5      	beq.n	800c9e6 <LoRaMacCryptoSecureMessage+0x4e>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c9fa:	2080      	movs	r0, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800c9fc:	240e      	movs	r4, #14
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c9fe:	0040      	lsls	r0, r0, #1
 800ca00:	4282      	cmp	r2, r0
 800ca02:	d8f0      	bhi.n	800c9e6 <LoRaMacCryptoSecureMessage+0x4e>
    b0[0] = 0x49;
 800ca04:	38b7      	subs	r0, #183	; 0xb7
 800ca06:	9002      	str	r0, [sp, #8]
    b0[4] = 0x00;
 800ca08:	a802      	add	r0, sp, #8
 800ca0a:	8083      	strh	r3, [r0, #4]
    b0[14] = 0x00;
 800ca0c:	7383      	strb	r3, [r0, #14]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800ca0e:	002b      	movs	r3, r5
 800ca10:	892c      	ldrh	r4, [r5, #8]
 800ca12:	332c      	adds	r3, #44	; 0x2c
    b0[6] = devAddr & 0xFF;
 800ca14:	80c4      	strh	r4, [r0, #6]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800ca16:	68ac      	ldr	r4, [r5, #8]
    b0[10] = fCnt & 0xFF;
 800ca18:	8146      	strh	r6, [r0, #10]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800ca1a:	0c24      	lsrs	r4, r4, #16
 800ca1c:	7204      	strb	r4, [r0, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800ca1e:	68ac      	ldr	r4, [r5, #8]
    b0[15] = msgLen & 0xFF;
 800ca20:	73c7      	strb	r7, [r0, #15]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800ca22:	0e24      	lsrs	r4, r4, #24
 800ca24:	7244      	strb	r4, [r0, #9]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800ca26:	0c34      	lsrs	r4, r6, #16
 800ca28:	7304      	strb	r4, [r0, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800ca2a:	0e34      	lsrs	r4, r6, #24
 800ca2c:	7344      	strb	r4, [r0, #13]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800ca2e:	9300      	str	r3, [sp, #0]
 800ca30:	2302      	movs	r3, #2
 800ca32:	f7fb feef 	bl	8008814 <SecureElementComputeAesCmac>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ca36:	240f      	movs	r4, #15
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	d1d4      	bne.n	800c9e6 <LoRaMacCryptoSecureMessage+0x4e>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ca3c:	0028      	movs	r0, r5
 800ca3e:	f000 f9e5 	bl	800ce0c <LoRaMacSerializerData>
 800ca42:	1e04      	subs	r4, r0, #0
 800ca44:	d1c1      	bne.n	800c9ca <LoRaMacCryptoSecureMessage+0x32>
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 800ca46:	4b03      	ldr	r3, [pc, #12]	; (800ca54 <LoRaMacCryptoSecureMessage+0xbc>)
 800ca48:	681a      	ldr	r2, [r3, #0]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800ca4a:	685b      	ldr	r3, [r3, #4]
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 800ca4c:	60d6      	str	r6, [r2, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800ca4e:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 800ca50:	e7c9      	b.n	800c9e6 <LoRaMacCryptoSecureMessage+0x4e>
 800ca52:	46c0      	nop			; (mov r8, r8)
 800ca54:	20000cd4 	.word	0x20000cd4

0800ca58 <LoRaMacCryptoUnsecureMessage>:
{
 800ca58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca5a:	b087      	sub	sp, #28
 800ca5c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800ca5e:	000f      	movs	r7, r1
 800ca60:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ca62:	240a      	movs	r4, #10
{
 800ca64:	9002      	str	r0, [sp, #8]
 800ca66:	9203      	str	r2, [sp, #12]
    if( macMsg == 0 )
 800ca68:	2e00      	cmp	r6, #0
 800ca6a:	d008      	beq.n	800ca7e <LoRaMacCryptoUnsecureMessage+0x26>
    uint32_t lastDown = 0;
 800ca6c:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800ca6e:	0010      	movs	r0, r2
 800ca70:	a905      	add	r1, sp, #20
    uint32_t lastDown = 0;
 800ca72:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800ca74:	f7ff fe4e 	bl	800c714 <GetLastFcntDown>
 800ca78:	2800      	cmp	r0, #0
 800ca7a:	d003      	beq.n	800ca84 <LoRaMacCryptoUnsecureMessage+0x2c>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800ca7c:	2406      	movs	r4, #6
}
 800ca7e:	0020      	movs	r0, r4
 800ca80:	b007      	add	sp, #28
 800ca82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( currentDown > lastDown ) ||
 800ca84:	9b05      	ldr	r3, [sp, #20]
 800ca86:	429d      	cmp	r5, r3
 800ca88:	d801      	bhi.n	800ca8e <LoRaMacCryptoUnsecureMessage+0x36>
 800ca8a:	3301      	adds	r3, #1
 800ca8c:	d1f6      	bne.n	800ca7c <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ca8e:	0030      	movs	r0, r6
 800ca90:	f000 f92c 	bl	800ccec <LoRaMacParserData>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ca94:	2410      	movs	r4, #16
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ca96:	2800      	cmp	r0, #0
 800ca98:	d1f1      	bne.n	800ca7e <LoRaMacCryptoUnsecureMessage+0x26>
        if( KeyAddrList[i].AddrID == addrID )
 800ca9a:	4b23      	ldr	r3, [pc, #140]	; (800cb28 <LoRaMacCryptoUnsecureMessage+0xd0>)
 800ca9c:	9902      	ldr	r1, [sp, #8]
 800ca9e:	781a      	ldrb	r2, [r3, #0]
 800caa0:	428a      	cmp	r2, r1
 800caa2:	d004      	beq.n	800caae <LoRaMacCryptoUnsecureMessage+0x56>
 800caa4:	791a      	ldrb	r2, [r3, #4]
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800caa6:	3c04      	subs	r4, #4
        if( KeyAddrList[i].AddrID == addrID )
 800caa8:	428a      	cmp	r2, r1
 800caaa:	d1e8      	bne.n	800ca7e <LoRaMacCryptoUnsecureMessage+0x26>
 800caac:	3001      	adds	r0, #1
    if( address != macMsg->FHDR.DevAddr )
 800caae:	68b2      	ldr	r2, [r6, #8]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800cab0:	2402      	movs	r4, #2
    if( address != macMsg->FHDR.DevAddr )
 800cab2:	42ba      	cmp	r2, r7
 800cab4:	d1e3      	bne.n	800ca7e <LoRaMacCryptoUnsecureMessage+0x26>
    payloadDecryptionKeyID = curItem->AppSkey;
 800cab6:	40a0      	lsls	r0, r4
 800cab8:	1818      	adds	r0, r3, r0
 800caba:	7843      	ldrb	r3, [r0, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800cabc:	7882      	ldrb	r2, [r0, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 800cabe:	9302      	str	r3, [sp, #8]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800cac0:	7931      	ldrb	r1, [r6, #4]
 800cac2:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800cac4:	3904      	subs	r1, #4
 800cac6:	9301      	str	r3, [sp, #4]
 800cac8:	9500      	str	r5, [sp, #0]
 800caca:	003b      	movs	r3, r7
 800cacc:	6830      	ldr	r0, [r6, #0]
 800cace:	b289      	uxth	r1, r1
 800cad0:	f7ff fe58 	bl	800c784 <VerifyCmacB0.isra.0.constprop.0>
 800cad4:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cad6:	d1d2      	bne.n	800ca7e <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 800cad8:	1c73      	adds	r3, r6, #1
 800cada:	7fdb      	ldrb	r3, [r3, #31]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d101      	bne.n	800cae4 <LoRaMacCryptoUnsecureMessage+0x8c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800cae0:	3302      	adds	r3, #2
 800cae2:	9302      	str	r3, [sp, #8]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800cae4:	0033      	movs	r3, r6
 800cae6:	3328      	adds	r3, #40	; 0x28
 800cae8:	7819      	ldrb	r1, [r3, #0]
 800caea:	2301      	movs	r3, #1
 800caec:	9501      	str	r5, [sp, #4]
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	9a02      	ldr	r2, [sp, #8]
 800caf2:	003b      	movs	r3, r7
 800caf4:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800caf6:	f7ff fdb3 	bl	800c660 <PayloadEncrypt>
 800cafa:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cafc:	d1bf      	bne.n	800ca7e <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 800cafe:	9803      	ldr	r0, [sp, #12]
 800cb00:	4b0a      	ldr	r3, [pc, #40]	; (800cb2c <LoRaMacCryptoUnsecureMessage+0xd4>)
 800cb02:	3801      	subs	r0, #1
 800cb04:	2803      	cmp	r0, #3
 800cb06:	d805      	bhi.n	800cb14 <LoRaMacCryptoUnsecureMessage+0xbc>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 800cb08:	681a      	ldr	r2, [r3, #0]
 800cb0a:	f7f3 fb0f 	bl	800012c <__gnu_thumb1_case_uqi>
 800cb0e:	0602      	.short	0x0602
 800cb10:	0a08      	.short	0x0a08
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 800cb12:	6115      	str	r5, [r2, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	4798      	blx	r3
}
 800cb18:	e7b1      	b.n	800ca7e <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 800cb1a:	6155      	str	r5, [r2, #20]
            break;
 800cb1c:	e7fa      	b.n	800cb14 <LoRaMacCryptoUnsecureMessage+0xbc>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 800cb1e:	6195      	str	r5, [r2, #24]
            break;
 800cb20:	e7f8      	b.n	800cb14 <LoRaMacCryptoUnsecureMessage+0xbc>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 800cb22:	61d5      	str	r5, [r2, #28]
            break;
 800cb24:	e7f6      	b.n	800cb14 <LoRaMacCryptoUnsecureMessage+0xbc>
 800cb26:	46c0      	nop			; (mov r8, r8)
 800cb28:	20000160 	.word	0x20000160
 800cb2c:	20000cd4 	.word	0x20000cd4

0800cb30 <LoRaMacCryptoDeriveMcRootKey>:
{
 800cb30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cb32:	0001      	movs	r1, r0
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800cb34:	200b      	movs	r0, #11
    if( keyID != APP_KEY )
 800cb36:	2900      	cmp	r1, #0
 800cb38:	d115      	bne.n	800cb66 <LoRaMacCryptoDeriveMcRootKey+0x36>
    uint8_t compBase[16] = { 0 };
 800cb3a:	220c      	movs	r2, #12
 800cb3c:	a801      	add	r0, sp, #4
 800cb3e:	9100      	str	r1, [sp, #0]
 800cb40:	f003 faf7 	bl	8010132 <memset>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 800cb44:	4b09      	ldr	r3, [pc, #36]	; (800cb6c <LoRaMacCryptoDeriveMcRootKey+0x3c>)
 800cb46:	6818      	ldr	r0, [r3, #0]
 800cb48:	7883      	ldrb	r3, [r0, #2]
 800cb4a:	2b01      	cmp	r3, #1
 800cb4c:	d102      	bne.n	800cb54 <LoRaMacCryptoDeriveMcRootKey+0x24>
        compBase[0] = 0x20;
 800cb4e:	466a      	mov	r2, sp
 800cb50:	331f      	adds	r3, #31
 800cb52:	7013      	strb	r3, [r2, #0]
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800cb54:	2304      	movs	r3, #4
 800cb56:	2200      	movs	r2, #0
 800cb58:	4669      	mov	r1, sp
 800cb5a:	6800      	ldr	r0, [r0, #0]
 800cb5c:	f7fb feef 	bl	800893e <SecureElementDeriveAndStoreKey>
 800cb60:	2800      	cmp	r0, #0
 800cb62:	d000      	beq.n	800cb66 <LoRaMacCryptoDeriveMcRootKey+0x36>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cb64:	200f      	movs	r0, #15
}
 800cb66:	b005      	add	sp, #20
 800cb68:	bd00      	pop	{pc}
 800cb6a:	46c0      	nop			; (mov r8, r8)
 800cb6c:	20000cd4 	.word	0x20000cd4

0800cb70 <LoRaMacCryptoSetKey>:
{
 800cb70:	b570      	push	{r4, r5, r6, lr}
 800cb72:	0005      	movs	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800cb74:	f7fb feda 	bl	800892c <SecureElementSetKey>
 800cb78:	1e04      	subs	r4, r0, #0
 800cb7a:	d109      	bne.n	800cb90 <LoRaMacCryptoSetKey+0x20>
    if( keyID == APP_KEY )
 800cb7c:	2d00      	cmp	r5, #0
 800cb7e:	d108      	bne.n	800cb92 <LoRaMacCryptoSetKey+0x22>
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800cb80:	f7ff ffd6 	bl	800cb30 <LoRaMacCryptoDeriveMcRootKey>
 800cb84:	2800      	cmp	r0, #0
 800cb86:	d103      	bne.n	800cb90 <LoRaMacCryptoSetKey+0x20>
    if( keyID != MC_ROOT_KEY )
 800cb88:	f7ff fde6 	bl	800c758 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800cb8c:	2800      	cmp	r0, #0
 800cb8e:	d000      	beq.n	800cb92 <LoRaMacCryptoSetKey+0x22>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cb90:	240f      	movs	r4, #15
}
 800cb92:	0020      	movs	r0, r4
 800cb94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cb98 <LoRaMacCryptoHandleJoinAccept>:
{
 800cb98:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb9a:	b091      	sub	sp, #68	; 0x44
 800cb9c:	0015      	movs	r5, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cb9e:	240a      	movs	r4, #10
{
 800cba0:	9005      	str	r0, [sp, #20]
 800cba2:	9104      	str	r1, [sp, #16]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800cba4:	2a00      	cmp	r2, #0
 800cba6:	d050      	beq.n	800cc4a <LoRaMacCryptoHandleJoinAccept+0xb2>
 800cba8:	2900      	cmp	r1, #0
 800cbaa:	d04e      	beq.n	800cc4a <LoRaMacCryptoHandleJoinAccept+0xb2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800cbac:	2400      	movs	r4, #0
 800cbae:	221d      	movs	r2, #29
 800cbb0:	0021      	movs	r1, r4
 800cbb2:	a808      	add	r0, sp, #32
 800cbb4:	9407      	str	r4, [sp, #28]
 800cbb6:	f003 fabc 	bl	8010132 <memset>
    uint8_t* nonce               = ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce;
 800cbba:	4e25      	ldr	r6, [pc, #148]	; (800cc50 <LoRaMacCryptoHandleJoinAccept+0xb8>)
    uint8_t versionMinor         = 0;
 800cbbc:	ab02      	add	r3, sp, #8
 800cbbe:	74dc      	strb	r4, [r3, #19]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 800cbc0:	6833      	ldr	r3, [r6, #0]
 800cbc2:	a902      	add	r1, sp, #8
 800cbc4:	791a      	ldrb	r2, [r3, #4]
 800cbc6:	2313      	movs	r3, #19
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800cbc8:	af07      	add	r7, sp, #28
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 800cbca:	185b      	adds	r3, r3, r1
 800cbcc:	9302      	str	r3, [sp, #8]
 800cbce:	9701      	str	r7, [sp, #4]
 800cbd0:	792b      	ldrb	r3, [r5, #4]
 800cbd2:	9904      	ldr	r1, [sp, #16]
 800cbd4:	9300      	str	r3, [sp, #0]
 800cbd6:	682b      	ldr	r3, [r5, #0]
 800cbd8:	9805      	ldr	r0, [sp, #20]
 800cbda:	f7fb fed0 	bl	800897e <SecureElementProcessJoinAccept>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cbde:	340f      	adds	r4, #15
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, ( int16_t )*nonce, macMsg->Buffer,
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	d132      	bne.n	800cc4a <LoRaMacCryptoHandleJoinAccept+0xb2>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800cbe4:	0039      	movs	r1, r7
 800cbe6:	792a      	ldrb	r2, [r5, #4]
 800cbe8:	6828      	ldr	r0, [r5, #0]
 800cbea:	f001 fa95 	bl	800e118 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800cbee:	0028      	movs	r0, r5
 800cbf0:	f000 f830 	bl	800cc54 <LoRaMacParserJoinAccept>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800cbf4:	3401      	adds	r4, #1
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d127      	bne.n	800cc4a <LoRaMacCryptoHandleJoinAccept+0xb2>
    retval = LoRaMacCryptoDeriveMcRootKey( APP_KEY );
 800cbfa:	f7ff ff99 	bl	800cb30 <LoRaMacCryptoDeriveMcRootKey>
 800cbfe:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cc00:	d123      	bne.n	800cc4a <LoRaMacCryptoHandleJoinAccept+0xb2>
    if( keyID != MC_ROOT_KEY )
 800cc02:	f7ff fda9 	bl	800c758 <LoRaMacCryptoDeriveMcKEKey.part.0>
 800cc06:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cc08:	d11f      	bne.n	800cc4a <LoRaMacCryptoHandleJoinAccept+0xb2>
    retval = DeriveSessionKey10x( APP_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 800cc0a:	6833      	ldr	r3, [r6, #0]
 800cc0c:	1daf      	adds	r7, r5, #6
 800cc0e:	3509      	adds	r5, #9
 800cc10:	002a      	movs	r2, r5
 800cc12:	0039      	movs	r1, r7
 800cc14:	2003      	movs	r0, #3
 800cc16:	3304      	adds	r3, #4
 800cc18:	f7ff fcf2 	bl	800c600 <DeriveSessionKey10x>
 800cc1c:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cc1e:	d114      	bne.n	800cc4a <LoRaMacCryptoHandleJoinAccept+0xb2>
    retval = DeriveSessionKey10x( NWK_S_KEY, macMsg->JoinNonce, macMsg->NetID, ( uint8_t* )&CryptoCtx.NvmCtx->DevNonce );
 800cc20:	6833      	ldr	r3, [r6, #0]
 800cc22:	002a      	movs	r2, r5
 800cc24:	0039      	movs	r1, r7
 800cc26:	2002      	movs	r0, #2
 800cc28:	3304      	adds	r3, #4
 800cc2a:	f7ff fce9 	bl	800c600 <DeriveSessionKey10x>
 800cc2e:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800cc30:	d10b      	bne.n	800cc4a <LoRaMacCryptoHandleJoinAccept+0xb2>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 800cc32:	aa02      	add	r2, sp, #8
 800cc34:	6833      	ldr	r3, [r6, #0]
 800cc36:	7cd2      	ldrb	r2, [r2, #19]
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800cc38:	60d8      	str	r0, [r3, #12]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor = versionMinor;
 800cc3a:	709a      	strb	r2, [r3, #2]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	4252      	negs	r2, r2
 800cc40:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800cc42:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800cc44:	615a      	str	r2, [r3, #20]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800cc46:	6873      	ldr	r3, [r6, #4]
 800cc48:	4798      	blx	r3
}
 800cc4a:	0020      	movs	r0, r4
 800cc4c:	b011      	add	sp, #68	; 0x44
 800cc4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc50:	20000cd4 	.word	0x20000cd4

0800cc54 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 800cc54:	b510      	push	{r4, lr}
 800cc56:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800cc58:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800cc5a:	2c00      	cmp	r4, #0
 800cc5c:	d040      	beq.n	800cce0 <LoRaMacParserJoinAccept+0x8c>
 800cc5e:	6821      	ldr	r1, [r4, #0]
 800cc60:	2900      	cmp	r1, #0
 800cc62:	d03d      	beq.n	800cce0 <LoRaMacParserJoinAccept+0x8c>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800cc64:	780b      	ldrb	r3, [r1, #0]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800cc66:	2203      	movs	r2, #3
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800cc68:	7163      	strb	r3, [r4, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800cc6a:	3101      	adds	r1, #1
 800cc6c:	1da0      	adds	r0, r4, #6
 800cc6e:	f001 fa53 	bl	800e118 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800cc72:	0020      	movs	r0, r4
 800cc74:	6823      	ldr	r3, [r4, #0]
 800cc76:	2203      	movs	r2, #3
 800cc78:	1d19      	adds	r1, r3, #4
 800cc7a:	3009      	adds	r0, #9
 800cc7c:	f001 fa4c 	bl	800e118 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800cc80:	6821      	ldr	r1, [r4, #0]
 800cc82:	79ca      	ldrb	r2, [r1, #7]
 800cc84:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800cc86:	7a0b      	ldrb	r3, [r1, #8]
 800cc88:	021b      	lsls	r3, r3, #8
 800cc8a:	431a      	orrs	r2, r3
 800cc8c:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800cc8e:	7a4b      	ldrb	r3, [r1, #9]
 800cc90:	041b      	lsls	r3, r3, #16
 800cc92:	4313      	orrs	r3, r2
 800cc94:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800cc96:	7a8a      	ldrb	r2, [r1, #10]
 800cc98:	0612      	lsls	r2, r2, #24
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800cc9e:	7acb      	ldrb	r3, [r1, #11]
 800cca0:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800cca2:	7b0b      	ldrb	r3, [r1, #12]
 800cca4:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800cca6:	7923      	ldrb	r3, [r4, #4]
 800cca8:	2b21      	cmp	r3, #33	; 0x21
 800ccaa:	d11a      	bne.n	800cce2 <LoRaMacParserJoinAccept+0x8e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800ccac:	0020      	movs	r0, r4
 800ccae:	2210      	movs	r2, #16
 800ccb0:	310d      	adds	r1, #13
 800ccb2:	3012      	adds	r0, #18
 800ccb4:	f001 fa30 	bl	800e118 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800ccb8:	231d      	movs	r3, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ccba:	6820      	ldr	r0, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ccbc:	1c5a      	adds	r2, r3, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ccbe:	5cc1      	ldrb	r1, [r0, r3]
 800ccc0:	6261      	str	r1, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ccc2:	5c82      	ldrb	r2, [r0, r2]
 800ccc4:	0212      	lsls	r2, r2, #8
 800ccc6:	4311      	orrs	r1, r2
 800ccc8:	6261      	str	r1, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ccca:	1c9a      	adds	r2, r3, #2
 800cccc:	5c82      	ldrb	r2, [r0, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ccce:	3303      	adds	r3, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ccd0:	0412      	lsls	r2, r2, #16
 800ccd2:	430a      	orrs	r2, r1
 800ccd4:	6262      	str	r2, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ccd6:	5cc3      	ldrb	r3, [r0, r3]

    return LORAMAC_PARSER_SUCCESS;
 800ccd8:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ccda:	061b      	lsls	r3, r3, #24
 800ccdc:	431a      	orrs	r2, r3
 800ccde:	6262      	str	r2, [r4, #36]	; 0x24
}
 800cce0:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_FAIL;
 800cce2:	2001      	movs	r0, #1
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800cce4:	2b11      	cmp	r3, #17
 800cce6:	dcfb      	bgt.n	800cce0 <LoRaMacParserJoinAccept+0x8c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800cce8:	230d      	movs	r3, #13
 800ccea:	e7e6      	b.n	800ccba <LoRaMacParserJoinAccept+0x66>

0800ccec <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800ccec:	b570      	push	{r4, r5, r6, lr}
 800ccee:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800ccf0:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ccf2:	2c00      	cmp	r4, #0
 800ccf4:	d054      	beq.n	800cda0 <LoRaMacParserData+0xb4>
 800ccf6:	6821      	ldr	r1, [r4, #0]
 800ccf8:	2900      	cmp	r1, #0
 800ccfa:	d051      	beq.n	800cda0 <LoRaMacParserData+0xb4>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ccfc:	780b      	ldrb	r3, [r1, #0]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ccfe:	0020      	movs	r0, r4
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800cd00:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800cd02:	784a      	ldrb	r2, [r1, #1]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800cd04:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800cd06:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800cd08:	788b      	ldrb	r3, [r1, #2]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800cd0a:	1c65      	adds	r5, r4, #1
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800cd0c:	021b      	lsls	r3, r3, #8
 800cd0e:	431a      	orrs	r2, r3
 800cd10:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800cd12:	78cb      	ldrb	r3, [r1, #3]
 800cd14:	041b      	lsls	r3, r3, #16
 800cd16:	4313      	orrs	r3, r2
 800cd18:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800cd1a:	790a      	ldrb	r2, [r1, #4]
 800cd1c:	0612      	lsls	r2, r2, #24
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800cd22:	794b      	ldrb	r3, [r1, #5]
 800cd24:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800cd26:	798b      	ldrb	r3, [r1, #6]
 800cd28:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800cd2a:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800cd2c:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800cd2e:	0212      	lsls	r2, r2, #8
 800cd30:	4313      	orrs	r3, r2
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800cd32:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800cd34:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800cd36:	0712      	lsls	r2, r2, #28
 800cd38:	0f12      	lsrs	r2, r2, #28
 800cd3a:	f001 f9ed 	bl	800e118 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800cd3e:	7b21      	ldrb	r1, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 800cd40:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 800cd42:	2300      	movs	r3, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800cd44:	0709      	lsls	r1, r1, #28
 800cd46:	0f09      	lsrs	r1, r1, #28
 800cd48:	000e      	movs	r6, r1
    macMsg->FRMPayloadSize = 0;
 800cd4a:	3028      	adds	r0, #40	; 0x28
    macMsg->FPort = 0;
 800cd4c:	77eb      	strb	r3, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 800cd4e:	7003      	strb	r3, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800cd50:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800cd52:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800cd54:	1b93      	subs	r3, r2, r6
 800cd56:	2b04      	cmp	r3, #4
 800cd58:	dd0c      	ble.n	800cd74 <LoRaMacParserData+0x88>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800cd5a:	6823      	ldr	r3, [r4, #0]
 800cd5c:	3109      	adds	r1, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800cd5e:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800cd60:	5d9e      	ldrb	r6, [r3, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800cd62:	1a52      	subs	r2, r2, r1
 800cd64:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800cd66:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800cd68:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800cd6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cd6c:	b292      	uxth	r2, r2
 800cd6e:	1859      	adds	r1, r3, r1
 800cd70:	f001 f9d2 	bl	800e118 <memcpy1>
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 800cd74:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800cd76:	6822      	ldr	r2, [r4, #0]
 800cd78:	7923      	ldrb	r3, [r4, #4]
 800cd7a:	18d3      	adds	r3, r2, r3
 800cd7c:	1f1a      	subs	r2, r3, #4
 800cd7e:	7811      	ldrb	r1, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800cd80:	1eda      	subs	r2, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800cd82:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800cd84:	7812      	ldrb	r2, [r2, #0]
 800cd86:	0212      	lsls	r2, r2, #8
 800cd88:	4311      	orrs	r1, r2
 800cd8a:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800cd8c:	1e9a      	subs	r2, r3, #2
 800cd8e:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800cd90:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800cd92:	0412      	lsls	r2, r2, #16
 800cd94:	430a      	orrs	r2, r1
 800cd96:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800cd98:	781b      	ldrb	r3, [r3, #0]
 800cd9a:	061b      	lsls	r3, r3, #24
 800cd9c:	431a      	orrs	r2, r3
 800cd9e:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 800cda0:	bd70      	pop	{r4, r5, r6, pc}

0800cda2 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800cda2:	b510      	push	{r4, lr}
 800cda4:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800cda6:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800cda8:	2c00      	cmp	r4, #0
 800cdaa:	d02e      	beq.n	800ce0a <LoRaMacSerializerJoinRequest+0x68>
 800cdac:	6823      	ldr	r3, [r4, #0]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d02b      	beq.n	800ce0a <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800cdb2:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800cdb4:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800cdb6:	2a16      	cmp	r2, #22
 800cdb8:	d927      	bls.n	800ce0a <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800cdba:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800cdbc:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800cdbe:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800cdc0:	6823      	ldr	r3, [r4, #0]
 800cdc2:	2208      	movs	r2, #8
 800cdc4:	1c58      	adds	r0, r3, #1
 800cdc6:	f001 f9b0 	bl	800e12a <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800cdca:	0021      	movs	r1, r4
 800cdcc:	6820      	ldr	r0, [r4, #0]
 800cdce:	2208      	movs	r2, #8
 800cdd0:	3009      	adds	r0, #9
 800cdd2:	310e      	adds	r1, #14
 800cdd4:	f001 f9a9 	bl	800e12a <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800cdd8:	8ae3      	ldrh	r3, [r4, #22]
 800cdda:	6822      	ldr	r2, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800cddc:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800cdde:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800cde0:	8ae3      	ldrh	r3, [r4, #22]
 800cde2:	6822      	ldr	r2, [r4, #0]
 800cde4:	0a1b      	lsrs	r3, r3, #8
 800cde6:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800cde8:	69a3      	ldr	r3, [r4, #24]
 800cdea:	6822      	ldr	r2, [r4, #0]
 800cdec:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800cdee:	69a3      	ldr	r3, [r4, #24]
 800cdf0:	6822      	ldr	r2, [r4, #0]
 800cdf2:	0a1b      	lsrs	r3, r3, #8
 800cdf4:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800cdf6:	69a3      	ldr	r3, [r4, #24]
 800cdf8:	6822      	ldr	r2, [r4, #0]
 800cdfa:	0c1b      	lsrs	r3, r3, #16
 800cdfc:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800cdfe:	69a3      	ldr	r3, [r4, #24]
 800ce00:	6822      	ldr	r2, [r4, #0]
 800ce02:	0e1b      	lsrs	r3, r3, #24
 800ce04:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 800ce06:	2317      	movs	r3, #23
 800ce08:	7123      	strb	r3, [r4, #4]
}
 800ce0a:	bd10      	pop	{r4, pc}

0800ce0c <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800ce0c:	b570      	push	{r4, r5, r6, lr}
 800ce0e:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800ce10:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ce12:	2c00      	cmp	r4, #0
 800ce14:	d068      	beq.n	800cee8 <LoRaMacSerializerData+0xdc>
 800ce16:	6821      	ldr	r1, [r4, #0]
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800ce18:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ce1a:	2900      	cmp	r1, #0
 800ce1c:	d064      	beq.n	800cee8 <LoRaMacSerializerData+0xdc>
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;

    if( macMsg->FRMPayloadSize > 0 )
 800ce1e:	0025      	movs	r5, r4
 800ce20:	3528      	adds	r5, #40	; 0x28
 800ce22:	7828      	ldrb	r0, [r5, #0]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ce24:	7b22      	ldrb	r2, [r4, #12]
 800ce26:	0003      	movs	r3, r0
 800ce28:	1e5e      	subs	r6, r3, #1
 800ce2a:	41b3      	sbcs	r3, r6
 800ce2c:	0712      	lsls	r2, r2, #28
 800ce2e:	0f12      	lsrs	r2, r2, #28
 800ce30:	189b      	adds	r3, r3, r2
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800ce32:	3004      	adds	r0, #4
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ce34:	3308      	adds	r3, #8
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800ce36:	181b      	adds	r3, r3, r0

    if( macMsg->BufSize < computedBufSize )
 800ce38:	7922      	ldrb	r2, [r4, #4]
 800ce3a:	b29b      	uxth	r3, r3
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800ce3c:	2002      	movs	r0, #2
    if( macMsg->BufSize < computedBufSize )
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d352      	bcc.n	800cee8 <LoRaMacSerializerData+0xdc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800ce42:	7963      	ldrb	r3, [r4, #5]
 800ce44:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ce46:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800ce48:	68a3      	ldr	r3, [r4, #8]
 800ce4a:	6822      	ldr	r2, [r4, #0]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ce4c:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800ce4e:	7053      	strb	r3, [r2, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800ce50:	68a3      	ldr	r3, [r4, #8]
 800ce52:	6822      	ldr	r2, [r4, #0]
 800ce54:	0a1b      	lsrs	r3, r3, #8
 800ce56:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800ce58:	68a3      	ldr	r3, [r4, #8]
 800ce5a:	6822      	ldr	r2, [r4, #0]
 800ce5c:	0c1b      	lsrs	r3, r3, #16
 800ce5e:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800ce60:	68a3      	ldr	r3, [r4, #8]
 800ce62:	6822      	ldr	r2, [r4, #0]
 800ce64:	0e1b      	lsrs	r3, r3, #24
 800ce66:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800ce68:	7b23      	ldrb	r3, [r4, #12]
 800ce6a:	6822      	ldr	r2, [r4, #0]
 800ce6c:	7153      	strb	r3, [r2, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800ce6e:	89e3      	ldrh	r3, [r4, #14]
 800ce70:	6822      	ldr	r2, [r4, #0]
 800ce72:	7193      	strb	r3, [r2, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800ce74:	89e3      	ldrh	r3, [r4, #14]
 800ce76:	6822      	ldr	r2, [r4, #0]
 800ce78:	0a1b      	lsrs	r3, r3, #8
 800ce7a:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800ce7c:	7b22      	ldrb	r2, [r4, #12]
 800ce7e:	6820      	ldr	r0, [r4, #0]
 800ce80:	0712      	lsls	r2, r2, #28
 800ce82:	0f12      	lsrs	r2, r2, #28
 800ce84:	3008      	adds	r0, #8
 800ce86:	f001 f947 	bl	800e118 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ce8a:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800ce8c:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800ce8e:	071b      	lsls	r3, r3, #28
 800ce90:	0f1b      	lsrs	r3, r3, #28
 800ce92:	001e      	movs	r6, r3
 800ce94:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 800ce96:	2a00      	cmp	r2, #0
 800ce98:	d005      	beq.n	800cea6 <LoRaMacSerializerData+0x9a>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800ce9a:	1c62      	adds	r2, r4, #1
 800ce9c:	7fd2      	ldrb	r2, [r2, #31]
 800ce9e:	6821      	ldr	r1, [r4, #0]
 800cea0:	3309      	adds	r3, #9
 800cea2:	558a      	strb	r2, [r1, r6]
 800cea4:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800cea6:	6823      	ldr	r3, [r4, #0]
 800cea8:	782a      	ldrb	r2, [r5, #0]
 800ceaa:	1998      	adds	r0, r3, r6
 800ceac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ceae:	f001 f933 	bl	800e118 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800ceb2:	782b      	ldrb	r3, [r5, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800ceb4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800ceb6:	6821      	ldr	r1, [r4, #0]
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800ceb8:	18f3      	adds	r3, r6, r3
 800ceba:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800cebc:	54ca      	strb	r2, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800cebe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cec0:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800cec2:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800cec4:	b292      	uxth	r2, r2
 800cec6:	0a09      	lsrs	r1, r1, #8
 800cec8:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800ceca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800cecc:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800cece:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800ced0:	b292      	uxth	r2, r2
 800ced2:	0c09      	lsrs	r1, r1, #16
 800ced4:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800ced6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800ced8:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800ceda:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800cedc:	b292      	uxth	r2, r2
 800cede:	0e09      	lsrs	r1, r1, #24
 800cee0:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800cee2:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800cee4:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 800cee6:	7123      	strb	r3, [r4, #4]
}
 800cee8:	bd70      	pop	{r4, r5, r6, pc}

0800ceea <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800ceea:	3805      	subs	r0, #5
 800ceec:	4243      	negs	r3, r0
 800ceee:	4158      	adcs	r0, r3
        default:
        {
            return false;
        }
    }
}
 800cef0:	b2c0      	uxtb	r0, r0
 800cef2:	4770      	bx	lr

0800cef4 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800cef4:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
    switch( region )
 800cef6:	2805      	cmp	r0, #5
 800cef8:	d105      	bne.n	800cf06 <RegionGetPhyParam+0x12>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 800cefa:	0008      	movs	r0, r1
 800cefc:	f000 fc12 	bl	800d724 <RegionEU868GetPhyParam>
 800cf00:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 800cf02:	9801      	ldr	r0, [sp, #4]
 800cf04:	bd0e      	pop	{r1, r2, r3, pc}
            return phyParam;
 800cf06:	2300      	movs	r3, #0
 800cf08:	9301      	str	r3, [sp, #4]
 800cf0a:	e7fa      	b.n	800cf02 <RegionGetPhyParam+0xe>

0800cf0c <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800cf0c:	b510      	push	{r4, lr}
    switch( region )
 800cf0e:	2805      	cmp	r0, #5
 800cf10:	d102      	bne.n	800cf18 <RegionSetBandTxDone+0xc>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 800cf12:	0008      	movs	r0, r1
 800cf14:	f000 fc98 	bl	800d848 <RegionEU868SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800cf18:	bd10      	pop	{r4, pc}

0800cf1a <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800cf1a:	b510      	push	{r4, lr}
    switch( region )
 800cf1c:	2805      	cmp	r0, #5
 800cf1e:	d102      	bne.n	800cf26 <RegionInitDefaults+0xc>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 800cf20:	0008      	movs	r0, r1
 800cf22:	f000 fca7 	bl	800d874 <RegionEU868InitDefaults>
        default:
        {
            break;
        }
    }
}
 800cf26:	bd10      	pop	{r4, pc}

0800cf28 <RegionGetNvmCtx>:
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 800cf28:	2300      	movs	r3, #0
{
 800cf2a:	b510      	push	{r4, lr}
    switch( region )
 800cf2c:	2805      	cmp	r0, #5
 800cf2e:	d103      	bne.n	800cf38 <RegionGetNvmCtx+0x10>
        EU868_GET_NVM_CTX( );
 800cf30:	0008      	movs	r0, r1
 800cf32:	f000 fcfd 	bl	800d930 <RegionEU868GetNvmCtx>
 800cf36:	0003      	movs	r3, r0
        }
    }
}
 800cf38:	0018      	movs	r0, r3
 800cf3a:	bd10      	pop	{r4, pc}

0800cf3c <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800cf3c:	b510      	push	{r4, lr}
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800cf3e:	2300      	movs	r3, #0
{
 800cf40:	0004      	movs	r4, r0
 800cf42:	0008      	movs	r0, r1
 800cf44:	0011      	movs	r1, r2
    switch( region )
 800cf46:	2c05      	cmp	r4, #5
 800cf48:	d102      	bne.n	800cf50 <RegionVerify+0x14>
        EU868_VERIFY( );
 800cf4a:	f000 fcf9 	bl	800d940 <RegionEU868Verify>
 800cf4e:	0003      	movs	r3, r0
        }
    }
}
 800cf50:	0018      	movs	r0, r3
 800cf52:	bd10      	pop	{r4, pc}

0800cf54 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800cf54:	b510      	push	{r4, lr}
    switch( region )
 800cf56:	2805      	cmp	r0, #5
 800cf58:	d102      	bne.n	800cf60 <RegionApplyCFList+0xc>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 800cf5a:	0008      	movs	r0, r1
 800cf5c:	f001 f830 	bl	800dfc0 <RegionEU868ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800cf60:	bd10      	pop	{r4, pc}

0800cf62 <RegionChanMaskSet>:
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800cf62:	2300      	movs	r3, #0
{
 800cf64:	b510      	push	{r4, lr}
    switch( region )
 800cf66:	2805      	cmp	r0, #5
 800cf68:	d103      	bne.n	800cf72 <RegionChanMaskSet+0x10>
        EU868_CHAN_MASK_SET( );
 800cf6a:	0008      	movs	r0, r1
 800cf6c:	f000 fd12 	bl	800d994 <RegionEU868ChanMaskSet>
 800cf70:	0003      	movs	r3, r0
        }
    }
}
 800cf72:	0018      	movs	r0, r3
 800cf74:	bd10      	pop	{r4, pc}

0800cf76 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800cf76:	b510      	push	{r4, lr}
 800cf78:	0004      	movs	r4, r0
 800cf7a:	0008      	movs	r0, r1
 800cf7c:	0011      	movs	r1, r2
 800cf7e:	001a      	movs	r2, r3
    switch( region )
 800cf80:	2c05      	cmp	r4, #5
 800cf82:	d102      	bne.n	800cf8a <RegionComputeRxWindowParameters+0x14>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800cf84:	9b02      	ldr	r3, [sp, #8]
 800cf86:	f000 fd1f 	bl	800d9c8 <RegionEU868ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800cf8a:	bd10      	pop	{r4, pc}

0800cf8c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800cf8c:	b510      	push	{r4, lr}
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800cf8e:	2300      	movs	r3, #0
{
 800cf90:	0004      	movs	r4, r0
 800cf92:	0008      	movs	r0, r1
 800cf94:	0011      	movs	r1, r2
    switch( region )
 800cf96:	2c05      	cmp	r4, #5
 800cf98:	d102      	bne.n	800cfa0 <RegionRxConfig+0x14>
        EU868_RX_CONFIG( );
 800cf9a:	f000 fd49 	bl	800da30 <RegionEU868RxConfig>
 800cf9e:	0003      	movs	r3, r0
        }
    }
}
 800cfa0:	0018      	movs	r0, r3
 800cfa2:	bd10      	pop	{r4, pc}

0800cfa4 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800cfa4:	b570      	push	{r4, r5, r6, lr}
 800cfa6:	0005      	movs	r5, r0
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800cfa8:	2400      	movs	r4, #0
{
 800cfaa:	0008      	movs	r0, r1
 800cfac:	0011      	movs	r1, r2
 800cfae:	001a      	movs	r2, r3
    switch( region )
 800cfb0:	2d05      	cmp	r5, #5
 800cfb2:	d102      	bne.n	800cfba <RegionTxConfig+0x16>
        EU868_TX_CONFIG( );
 800cfb4:	f000 fdb8 	bl	800db28 <RegionEU868TxConfig>
 800cfb8:	0004      	movs	r4, r0
        }
    }
}
 800cfba:	0020      	movs	r0, r4
 800cfbc:	bd70      	pop	{r4, r5, r6, pc}

0800cfbe <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800cfbe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfc0:	0005      	movs	r5, r0
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800cfc2:	2400      	movs	r4, #0
{
 800cfc4:	0008      	movs	r0, r1
 800cfc6:	0011      	movs	r1, r2
 800cfc8:	001a      	movs	r2, r3
    switch( region )
 800cfca:	2d05      	cmp	r5, #5
 800cfcc:	d105      	bne.n	800cfda <RegionLinkAdrReq+0x1c>
        EU868_LINK_ADR_REQ( );
 800cfce:	9b07      	ldr	r3, [sp, #28]
 800cfd0:	9300      	str	r3, [sp, #0]
 800cfd2:	9b06      	ldr	r3, [sp, #24]
 800cfd4:	f000 fe30 	bl	800dc38 <RegionEU868LinkAdrReq>
 800cfd8:	0004      	movs	r4, r0
        }
    }
}
 800cfda:	0020      	movs	r0, r4
 800cfdc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800cfde <RegionRxParamSetupReq>:
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800cfde:	2300      	movs	r3, #0
{
 800cfe0:	b510      	push	{r4, lr}
    switch( region )
 800cfe2:	2805      	cmp	r0, #5
 800cfe4:	d103      	bne.n	800cfee <RegionRxParamSetupReq+0x10>
        EU868_RX_PARAM_SETUP_REQ( );
 800cfe6:	0008      	movs	r0, r1
 800cfe8:	f000 fec6 	bl	800dd78 <RegionEU868RxParamSetupReq>
 800cfec:	0003      	movs	r3, r0
        }
    }
}
 800cfee:	0018      	movs	r0, r3
 800cff0:	bd10      	pop	{r4, pc}

0800cff2 <RegionNewChannelReq>:
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800cff2:	2300      	movs	r3, #0
{
 800cff4:	b510      	push	{r4, lr}
    switch( region )
 800cff6:	2805      	cmp	r0, #5
 800cff8:	d103      	bne.n	800d002 <RegionNewChannelReq+0x10>
        EU868_NEW_CHANNEL_REQ( );
 800cffa:	0008      	movs	r0, r1
 800cffc:	f001 f81a 	bl	800e034 <RegionEU868NewChannelReq>
 800d000:	0003      	movs	r3, r0
        }
    }
}
 800d002:	0018      	movs	r0, r3
 800d004:	bd10      	pop	{r4, pc}

0800d006 <RegionTxParamSetupReq>:
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800d006:	2300      	movs	r3, #0
{
 800d008:	b510      	push	{r4, lr}
    switch( region )
 800d00a:	2805      	cmp	r0, #5
 800d00c:	d103      	bne.n	800d016 <RegionTxParamSetupReq+0x10>
        EU868_TX_PARAM_SETUP_REQ( );
 800d00e:	0008      	movs	r0, r1
 800d010:	f000 fed5 	bl	800ddbe <RegionEU868TxParamSetupReq>
 800d014:	0003      	movs	r3, r0
        }
    }
}
 800d016:	0018      	movs	r0, r3
 800d018:	bd10      	pop	{r4, pc}

0800d01a <RegionDlChannelReq>:
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800d01a:	2300      	movs	r3, #0
{
 800d01c:	b510      	push	{r4, lr}
    switch( region )
 800d01e:	2805      	cmp	r0, #5
 800d020:	d103      	bne.n	800d02a <RegionDlChannelReq+0x10>
        EU868_DL_CHANNEL_REQ( );
 800d022:	0008      	movs	r0, r1
 800d024:	f000 fece 	bl	800ddc4 <RegionEU868DlChannelReq>
 800d028:	0003      	movs	r3, r0
        }
    }
}
 800d02a:	0018      	movs	r0, r3
 800d02c:	bd10      	pop	{r4, pc}

0800d02e <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800d02e:	b510      	push	{r4, lr}
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800d030:	2300      	movs	r3, #0
{
 800d032:	0004      	movs	r4, r0
 800d034:	0008      	movs	r0, r1
 800d036:	0011      	movs	r1, r2
    switch( region )
 800d038:	2c05      	cmp	r4, #5
 800d03a:	d102      	bne.n	800d042 <RegionAlternateDr+0x14>
        EU868_ALTERNATE_DR( );
 800d03c:	f000 fee2 	bl	800de04 <RegionEU868AlternateDr>
 800d040:	0003      	movs	r3, r0
        }
    }
}
 800d042:	0018      	movs	r0, r3
 800d044:	bd10      	pop	{r4, pc}

0800d046 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d046:	b570      	push	{r4, r5, r6, lr}
 800d048:	0005      	movs	r5, r0
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800d04a:	2409      	movs	r4, #9
{
 800d04c:	0008      	movs	r0, r1
 800d04e:	0011      	movs	r1, r2
 800d050:	001a      	movs	r2, r3
    switch( region )
 800d052:	2d05      	cmp	r5, #5
 800d054:	d103      	bne.n	800d05e <RegionNextChannel+0x18>
        EU868_NEXT_CHANNEL( );
 800d056:	9b04      	ldr	r3, [sp, #16]
 800d058:	f000 fed6 	bl	800de08 <RegionEU868NextChannel>
 800d05c:	0004      	movs	r4, r0
        }
    }
}
 800d05e:	0020      	movs	r0, r4
 800d060:	bd70      	pop	{r4, r5, r6, pc}

0800d062 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800d062:	b510      	push	{r4, lr}
    switch( region )
 800d064:	2805      	cmp	r0, #5
 800d066:	d102      	bne.n	800d06e <RegionSetContinuousWave+0xc>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 800d068:	0008      	movs	r0, r1
 800d06a:	f001 f803 	bl	800e074 <RegionEU868SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800d06e:	bd10      	pop	{r4, pc}

0800d070 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800d070:	b570      	push	{r4, r5, r6, lr}
 800d072:	0005      	movs	r5, r0
 800d074:	0008      	movs	r0, r1
 800d076:	0011      	movs	r1, r2
 800d078:	001a      	movs	r2, r3
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800d07a:	b2cc      	uxtb	r4, r1
    switch( region )
 800d07c:	2d05      	cmp	r5, #5
 800d07e:	d102      	bne.n	800d086 <RegionApplyDrOffset+0x16>
        EU868_APPLY_DR_OFFSET( );
 800d080:	f001 f820 	bl	800e0c4 <RegionEU868ApplyDrOffset>
 800d084:	0004      	movs	r4, r0
        }
    }
}
 800d086:	0020      	movs	r0, r4
 800d088:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d08c <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800d08c:	4800      	ldr	r0, [pc, #0]	; (800d090 <RegionGetVersion+0x4>)
 800d08e:	4770      	bx	lr
 800d090:	01000300 	.word	0x01000300

0800d094 <RegionCommonChanVerifyDr>:
    }
    return dutyCycle;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800d094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d096:	b085      	sub	sp, #20
 800d098:	9103      	str	r1, [sp, #12]
 800d09a:	a90a      	add	r1, sp, #40	; 0x28
 800d09c:	7809      	ldrb	r1, [r1, #0]
 800d09e:	9002      	str	r0, [sp, #8]
 800d0a0:	b249      	sxtb	r1, r1
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 800d0a2:	2000      	movs	r0, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800d0a4:	429a      	cmp	r2, r3
 800d0a6:	db2d      	blt.n	800d104 <RegionCommonChanVerifyDr+0x70>
 800d0a8:	428a      	cmp	r2, r1
 800d0aa:	dc2b      	bgt.n	800d104 <RegionCommonChanVerifyDr+0x70>
 800d0ac:	260c      	movs	r6, #12
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800d0ae:	270f      	movs	r7, #15
 800d0b0:	e022      	b.n	800d0f8 <RegionCommonChanVerifyDr+0x64>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800d0b2:	9c03      	ldr	r4, [sp, #12]
 800d0b4:	0041      	lsls	r1, r0, #1
 800d0b6:	5b09      	ldrh	r1, [r1, r4]
 800d0b8:	4373      	muls	r3, r6
 800d0ba:	9101      	str	r1, [sp, #4]
 800d0bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d0be:	2400      	movs	r4, #0
 800d0c0:	18cb      	adds	r3, r1, r3
 800d0c2:	2101      	movs	r1, #1
 800d0c4:	468c      	mov	ip, r1
 800d0c6:	9901      	ldr	r1, [sp, #4]
 800d0c8:	4665      	mov	r5, ip
 800d0ca:	4121      	asrs	r1, r4
 800d0cc:	4229      	tst	r1, r5
 800d0ce:	d00e      	beq.n	800d0ee <RegionCommonChanVerifyDr+0x5a>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800d0d0:	0035      	movs	r5, r6
 800d0d2:	4365      	muls	r5, r4
 800d0d4:	18ed      	adds	r5, r5, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800d0d6:	7a29      	ldrb	r1, [r5, #8]
 800d0d8:	7a2d      	ldrb	r5, [r5, #8]
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800d0da:	0709      	lsls	r1, r1, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800d0dc:	b26d      	sxtb	r5, r5
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800d0de:	1709      	asrs	r1, r1, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800d0e0:	112d      	asrs	r5, r5, #4
    if( ( value >= min ) && ( value <= max ) )
 800d0e2:	4039      	ands	r1, r7
 800d0e4:	428a      	cmp	r2, r1
 800d0e6:	db02      	blt.n	800d0ee <RegionCommonChanVerifyDr+0x5a>
 800d0e8:	403d      	ands	r5, r7
 800d0ea:	42aa      	cmp	r2, r5
 800d0ec:	dd0c      	ble.n	800d108 <RegionCommonChanVerifyDr+0x74>
        for( uint8_t j = 0; j < 16; j++ )
 800d0ee:	3401      	adds	r4, #1
 800d0f0:	2c10      	cmp	r4, #16
 800d0f2:	d1e8      	bne.n	800d0c6 <RegionCommonChanVerifyDr+0x32>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800d0f4:	3001      	adds	r0, #1
 800d0f6:	b2c0      	uxtb	r0, r0
 800d0f8:	0103      	lsls	r3, r0, #4
 800d0fa:	9902      	ldr	r1, [sp, #8]
 800d0fc:	b2db      	uxtb	r3, r3
 800d0fe:	4299      	cmp	r1, r3
 800d100:	d8d7      	bhi.n	800d0b2 <RegionCommonChanVerifyDr+0x1e>
        return false;
 800d102:	2000      	movs	r0, #0
}
 800d104:	b005      	add	sp, #20
 800d106:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    return true;
 800d108:	2001      	movs	r0, #1
 800d10a:	e7fb      	b.n	800d104 <RegionCommonChanVerifyDr+0x70>

0800d10c <RegionCommonValueInRange>:
{
 800d10c:	0003      	movs	r3, r0
    {
        return 1;
    }
    return 0;
 800d10e:	2000      	movs	r0, #0
    if( ( value >= min ) && ( value <= max ) )
 800d110:	428b      	cmp	r3, r1
 800d112:	db04      	blt.n	800d11e <RegionCommonValueInRange+0x12>
 800d114:	0fd8      	lsrs	r0, r3, #31
 800d116:	17d1      	asrs	r1, r2, #31
 800d118:	429a      	cmp	r2, r3
 800d11a:	4148      	adcs	r0, r1
        return 1;
 800d11c:	b2c0      	uxtb	r0, r0
}
 800d11e:	4770      	bx	lr

0800d120 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800d120:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;
 800d122:	090b      	lsrs	r3, r1, #4
{
 800d124:	0004      	movs	r4, r0

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800d126:	0915      	lsrs	r5, r2, #4
    {
        return false;
 800d128:	2000      	movs	r0, #0
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800d12a:	429d      	cmp	r5, r3
 800d12c:	d30b      	bcc.n	800d146 <RegionCommonChanDisable+0x26>
 800d12e:	4291      	cmp	r1, r2
 800d130:	d209      	bcs.n	800d146 <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800d132:	220f      	movs	r2, #15
 800d134:	3001      	adds	r0, #1
 800d136:	4011      	ands	r1, r2
 800d138:	0002      	movs	r2, r0
 800d13a:	408a      	lsls	r2, r1
 800d13c:	0011      	movs	r1, r2
 800d13e:	005b      	lsls	r3, r3, #1
 800d140:	5ae2      	ldrh	r2, [r4, r3]
 800d142:	438a      	bics	r2, r1
 800d144:	52e2      	strh	r2, [r4, r3]

    return true;
}
 800d146:	bd30      	pop	{r4, r5, pc}

0800d148 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800d148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d14a:	1e03      	subs	r3, r0, #0
 800d14c:	9201      	str	r2, [sp, #4]
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800d14e:	d005      	beq.n	800d15c <RegionCommonCountChannels+0x14>
 800d150:	0048      	lsls	r0, r1, #1
 800d152:	181b      	adds	r3, r3, r0
    uint8_t nbChannels = 0;
 800d154:	2000      	movs	r0, #0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800d156:	9a01      	ldr	r2, [sp, #4]
 800d158:	4291      	cmp	r1, r2
 800d15a:	d300      	bcc.n	800d15e <RegionCommonCountChannels+0x16>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 800d15c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 800d15e:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
 800d160:	0022      	movs	r2, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
 800d162:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800d164:	2501      	movs	r5, #1
 800d166:	40a5      	lsls	r5, r4
 800d168:	002e      	movs	r6, r5
 800d16a:	403e      	ands	r6, r7
 800d16c:	42b5      	cmp	r5, r6
 800d16e:	d101      	bne.n	800d174 <RegionCommonCountChannels+0x2c>
            nbActiveBits++;
 800d170:	3201      	adds	r2, #1
 800d172:	b2d2      	uxtb	r2, r2
    for( uint8_t j = 0; j < nbBits; j++ )
 800d174:	3401      	adds	r4, #1
 800d176:	2c10      	cmp	r4, #16
 800d178:	d1f4      	bne.n	800d164 <RegionCommonCountChannels+0x1c>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800d17a:	1880      	adds	r0, r0, r2
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800d17c:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 800d17e:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800d180:	b2c9      	uxtb	r1, r1
 800d182:	3302      	adds	r3, #2
 800d184:	e7e7      	b.n	800d156 <RegionCommonCountChannels+0xe>

0800d186 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800d186:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800d188:	2800      	cmp	r0, #0
 800d18a:	d005      	beq.n	800d198 <RegionCommonChanMaskCopy+0x12>
 800d18c:	2900      	cmp	r1, #0
 800d18e:	d003      	beq.n	800d198 <RegionCommonChanMaskCopy+0x12>
 800d190:	2300      	movs	r3, #0
 800d192:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 800d194:	4293      	cmp	r3, r2
 800d196:	d100      	bne.n	800d19a <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 800d198:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 800d19a:	5acc      	ldrh	r4, [r1, r3]
 800d19c:	52c4      	strh	r4, [r0, r3]
        for( uint8_t i = 0; i < len; i++ )
 800d19e:	3302      	adds	r3, #2
 800d1a0:	e7f8      	b.n	800d194 <RegionCommonChanMaskCopy+0xe>
	...

0800d1a4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800d1a4:	b082      	sub	sp, #8
 800d1a6:	b570      	push	{r4, r5, r6, lr}
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800d1a8:	8805      	ldrh	r5, [r0, #0]
{
 800d1aa:	9305      	str	r3, [sp, #20]
    if( joined == false )
 800d1ac:	2a00      	cmp	r2, #0
 800d1ae:	d111      	bne.n	800d1d4 <RegionCommonSetBandTxDone+0x30>
    if( elapsedTime.Seconds < 3600 )
 800d1b0:	26e1      	movs	r6, #225	; 0xe1
        dutyCycle = BACKOFF_DC_1_HOUR;
 800d1b2:	2464      	movs	r4, #100	; 0x64
    if( elapsedTime.Seconds < 3600 )
 800d1b4:	0136      	lsls	r6, r6, #4
 800d1b6:	42b3      	cmp	r3, r6
 800d1b8:	d307      	bcc.n	800d1ca <RegionCommonSetBandTxDone+0x26>
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 800d1ba:	4c0e      	ldr	r4, [pc, #56]	; (800d1f4 <RegionCommonSetBandTxDone+0x50>)
        dutyCycle = BACKOFF_DC_24_HOURS;
 800d1bc:	429c      	cmp	r4, r3
 800d1be:	4152      	adcs	r2, r2
 800d1c0:	4254      	negs	r4, r2
 800d1c2:	4a0d      	ldr	r2, [pc, #52]	; (800d1f8 <RegionCommonSetBandTxDone+0x54>)
 800d1c4:	4b0d      	ldr	r3, [pc, #52]	; (800d1fc <RegionCommonSetBandTxDone+0x58>)
 800d1c6:	4014      	ands	r4, r2
 800d1c8:	18e4      	adds	r4, r4, r3
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800d1ca:	1c2b      	adds	r3, r5, #0
 800d1cc:	42a5      	cmp	r5, r4
 800d1ce:	d200      	bcs.n	800d1d2 <RegionCommonSetBandTxDone+0x2e>
 800d1d0:	1c23      	adds	r3, r4, #0
 800d1d2:	b29d      	uxth	r5, r3

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800d1d4:	6882      	ldr	r2, [r0, #8]
 800d1d6:	1c2b      	adds	r3, r5, #0
 800d1d8:	2d00      	cmp	r5, #0
 800d1da:	d100      	bne.n	800d1de <RegionCommonSetBandTxDone+0x3a>
 800d1dc:	2301      	movs	r3, #1
 800d1de:	b29b      	uxth	r3, r3
 800d1e0:	4359      	muls	r1, r3
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
    }
    else
    {
        band->TimeCredits = 0;
 800d1e2:	2300      	movs	r3, #0
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800d1e4:	428a      	cmp	r2, r1
 800d1e6:	d900      	bls.n	800d1ea <RegionCommonSetBandTxDone+0x46>
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800d1e8:	1a53      	subs	r3, r2, r1
    }
}
 800d1ea:	6083      	str	r3, [r0, #8]
 800d1ec:	bc70      	pop	{r4, r5, r6}
 800d1ee:	bc08      	pop	{r3}
 800d1f0:	b002      	add	sp, #8
 800d1f2:	4718      	bx	r3
 800d1f4:	00009aaf 	.word	0x00009aaf
 800d1f8:	ffffdcd8 	.word	0xffffdcd8
 800d1fc:	00002710 	.word	0x00002710

0800d200 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800d200:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d202:	b087      	sub	sp, #28
 800d204:	9302      	str	r3, [sp, #8]
 800d206:	ab0c      	add	r3, sp, #48	; 0x30
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	0015      	movs	r5, r2
 800d20c:	000c      	movs	r4, r1
 800d20e:	9305      	str	r3, [sp, #20]
 800d210:	0007      	movs	r7, r0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800d212:	f002 fcf1 	bl	800fbf8 <UTIL_TIMER_GetCurrentTime>
 800d216:	2214      	movs	r2, #20
 800d218:	4355      	muls	r5, r2
 800d21a:	1963      	adds	r3, r4, r5
 800d21c:	9304      	str	r3, [sp, #16]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800d21e:	2301      	movs	r3, #1
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;
 800d220:	2600      	movs	r6, #0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800d222:	425b      	negs	r3, r3
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800d224:	9003      	str	r0, [sp, #12]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800d226:	9301      	str	r3, [sp, #4]

    for( uint8_t i = 0; i < nbBands; i++ )
 800d228:	9b04      	ldr	r3, [sp, #16]
 800d22a:	42a3      	cmp	r3, r4
 800d22c:	d107      	bne.n	800d23e <RegionCommonUpdateBandTimeOff+0x3e>
            }
        }
    }


    if( validBands == 0 )
 800d22e:	2e00      	cmp	r6, #0
 800d230:	d102      	bne.n	800d238 <RegionCommonUpdateBandTimeOff+0x38>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800d232:	2301      	movs	r3, #1
 800d234:	425b      	negs	r3, r3
 800d236:	9301      	str	r3, [sp, #4]
    }
    return minTimeToWait;
}
 800d238:	9801      	ldr	r0, [sp, #4]
 800d23a:	b007      	add	sp, #28
 800d23c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800d23e:	990d      	ldr	r1, [sp, #52]	; 0x34
    uint16_t dutyCycle = band->DCycle;
 800d240:	8822      	ldrh	r2, [r4, #0]
    if( joined == false )
 800d242:	2f00      	cmp	r7, #0
 800d244:	d112      	bne.n	800d26c <RegionCommonUpdateBandTimeOff+0x6c>
    if( elapsedTime.Seconds < 3600 )
 800d246:	20e1      	movs	r0, #225	; 0xe1
        dutyCycle = BACKOFF_DC_1_HOUR;
 800d248:	2364      	movs	r3, #100	; 0x64
    if( elapsedTime.Seconds < 3600 )
 800d24a:	0100      	lsls	r0, r0, #4
 800d24c:	4281      	cmp	r1, r0
 800d24e:	d308      	bcc.n	800d262 <RegionCommonUpdateBandTimeOff+0x62>
        dutyCycle = BACKOFF_DC_24_HOURS;
 800d250:	0038      	movs	r0, r7
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 800d252:	4b27      	ldr	r3, [pc, #156]	; (800d2f0 <RegionCommonUpdateBandTimeOff+0xf0>)
        dutyCycle = BACKOFF_DC_24_HOURS;
 800d254:	428b      	cmp	r3, r1
 800d256:	4178      	adcs	r0, r7
 800d258:	4926      	ldr	r1, [pc, #152]	; (800d2f4 <RegionCommonUpdateBandTimeOff+0xf4>)
 800d25a:	4243      	negs	r3, r0
 800d25c:	400b      	ands	r3, r1
 800d25e:	4926      	ldr	r1, [pc, #152]	; (800d2f8 <RegionCommonUpdateBandTimeOff+0xf8>)
 800d260:	185b      	adds	r3, r3, r1
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800d262:	1c11      	adds	r1, r2, #0
 800d264:	429a      	cmp	r2, r3
 800d266:	d200      	bcs.n	800d26a <RegionCommonUpdateBandTimeOff+0x6a>
 800d268:	1c19      	adds	r1, r3, #0
 800d26a:	b28a      	uxth	r2, r1
    if( dutyCycle == 0 )
 800d26c:	1c15      	adds	r5, r2, #0
 800d26e:	2a00      	cmp	r2, #0
 800d270:	d100      	bne.n	800d274 <RegionCommonUpdateBandTimeOff+0x74>
 800d272:	2501      	movs	r5, #1
    uint8_t timePeriodFactor = 1;
 800d274:	2001      	movs	r0, #1
 800d276:	b2ad      	uxth	r5, r5
    if( joined == false )
 800d278:	2f00      	cmp	r7, #0
 800d27a:	d104      	bne.n	800d286 <RegionCommonUpdateBandTimeOff+0x86>
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 800d27c:	2164      	movs	r1, #100	; 0x64
 800d27e:	0028      	movs	r0, r5
 800d280:	f7f2 ff72 	bl	8000168 <__udivsi3>
 800d284:	b2c0      	uxtb	r0, r0
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 800d286:	4b1d      	ldr	r3, [pc, #116]	; (800d2fc <RegionCommonUpdateBandTimeOff+0xfc>)
 800d288:	4343      	muls	r3, r0
    if( band->LastBandUpdateTime == 0 )
 800d28a:	6860      	ldr	r0, [r4, #4]
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 800d28c:	60e3      	str	r3, [r4, #12]
    if( band->LastBandUpdateTime == 0 )
 800d28e:	2800      	cmp	r0, #0
 800d290:	d100      	bne.n	800d294 <RegionCommonUpdateBandTimeOff+0x94>
        band->TimeCredits = band->MaxTimeCredits;
 800d292:	60a3      	str	r3, [r4, #8]
        if( ( dutyCycleEnabled == false ) &&
 800d294:	9a02      	ldr	r2, [sp, #8]
    if( joined == false )
 800d296:	2f00      	cmp	r7, #0
 800d298:	d102      	bne.n	800d2a0 <RegionCommonUpdateBandTimeOff+0xa0>
        if( ( dutyCycleEnabled == false ) &&
 800d29a:	2a00      	cmp	r2, #0
 800d29c:	d103      	bne.n	800d2a6 <RegionCommonUpdateBandTimeOff+0xa6>
 800d29e:	9a05      	ldr	r2, [sp, #20]
        if( dutyCycleEnabled == false )
 800d2a0:	2a00      	cmp	r2, #0
 800d2a2:	d100      	bne.n	800d2a6 <RegionCommonUpdateBandTimeOff+0xa6>
            band->TimeCredits = band->MaxTimeCredits;
 800d2a4:	60a3      	str	r3, [r4, #8]
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800d2a6:	f002 fcb1 	bl	800fc0c <UTIL_TIMER_GetElapsedTime>
 800d2aa:	68a3      	ldr	r3, [r4, #8]
 800d2ac:	18c0      	adds	r0, r0, r3
    if( band->TimeCredits > band->MaxTimeCredits )
 800d2ae:	68e3      	ldr	r3, [r4, #12]
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800d2b0:	60a0      	str	r0, [r4, #8]
    if( band->TimeCredits > band->MaxTimeCredits )
 800d2b2:	4298      	cmp	r0, r3
 800d2b4:	d900      	bls.n	800d2b8 <RegionCommonUpdateBandTimeOff+0xb8>
        band->TimeCredits = band->MaxTimeCredits;
 800d2b6:	60a3      	str	r3, [r4, #8]
    band->LastBandUpdateTime = currentTime;
 800d2b8:	9a03      	ldr	r2, [sp, #12]
 800d2ba:	6062      	str	r2, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800d2bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d2be:	4355      	muls	r5, r2
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800d2c0:	68a2      	ldr	r2, [r4, #8]
 800d2c2:	42aa      	cmp	r2, r5
 800d2c4:	d802      	bhi.n	800d2cc <RegionCommonUpdateBandTimeOff+0xcc>
 800d2c6:	9902      	ldr	r1, [sp, #8]
 800d2c8:	2900      	cmp	r1, #0
 800d2ca:	d105      	bne.n	800d2d8 <RegionCommonUpdateBandTimeOff+0xd8>
            bands[i].ReadyForTransmission = true;
 800d2cc:	2301      	movs	r3, #1
 800d2ce:	7423      	strb	r3, [r4, #16]
            validBands++;
 800d2d0:	18f6      	adds	r6, r6, r3
                validBands++;
 800d2d2:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800d2d4:	3414      	adds	r4, #20
 800d2d6:	e7a7      	b.n	800d228 <RegionCommonUpdateBandTimeOff+0x28>
            bands[i].ReadyForTransmission = false;
 800d2d8:	2100      	movs	r1, #0
 800d2da:	7421      	strb	r1, [r4, #16]
            if( bands[i].MaxTimeCredits > creditCosts )
 800d2dc:	429d      	cmp	r5, r3
 800d2de:	d2f9      	bcs.n	800d2d4 <RegionCommonUpdateBandTimeOff+0xd4>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800d2e0:	9b01      	ldr	r3, [sp, #4]
 800d2e2:	1aad      	subs	r5, r5, r2
 800d2e4:	42ab      	cmp	r3, r5
 800d2e6:	d900      	bls.n	800d2ea <RegionCommonUpdateBandTimeOff+0xea>
 800d2e8:	9501      	str	r5, [sp, #4]
                validBands++;
 800d2ea:	3601      	adds	r6, #1
 800d2ec:	e7f1      	b.n	800d2d2 <RegionCommonUpdateBandTimeOff+0xd2>
 800d2ee:	46c0      	nop			; (mov r8, r8)
 800d2f0:	00009aaf 	.word	0x00009aaf
 800d2f4:	ffffdcd8 	.word	0xffffdcd8
 800d2f8:	00002710 	.word	0x00002710
 800d2fc:	0036ee80 	.word	0x0036ee80

0800d300 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800d300:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800d302:	7802      	ldrb	r2, [r0, #0]
{
 800d304:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 800d306:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800d308:	2a03      	cmp	r2, #3
 800d30a:	d113      	bne.n	800d334 <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800d30c:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800d30e:	300f      	adds	r0, #15
 800d310:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800d312:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800d314:	4004      	ands	r4, r0
 800d316:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800d318:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800d31a:	789a      	ldrb	r2, [r3, #2]
 800d31c:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800d31e:	78dc      	ldrb	r4, [r3, #3]
 800d320:	0224      	lsls	r4, r4, #8
 800d322:	4322      	orrs	r2, r4
 800d324:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800d326:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800d328:	065a      	lsls	r2, r3, #25
 800d32a:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 800d32c:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800d32e:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800d330:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800d332:	380a      	subs	r0, #10
    }
    return retIndex;
}
 800d334:	bd10      	pop	{r4, pc}

0800d336 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800d336:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d338:	b087      	sub	sp, #28
 800d33a:	9305      	str	r3, [sp, #20]
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 800d33c:	2306      	movs	r3, #6
    int8_t txPower = verifyParams->TxPower;
 800d33e:	2707      	movs	r7, #7
{
 800d340:	9103      	str	r1, [sp, #12]
 800d342:	9204      	str	r2, [sp, #16]
    int8_t datarate = verifyParams->Datarate;
 800d344:	56c3      	ldrsb	r3, [r0, r3]
    uint8_t status = verifyParams->Status;
 800d346:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800d348:	9302      	str	r3, [sp, #8]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800d34a:	7943      	ldrb	r3, [r0, #5]
{
 800d34c:	0004      	movs	r4, r0
    int8_t txPower = verifyParams->TxPower;
 800d34e:	57c7      	ldrsb	r7, [r0, r7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800d350:	7a06      	ldrb	r6, [r0, #8]
    if( verifyParams->AdrEnabled == false )
 800d352:	2b00      	cmp	r3, #0
 800d354:	d026      	beq.n	800d3a4 <RegionCommonLinkAdrReqVerifyParams+0x6e>
    int8_t nbRepetitions = verifyParams->NbRep;
 800d356:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 800d358:	2d00      	cmp	r5, #0
 800d35a:	d019      	beq.n	800d390 <RegionCommonLinkAdrReqVerifyParams+0x5a>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800d35c:	69a2      	ldr	r2, [r4, #24]
 800d35e:	2314      	movs	r3, #20
 800d360:	9201      	str	r2, [sp, #4]
 800d362:	2215      	movs	r2, #21
 800d364:	56a2      	ldrsb	r2, [r4, r2]
 800d366:	56e3      	ldrsb	r3, [r4, r3]
 800d368:	9200      	str	r2, [sp, #0]
 800d36a:	7b20      	ldrb	r0, [r4, #12]
 800d36c:	9a02      	ldr	r2, [sp, #8]
 800d36e:	6921      	ldr	r1, [r4, #16]
 800d370:	f7ff fe90 	bl	800d094 <RegionCommonChanVerifyDr>
 800d374:	2800      	cmp	r0, #0
 800d376:	d101      	bne.n	800d37c <RegionCommonLinkAdrReqVerifyParams+0x46>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 800d378:	2302      	movs	r3, #2
 800d37a:	439d      	bics	r5, r3
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800d37c:	231d      	movs	r3, #29
 800d37e:	221c      	movs	r2, #28
 800d380:	56e3      	ldrsb	r3, [r4, r3]
 800d382:	56a2      	ldrsb	r2, [r4, r2]
    if( ( value >= min ) && ( value <= max ) )
 800d384:	42bb      	cmp	r3, r7
 800d386:	dc15      	bgt.n	800d3b4 <RegionCommonLinkAdrReqVerifyParams+0x7e>
 800d388:	42ba      	cmp	r2, r7
 800d38a:	da14      	bge.n	800d3b6 <RegionCommonLinkAdrReqVerifyParams+0x80>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800d38c:	2304      	movs	r3, #4
 800d38e:	439d      	bics	r5, r3
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 800d390:	0028      	movs	r0, r5
    *dr = datarate;
 800d392:	9b03      	ldr	r3, [sp, #12]
 800d394:	9a02      	ldr	r2, [sp, #8]
 800d396:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 800d398:	9b04      	ldr	r3, [sp, #16]
 800d39a:	701f      	strb	r7, [r3, #0]
    *nbRep = nbRepetitions;
 800d39c:	9b05      	ldr	r3, [sp, #20]
 800d39e:	701e      	strb	r6, [r3, #0]
}
 800d3a0:	b007      	add	sp, #28
 800d3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        datarate =  verifyParams->CurrentDatarate;
 800d3a4:	2309      	movs	r3, #9
        nbRepetitions = verifyParams->CurrentNbRep;
 800d3a6:	260b      	movs	r6, #11
        txPower =  verifyParams->CurrentTxPower;
 800d3a8:	270a      	movs	r7, #10
        datarate =  verifyParams->CurrentDatarate;
 800d3aa:	56c3      	ldrsb	r3, [r0, r3]
        nbRepetitions = verifyParams->CurrentNbRep;
 800d3ac:	5786      	ldrsb	r6, [r0, r6]
        datarate =  verifyParams->CurrentDatarate;
 800d3ae:	9302      	str	r3, [sp, #8]
        txPower =  verifyParams->CurrentTxPower;
 800d3b0:	57c7      	ldrsb	r7, [r0, r7]
 800d3b2:	e7d1      	b.n	800d358 <RegionCommonLinkAdrReqVerifyParams+0x22>
 800d3b4:	001f      	movs	r7, r3
    if( status == 0x07 )
 800d3b6:	2d07      	cmp	r5, #7
 800d3b8:	d1ea      	bne.n	800d390 <RegionCommonLinkAdrReqVerifyParams+0x5a>
        if( nbRepetitions == 0 )
 800d3ba:	2e00      	cmp	r6, #0
 800d3bc:	d1e8      	bne.n	800d390 <RegionCommonLinkAdrReqVerifyParams+0x5a>
            nbRepetitions = 1;
 800d3be:	3601      	adds	r6, #1
 800d3c0:	e7e6      	b.n	800d390 <RegionCommonLinkAdrReqVerifyParams+0x5a>
	...

0800d3c4 <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 800d3c4:	b510      	push	{r4, lr}
 800d3c6:	0004      	movs	r4, r0
    return (1000000000UL/bandwidth) * (1 << phyDr);
 800d3c8:	4802      	ldr	r0, [pc, #8]	; (800d3d4 <RegionCommonComputeSymbolTimeLoRa+0x10>)
 800d3ca:	f7f2 fecd 	bl	8000168 <__udivsi3>
 800d3ce:	40a0      	lsls	r0, r4
}
 800d3d0:	bd10      	pop	{r4, pc}
 800d3d2:	46c0      	nop			; (mov r8, r8)
 800d3d4:	3b9aca00 	.word	0x3b9aca00

0800d3d8 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDr )
{
    // ((8 * 1000000) / 50);
    return 160000UL;
}
 800d3d8:	4800      	ldr	r0, [pc, #0]	; (800d3dc <RegionCommonComputeSymbolTimeFsk+0x4>)
 800d3da:	4770      	bx	lr
 800d3dc:	00027100 	.word	0x00027100

0800d3e0 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 800d3e0:	b570      	push	{r4, r5, r6, lr}
 800d3e2:	0004      	movs	r4, r0
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800d3e4:	480f      	ldr	r0, [pc, #60]	; (800d424 <RegionCommonComputeRxWindowParameters+0x44>)
{
 800d3e6:	000e      	movs	r6, r1
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800d3e8:	4350      	muls	r0, r2
 800d3ea:	1e62      	subs	r2, r4, #1
 800d3ec:	0021      	movs	r1, r4
 800d3ee:	1880      	adds	r0, r0, r2
{
 800d3f0:	001d      	movs	r5, r3
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800d3f2:	f7f2 feb9 	bl	8000168 <__udivsi3>
 800d3f6:	4b0c      	ldr	r3, [pc, #48]	; (800d428 <RegionCommonComputeRxWindowParameters+0x48>)
 800d3f8:	18f3      	adds	r3, r6, r3
 800d3fa:	005b      	lsls	r3, r3, #1
 800d3fc:	18c0      	adds	r0, r0, r3
 800d3fe:	42b0      	cmp	r0, r6
 800d400:	d200      	bcs.n	800d404 <RegionCommonComputeRxWindowParameters+0x24>
 800d402:	0030      	movs	r0, r6
 800d404:	9b04      	ldr	r3, [sp, #16]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 800d406:	4909      	ldr	r1, [pc, #36]	; (800d42c <RegionCommonComputeRxWindowParameters+0x4c>)
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800d408:	6018      	str	r0, [r3, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 800d40a:	00a3      	lsls	r3, r4, #2
 800d40c:	4344      	muls	r4, r0
 800d40e:	0864      	lsrs	r4, r4, #1
 800d410:	1b18      	subs	r0, r3, r4
 800d412:	4b07      	ldr	r3, [pc, #28]	; (800d430 <RegionCommonComputeRxWindowParameters+0x50>)
 800d414:	43ed      	mvns	r5, r5
 800d416:	18c0      	adds	r0, r0, r3
 800d418:	f7f2 ff30 	bl	800027c <__divsi3>
 800d41c:	9b05      	ldr	r3, [sp, #20]
 800d41e:	1940      	adds	r0, r0, r5
 800d420:	6018      	str	r0, [r3, #0]
}
 800d422:	bd70      	pop	{r4, r5, r6, pc}
 800d424:	001e8480 	.word	0x001e8480
 800d428:	7ffffffc 	.word	0x7ffffffc
 800d42c:	000f4240 	.word	0x000f4240
 800d430:	000f423f 	.word	0x000f423f

0800d434 <RegionCommonComputeTxPower>:
/* ST_WORKAROUND_END */

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800d434:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800d436:	0040      	lsls	r0, r0, #1
{
 800d438:	1c14      	adds	r4, r2, #0
 800d43a:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800d43c:	f7f3 fe98 	bl	8001170 <__aeabi_ui2f>
 800d440:	1c01      	adds	r1, r0, #0
 800d442:	1c28      	adds	r0, r5, #0
 800d444:	f7f3 fcac 	bl	8000da0 <__aeabi_fsub>
 800d448:	1c21      	adds	r1, r4, #0
 800d44a:	f7f3 fca9 	bl	8000da0 <__aeabi_fsub>
 800d44e:	f7f5 fcc5 	bl	8002ddc <__aeabi_f2d>
 800d452:	f003 fe15 	bl	8011080 <floor>
 800d456:	f7f5 fc35 	bl	8002cc4 <__aeabi_d2iz>

    return phyTxPower;
 800d45a:	b240      	sxtb	r0, r0
}
 800d45c:	bd70      	pop	{r4, r5, r6, pc}

0800d45e <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800d45e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d460:	b087      	sub	sp, #28
 800d462:	9305      	str	r3, [sp, #20]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d464:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 800d466:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
 800d468:	001e      	movs	r6, r3
{
 800d46a:	9103      	str	r1, [sp, #12]
 800d46c:	9204      	str	r2, [sp, #16]
 800d46e:	011c      	lsls	r4, r3, #4
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d470:	8a02      	ldrh	r2, [r0, #16]
 800d472:	b2e4      	uxtb	r4, r4
 800d474:	42a2      	cmp	r2, r4
 800d476:	d806      	bhi.n	800d486 <RegionCommonCountNbOfEnabledChannels+0x28>
                enabledChannels[nbChannelCount++] = i + j;
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800d478:	4662      	mov	r2, ip
    *nbEnabledChannels = nbChannelCount;
 800d47a:	9b04      	ldr	r3, [sp, #16]
 800d47c:	701e      	strb	r6, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800d47e:	9b05      	ldr	r3, [sp, #20]
 800d480:	701a      	strb	r2, [r3, #0]
}
 800d482:	b007      	add	sp, #28
 800d484:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800d486:	005a      	lsls	r2, r3, #1
 800d488:	9202      	str	r2, [sp, #8]
 800d48a:	2200      	movs	r2, #0
 800d48c:	6841      	ldr	r1, [r0, #4]
 800d48e:	9d02      	ldr	r5, [sp, #8]
 800d490:	2701      	movs	r7, #1
 800d492:	5b49      	ldrh	r1, [r1, r5]
 800d494:	4111      	asrs	r1, r2
 800d496:	4239      	tst	r1, r7
 800d498:	d02c      	beq.n	800d4f4 <RegionCommonCountNbOfEnabledChannels+0x96>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800d49a:	210c      	movs	r1, #12
 800d49c:	1915      	adds	r5, r2, r4
 800d49e:	434d      	muls	r5, r1
 800d4a0:	6881      	ldr	r1, [r0, #8]
 800d4a2:	194d      	adds	r5, r1, r5
 800d4a4:	6829      	ldr	r1, [r5, #0]
 800d4a6:	2900      	cmp	r1, #0
 800d4a8:	d024      	beq.n	800d4f4 <RegionCommonCountNbOfEnabledChannels+0x96>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d4aa:	7801      	ldrb	r1, [r0, #0]
 800d4ac:	2900      	cmp	r1, #0
 800d4ae:	d105      	bne.n	800d4bc <RegionCommonCountNbOfEnabledChannels+0x5e>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 800d4b0:	8a41      	ldrh	r1, [r0, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d4b2:	2900      	cmp	r1, #0
 800d4b4:	d002      	beq.n	800d4bc <RegionCommonCountNbOfEnabledChannels+0x5e>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 800d4b6:	4111      	asrs	r1, r2
 800d4b8:	4239      	tst	r1, r7
 800d4ba:	d01b      	beq.n	800d4f4 <RegionCommonCountNbOfEnabledChannels+0x96>
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800d4bc:	2101      	movs	r1, #1
 800d4be:	5641      	ldrsb	r1, [r0, r1]
 800d4c0:	9100      	str	r1, [sp, #0]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800d4c2:	7a29      	ldrb	r1, [r5, #8]
 800d4c4:	070f      	lsls	r7, r1, #28
 800d4c6:	9101      	str	r1, [sp, #4]
    if( ( value >= min ) && ( value <= max ) )
 800d4c8:	1739      	asrs	r1, r7, #28
 800d4ca:	9f00      	ldr	r7, [sp, #0]
 800d4cc:	428f      	cmp	r7, r1
 800d4ce:	db11      	blt.n	800d4f4 <RegionCommonCountNbOfEnabledChannels+0x96>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800d4d0:	4669      	mov	r1, sp
 800d4d2:	7909      	ldrb	r1, [r1, #4]
 800d4d4:	b249      	sxtb	r1, r1
    if( ( value >= min ) && ( value <= max ) )
 800d4d6:	1109      	asrs	r1, r1, #4
 800d4d8:	428f      	cmp	r7, r1
 800d4da:	dc0b      	bgt.n	800d4f4 <RegionCommonCountNbOfEnabledChannels+0x96>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800d4dc:	7a69      	ldrb	r1, [r5, #9]
 800d4de:	2514      	movs	r5, #20
 800d4e0:	4369      	muls	r1, r5
 800d4e2:	68c5      	ldr	r5, [r0, #12]
 800d4e4:	1869      	adds	r1, r5, r1
 800d4e6:	7c09      	ldrb	r1, [r1, #16]
 800d4e8:	2900      	cmp	r1, #0
 800d4ea:	d109      	bne.n	800d500 <RegionCommonCountNbOfEnabledChannels+0xa2>
                    nbRestrictedChannelsCount++;
 800d4ec:	4661      	mov	r1, ip
 800d4ee:	3101      	adds	r1, #1
 800d4f0:	b2c9      	uxtb	r1, r1
 800d4f2:	468c      	mov	ip, r1
        for( uint8_t j = 0; j < 16; j++ )
 800d4f4:	3201      	adds	r2, #1
 800d4f6:	2a10      	cmp	r2, #16
 800d4f8:	d1c8      	bne.n	800d48c <RegionCommonCountNbOfEnabledChannels+0x2e>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d4fa:	3301      	adds	r3, #1
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	e7b6      	b.n	800d46e <RegionCommonCountNbOfEnabledChannels+0x10>
                enabledChannels[nbChannelCount++] = i + j;
 800d500:	9f03      	ldr	r7, [sp, #12]
 800d502:	1c71      	adds	r1, r6, #1
 800d504:	18a5      	adds	r5, r4, r2
 800d506:	55bd      	strb	r5, [r7, r6]
 800d508:	b2ce      	uxtb	r6, r1
 800d50a:	e7f3      	b.n	800d4f4 <RegionCommonCountNbOfEnabledChannels+0x96>

0800d50c <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800d50c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d50e:	0004      	movs	r4, r0
 800d510:	b089      	sub	sp, #36	; 0x24
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800d512:	6840      	ldr	r0, [r0, #4]
{
 800d514:	001d      	movs	r5, r3
 800d516:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800d518:	9206      	str	r2, [sp, #24]
 800d51a:	000e      	movs	r6, r1
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800d51c:	f002 fb76 	bl	800fc0c <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800d520:	6823      	ldr	r3, [r4, #0]
    *nbRestrictedChannels = 1;
 800d522:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800d524:	1a1b      	subs	r3, r3, r0
 800d526:	603b      	str	r3, [r7, #0]
    *nbRestrictedChannels = 1;
 800d528:	2301      	movs	r3, #1
 800d52a:	7013      	strb	r3, [r2, #0]
    *nbEnabledChannels = 0;
 800d52c:	2300      	movs	r3, #0
 800d52e:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800d530:	9305      	str	r3, [sp, #20]
 800d532:	6863      	ldr	r3, [r4, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d002      	beq.n	800d53e <RegionCommonIdentifyChannels+0x32>
 800d538:	6823      	ldr	r3, [r4, #0]
 800d53a:	4283      	cmp	r3, r0
 800d53c:	d825      	bhi.n	800d58a <RegionCommonIdentifyChannels+0x7e>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800d53e:	9b05      	ldr	r3, [sp, #20]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d540:	69e1      	ldr	r1, [r4, #28]
        *aggregatedTimeOff = 0;
 800d542:	6033      	str	r3, [r6, #0]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d544:	7808      	ldrb	r0, [r1, #0]
 800d546:	69a1      	ldr	r1, [r4, #24]
 800d548:	7a23      	ldrb	r3, [r4, #8]
 800d54a:	9103      	str	r1, [sp, #12]
 800d54c:	0021      	movs	r1, r4
 800d54e:	469c      	mov	ip, r3
 800d550:	7a63      	ldrb	r3, [r4, #9]
 800d552:	ae01      	add	r6, sp, #4
 800d554:	9307      	str	r3, [sp, #28]
 800d556:	310c      	adds	r1, #12
 800d558:	c90c      	ldmia	r1!, {r2, r3}
 800d55a:	c60c      	stmia	r6!, {r2, r3}
 800d55c:	7d21      	ldrb	r1, [r4, #20]
 800d55e:	4663      	mov	r3, ip
 800d560:	9100      	str	r1, [sp, #0]
 800d562:	69e1      	ldr	r1, [r4, #28]
 800d564:	9a07      	ldr	r2, [sp, #28]
 800d566:	68c9      	ldr	r1, [r1, #12]
 800d568:	f7ff fe4a 	bl	800d200 <RegionCommonUpdateBandTimeOff>
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800d56c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d56e:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800d570:	002a      	movs	r2, r5
 800d572:	9906      	ldr	r1, [sp, #24]
 800d574:	69e0      	ldr	r0, [r4, #28]
 800d576:	f7ff ff72 	bl	800d45e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800d57a:	782b      	ldrb	r3, [r5, #0]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d004      	beq.n	800d58a <RegionCommonIdentifyChannels+0x7e>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
 800d580:	2000      	movs	r0, #0
        *nextTxDelay = 0;
 800d582:	9b05      	ldr	r3, [sp, #20]
 800d584:	603b      	str	r3, [r7, #0]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800d586:	b009      	add	sp, #36	; 0x24
 800d588:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( *nbRestrictedChannels > 0 )
 800d58a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d58c:	7818      	ldrb	r0, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800d58e:	4243      	negs	r3, r0
 800d590:	4158      	adcs	r0, r3
 800d592:	300b      	adds	r0, #11
 800d594:	e7f7      	b.n	800d586 <RegionCommonIdentifyChannels+0x7a>
	...

0800d598 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800d598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d59a:	b08b      	sub	sp, #44	; 0x2c
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800d59c:	ac04      	add	r4, sp, #16
 800d59e:	0025      	movs	r5, r4
{
 800d5a0:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800d5a2:	4b0f      	ldr	r3, [pc, #60]	; (800d5e0 <RegionCommonRxConfigPrint+0x48>)
 800d5a4:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800d5a6:	c5c4      	stmia	r5!, {r2, r6, r7}
 800d5a8:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800d5aa:	c5c4      	stmia	r5!, {r2, r6, r7}

    if ( rxSlot < RX_SLOT_NONE )
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800d5ac:	4663      	mov	r3, ip
    if ( rxSlot < RX_SLOT_NONE )
 800d5ae:	2805      	cmp	r0, #5
 800d5b0:	d80c      	bhi.n	800d5cc <RegionCommonRxConfigPrint+0x34>
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800d5b2:	9101      	str	r1, [sp, #4]
 800d5b4:	0080      	lsls	r0, r0, #2
 800d5b6:	9302      	str	r3, [sp, #8]
 800d5b8:	5903      	ldr	r3, [r0, r4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	9300      	str	r3, [sp, #0]
 800d5be:	2100      	movs	r1, #0
 800d5c0:	2002      	movs	r0, #2
 800d5c2:	4b08      	ldr	r3, [pc, #32]	; (800d5e4 <RegionCommonRxConfigPrint+0x4c>)
 800d5c4:	f002 f886 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800d5c8:	b00b      	add	sp, #44	; 0x2c
 800d5ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800d5cc:	9301      	str	r3, [sp, #4]
 800d5ce:	9100      	str	r1, [sp, #0]
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	2100      	movs	r1, #0
 800d5d4:	4b04      	ldr	r3, [pc, #16]	; (800d5e8 <RegionCommonRxConfigPrint+0x50>)
 800d5d6:	2002      	movs	r0, #2
 800d5d8:	f002 f87c 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
}
 800d5dc:	e7f4      	b.n	800d5c8 <RegionCommonRxConfigPrint+0x30>
 800d5de:	46c0      	nop			; (mov r8, r8)
 800d5e0:	0801167c 	.word	0x0801167c
 800d5e4:	08011f72 	.word	0x08011f72
 800d5e8:	08011f91 	.word	0x08011f91

0800d5ec <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800d5ec:	b507      	push	{r0, r1, r2, lr}
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800d5ee:	4b04      	ldr	r3, [pc, #16]	; (800d600 <RegionCommonTxConfigPrint+0x14>)
 800d5f0:	9101      	str	r1, [sp, #4]
 800d5f2:	9000      	str	r0, [sp, #0]
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	2002      	movs	r0, #2
 800d5fa:	f002 f86b 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
}
 800d5fe:	bd07      	pop	{r0, r1, r2, pc}
 800d600:	08011fad 	.word	0x08011fad

0800d604 <GetBandwidth>:
    return nextLowerDr;
}

static uint32_t GetBandwidth( uint32_t drIndex )
{
    switch( BandwidthsEU868[drIndex] )
 800d604:	4b06      	ldr	r3, [pc, #24]	; (800d620 <GetBandwidth+0x1c>)
 800d606:	0080      	lsls	r0, r0, #2
 800d608:	58c3      	ldr	r3, [r0, r3]
 800d60a:	4a06      	ldr	r2, [pc, #24]	; (800d624 <GetBandwidth+0x20>)
 800d60c:	2001      	movs	r0, #1
 800d60e:	4293      	cmp	r3, r2
 800d610:	d004      	beq.n	800d61c <GetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800d612:	4a05      	ldr	r2, [pc, #20]	; (800d628 <GetBandwidth+0x24>)
 800d614:	189b      	adds	r3, r3, r2
 800d616:	4258      	negs	r0, r3
 800d618:	4158      	adcs	r0, r3
 800d61a:	0040      	lsls	r0, r0, #1
    }
}
 800d61c:	4770      	bx	lr
 800d61e:	46c0      	nop			; (mov r8, r8)
 800d620:	08011694 	.word	0x08011694
 800d624:	0003d090 	.word	0x0003d090
 800d628:	fff85ee0 	.word	0xfff85ee0

0800d62c <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800d62c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t phyDr = DataratesEU868[datarate];
 800d62e:	271f      	movs	r7, #31
 800d630:	4b12      	ldr	r3, [pc, #72]	; (800d67c <GetTimeOnAir+0x50>)
{
 800d632:	b085      	sub	sp, #20
    int8_t phyDr = DataratesEU868[datarate];
 800d634:	3301      	adds	r3, #1
 800d636:	181b      	adds	r3, r3, r0
{
 800d638:	000c      	movs	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800d63a:	57df      	ldrsb	r7, [r3, r7]
{
 800d63c:	0005      	movs	r5, r0
    uint32_t bandwidth = GetBandwidth( datarate );
 800d63e:	f7ff ffe1 	bl	800d604 <GetBandwidth>
 800d642:	4b0f      	ldr	r3, [pc, #60]	; (800d680 <GetTimeOnAir+0x54>)
 800d644:	0001      	movs	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800d646:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800d648:	2001      	movs	r0, #1
 800d64a:	b2e4      	uxtb	r4, r4
 800d64c:	2d07      	cmp	r5, #7
 800d64e:	d10c      	bne.n	800d66a <GetTimeOnAir+0x3e>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800d650:	2305      	movs	r3, #5
 800d652:	9003      	str	r0, [sp, #12]
 800d654:	2000      	movs	r0, #0
 800d656:	22fa      	movs	r2, #250	; 0xfa
 800d658:	9300      	str	r3, [sp, #0]
 800d65a:	0003      	movs	r3, r0
 800d65c:	0092      	lsls	r2, r2, #2
 800d65e:	437a      	muls	r2, r7
 800d660:	9402      	str	r4, [sp, #8]
 800d662:	9001      	str	r0, [sp, #4]
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800d664:	47b0      	blx	r6
    }
    return timeOnAir;
}
 800d666:	b005      	add	sp, #20
 800d668:	bdf0      	pop	{r4, r5, r6, r7, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800d66a:	2300      	movs	r3, #0
 800d66c:	9301      	str	r3, [sp, #4]
 800d66e:	3308      	adds	r3, #8
 800d670:	9300      	str	r3, [sp, #0]
 800d672:	003a      	movs	r2, r7
 800d674:	0003      	movs	r3, r0
 800d676:	9003      	str	r0, [sp, #12]
 800d678:	9402      	str	r4, [sp, #8]
 800d67a:	e7f3      	b.n	800d664 <GetTimeOnAir+0x38>
 800d67c:	08011694 	.word	0x08011694
 800d680:	080117e4 	.word	0x080117e4

0800d684 <VerifyRfFreq>:
{
 800d684:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 800d686:	4b1a      	ldr	r3, [pc, #104]	; (800d6f0 <VerifyRfFreq+0x6c>)
{
 800d688:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 800d68a:	6a1b      	ldr	r3, [r3, #32]
{
 800d68c:	000d      	movs	r5, r1
    if( Radio.CheckRfFrequency( freq ) == false )
 800d68e:	9301      	str	r3, [sp, #4]
 800d690:	4798      	blx	r3
 800d692:	2800      	cmp	r0, #0
 800d694:	d006      	beq.n	800d6a4 <VerifyRfFreq+0x20>
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800d696:	4b17      	ldr	r3, [pc, #92]	; (800d6f4 <VerifyRfFreq+0x70>)
 800d698:	4a17      	ldr	r2, [pc, #92]	; (800d6f8 <VerifyRfFreq+0x74>)
 800d69a:	18e3      	adds	r3, r4, r3
 800d69c:	4293      	cmp	r3, r2
 800d69e:	d802      	bhi.n	800d6a6 <VerifyRfFreq+0x22>
        *band = 2;
 800d6a0:	2302      	movs	r3, #2
        *band = 3;
 800d6a2:	702b      	strb	r3, [r5, #0]
}
 800d6a4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800d6a6:	4b15      	ldr	r3, [pc, #84]	; (800d6fc <VerifyRfFreq+0x78>)
 800d6a8:	4a15      	ldr	r2, [pc, #84]	; (800d700 <VerifyRfFreq+0x7c>)
 800d6aa:	18e3      	adds	r3, r4, r3
 800d6ac:	4293      	cmp	r3, r2
 800d6ae:	d801      	bhi.n	800d6b4 <VerifyRfFreq+0x30>
        *band = 0;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	e7f6      	b.n	800d6a2 <VerifyRfFreq+0x1e>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800d6b4:	4b13      	ldr	r3, [pc, #76]	; (800d704 <VerifyRfFreq+0x80>)
 800d6b6:	4a14      	ldr	r2, [pc, #80]	; (800d708 <VerifyRfFreq+0x84>)
 800d6b8:	18e3      	adds	r3, r4, r3
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d801      	bhi.n	800d6c2 <VerifyRfFreq+0x3e>
        *band = 1;
 800d6be:	2301      	movs	r3, #1
 800d6c0:	e7ef      	b.n	800d6a2 <VerifyRfFreq+0x1e>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800d6c2:	4b12      	ldr	r3, [pc, #72]	; (800d70c <VerifyRfFreq+0x88>)
 800d6c4:	4a12      	ldr	r2, [pc, #72]	; (800d710 <VerifyRfFreq+0x8c>)
 800d6c6:	18e3      	adds	r3, r4, r3
 800d6c8:	4293      	cmp	r3, r2
 800d6ca:	d801      	bhi.n	800d6d0 <VerifyRfFreq+0x4c>
        *band = 5;
 800d6cc:	2305      	movs	r3, #5
 800d6ce:	e7e8      	b.n	800d6a2 <VerifyRfFreq+0x1e>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800d6d0:	4b10      	ldr	r3, [pc, #64]	; (800d714 <VerifyRfFreq+0x90>)
 800d6d2:	4a11      	ldr	r2, [pc, #68]	; (800d718 <VerifyRfFreq+0x94>)
 800d6d4:	18e3      	adds	r3, r4, r3
 800d6d6:	4293      	cmp	r3, r2
 800d6d8:	d801      	bhi.n	800d6de <VerifyRfFreq+0x5a>
        *band = 3;
 800d6da:	2303      	movs	r3, #3
 800d6dc:	e7e1      	b.n	800d6a2 <VerifyRfFreq+0x1e>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800d6de:	4b0f      	ldr	r3, [pc, #60]	; (800d71c <VerifyRfFreq+0x98>)
 800d6e0:	18e4      	adds	r4, r4, r3
 800d6e2:	4b0f      	ldr	r3, [pc, #60]	; (800d720 <VerifyRfFreq+0x9c>)
 800d6e4:	429c      	cmp	r4, r3
 800d6e6:	d801      	bhi.n	800d6ec <VerifyRfFreq+0x68>
        *band = 4;
 800d6e8:	2304      	movs	r3, #4
 800d6ea:	e7da      	b.n	800d6a2 <VerifyRfFreq+0x1e>
        return false;
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	e7d9      	b.n	800d6a4 <VerifyRfFreq+0x20>
 800d6f0:	080117e4 	.word	0x080117e4
 800d6f4:	cc8faa40 	.word	0xcc8faa40
 800d6f8:	001e847f 	.word	0x001e847f
 800d6fc:	cc7125c0 	.word	0xcc7125c0
 800d700:	002dc6c0 	.word	0x002dc6c0
 800d704:	cc435eff 	.word	0xcc435eff
 800d708:	000927bf 	.word	0x000927bf
 800d70c:	cc38b0a0 	.word	0xcc38b0a0
 800d710:	0007a120 	.word	0x0007a120
 800d714:	cc2e0240 	.word	0xcc2e0240
 800d718:	0003d090 	.word	0x0003d090
 800d71c:	cc296e60 	.word	0xcc296e60
 800d720:	000493e0 	.word	0x000493e0

0800d724 <RegionEU868GetPhyParam>:

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800d724:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
 800d726:	2200      	movs	r2, #0
{
 800d728:	0003      	movs	r3, r0
 800d72a:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 800d72c:	9200      	str	r2, [sp, #0]

    switch( getPhy->Attribute )
 800d72e:	380b      	subs	r0, #11
 800d730:	282e      	cmp	r0, #46	; 0x2e
 800d732:	d821      	bhi.n	800d778 <RegionEU868GetPhyParam+0x54>
 800d734:	f7f2 fcfa 	bl	800012c <__gnu_thumb1_case_uqi>
 800d738:	2d272522 	.word	0x2d272522
 800d73c:	39363432 	.word	0x39363432
 800d740:	43403e3c 	.word	0x43403e3c
 800d744:	4f204d20 	.word	0x4f204d20
 800d748:	20555351 	.word	0x20555351
 800d74c:	185b5720 	.word	0x185b5720
 800d750:	20202020 	.word	0x20202020
 800d754:	20202020 	.word	0x20202020
 800d758:	20202020 	.word	0x20202020
 800d75c:	635d4d20 	.word	0x635d4d20
 800d760:	634d2020 	.word	0x634d2020
 800d764:	6520      	.short	0x6520
 800d766:	6c          	.byte	0x6c
 800d767:	00          	.byte	0x00
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 800d768:	785b      	ldrb	r3, [r3, #1]
 800d76a:	b25b      	sxtb	r3, r3
        nextLowerDr = minDr;
 800d76c:	1e1a      	subs	r2, r3, #0
    if( dr == minDr )
 800d76e:	d001      	beq.n	800d774 <RegionEU868GetPhyParam+0x50>
        nextLowerDr = dr - 1;
 800d770:	3b01      	subs	r3, #1
 800d772:	b2da      	uxtb	r2, r3
            phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, EU868_TX_MIN_DATARATE );
 800d774:	b252      	sxtb	r2, r2
 800d776:	9200      	str	r2, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 800d778:	9800      	ldr	r0, [sp, #0]
 800d77a:	bd0e      	pop	{r1, r2, r3, pc}
            phyParam.Value = EU868_ADR_ACK_LIMIT;
 800d77c:	2340      	movs	r3, #64	; 0x40
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800d77e:	9300      	str	r3, [sp, #0]
            break;
 800d780:	e7fa      	b.n	800d778 <RegionEU868GetPhyParam+0x54>
            phyParam.Value = EU868_ADR_ACK_DELAY;
 800d782:	2320      	movs	r3, #32
 800d784:	e7fb      	b.n	800d77e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800d786:	2101      	movs	r1, #1
 800d788:	4a24      	ldr	r2, [pc, #144]	; (800d81c <RegionEU868GetPhyParam+0xf8>)
 800d78a:	5659      	ldrsb	r1, [r3, r1]
 800d78c:	3228      	adds	r2, #40	; 0x28
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800d78e:	5c53      	ldrb	r3, [r2, r1]
 800d790:	e7f5      	b.n	800d77e <RegionEU868GetPhyParam+0x5a>
 800d792:	2101      	movs	r1, #1
 800d794:	4a21      	ldr	r2, [pc, #132]	; (800d81c <RegionEU868GetPhyParam+0xf8>)
 800d796:	5659      	ldrsb	r1, [r3, r1]
 800d798:	3230      	adds	r2, #48	; 0x30
 800d79a:	e7f8      	b.n	800d78e <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800d79c:	2301      	movs	r3, #1
 800d79e:	e7ee      	b.n	800d77e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800d7a0:	4b1f      	ldr	r3, [pc, #124]	; (800d820 <RegionEU868GetPhyParam+0xfc>)
 800d7a2:	e7ec      	b.n	800d77e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = EU868_RECEIVE_DELAY1;
 800d7a4:	23fa      	movs	r3, #250	; 0xfa
 800d7a6:	009b      	lsls	r3, r3, #2
 800d7a8:	e7e9      	b.n	800d77e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = EU868_RECEIVE_DELAY2;
 800d7aa:	23fa      	movs	r3, #250	; 0xfa
 800d7ac:	00db      	lsls	r3, r3, #3
 800d7ae:	e7e6      	b.n	800d77e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY1;
 800d7b0:	4b1c      	ldr	r3, [pc, #112]	; (800d824 <RegionEU868GetPhyParam+0x100>)
 800d7b2:	e7e4      	b.n	800d77e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = EU868_JOIN_ACCEPT_DELAY2;
 800d7b4:	4b1c      	ldr	r3, [pc, #112]	; (800d828 <RegionEU868GetPhyParam+0x104>)
 800d7b6:	e7e2      	b.n	800d77e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = EU868_MAX_FCNT_GAP;
 800d7b8:	2380      	movs	r3, #128	; 0x80
 800d7ba:	01db      	lsls	r3, r3, #7
 800d7bc:	e7df      	b.n	800d77e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = ( EU868_ACKTIMEOUT + randr( -EU868_ACK_TIMEOUT_RND, EU868_ACK_TIMEOUT_RND ) );
 800d7be:	21fa      	movs	r1, #250	; 0xfa
 800d7c0:	481a      	ldr	r0, [pc, #104]	; (800d82c <RegionEU868GetPhyParam+0x108>)
 800d7c2:	0089      	lsls	r1, r1, #2
 800d7c4:	f000 fc8c 	bl	800e0e0 <randr>
 800d7c8:	23fa      	movs	r3, #250	; 0xfa
 800d7ca:	00db      	lsls	r3, r3, #3
 800d7cc:	18c0      	adds	r0, r0, r3
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 800d7ce:	9000      	str	r0, [sp, #0]
            break;
 800d7d0:	e7d2      	b.n	800d778 <RegionEU868GetPhyParam+0x54>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800d7d2:	4b17      	ldr	r3, [pc, #92]	; (800d830 <RegionEU868GetPhyParam+0x10c>)
 800d7d4:	e7d3      	b.n	800d77e <RegionEU868GetPhyParam+0x5a>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 800d7d6:	4b17      	ldr	r3, [pc, #92]	; (800d834 <RegionEU868GetPhyParam+0x110>)
 800d7d8:	e7d1      	b.n	800d77e <RegionEU868GetPhyParam+0x5a>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 800d7da:	4b17      	ldr	r3, [pc, #92]	; (800d838 <RegionEU868GetPhyParam+0x114>)
 800d7dc:	e7cf      	b.n	800d77e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800d7de:	2310      	movs	r3, #16
 800d7e0:	e7cd      	b.n	800d77e <RegionEU868GetPhyParam+0x5a>
            phyParam.Channels = NvmCtx.Channels;
 800d7e2:	4b16      	ldr	r3, [pc, #88]	; (800d83c <RegionEU868GetPhyParam+0x118>)
 800d7e4:	e7cb      	b.n	800d77e <RegionEU868GetPhyParam+0x5a>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800d7e6:	2383      	movs	r3, #131	; 0x83
 800d7e8:	05db      	lsls	r3, r3, #23
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800d7ea:	9300      	str	r3, [sp, #0]
            break;
 800d7ec:	e7c4      	b.n	800d778 <RegionEU868GetPhyParam+0x54>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800d7ee:	4b14      	ldr	r3, [pc, #80]	; (800d840 <RegionEU868GetPhyParam+0x11c>)
 800d7f0:	e7fb      	b.n	800d7ea <RegionEU868GetPhyParam+0xc6>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800d7f2:	466a      	mov	r2, sp
 800d7f4:	4b13      	ldr	r3, [pc, #76]	; (800d844 <RegionEU868GetPhyParam+0x120>)
 800d7f6:	8013      	strh	r3, [r2, #0]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 800d7f8:	2300      	movs	r3, #0
 800d7fa:	7093      	strb	r3, [r2, #2]
            break;
 800d7fc:	e7bc      	b.n	800d778 <RegionEU868GetPhyParam+0x54>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800d7fe:	2303      	movs	r3, #3
 800d800:	e7bd      	b.n	800d77e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800d802:	2101      	movs	r1, #1
 800d804:	4a05      	ldr	r2, [pc, #20]	; (800d81c <RegionEU868GetPhyParam+0xf8>)
 800d806:	5659      	ldrsb	r1, [r3, r1]
 800d808:	1c53      	adds	r3, r2, #1
 800d80a:	185b      	adds	r3, r3, r1
 800d80c:	7fdb      	ldrb	r3, [r3, #31]
 800d80e:	e7b6      	b.n	800d77e <RegionEU868GetPhyParam+0x5a>
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 800d810:	2001      	movs	r0, #1
 800d812:	5618      	ldrsb	r0, [r3, r0]
 800d814:	f7ff fef6 	bl	800d604 <GetBandwidth>
 800d818:	e7d9      	b.n	800d7ce <RegionEU868GetPhyParam+0xaa>
 800d81a:	46c0      	nop			; (mov r8, r8)
 800d81c:	08011694 	.word	0x08011694
 800d820:	00000bb8 	.word	0x00000bb8
 800d824:	00001388 	.word	0x00001388
 800d828:	00001770 	.word	0x00001770
 800d82c:	fffffc18 	.word	0xfffffc18
 800d830:	33d3e608 	.word	0x33d3e608
 800d834:	20000e38 	.word	0x20000e38
 800d838:	20000e3a 	.word	0x20000e3a
 800d83c:	20000d00 	.word	0x20000d00
 800d840:	4009999a 	.word	0x4009999a
 800d844:	00000211 	.word	0x00000211

0800d848 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 800d848:	230c      	movs	r3, #12
{
 800d84a:	b513      	push	{r0, r1, r4, lr}
 800d84c:	0001      	movs	r1, r0
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 800d84e:	7842      	ldrb	r2, [r0, #1]
 800d850:	7800      	ldrb	r0, [r0, #0]
 800d852:	4c07      	ldr	r4, [pc, #28]	; (800d870 <RegionEU868SetBandTxDone+0x28>)
 800d854:	4343      	muls	r3, r0
 800d856:	2014      	movs	r0, #20
 800d858:	18e3      	adds	r3, r4, r3
 800d85a:	7a5b      	ldrb	r3, [r3, #9]
 800d85c:	4358      	muls	r0, r3
 800d85e:	690b      	ldr	r3, [r1, #16]
 800d860:	30c0      	adds	r0, #192	; 0xc0
 800d862:	9300      	str	r3, [sp, #0]
 800d864:	68cb      	ldr	r3, [r1, #12]
 800d866:	1900      	adds	r0, r0, r4
 800d868:	6889      	ldr	r1, [r1, #8]
 800d86a:	f7ff fc9b 	bl	800d1a4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 800d86e:	bd13      	pop	{r0, r1, r4, pc}
 800d870:	20000d00 	.word	0x20000d00

0800d874 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800d874:	b570      	push	{r4, r5, r6, lr}
 800d876:	b09e      	sub	sp, #120	; 0x78
 800d878:	0004      	movs	r4, r0
    Band_t bands[EU868_MAX_NB_BANDS] =
 800d87a:	2278      	movs	r2, #120	; 0x78
 800d87c:	2100      	movs	r1, #0
 800d87e:	4668      	mov	r0, sp
 800d880:	f002 fc57 	bl	8010132 <memset>
 800d884:	2364      	movs	r3, #100	; 0x64
 800d886:	466a      	mov	r2, sp
 800d888:	8013      	strh	r3, [r2, #0]
 800d88a:	8293      	strh	r3, [r2, #20]
 800d88c:	22fa      	movs	r2, #250	; 0xfa
 800d88e:	4669      	mov	r1, sp
 800d890:	0092      	lsls	r2, r2, #2
 800d892:	4668      	mov	r0, sp
 800d894:	850a      	strh	r2, [r1, #40]	; 0x28
 800d896:	210a      	movs	r1, #10
 800d898:	8781      	strh	r1, [r0, #60]	; 0x3c
 800d89a:	a914      	add	r1, sp, #80	; 0x50
 800d89c:	800b      	strh	r3, [r1, #0]
 800d89e:	ab19      	add	r3, sp, #100	; 0x64
 800d8a0:	801a      	strh	r2, [r3, #0]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800d8a2:	7920      	ldrb	r0, [r4, #4]
 800d8a4:	2803      	cmp	r0, #3
 800d8a6:	d820      	bhi.n	800d8ea <RegionEU868InitDefaults+0x76>
 800d8a8:	f7f2 fc40 	bl	800012c <__gnu_thumb1_case_uqi>
 800d8ac:	2f282102 	.word	0x2f282102
    {
        case INIT_TYPE_DEFAULTS:
        {
            // Default bands
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800d8b0:	2278      	movs	r2, #120	; 0x78
 800d8b2:	4669      	mov	r1, sp
 800d8b4:	4819      	ldr	r0, [pc, #100]	; (800d91c <RegionEU868InitDefaults+0xa8>)
 800d8b6:	f000 fc2f 	bl	800e118 <memcpy1>

            // Default channels
            NvmCtx.Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800d8ba:	4b19      	ldr	r3, [pc, #100]	; (800d920 <RegionEU868InitDefaults+0xac>)
 800d8bc:	4a19      	ldr	r2, [pc, #100]	; (800d924 <RegionEU868InitDefaults+0xb0>)
 800d8be:	0019      	movs	r1, r3
 800d8c0:	0010      	movs	r0, r2
 800d8c2:	3138      	adds	r1, #56	; 0x38
 800d8c4:	c970      	ldmia	r1!, {r4, r5, r6}
 800d8c6:	c070      	stmia	r0!, {r4, r5, r6}
            NvmCtx.Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800d8c8:	0019      	movs	r1, r3
 800d8ca:	3144      	adds	r1, #68	; 0x44
 800d8cc:	c970      	ldmia	r1!, {r4, r5, r6}
 800d8ce:	c070      	stmia	r0!, {r4, r5, r6}
            NvmCtx.Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800d8d0:	0011      	movs	r1, r2
 800d8d2:	3350      	adds	r3, #80	; 0x50
 800d8d4:	3118      	adds	r1, #24
 800d8d6:	cb31      	ldmia	r3!, {r0, r4, r5}
 800d8d8:	c131      	stmia	r1!, {r0, r4, r5}

            // Default ChannelsMask
            NvmCtx.ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800d8da:	2307      	movs	r3, #7
 800d8dc:	32fe      	adds	r2, #254	; 0xfe
 800d8de:	8793      	strh	r3, [r2, #60]	; 0x3c

            // Update the channels mask
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d8e0:	2201      	movs	r2, #1
            // Reset Channels Rx1Frequency to default 0
            NvmCtx.Channels[0].Rx1Frequency = 0;
            NvmCtx.Channels[1].Rx1Frequency = 0;
            NvmCtx.Channels[2].Rx1Frequency = 0;
            // Update the channels mask
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d8e2:	4911      	ldr	r1, [pc, #68]	; (800d928 <RegionEU868InitDefaults+0xb4>)
 800d8e4:	4811      	ldr	r0, [pc, #68]	; (800d92c <RegionEU868InitDefaults+0xb8>)
 800d8e6:	f7ff fc4e 	bl	800d186 <RegionCommonChanMaskCopy>
        default:
        {
            break;
        }
    }
}
 800d8ea:	b01e      	add	sp, #120	; 0x78
 800d8ec:	bd70      	pop	{r4, r5, r6, pc}
            NvmCtx.Channels[0].Rx1Frequency = 0;
 800d8ee:	2200      	movs	r2, #0
 800d8f0:	4b0c      	ldr	r3, [pc, #48]	; (800d924 <RegionEU868InitDefaults+0xb0>)
 800d8f2:	605a      	str	r2, [r3, #4]
            NvmCtx.Channels[1].Rx1Frequency = 0;
 800d8f4:	611a      	str	r2, [r3, #16]
            NvmCtx.Channels[2].Rx1Frequency = 0;
 800d8f6:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800d8f8:	3201      	adds	r2, #1
 800d8fa:	e7f2      	b.n	800d8e2 <RegionEU868InitDefaults+0x6e>
            NvmCtx.ChannelsMask[0] |= NvmCtx.ChannelsDefaultMask[0];
 800d8fc:	4b09      	ldr	r3, [pc, #36]	; (800d924 <RegionEU868InitDefaults+0xb0>)
 800d8fe:	33fe      	adds	r3, #254	; 0xfe
 800d900:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800d902:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
 800d904:	430a      	orrs	r2, r1
 800d906:	875a      	strh	r2, [r3, #58]	; 0x3a
            break;
 800d908:	e7ef      	b.n	800d8ea <RegionEU868InitDefaults+0x76>
            if( params->NvmCtx != 0 )
 800d90a:	6821      	ldr	r1, [r4, #0]
 800d90c:	2900      	cmp	r1, #0
 800d90e:	d0ec      	beq.n	800d8ea <RegionEU868InitDefaults+0x76>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 800d910:	229e      	movs	r2, #158	; 0x9e
 800d912:	4804      	ldr	r0, [pc, #16]	; (800d924 <RegionEU868InitDefaults+0xb0>)
 800d914:	0052      	lsls	r2, r2, #1
 800d916:	f000 fbff 	bl	800e118 <memcpy1>
}
 800d91a:	e7e6      	b.n	800d8ea <RegionEU868InitDefaults+0x76>
 800d91c:	20000dc0 	.word	0x20000dc0
 800d920:	08011694 	.word	0x08011694
 800d924:	20000d00 	.word	0x20000d00
 800d928:	20000e3a 	.word	0x20000e3a
 800d92c:	20000e38 	.word	0x20000e38

0800d930 <RegionEU868GetNvmCtx>:

void* RegionEU868GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionEU868NvmCtx_t );
 800d930:	239e      	movs	r3, #158	; 0x9e
 800d932:	005b      	lsls	r3, r3, #1
 800d934:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800d936:	4801      	ldr	r0, [pc, #4]	; (800d93c <RegionEU868GetNvmCtx+0xc>)
 800d938:	4770      	bx	lr
 800d93a:	46c0      	nop			; (mov r8, r8)
 800d93c:	20000d00 	.word	0x20000d00

0800d940 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d940:	0003      	movs	r3, r0
 800d942:	b507      	push	{r0, r1, r2, lr}
 800d944:	0008      	movs	r0, r1
 800d946:	290f      	cmp	r1, #15
 800d948:	d809      	bhi.n	800d95e <RegionEU868Verify+0x1e>
 800d94a:	f7f2 fbef 	bl	800012c <__gnu_thumb1_case_uqi>
 800d94e:	080a      	.short	0x080a
 800d950:	1c080808 	.word	0x1c080808
 800d954:	1c081c12 	.word	0x1c081c12
 800d958:	0808081c 	.word	0x0808081c
 800d95c:	2008      	.short	0x2008
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 800d95e:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
}
 800d960:	bd0e      	pop	{r1, r2, r3, pc}
            uint8_t band = 0;
 800d962:	466a      	mov	r2, sp
 800d964:	1dd1      	adds	r1, r2, #7
 800d966:	2200      	movs	r2, #0
            return VerifyRfFreq( verify->Frequency, &band );
 800d968:	6818      	ldr	r0, [r3, #0]
            uint8_t band = 0;
 800d96a:	700a      	strb	r2, [r1, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 800d96c:	f7ff fe8a 	bl	800d684 <VerifyRfFreq>
 800d970:	e7f6      	b.n	800d960 <RegionEU868Verify+0x20>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800d972:	2000      	movs	r0, #0
 800d974:	2205      	movs	r2, #5
 800d976:	5618      	ldrsb	r0, [r3, r0]
 800d978:	2100      	movs	r1, #0
 800d97a:	f7ff fbc7 	bl	800d10c <RegionCommonValueInRange>
 800d97e:	1e43      	subs	r3, r0, #1
 800d980:	4198      	sbcs	r0, r3
 800d982:	b2c0      	uxtb	r0, r0
 800d984:	e7ec      	b.n	800d960 <RegionEU868Verify+0x20>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800d986:	2000      	movs	r0, #0
 800d988:	2207      	movs	r2, #7
 800d98a:	5618      	ldrsb	r0, [r3, r0]
 800d98c:	e7f4      	b.n	800d978 <RegionEU868Verify+0x38>
            return EU868_DUTY_CYCLE_ENABLED;
 800d98e:	2001      	movs	r0, #1
 800d990:	e7e6      	b.n	800d960 <RegionEU868Verify+0x20>
	...

0800d994 <RegionEU868ChanMaskSet>:
        }
    }
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800d994:	b510      	push	{r4, lr}
    switch( chanMaskSet->ChannelsMaskType )
 800d996:	7904      	ldrb	r4, [r0, #4]
 800d998:	2c00      	cmp	r4, #0
 800d99a:	d003      	beq.n	800d9a4 <RegionEU868ChanMaskSet+0x10>
 800d99c:	2c01      	cmp	r4, #1
 800d99e:	d008      	beq.n	800d9b2 <RegionEU868ChanMaskSet+0x1e>
 800d9a0:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
    return true;
}
 800d9a2:	bd10      	pop	{r4, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800d9a4:	6801      	ldr	r1, [r0, #0]
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	4805      	ldr	r0, [pc, #20]	; (800d9c0 <RegionEU868ChanMaskSet+0x2c>)
 800d9aa:	f7ff fbec 	bl	800d186 <RegionCommonChanMaskCopy>
    return true;
 800d9ae:	2001      	movs	r0, #1
            break;
 800d9b0:	e7f7      	b.n	800d9a2 <RegionEU868ChanMaskSet+0xe>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800d9b2:	6801      	ldr	r1, [r0, #0]
 800d9b4:	0022      	movs	r2, r4
 800d9b6:	4803      	ldr	r0, [pc, #12]	; (800d9c4 <RegionEU868ChanMaskSet+0x30>)
 800d9b8:	f7ff fbe5 	bl	800d186 <RegionCommonChanMaskCopy>
    return true;
 800d9bc:	0020      	movs	r0, r4
            break;
 800d9be:	e7f0      	b.n	800d9a2 <RegionEU868ChanMaskSet+0xe>
 800d9c0:	20000e38 	.word	0x20000e38
 800d9c4:	20000e3a 	.word	0x20000e3a

0800d9c8 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9ca:	b085      	sub	sp, #20
 800d9cc:	001c      	movs	r4, r3
 800d9ce:	0005      	movs	r5, r0
 800d9d0:	000e      	movs	r6, r1
 800d9d2:	9202      	str	r2, [sp, #8]
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800d9d4:	1c03      	adds	r3, r0, #0
 800d9d6:	2807      	cmp	r0, #7
 800d9d8:	dd00      	ble.n	800d9dc <RegionEU868ComputeRxWindowParameters+0x14>
 800d9da:	2307      	movs	r3, #7
 800d9dc:	b25f      	sxtb	r7, r3
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800d9de:	0038      	movs	r0, r7
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800d9e0:	7063      	strb	r3, [r4, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800d9e2:	f7ff fe0f 	bl	800d604 <GetBandwidth>
 800d9e6:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800d9e8:	2d06      	cmp	r5, #6
 800d9ea:	dd14      	ble.n	800da16 <RegionEU868ComputeRxWindowParameters+0x4e>
    { // FSK
        tSymbol = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800d9ec:	2032      	movs	r0, #50	; 0x32
 800d9ee:	f7ff fcf3 	bl	800d3d8 <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
    }

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d9f2:	4b0d      	ldr	r3, [pc, #52]	; (800da28 <RegionEU868ComputeRxWindowParameters+0x60>)
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800d9f4:	0005      	movs	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800d9f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9f8:	9303      	str	r3, [sp, #12]
 800d9fa:	4798      	blx	r3
 800d9fc:	0022      	movs	r2, r4
 800d9fe:	3408      	adds	r4, #8
 800da00:	320c      	adds	r2, #12
 800da02:	0003      	movs	r3, r0
 800da04:	9201      	str	r2, [sp, #4]
 800da06:	0031      	movs	r1, r6
 800da08:	0028      	movs	r0, r5
 800da0a:	9a02      	ldr	r2, [sp, #8]
 800da0c:	9400      	str	r4, [sp, #0]
 800da0e:	f7ff fce7 	bl	800d3e0 <RegionCommonComputeRxWindowParameters>
}
 800da12:	b005      	add	sp, #20
 800da14:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800da16:	4a05      	ldr	r2, [pc, #20]	; (800da2c <RegionEU868ComputeRxWindowParameters+0x64>)
 800da18:	00b9      	lsls	r1, r7, #2
 800da1a:	1c53      	adds	r3, r2, #1
 800da1c:	19df      	adds	r7, r3, r7
 800da1e:	7ff8      	ldrb	r0, [r7, #31]
 800da20:	5889      	ldr	r1, [r1, r2]
 800da22:	f7ff fccf 	bl	800d3c4 <RegionCommonComputeSymbolTimeLoRa>
 800da26:	e7e4      	b.n	800d9f2 <RegionEU868ComputeRxWindowParameters+0x2a>
 800da28:	080117e4 	.word	0x080117e4
 800da2c:	08011694 	.word	0x08011694

0800da30 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800da30:	b5f0      	push	{r4, r5, r6, r7, lr}
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800da32:	2701      	movs	r7, #1
{
 800da34:	b08f      	sub	sp, #60	; 0x3c
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800da36:	6843      	ldr	r3, [r0, #4]
{
 800da38:	910c      	str	r1, [sp, #48]	; 0x30
    int8_t dr = rxConfig->Datarate;
 800da3a:	57c7      	ldrsb	r7, [r0, r7]
    uint32_t frequency = rxConfig->Frequency;
 800da3c:	930a      	str	r3, [sp, #40]	; 0x28

    if( Radio.GetStatus( ) != RF_IDLE )
 800da3e:	4b35      	ldr	r3, [pc, #212]	; (800db14 <RegionEU868RxConfig+0xe4>)
{
 800da40:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	930b      	str	r3, [sp, #44]	; 0x2c
 800da46:	4798      	blx	r3
 800da48:	0005      	movs	r5, r0
    {
        return false;
 800da4a:	2000      	movs	r0, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 800da4c:	4285      	cmp	r5, r0
 800da4e:	d148      	bne.n	800dae2 <RegionEU868RxConfig+0xb2>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800da50:	7ce3      	ldrb	r3, [r4, #19]
 800da52:	4283      	cmp	r3, r0
 800da54:	d10a      	bne.n	800da6c <RegionEU868RxConfig+0x3c>
    {
        // Apply window 1 frequency
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 800da56:	220c      	movs	r2, #12
 800da58:	7821      	ldrb	r1, [r4, #0]
 800da5a:	4b2f      	ldr	r3, [pc, #188]	; (800db18 <RegionEU868RxConfig+0xe8>)
 800da5c:	434a      	muls	r2, r1
 800da5e:	58d1      	ldr	r1, [r2, r3]
        // Apply the alternative RX 1 window frequency, if it is available
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800da60:	189b      	adds	r3, r3, r2
 800da62:	685b      	ldr	r3, [r3, #4]
        frequency = NvmCtx.Channels[rxConfig->Channel].Frequency;
 800da64:	910a      	str	r1, [sp, #40]	; 0x28
        if( NvmCtx.Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800da66:	4283      	cmp	r3, r0
 800da68:	d000      	beq.n	800da6c <RegionEU868RxConfig+0x3c>
 800da6a:	930a      	str	r3, [sp, #40]	; 0x28
            frequency = NvmCtx.Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800da6c:	4b2b      	ldr	r3, [pc, #172]	; (800db1c <RegionEU868RxConfig+0xec>)

    Radio.SetChannel( frequency );
 800da6e:	4e29      	ldr	r6, [pc, #164]	; (800db14 <RegionEU868RxConfig+0xe4>)
    phyDr = DataratesEU868[dr];
 800da70:	3301      	adds	r3, #1
 800da72:	19db      	adds	r3, r3, r7
 800da74:	7fdb      	ldrb	r3, [r3, #31]
    Radio.SetChannel( frequency );
 800da76:	980a      	ldr	r0, [sp, #40]	; 0x28
    phyDr = DataratesEU868[dr];
 800da78:	b25b      	sxtb	r3, r3
 800da7a:	930b      	str	r3, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 800da7c:	68f3      	ldr	r3, [r6, #12]
 800da7e:	930d      	str	r3, [sp, #52]	; 0x34
 800da80:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800da82:	69b6      	ldr	r6, [r6, #24]
 800da84:	7ca3      	ldrb	r3, [r4, #18]
 800da86:	2f07      	cmp	r7, #7
 800da88:	d12d      	bne.n	800dae6 <RegionEU868RxConfig+0xb6>
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800da8a:	9309      	str	r3, [sp, #36]	; 0x24
 800da8c:	2301      	movs	r3, #1
 800da8e:	9305      	str	r3, [sp, #20]
 800da90:	68a3      	ldr	r3, [r4, #8]
 800da92:	2000      	movs	r0, #0
 800da94:	b29b      	uxth	r3, r3
 800da96:	9302      	str	r3, [sp, #8]
 800da98:	2305      	movs	r3, #5
 800da9a:	22fa      	movs	r2, #250	; 0xfa
 800da9c:	9301      	str	r3, [sp, #4]
 800da9e:	4b20      	ldr	r3, [pc, #128]	; (800db20 <RegionEU868RxConfig+0xf0>)
 800daa0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800daa2:	9300      	str	r3, [sp, #0]
 800daa4:	0003      	movs	r3, r0
 800daa6:	0092      	lsls	r2, r2, #2
 800daa8:	434a      	muls	r2, r1
 800daaa:	491e      	ldr	r1, [pc, #120]	; (800db24 <RegionEU868RxConfig+0xf4>)
 800daac:	9008      	str	r0, [sp, #32]
 800daae:	9007      	str	r0, [sp, #28]
 800dab0:	9006      	str	r0, [sp, #24]
 800dab2:	9004      	str	r0, [sp, #16]
 800dab4:	9003      	str	r0, [sp, #12]
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800dab6:	47b0      	blx	r6
    }

    if( rxConfig->RepeaterSupport == true )
 800dab8:	7c62      	ldrb	r2, [r4, #17]
 800daba:	4b18      	ldr	r3, [pc, #96]	; (800db1c <RegionEU868RxConfig+0xec>)
 800dabc:	2a00      	cmp	r2, #0
 800dabe:	d026      	beq.n	800db0e <RegionEU868RxConfig+0xde>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800dac0:	3330      	adds	r3, #48	; 0x30
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800dac2:	5dd9      	ldrb	r1, [r3, r7]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800dac4:	4b13      	ldr	r3, [pc, #76]	; (800db14 <RegionEU868RxConfig+0xe4>)
 800dac6:	310d      	adds	r1, #13
 800dac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800daca:	0028      	movs	r0, r5
 800dacc:	b2c9      	uxtb	r1, r1
 800dace:	930b      	str	r3, [sp, #44]	; 0x2c
 800dad0:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800dad2:	7ce0      	ldrb	r0, [r4, #19]
 800dad4:	003a      	movs	r2, r7
 800dad6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800dad8:	f7ff fd5e 	bl	800d598 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
    return true;
 800dadc:	2001      	movs	r0, #1
    *datarate = (uint8_t) dr;
 800dade:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dae0:	701f      	strb	r7, [r3, #0]
}
 800dae2:	b00f      	add	sp, #60	; 0x3c
 800dae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800dae6:	68a2      	ldr	r2, [r4, #8]
 800dae8:	2501      	movs	r5, #1
 800daea:	b292      	uxth	r2, r2
 800daec:	9309      	str	r3, [sp, #36]	; 0x24
 800daee:	9202      	str	r2, [sp, #8]
 800daf0:	2300      	movs	r3, #0
 800daf2:	2208      	movs	r2, #8
 800daf4:	9307      	str	r3, [sp, #28]
 800daf6:	9306      	str	r3, [sp, #24]
 800daf8:	9305      	str	r3, [sp, #20]
 800dafa:	9304      	str	r3, [sp, #16]
 800dafc:	9303      	str	r3, [sp, #12]
 800dafe:	9201      	str	r2, [sp, #4]
 800db00:	9300      	str	r3, [sp, #0]
 800db02:	0028      	movs	r0, r5
 800db04:	002b      	movs	r3, r5
 800db06:	78a1      	ldrb	r1, [r4, #2]
 800db08:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db0a:	9508      	str	r5, [sp, #32]
 800db0c:	e7d3      	b.n	800dab6 <RegionEU868RxConfig+0x86>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800db0e:	3328      	adds	r3, #40	; 0x28
 800db10:	e7d7      	b.n	800dac2 <RegionEU868RxConfig+0x92>
 800db12:	46c0      	nop			; (mov r8, r8)
 800db14:	080117e4 	.word	0x080117e4
 800db18:	20000d00 	.word	0x20000d00
 800db1c:	08011694 	.word	0x08011694
 800db20:	00014585 	.word	0x00014585
 800db24:	0000c350 	.word	0x0000c350

0800db28 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800db28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db2a:	0004      	movs	r4, r0
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800db2c:	2001      	movs	r0, #1
{
 800db2e:	b091      	sub	sp, #68	; 0x44
 800db30:	920f      	str	r2, [sp, #60]	; 0x3c
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800db32:	220c      	movs	r2, #12
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800db34:	4b3c      	ldr	r3, [pc, #240]	; (800dc28 <RegionEU868TxConfig+0x100>)
 800db36:	5620      	ldrsb	r0, [r4, r0]
 800db38:	3301      	adds	r3, #1
{
 800db3a:	910e      	str	r1, [sp, #56]	; 0x38
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800db3c:	181b      	adds	r3, r3, r0
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800db3e:	7821      	ldrb	r1, [r4, #0]
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800db40:	7fdb      	ldrb	r3, [r3, #31]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800db42:	434a      	muls	r2, r1
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800db44:	b25b      	sxtb	r3, r3
 800db46:	930a      	str	r3, [sp, #40]	; 0x28
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800db48:	4b38      	ldr	r3, [pc, #224]	; (800dc2c <RegionEU868TxConfig+0x104>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800db4a:	2502      	movs	r5, #2
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800db4c:	189a      	adds	r2, r3, r2
 800db4e:	7a51      	ldrb	r1, [r2, #9]
 800db50:	2214      	movs	r2, #20
 800db52:	434a      	muls	r2, r1
 800db54:	189b      	adds	r3, r3, r2
 800db56:	33c2      	adds	r3, #194	; 0xc2
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	5765      	ldrsb	r5, [r4, r5]
 800db5c:	1c19      	adds	r1, r3, #0
 800db5e:	b25b      	sxtb	r3, r3
 800db60:	78a2      	ldrb	r2, [r4, #2]
 800db62:	42ab      	cmp	r3, r5
 800db64:	da00      	bge.n	800db68 <RegionEU868TxConfig+0x40>
 800db66:	1c11      	adds	r1, r2, #0
 800db68:	b24b      	sxtb	r3, r1
 800db6a:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 800db6c:	f7ff fd4a 	bl	800d604 <GetBandwidth>
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800db70:	68a2      	ldr	r2, [r4, #8]
 800db72:	6861      	ldr	r1, [r4, #4]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 800db74:	900c      	str	r0, [sp, #48]	; 0x30
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800db76:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800db78:	f7ff fc5c 	bl	800d434 <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800db7c:	230c      	movs	r3, #12
 800db7e:	4d2c      	ldr	r5, [pc, #176]	; (800dc30 <RegionEU868TxConfig+0x108>)
 800db80:	7822      	ldrb	r2, [r4, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800db82:	0007      	movs	r7, r0
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800db84:	4353      	muls	r3, r2
 800db86:	68ea      	ldr	r2, [r5, #12]
 800db88:	920d      	str	r2, [sp, #52]	; 0x34
 800db8a:	4a28      	ldr	r2, [pc, #160]	; (800dc2c <RegionEU868TxConfig+0x104>)
 800db8c:	5898      	ldr	r0, [r3, r2]
 800db8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db90:	4798      	blx	r3

    if( txConfig->Datarate == DR_7 )
 800db92:	69eb      	ldr	r3, [r5, #28]
 800db94:	2201      	movs	r2, #1
 800db96:	930d      	str	r3, [sp, #52]	; 0x34
 800db98:	23fa      	movs	r3, #250	; 0xfa
 800db9a:	2500      	movs	r5, #0
 800db9c:	56a2      	ldrsb	r2, [r4, r2]
 800db9e:	011b      	lsls	r3, r3, #4
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800dba0:	9308      	str	r3, [sp, #32]
 800dba2:	9507      	str	r5, [sp, #28]
 800dba4:	9506      	str	r5, [sp, #24]
 800dba6:	9505      	str	r5, [sp, #20]
    if( txConfig->Datarate == DR_7 )
 800dba8:	2a07      	cmp	r2, #7
 800dbaa:	d12c      	bne.n	800dc06 <RegionEU868TxConfig+0xde>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800dbac:	2301      	movs	r3, #1
 800dbae:	9304      	str	r3, [sp, #16]
 800dbb0:	3304      	adds	r3, #4
 800dbb2:	9302      	str	r3, [sp, #8]
 800dbb4:	23fa      	movs	r3, #250	; 0xfa
 800dbb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbb8:	009b      	lsls	r3, r3, #2
 800dbba:	4353      	muls	r3, r2
 800dbbc:	0039      	movs	r1, r7
 800dbbe:	9300      	str	r3, [sp, #0]
 800dbc0:	0028      	movs	r0, r5
 800dbc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbc4:	4a1b      	ldr	r2, [pc, #108]	; (800dc34 <RegionEU868TxConfig+0x10c>)
 800dbc6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800dbc8:	9503      	str	r5, [sp, #12]
 800dbca:	9501      	str	r5, [sp, #4]
 800dbcc:	47b0      	blx	r6
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800dbce:	230c      	movs	r3, #12
 800dbd0:	2101      	movs	r1, #1
 800dbd2:	7822      	ldrb	r2, [r4, #0]
 800dbd4:	5661      	ldrsb	r1, [r4, r1]
 800dbd6:	4353      	muls	r3, r2
 800dbd8:	4a14      	ldr	r2, [pc, #80]	; (800dc2c <RegionEU868TxConfig+0x104>)
 800dbda:	5898      	ldr	r0, [r3, r2]
 800dbdc:	f7ff fd06 	bl	800d5ec <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800dbe0:	2001      	movs	r0, #1
 800dbe2:	89a1      	ldrh	r1, [r4, #12]
 800dbe4:	5620      	ldrsb	r0, [r4, r0]
 800dbe6:	f7ff fd21 	bl	800d62c <GetTimeOnAir>
 800dbea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dbec:	6018      	str	r0, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800dbee:	4b10      	ldr	r3, [pc, #64]	; (800dc30 <RegionEU868TxConfig+0x108>)
 800dbf0:	0028      	movs	r0, r5
 800dbf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbf4:	7b21      	ldrb	r1, [r4, #12]
 800dbf6:	930a      	str	r3, [sp, #40]	; 0x28
 800dbf8:	4798      	blx	r3

    *txPower = txPowerLimited;
    return true;
}
 800dbfa:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
 800dbfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dbfe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc00:	701a      	strb	r2, [r3, #0]
}
 800dc02:	b011      	add	sp, #68	; 0x44
 800dc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800dc06:	2308      	movs	r3, #8
 800dc08:	2601      	movs	r6, #1
 800dc0a:	9302      	str	r3, [sp, #8]
 800dc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc0e:	002a      	movs	r2, r5
 800dc10:	9503      	str	r5, [sp, #12]
 800dc12:	9300      	str	r3, [sp, #0]
 800dc14:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800dc16:	0039      	movs	r1, r7
 800dc18:	0030      	movs	r0, r6
 800dc1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dc1c:	9604      	str	r6, [sp, #16]
 800dc1e:	9601      	str	r6, [sp, #4]
 800dc20:	47a8      	blx	r5
        modem = MODEM_LORA;
 800dc22:	0035      	movs	r5, r6
 800dc24:	e7d3      	b.n	800dbce <RegionEU868TxConfig+0xa6>
 800dc26:	46c0      	nop			; (mov r8, r8)
 800dc28:	08011694 	.word	0x08011694
 800dc2c:	20000d00 	.word	0x20000d00
 800dc30:	080117e4 	.word	0x080117e4
 800dc34:	000061a8 	.word	0x000061a8

0800dc38 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800dc38:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800dc3a:	2700      	movs	r7, #0
    uint8_t status = 0x07;
 800dc3c:	2507      	movs	r5, #7
{
 800dc3e:	b093      	sub	sp, #76	; 0x4c
 800dc40:	9103      	str	r1, [sp, #12]
 800dc42:	9204      	str	r2, [sp, #16]
 800dc44:	0004      	movs	r4, r0
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800dc46:	2206      	movs	r2, #6
 800dc48:	2100      	movs	r1, #0
 800dc4a:	a808      	add	r0, sp, #32
{
 800dc4c:	9305      	str	r3, [sp, #20]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800dc4e:	f002 fa70 	bl	8010132 <memset>
    uint16_t chMask = 0;
 800dc52:	ab06      	add	r3, sp, #24
 800dc54:	80df      	strh	r7, [r3, #6]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800dc56:	7a23      	ldrb	r3, [r4, #8]
 800dc58:	42bb      	cmp	r3, r7
 800dc5a:	d906      	bls.n	800dc6a <RegionEU868LinkAdrReq+0x32>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800dc5c:	6863      	ldr	r3, [r4, #4]
 800dc5e:	a908      	add	r1, sp, #32
 800dc60:	19d8      	adds	r0, r3, r7
 800dc62:	f7ff fb4d 	bl	800d300 <RegionCommonParseLinkAdrReq>

        if( nextIndex == 0 )
 800dc66:	2800      	cmp	r0, #0
 800dc68:	d141      	bne.n	800dcee <RegionEU868LinkAdrReq+0xb6>
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800dc6a:	a80a      	add	r0, sp, #40	; 0x28
 800dc6c:	7105      	strb	r5, [r0, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800dc6e:	7aa3      	ldrb	r3, [r4, #10]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800dc70:	ad08      	add	r5, sp, #32
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800dc72:	7143      	strb	r3, [r0, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800dc74:	786b      	ldrb	r3, [r5, #1]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800dc76:	220a      	movs	r2, #10
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800dc78:	7183      	strb	r3, [r0, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800dc7a:	78ab      	ldrb	r3, [r5, #2]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800dc7c:	a906      	add	r1, sp, #24
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800dc7e:	71c3      	strb	r3, [r0, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800dc80:	782b      	ldrb	r3, [r5, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800dc82:	1852      	adds	r2, r2, r1
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800dc84:	7203      	strb	r3, [r0, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800dc86:	7ae3      	ldrb	r3, [r4, #11]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800dc88:	2109      	movs	r1, #9
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800dc8a:	7243      	strb	r3, [r0, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800dc8c:	7b23      	ldrb	r3, [r4, #12]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800dc8e:	4e38      	ldr	r6, [pc, #224]	; (800dd70 <RegionEU868LinkAdrReq+0x138>)
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800dc90:	7283      	strb	r3, [r0, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800dc92:	7b63      	ldrb	r3, [r4, #13]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800dc94:	6186      	str	r6, [r0, #24]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800dc96:	72c3      	strb	r3, [r0, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800dc98:	2310      	movs	r3, #16
 800dc9a:	7303      	strb	r3, [r0, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800dc9c:	ab06      	add	r3, sp, #24
 800dc9e:	3306      	adds	r3, #6
 800dca0:	6103      	str	r3, [r0, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800dca2:	23e0      	movs	r3, #224	; 0xe0
 800dca4:	00db      	lsls	r3, r3, #3
 800dca6:	8283      	strh	r3, [r0, #20]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800dca8:	2307      	movs	r3, #7
 800dcaa:	8383      	strh	r3, [r0, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800dcac:	6823      	ldr	r3, [r4, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800dcae:	ac06      	add	r4, sp, #24
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800dcb0:	930a      	str	r3, [sp, #40]	; 0x28
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800dcb2:	1909      	adds	r1, r1, r4
 800dcb4:	002b      	movs	r3, r5
 800dcb6:	f7ff fb3e 	bl	800d336 <RegionCommonLinkAdrReqVerifyParams>
 800dcba:	0004      	movs	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800dcbc:	2807      	cmp	r0, #7
 800dcbe:	d108      	bne.n	800dcd2 <RegionEU868LinkAdrReq+0x9a>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) NvmCtx.ChannelsMask, 0, sizeof( NvmCtx.ChannelsMask ) );
 800dcc0:	2202      	movs	r2, #2
 800dcc2:	2100      	movs	r1, #0
 800dcc4:	482b      	ldr	r0, [pc, #172]	; (800dd74 <RegionEU868LinkAdrReq+0x13c>)
 800dcc6:	f000 fa3d 	bl	800e144 <memset1>
        // Update the channels mask
        NvmCtx.ChannelsMask[0] = chMask;
 800dcca:	ab06      	add	r3, sp, #24
 800dccc:	88db      	ldrh	r3, [r3, #6]
 800dcce:	36fe      	adds	r6, #254	; 0xfe
 800dcd0:	8773      	strh	r3, [r6, #58]	; 0x3a
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
 800dcd2:	0020      	movs	r0, r4
    *drOut = linkAdrParams.Datarate;
 800dcd4:	786b      	ldrb	r3, [r5, #1]
 800dcd6:	9a03      	ldr	r2, [sp, #12]
 800dcd8:	7013      	strb	r3, [r2, #0]
    *txPowOut = linkAdrParams.TxPower;
 800dcda:	78ab      	ldrb	r3, [r5, #2]
 800dcdc:	9a04      	ldr	r2, [sp, #16]
 800dcde:	7013      	strb	r3, [r2, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800dce0:	782b      	ldrb	r3, [r5, #0]
 800dce2:	9a05      	ldr	r2, [sp, #20]
 800dce4:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800dce6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800dce8:	701f      	strb	r7, [r3, #0]
}
 800dcea:	b013      	add	sp, #76	; 0x4c
 800dcec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        chMask = linkAdrParams.ChMask;
 800dcee:	ab06      	add	r3, sp, #24
 800dcf0:	899b      	ldrh	r3, [r3, #12]
 800dcf2:	aa06      	add	r2, sp, #24
 800dcf4:	80d3      	strh	r3, [r2, #6]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800dcf6:	aa06      	add	r2, sp, #24
        bytesProcessed += nextIndex;
 800dcf8:	183f      	adds	r7, r7, r0
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800dcfa:	7ad0      	ldrb	r0, [r2, #11]
        bytesProcessed += nextIndex;
 800dcfc:	b2ff      	uxtb	r7, r7
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	d122      	bne.n	800dd48 <RegionEU868LinkAdrReq+0x110>
            status &= 0xFE; // Channel mask KO
 800dd02:	2506      	movs	r5, #6
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d0a6      	beq.n	800dc56 <RegionEU868LinkAdrReq+0x1e>
                        status &= 0xFE; // Channel mask KO
 800dd08:	2606      	movs	r6, #6
 800dd0a:	4a19      	ldr	r2, [pc, #100]	; (800dd70 <RegionEU868LinkAdrReq+0x138>)
{
 800dd0c:	2507      	movs	r5, #7
 800dd0e:	9201      	str	r2, [sp, #4]
 800dd10:	2200      	movs	r2, #0
                        status &= 0xFE; // Channel mask KO
 800dd12:	46b4      	mov	ip, r6
{
 800dd14:	9202      	str	r2, [sp, #8]
                if( linkAdrParams.ChMaskCtrl == 6 )
 800dd16:	2806      	cmp	r0, #6
 800dd18:	d11f      	bne.n	800dd5a <RegionEU868LinkAdrReq+0x122>
                    if( NvmCtx.Channels[i].Frequency != 0 )
 800dd1a:	9901      	ldr	r1, [sp, #4]
 800dd1c:	680e      	ldr	r6, [r1, #0]
 800dd1e:	2e00      	cmp	r6, #0
 800dd20:	d005      	beq.n	800dd2e <RegionEU868LinkAdrReq+0xf6>
                        chMask |= 1 << i;
 800dd22:	2601      	movs	r6, #1
 800dd24:	4096      	lsls	r6, r2
 800dd26:	2101      	movs	r1, #1
 800dd28:	4333      	orrs	r3, r6
 800dd2a:	b29b      	uxth	r3, r3
 800dd2c:	9102      	str	r1, [sp, #8]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800dd2e:	9901      	ldr	r1, [sp, #4]
 800dd30:	3201      	adds	r2, #1
 800dd32:	310c      	adds	r1, #12
 800dd34:	9101      	str	r1, [sp, #4]
 800dd36:	2a10      	cmp	r2, #16
 800dd38:	d1ed      	bne.n	800dd16 <RegionEU868LinkAdrReq+0xde>
 800dd3a:	9a02      	ldr	r2, [sp, #8]
 800dd3c:	2a00      	cmp	r2, #0
 800dd3e:	d100      	bne.n	800dd42 <RegionEU868LinkAdrReq+0x10a>
 800dd40:	e789      	b.n	800dc56 <RegionEU868LinkAdrReq+0x1e>
 800dd42:	aa06      	add	r2, sp, #24
 800dd44:	80d3      	strh	r3, [r2, #6]
 800dd46:	e786      	b.n	800dc56 <RegionEU868LinkAdrReq+0x1e>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800dd48:	1e42      	subs	r2, r0, #1
            status &= 0xFE; // Channel mask KO
 800dd4a:	2506      	movs	r5, #6
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800dd4c:	2a04      	cmp	r2, #4
 800dd4e:	d800      	bhi.n	800dd52 <RegionEU868LinkAdrReq+0x11a>
 800dd50:	e781      	b.n	800dc56 <RegionEU868LinkAdrReq+0x1e>
 800dd52:	42a8      	cmp	r0, r5
 800dd54:	d000      	beq.n	800dd58 <RegionEU868LinkAdrReq+0x120>
 800dd56:	e77e      	b.n	800dc56 <RegionEU868LinkAdrReq+0x1e>
 800dd58:	e7d6      	b.n	800dd08 <RegionEU868LinkAdrReq+0xd0>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800dd5a:	001e      	movs	r6, r3
 800dd5c:	2101      	movs	r1, #1
 800dd5e:	4116      	asrs	r6, r2
 800dd60:	420e      	tst	r6, r1
 800dd62:	d0e4      	beq.n	800dd2e <RegionEU868LinkAdrReq+0xf6>
 800dd64:	9901      	ldr	r1, [sp, #4]
 800dd66:	6809      	ldr	r1, [r1, #0]
 800dd68:	2900      	cmp	r1, #0
 800dd6a:	d1e0      	bne.n	800dd2e <RegionEU868LinkAdrReq+0xf6>
                        status &= 0xFE; // Channel mask KO
 800dd6c:	4665      	mov	r5, ip
 800dd6e:	e7de      	b.n	800dd2e <RegionEU868LinkAdrReq+0xf6>
 800dd70:	20000d00 	.word	0x20000d00
 800dd74:	20000e38 	.word	0x20000e38

0800dd78 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800dd78:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t status = 0x07;
    uint8_t band = 0;
 800dd7a:	466b      	mov	r3, sp
 800dd7c:	2600      	movs	r6, #0
 800dd7e:	1dd9      	adds	r1, r3, #7
{
 800dd80:	0005      	movs	r5, r0

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800dd82:	6840      	ldr	r0, [r0, #4]
    uint8_t band = 0;
 800dd84:	700e      	strb	r6, [r1, #0]
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800dd86:	f7ff fc7d 	bl	800d684 <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
 800dd8a:	0004      	movs	r4, r0
 800dd8c:	1e60      	subs	r0, r4, #1
 800dd8e:	4184      	sbcs	r4, r0
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800dd90:	2000      	movs	r0, #0
 800dd92:	2207      	movs	r2, #7
 800dd94:	0031      	movs	r1, r6
 800dd96:	5628      	ldrsb	r0, [r5, r0]
        status &= 0xFE; // Channel frequency KO
 800dd98:	3406      	adds	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800dd9a:	f7ff f9b7 	bl	800d10c <RegionCommonValueInRange>
 800dd9e:	42b0      	cmp	r0, r6
 800dda0:	d101      	bne.n	800dda6 <RegionEU868RxParamSetupReq+0x2e>
    {
        status &= 0xFD; // Datarate KO
 800dda2:	2302      	movs	r3, #2
 800dda4:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800dda6:	2001      	movs	r0, #1
 800dda8:	2205      	movs	r2, #5
 800ddaa:	2100      	movs	r1, #0
 800ddac:	5628      	ldrsb	r0, [r5, r0]
 800ddae:	f7ff f9ad 	bl	800d10c <RegionCommonValueInRange>
 800ddb2:	2800      	cmp	r0, #0
 800ddb4:	d101      	bne.n	800ddba <RegionEU868RxParamSetupReq+0x42>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800ddb6:	2304      	movs	r3, #4
 800ddb8:	439c      	bics	r4, r3
    }

    return status;
}
 800ddba:	0020      	movs	r0, r4
 800ddbc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800ddbe <RegionEU868TxParamSetupReq>:
    return status;
}

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    return -1;
 800ddbe:	2001      	movs	r0, #1
}
 800ddc0:	4240      	negs	r0, r0
 800ddc2:	4770      	bx	lr

0800ddc4 <RegionEU868DlChannelReq>:

uint8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800ddc4:	b513      	push	{r0, r1, r4, lr}
    uint8_t status = 0x03;
    uint8_t band = 0;
 800ddc6:	466b      	mov	r3, sp
 800ddc8:	1dd9      	adds	r1, r3, #7
 800ddca:	2300      	movs	r3, #0
{
 800ddcc:	0004      	movs	r4, r0

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800ddce:	6840      	ldr	r0, [r0, #4]
    uint8_t band = 0;
 800ddd0:	700b      	strb	r3, [r1, #0]
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800ddd2:	f7ff fc57 	bl	800d684 <VerifyRfFreq>
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800ddd6:	220c      	movs	r2, #12
        status &= 0xFE;
 800ddd8:	1e43      	subs	r3, r0, #1
 800ddda:	4198      	sbcs	r0, r3
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800dddc:	7821      	ldrb	r1, [r4, #0]
 800ddde:	4b08      	ldr	r3, [pc, #32]	; (800de00 <RegionEU868DlChannelReq+0x3c>)
 800dde0:	434a      	muls	r2, r1
 800dde2:	58d1      	ldr	r1, [r2, r3]
        status &= 0xFE;
 800dde4:	3002      	adds	r0, #2
    if( NvmCtx.Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800dde6:	2900      	cmp	r1, #0
 800dde8:	d102      	bne.n	800ddf0 <RegionEU868DlChannelReq+0x2c>
    {
        status &= 0xFD;
 800ddea:	2302      	movs	r3, #2
 800ddec:	4398      	bics	r0, r3
    {
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

    return status;
}
 800ddee:	bd16      	pop	{r1, r2, r4, pc}
    if( status == 0x03 )
 800ddf0:	2803      	cmp	r0, #3
 800ddf2:	d103      	bne.n	800ddfc <RegionEU868DlChannelReq+0x38>
        NvmCtx.Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800ddf4:	189b      	adds	r3, r3, r2
 800ddf6:	6862      	ldr	r2, [r4, #4]
 800ddf8:	605a      	str	r2, [r3, #4]
 800ddfa:	e7f8      	b.n	800ddee <RegionEU868DlChannelReq+0x2a>
 800ddfc:	2002      	movs	r0, #2
 800ddfe:	e7f6      	b.n	800ddee <RegionEU868DlChannelReq+0x2a>
 800de00:	20000d00 	.word	0x20000d00

0800de04 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    return currentDr;
}
 800de04:	4770      	bx	lr
	...

0800de08 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800de08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de0a:	b099      	sub	sp, #100	; 0x64
 800de0c:	9305      	str	r3, [sp, #20]
    uint8_t nbEnabledChannels = 0;
 800de0e:	230a      	movs	r3, #10
 800de10:	2500      	movs	r5, #0
{
 800de12:	9204      	str	r2, [sp, #16]
    uint8_t nbEnabledChannels = 0;
 800de14:	aa04      	add	r2, sp, #16
 800de16:	189b      	adds	r3, r3, r2
 800de18:	701d      	strb	r5, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 800de1a:	230b      	movs	r3, #11
{
 800de1c:	9103      	str	r1, [sp, #12]
    uint8_t nbRestrictedChannels = 0;
 800de1e:	189b      	adds	r3, r3, r2
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800de20:	0029      	movs	r1, r5
 800de22:	220c      	movs	r2, #12
{
 800de24:	0004      	movs	r4, r0
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800de26:	a808      	add	r0, sp, #32
    uint8_t nbRestrictedChannels = 0;
 800de28:	701d      	strb	r5, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800de2a:	9507      	str	r5, [sp, #28]
 800de2c:	f002 f981 	bl	8010132 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    if( RegionCommonCountChannels( NvmCtx.ChannelsMask, 0, 1 ) == 0 )
 800de30:	2201      	movs	r2, #1
 800de32:	0029      	movs	r1, r5
 800de34:	4829      	ldr	r0, [pc, #164]	; (800dedc <RegionEU868NextChannel+0xd4>)
 800de36:	f7ff f987 	bl	800d148 <RegionCommonCountChannels>
 800de3a:	42a8      	cmp	r0, r5
 800de3c:	d105      	bne.n	800de4a <RegionEU868NextChannel+0x42>
    { // Reactivate default channels
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800de3e:	2207      	movs	r2, #7
 800de40:	4b27      	ldr	r3, [pc, #156]	; (800dee0 <RegionEU868NextChannel+0xd8>)
 800de42:	33fe      	adds	r3, #254	; 0xfe
 800de44:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 800de46:	430a      	orrs	r2, r1
 800de48:	875a      	strh	r2, [r3, #58]	; 0x3a
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800de4a:	2008      	movs	r0, #8
    countChannelsParams.Joined = nextChanParams->Joined;
 800de4c:	7a63      	ldrb	r3, [r4, #9]
 800de4e:	ae0b      	add	r6, sp, #44	; 0x2c
 800de50:	7033      	strb	r3, [r6, #0]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 800de52:	4b22      	ldr	r3, [pc, #136]	; (800dedc <RegionEU868NextChannel+0xd4>)
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800de54:	5620      	ldrsb	r0, [r4, r0]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMask;
 800de56:	930c      	str	r3, [sp, #48]	; 0x30
    countChannelsParams.Channels = NvmCtx.Channels;
 800de58:	4b21      	ldr	r3, [pc, #132]	; (800dee0 <RegionEU868NextChannel+0xd8>)
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800de5a:	7070      	strb	r0, [r6, #1]
    countChannelsParams.Channels = NvmCtx.Channels;
 800de5c:	930d      	str	r3, [sp, #52]	; 0x34
    countChannelsParams.Bands = NvmCtx.Bands;
 800de5e:	4b21      	ldr	r3, [pc, #132]	; (800dee4 <RegionEU868NextChannel+0xdc>)
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
    countChannelsParams.JoinChannels = EU868_JOIN_CHANNELS;

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800de60:	ad10      	add	r5, sp, #64	; 0x40
    countChannelsParams.Bands = NvmCtx.Bands;
 800de62:	930e      	str	r3, [sp, #56]	; 0x38
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800de64:	4b20      	ldr	r3, [pc, #128]	; (800dee8 <RegionEU868NextChannel+0xe0>)
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800de66:	0022      	movs	r2, r4
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800de68:	930f      	str	r3, [sp, #60]	; 0x3c
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800de6a:	6823      	ldr	r3, [r4, #0]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800de6c:	320c      	adds	r2, #12
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800de6e:	9310      	str	r3, [sp, #64]	; 0x40
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800de70:	6863      	ldr	r3, [r4, #4]
 800de72:	9311      	str	r3, [sp, #68]	; 0x44
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800de74:	7aa3      	ldrb	r3, [r4, #10]
 800de76:	722b      	strb	r3, [r5, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800de78:	2306      	movs	r3, #6
 800de7a:	726b      	strb	r3, [r5, #9]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800de7c:	ab13      	add	r3, sp, #76	; 0x4c
 800de7e:	ca82      	ldmia	r2!, {r1, r7}
 800de80:	c382      	stmia	r3!, {r1, r7}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800de82:	7d23      	ldrb	r3, [r4, #20]
 800de84:	752b      	strb	r3, [r5, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800de86:	8ae1      	ldrh	r1, [r4, #22]
 800de88:	f7ff fbd0 	bl	800d62c <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800de8c:	61ee      	str	r6, [r5, #28]

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800de8e:	260a      	movs	r6, #10
 800de90:	ab04      	add	r3, sp, #16
 800de92:	18f6      	adds	r6, r6, r3
 800de94:	9b04      	ldr	r3, [sp, #16]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800de96:	61a8      	str	r0, [r5, #24]
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800de98:	9301      	str	r3, [sp, #4]
 800de9a:	230b      	movs	r3, #11
 800de9c:	aa04      	add	r2, sp, #16
 800de9e:	189b      	adds	r3, r3, r2
 800dea0:	ac07      	add	r4, sp, #28
 800dea2:	0028      	movs	r0, r5
 800dea4:	9300      	str	r3, [sp, #0]
 800dea6:	0022      	movs	r2, r4
 800dea8:	0033      	movs	r3, r6
 800deaa:	9905      	ldr	r1, [sp, #20]
 800deac:	f7ff fb2e 	bl	800d50c <RegionCommonIdentifyChannels>
 800deb0:	1e05      	subs	r5, r0, #0
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800deb2:	d109      	bne.n	800dec8 <RegionEU868NextChannel+0xc0>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800deb4:	7831      	ldrb	r1, [r6, #0]
 800deb6:	3901      	subs	r1, #1
 800deb8:	f000 f912 	bl	800e0e0 <randr>
 800debc:	9a03      	ldr	r2, [sp, #12]
 800debe:	5c23      	ldrb	r3, [r4, r0]
 800dec0:	7013      	strb	r3, [r2, #0]
    {
        // Datarate not supported by any channel, restore defaults
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
    }
    return status;
}
 800dec2:	0028      	movs	r0, r5
 800dec4:	b019      	add	sp, #100	; 0x64
 800dec6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800dec8:	280c      	cmp	r0, #12
 800deca:	d1fa      	bne.n	800dec2 <RegionEU868NextChannel+0xba>
        NvmCtx.ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800decc:	2207      	movs	r2, #7
 800dece:	4b04      	ldr	r3, [pc, #16]	; (800dee0 <RegionEU868NextChannel+0xd8>)
 800ded0:	33fe      	adds	r3, #254	; 0xfe
 800ded2:	8f59      	ldrh	r1, [r3, #58]	; 0x3a
 800ded4:	430a      	orrs	r2, r1
 800ded6:	875a      	strh	r2, [r3, #58]	; 0x3a
 800ded8:	e7f3      	b.n	800dec2 <RegionEU868NextChannel+0xba>
 800deda:	46c0      	nop			; (mov r8, r8)
 800dedc:	20000e38 	.word	0x20000e38
 800dee0:	20000d00 	.word	0x20000d00
 800dee4:	20000dc0 	.word	0x20000dc0
 800dee8:	00070010 	.word	0x00070010

0800deec <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800deec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    uint8_t band = 0;
 800deee:	2500      	movs	r5, #0
 800def0:	466b      	mov	r3, sp
 800def2:	71dd      	strb	r5, [r3, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800def4:	7906      	ldrb	r6, [r0, #4]
{
 800def6:	0004      	movs	r4, r0

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800def8:	2e02      	cmp	r6, #2
 800defa:	d801      	bhi.n	800df00 <RegionEU868ChannelAdd+0x14>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800defc:	2006      	movs	r0, #6

    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
    NvmCtx.Channels[id].Band = band;
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
}
 800defe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800df00:	2003      	movs	r0, #3
    if( id >= EU868_MAX_NB_CHANNELS )
 800df02:	2e0f      	cmp	r6, #15
 800df04:	d8fb      	bhi.n	800defe <RegionEU868ChannelAdd+0x12>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800df06:	6823      	ldr	r3, [r4, #0]
 800df08:	0029      	movs	r1, r5
 800df0a:	7a18      	ldrb	r0, [r3, #8]
 800df0c:	2207      	movs	r2, #7
 800df0e:	0700      	lsls	r0, r0, #28
 800df10:	1700      	asrs	r0, r0, #28
 800df12:	f7ff f8fb 	bl	800d10c <RegionCommonValueInRange>
 800df16:	0007      	movs	r7, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800df18:	2008      	movs	r0, #8
 800df1a:	6823      	ldr	r3, [r4, #0]
 800df1c:	0029      	movs	r1, r5
 800df1e:	5618      	ldrsb	r0, [r3, r0]
 800df20:	2207      	movs	r2, #7
 800df22:	1100      	asrs	r0, r0, #4
 800df24:	f7ff f8f2 	bl	800d10c <RegionCommonValueInRange>
        drInvalid = true;
 800df28:	2501      	movs	r5, #1
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800df2a:	2800      	cmp	r0, #0
 800df2c:	d002      	beq.n	800df34 <RegionEU868ChannelAdd+0x48>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800df2e:	427d      	negs	r5, r7
 800df30:	417d      	adcs	r5, r7
 800df32:	b2ed      	uxtb	r5, r5
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800df34:	6820      	ldr	r0, [r4, #0]
 800df36:	7a03      	ldrb	r3, [r0, #8]
 800df38:	071a      	lsls	r2, r3, #28
 800df3a:	b25b      	sxtb	r3, r3
 800df3c:	1712      	asrs	r2, r2, #28
 800df3e:	111b      	asrs	r3, r3, #4
 800df40:	429a      	cmp	r2, r3
 800df42:	dd00      	ble.n	800df46 <RegionEU868ChannelAdd+0x5a>
        drInvalid = true;
 800df44:	2501      	movs	r5, #1
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800df46:	466b      	mov	r3, sp
 800df48:	6800      	ldr	r0, [r0, #0]
 800df4a:	1dd9      	adds	r1, r3, #7
 800df4c:	f7ff fb9a 	bl	800d684 <VerifyRfFreq>
 800df50:	2800      	cmp	r0, #0
 800df52:	d103      	bne.n	800df5c <RegionEU868ChannelAdd+0x70>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800df54:	2004      	movs	r0, #4
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800df56:	2d00      	cmp	r5, #0
 800df58:	d0d1      	beq.n	800defe <RegionEU868ChannelAdd+0x12>
 800df5a:	e7cf      	b.n	800defc <RegionEU868ChannelAdd+0x10>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800df5c:	2005      	movs	r0, #5
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800df5e:	2d00      	cmp	r5, #0
 800df60:	d1cd      	bne.n	800defe <RegionEU868ChannelAdd+0x12>
    memcpy1( ( uint8_t* ) &(NvmCtx.Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( NvmCtx.Channels[id] ) );
 800df62:	220c      	movs	r2, #12
 800df64:	0017      	movs	r7, r2
 800df66:	4377      	muls	r7, r6
 800df68:	4b08      	ldr	r3, [pc, #32]	; (800df8c <RegionEU868ChannelAdd+0xa0>)
 800df6a:	6821      	ldr	r1, [r4, #0]
 800df6c:	18ff      	adds	r7, r7, r3
 800df6e:	0038      	movs	r0, r7
 800df70:	f000 f8d2 	bl	800e118 <memcpy1>
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800df74:	2101      	movs	r1, #1
    NvmCtx.Channels[id].Band = band;
 800df76:	466b      	mov	r3, sp
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800df78:	40b1      	lsls	r1, r6
    NvmCtx.Channels[id].Band = band;
 800df7a:	79db      	ldrb	r3, [r3, #7]
    return LORAMAC_STATUS_OK;
 800df7c:	0028      	movs	r0, r5
    NvmCtx.Channels[id].Band = band;
 800df7e:	727b      	strb	r3, [r7, #9]
    NvmCtx.ChannelsMask[0] |= ( 1 << id );
 800df80:	4b02      	ldr	r3, [pc, #8]	; (800df8c <RegionEU868ChannelAdd+0xa0>)
 800df82:	33fe      	adds	r3, #254	; 0xfe
 800df84:	8f5a      	ldrh	r2, [r3, #58]	; 0x3a
 800df86:	430a      	orrs	r2, r1
 800df88:	875a      	strh	r2, [r3, #58]	; 0x3a
    return LORAMAC_STATUS_OK;
 800df8a:	e7b8      	b.n	800defe <RegionEU868ChannelAdd+0x12>
 800df8c:	20000d00 	.word	0x20000d00

0800df90 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 800df90:	b510      	push	{r4, lr}
    uint8_t id = channelRemove->ChannelId;
 800df92:	7804      	ldrb	r4, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
    {
        return false;
 800df94:	2100      	movs	r1, #0
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800df96:	2c02      	cmp	r4, #2
 800df98:	d90c      	bls.n	800dfb4 <RegionEU868ChannelsRemove+0x24>
    }

    // Remove the channel from the list of channels
    NvmCtx.Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800df9a:	220c      	movs	r2, #12
 800df9c:	0013      	movs	r3, r2
 800df9e:	4363      	muls	r3, r4
 800dfa0:	4805      	ldr	r0, [pc, #20]	; (800dfb8 <RegionEU868ChannelsRemove+0x28>)
 800dfa2:	18c0      	adds	r0, r0, r3
 800dfa4:	f002 f8c5 	bl	8010132 <memset>

    return RegionCommonChanDisable( NvmCtx.ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800dfa8:	0021      	movs	r1, r4
 800dfaa:	2210      	movs	r2, #16
 800dfac:	4803      	ldr	r0, [pc, #12]	; (800dfbc <RegionEU868ChannelsRemove+0x2c>)
 800dfae:	f7ff f8b7 	bl	800d120 <RegionCommonChanDisable>
 800dfb2:	0001      	movs	r1, r0
}
 800dfb4:	0008      	movs	r0, r1
 800dfb6:	bd10      	pop	{r4, pc}
 800dfb8:	20000d00 	.word	0x20000d00
 800dfbc:	20000e38 	.word	0x20000e38

0800dfc0 <RegionEU868ApplyCFList>:
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800dfc0:	2350      	movs	r3, #80	; 0x50
{
 800dfc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dfc4:	b087      	sub	sp, #28
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800dfc6:	ac03      	add	r4, sp, #12
 800dfc8:	7223      	strb	r3, [r4, #8]
    if( applyCFList->Size != 16 )
 800dfca:	7903      	ldrb	r3, [r0, #4]
{
 800dfcc:	0006      	movs	r6, r0
    if( applyCFList->Size != 16 )
 800dfce:	2b10      	cmp	r3, #16
 800dfd0:	d12e      	bne.n	800e030 <RegionEU868ApplyCFList+0x70>
    if( applyCFList->Payload[15] != 0 )
 800dfd2:	6803      	ldr	r3, [r0, #0]
 800dfd4:	7bdd      	ldrb	r5, [r3, #15]
 800dfd6:	2d00      	cmp	r5, #0
 800dfd8:	d12a      	bne.n	800e030 <RegionEU868ApplyCFList+0x70>
            newChannel.Frequency *= 100;
 800dfda:	2764      	movs	r7, #100	; 0x64
 800dfdc:	1cea      	adds	r2, r5, #3
 800dfde:	b2d2      	uxtb	r2, r2
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800dfe0:	2a07      	cmp	r2, #7
 800dfe2:	d818      	bhi.n	800e016 <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800dfe4:	2003      	movs	r0, #3
 800dfe6:	4368      	muls	r0, r5
 800dfe8:	6833      	ldr	r3, [r6, #0]
 800dfea:	5c19      	ldrb	r1, [r3, r0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800dfec:	1818      	adds	r0, r3, r0
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800dfee:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800dff0:	7843      	ldrb	r3, [r0, #1]
 800dff2:	021b      	lsls	r3, r3, #8
 800dff4:	4319      	orrs	r1, r3
 800dff6:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800dff8:	7883      	ldrb	r3, [r0, #2]
 800dffa:	041b      	lsls	r3, r3, #16
 800dffc:	430b      	orrs	r3, r1
            newChannel.Rx1Frequency = 0;
 800dffe:	2100      	movs	r1, #0
            newChannel.Frequency *= 100;
 800e000:	437b      	muls	r3, r7
            newChannel.Rx1Frequency = 0;
 800e002:	6061      	str	r1, [r4, #4]
            newChannel.Frequency *= 100;
 800e004:	6023      	str	r3, [r4, #0]
        if( newChannel.Frequency != 0 )
 800e006:	428b      	cmp	r3, r1
 800e008:	d10a      	bne.n	800e020 <RegionEU868ApplyCFList+0x60>
            channelRemove.ChannelId = chanIdx;
 800e00a:	466b      	mov	r3, sp
            RegionEU868ChannelsRemove( &channelRemove );
 800e00c:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
 800e00e:	701a      	strb	r2, [r3, #0]
            RegionEU868ChannelsRemove( &channelRemove );
 800e010:	f7ff ffbe 	bl	800df90 <RegionEU868ChannelsRemove>
 800e014:	e009      	b.n	800e02a <RegionEU868ApplyCFList+0x6a>
            newChannel.Frequency = 0;
 800e016:	2300      	movs	r3, #0
 800e018:	6023      	str	r3, [r4, #0]
            newChannel.DrRange.Value = 0;
 800e01a:	7223      	strb	r3, [r4, #8]
            newChannel.Rx1Frequency = 0;
 800e01c:	6063      	str	r3, [r4, #4]
        if( newChannel.Frequency != 0 )
 800e01e:	e7f4      	b.n	800e00a <RegionEU868ApplyCFList+0x4a>
            channelAdd.NewChannel = &newChannel;
 800e020:	a801      	add	r0, sp, #4
 800e022:	9401      	str	r4, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800e024:	7102      	strb	r2, [r0, #4]
            RegionEU868ChannelAdd( &channelAdd );
 800e026:	f7ff ff61 	bl	800deec <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800e02a:	3501      	adds	r5, #1
 800e02c:	2d0d      	cmp	r5, #13
 800e02e:	d1d5      	bne.n	800dfdc <RegionEU868ApplyCFList+0x1c>
}
 800e030:	b007      	add	sp, #28
 800e032:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e034 <RegionEU868NewChannelReq>:
{
 800e034:	b507      	push	{r0, r1, r2, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
 800e036:	6802      	ldr	r2, [r0, #0]
 800e038:	7903      	ldrb	r3, [r0, #4]
 800e03a:	6811      	ldr	r1, [r2, #0]
 800e03c:	2900      	cmp	r1, #0
 800e03e:	d10a      	bne.n	800e056 <RegionEU868NewChannelReq+0x22>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800e040:	466a      	mov	r2, sp
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800e042:	4668      	mov	r0, sp
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800e044:	7013      	strb	r3, [r2, #0]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800e046:	f7ff ffa3 	bl	800df90 <RegionEU868ChannelsRemove>
    uint8_t status = 0x03;
 800e04a:	2303      	movs	r3, #3
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800e04c:	2800      	cmp	r0, #0
 800e04e:	d100      	bne.n	800e052 <RegionEU868NewChannelReq+0x1e>
            status &= 0xFC;
 800e050:	2300      	movs	r3, #0
}
 800e052:	0018      	movs	r0, r3
 800e054:	bd0e      	pop	{r1, r2, r3, pc}
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800e056:	9200      	str	r2, [sp, #0]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800e058:	466a      	mov	r2, sp
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800e05a:	4668      	mov	r0, sp
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800e05c:	7113      	strb	r3, [r2, #4]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800e05e:	f7ff ff45 	bl	800deec <RegionEU868ChannelAdd>
 800e062:	2806      	cmp	r0, #6
 800e064:	d8f4      	bhi.n	800e050 <RegionEU868NewChannelReq+0x1c>
 800e066:	4b02      	ldr	r3, [pc, #8]	; (800e070 <RegionEU868NewChannelReq+0x3c>)
 800e068:	335c      	adds	r3, #92	; 0x5c
 800e06a:	5c1b      	ldrb	r3, [r3, r0]
 800e06c:	e7f1      	b.n	800e052 <RegionEU868NewChannelReq+0x1e>
 800e06e:	46c0      	nop			; (mov r8, r8)
 800e070:	08011694 	.word	0x08011694

0800e074 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800e074:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
    int8_t phyTxPower = 0;
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800e076:	220c      	movs	r2, #12
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800e078:	7801      	ldrb	r1, [r0, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800e07a:	4b10      	ldr	r3, [pc, #64]	; (800e0bc <RegionEU868SetContinuousWave+0x48>)
 800e07c:	434a      	muls	r2, r1
 800e07e:	58d5      	ldr	r5, [r2, r3]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800e080:	189a      	adds	r2, r3, r2
 800e082:	7a51      	ldrb	r1, [r2, #9]
 800e084:	2214      	movs	r2, #20
{
 800e086:	0004      	movs	r4, r0
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800e088:	434a      	muls	r2, r1
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800e08a:	2102      	movs	r1, #2
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800e08c:	189b      	adds	r3, r3, r2
 800e08e:	33c2      	adds	r3, #194	; 0xc2
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	5661      	ldrsb	r1, [r4, r1]
 800e094:	7882      	ldrb	r2, [r0, #2]
 800e096:	1c18      	adds	r0, r3, #0
 800e098:	b25b      	sxtb	r3, r3
 800e09a:	428b      	cmp	r3, r1
 800e09c:	da00      	bge.n	800e0a0 <RegionEU868SetContinuousWave+0x2c>
 800e09e:	1c10      	adds	r0, r2, #0

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800e0a0:	68a2      	ldr	r2, [r4, #8]
 800e0a2:	6861      	ldr	r1, [r4, #4]
 800e0a4:	b240      	sxtb	r0, r0
 800e0a6:	f7ff f9c5 	bl	800d434 <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800e0aa:	4b05      	ldr	r3, [pc, #20]	; (800e0c0 <RegionEU868SetContinuousWave+0x4c>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800e0ac:	0001      	movs	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800e0ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0b0:	0028      	movs	r0, r5
 800e0b2:	89a2      	ldrh	r2, [r4, #12]
 800e0b4:	9301      	str	r3, [sp, #4]
 800e0b6:	4798      	blx	r3
}
 800e0b8:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800e0ba:	46c0      	nop			; (mov r8, r8)
 800e0bc:	20000d00 	.word	0x20000d00
 800e0c0:	080117e4 	.word	0x080117e4

0800e0c4 <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = dr - drOffset;
 800e0c4:	1a8a      	subs	r2, r1, r2
 800e0c6:	b252      	sxtb	r2, r2

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 800e0c8:	1c10      	adds	r0, r2, #0
 800e0ca:	2a00      	cmp	r2, #0
 800e0cc:	da00      	bge.n	800e0d0 <RegionEU868ApplyDrOffset+0xc>
 800e0ce:	2000      	movs	r0, #0
 800e0d0:	b2c0      	uxtb	r0, r0
}
 800e0d2:	4770      	bx	lr

0800e0d4 <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 800e0d4:	4b01      	ldr	r3, [pc, #4]	; (800e0dc <srand1+0x8>)
 800e0d6:	6018      	str	r0, [r3, #0]
}
 800e0d8:	4770      	bx	lr
 800e0da:	46c0      	nop			; (mov r8, r8)
 800e0dc:	20000168 	.word	0x20000168

0800e0e0 <randr>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800e0e0:	4b09      	ldr	r3, [pc, #36]	; (800e108 <randr+0x28>)
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800e0e2:	b570      	push	{r4, r5, r6, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800e0e4:	681a      	ldr	r2, [r3, #0]
{
 800e0e6:	0005      	movs	r5, r0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800e0e8:	4808      	ldr	r0, [pc, #32]	; (800e10c <randr+0x2c>)
{
 800e0ea:	000c      	movs	r4, r1
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800e0ec:	4350      	muls	r0, r2
 800e0ee:	4a08      	ldr	r2, [pc, #32]	; (800e110 <randr+0x30>)
 800e0f0:	4908      	ldr	r1, [pc, #32]	; (800e114 <randr+0x34>)
 800e0f2:	1880      	adds	r0, r0, r2
 800e0f4:	6018      	str	r0, [r3, #0]
 800e0f6:	f7f2 f8bd 	bl	8000274 <__aeabi_uidivmod>
 800e0fa:	0008      	movs	r0, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800e0fc:	1b61      	subs	r1, r4, r5
 800e0fe:	3101      	adds	r1, #1
 800e100:	f7f2 f9a2 	bl	8000448 <__aeabi_idivmod>
 800e104:	1948      	adds	r0, r1, r5
}
 800e106:	bd70      	pop	{r4, r5, r6, pc}
 800e108:	20000168 	.word	0x20000168
 800e10c:	41c64e6d 	.word	0x41c64e6d
 800e110:	00003039 	.word	0x00003039
 800e114:	7fffffff 	.word	0x7fffffff

0800e118 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800e118:	2300      	movs	r3, #0
{
 800e11a:	b510      	push	{r4, lr}
    while( size-- )
 800e11c:	4293      	cmp	r3, r2
 800e11e:	d100      	bne.n	800e122 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800e120:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 800e122:	5ccc      	ldrb	r4, [r1, r3]
 800e124:	54c4      	strb	r4, [r0, r3]
 800e126:	3301      	adds	r3, #1
 800e128:	e7f8      	b.n	800e11c <memcpy1+0x4>

0800e12a <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800e12a:	1e53      	subs	r3, r2, #1
 800e12c:	18c0      	adds	r0, r0, r3
    while( size-- )
 800e12e:	2300      	movs	r3, #0
{
 800e130:	b530      	push	{r4, r5, lr}
    while( size-- )
 800e132:	429a      	cmp	r2, r3
 800e134:	d100      	bne.n	800e138 <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 800e136:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 800e138:	5ccd      	ldrb	r5, [r1, r3]
 800e13a:	425c      	negs	r4, r3
 800e13c:	5505      	strb	r5, [r0, r4]
 800e13e:	3301      	adds	r3, #1
 800e140:	e7f7      	b.n	800e132 <memcpyr+0x8>
	...

0800e144 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800e144:	4b04      	ldr	r3, [pc, #16]	; (800e158 <memset1+0x14>)
 800e146:	3a01      	subs	r2, #1
 800e148:	b292      	uxth	r2, r2
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d100      	bne.n	800e150 <memset1+0xc>
    {
        *dst++ = value;
    }
}
 800e14e:	4770      	bx	lr
        *dst++ = value;
 800e150:	7001      	strb	r1, [r0, #0]
 800e152:	3001      	adds	r0, #1
 800e154:	e7f7      	b.n	800e146 <memset1+0x2>
 800e156:	46c0      	nop			; (mov r8, r8)
 800e158:	0000ffff 	.word	0x0000ffff

0800e15c <RadioCheckRfFrequency>:
}

bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800e15c:	2001      	movs	r0, #1
 800e15e:	4770      	bx	lr

0800e160 <RadioOnTxTimeoutIrq>:
    return (uint32_t) Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

void RadioOnTxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e160:	4b04      	ldr	r3, [pc, #16]	; (800e174 <RadioOnTxTimeoutIrq+0x14>)
{
 800e162:	b510      	push	{r4, lr}
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d003      	beq.n	800e172 <RadioOnTxTimeoutIrq+0x12>
 800e16a:	685b      	ldr	r3, [r3, #4]
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d000      	beq.n	800e172 <RadioOnTxTimeoutIrq+0x12>
    {
        RadioEvents->TxTimeout( );
 800e170:	4798      	blx	r3
    }
}
 800e172:	bd10      	pop	{r4, pc}
 800e174:	20000e3c 	.word	0x20000e3c

0800e178 <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e178:	4b04      	ldr	r3, [pc, #16]	; (800e18c <RadioOnRxTimeoutIrq+0x14>)
{
 800e17a:	b510      	push	{r4, lr}
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d003      	beq.n	800e18a <RadioOnRxTimeoutIrq+0x12>
 800e182:	68db      	ldr	r3, [r3, #12]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d000      	beq.n	800e18a <RadioOnRxTimeoutIrq+0x12>
    {
        RadioEvents->RxTimeout( );
 800e188:	4798      	blx	r3
    }
}
 800e18a:	bd10      	pop	{r4, pc}
 800e18c:	20000e3c 	.word	0x20000e3c

0800e190 <RadioStandby>:
{
 800e190:	b510      	push	{r4, lr}
    SX126xSetStandby( STDBY_RC );
 800e192:	2000      	movs	r0, #0
 800e194:	f000 fd86 	bl	800eca4 <SX126xSetStandby>
}
 800e198:	bd10      	pop	{r4, pc}
	...

0800e19c <RadioGetStatus>:
{
 800e19c:	b510      	push	{r4, lr}
    switch( SX126xGetOperatingMode( ) )
 800e19e:	f000 fd27 	bl	800ebf0 <SX126xGetOperatingMode>
 800e1a2:	1f03      	subs	r3, r0, #4
 800e1a4:	b2db      	uxtb	r3, r3
 800e1a6:	2000      	movs	r0, #0
 800e1a8:	2b03      	cmp	r3, #3
 800e1aa:	d801      	bhi.n	800e1b0 <RadioGetStatus+0x14>
 800e1ac:	4a01      	ldr	r2, [pc, #4]	; (800e1b4 <RadioGetStatus+0x18>)
 800e1ae:	5cd0      	ldrb	r0, [r2, r3]
}
 800e1b0:	bd10      	pop	{r4, pc}
 800e1b2:	46c0      	nop			; (mov r8, r8)
 800e1b4:	080116f8 	.word	0x080116f8

0800e1b8 <RadioSetChannel>:
{
 800e1b8:	b510      	push	{r4, lr}
    SX126xSetRfFrequency( freq );
 800e1ba:	f000 fe93 	bl	800eee4 <SX126xSetRfFrequency>
}
 800e1be:	bd10      	pop	{r4, pc}

0800e1c0 <RadioRead>:
{
 800e1c0:	b510      	push	{r4, lr}
    return SX126xReadRegister( addr );
 800e1c2:	b280      	uxth	r0, r0
 800e1c4:	f001 f88e 	bl	800f2e4 <SX126xReadRegister>
}
 800e1c8:	bd10      	pop	{r4, pc}

0800e1ca <RadioWrite>:
{
 800e1ca:	b510      	push	{r4, lr}
    SX126xWriteRegister( addr, data );
 800e1cc:	b280      	uxth	r0, r0
 800e1ce:	f001 f82d 	bl	800f22c <SX126xWriteRegister>
}
 800e1d2:	bd10      	pop	{r4, pc}

0800e1d4 <RadioSend>:
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800e1d4:	2300      	movs	r3, #0
{
 800e1d6:	b570      	push	{r4, r5, r6, lr}
 800e1d8:	000c      	movs	r4, r1
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800e1da:	4910      	ldr	r1, [pc, #64]	; (800e21c <RadioSend+0x48>)
 800e1dc:	001a      	movs	r2, r3
{
 800e1de:	0005      	movs	r5, r0
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800e1e0:	0008      	movs	r0, r1
 800e1e2:	f000 fe35 	bl	800ee50 <SX126xSetDioIrqParams>
    if( SX126xGetPacketType( ) == PACKET_TYPE_LORA )
 800e1e6:	f000 fd1d 	bl	800ec24 <SX126xGetPacketType>
 800e1ea:	4b0d      	ldr	r3, [pc, #52]	; (800e220 <RadioSend+0x4c>)
 800e1ec:	2801      	cmp	r0, #1
 800e1ee:	d112      	bne.n	800e216 <RadioSend+0x42>
        SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 800e1f0:	73dc      	strb	r4, [r3, #15]
    SX126xSetPacketParams( &SX126x.PacketParams );
 800e1f2:	0018      	movs	r0, r3
 800e1f4:	f000 ffc4 	bl	800f180 <SX126xSetPacketParams>
    SX126xSendPayload( buffer, size, 0 );
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	0028      	movs	r0, r5
 800e1fc:	0021      	movs	r1, r4
 800e1fe:	f001 f965 	bl	800f4cc <SX126xSendPayload>
    TimerSetValue( &TxTimeoutTimer, TxTimeout );
 800e202:	4c08      	ldr	r4, [pc, #32]	; (800e224 <RadioSend+0x50>)
 800e204:	4b08      	ldr	r3, [pc, #32]	; (800e228 <RadioSend+0x54>)
 800e206:	0020      	movs	r0, r4
 800e208:	6859      	ldr	r1, [r3, #4]
 800e20a:	f001 fdcf 	bl	800fdac <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800e20e:	0020      	movs	r0, r4
 800e210:	f001 fd8a 	bl	800fd28 <UTIL_TIMER_Start>
}
 800e214:	bd70      	pop	{r4, r5, r6, pc}
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 800e216:	721c      	strb	r4, [r3, #8]
 800e218:	e7eb      	b.n	800e1f2 <RadioSend+0x1e>
 800e21a:	46c0      	nop			; (mov r8, r8)
 800e21c:	00000201 	.word	0x00000201
 800e220:	200014d0 	.word	0x200014d0
 800e224:	2000150c 	.word	0x2000150c
 800e228:	20000e3c 	.word	0x20000e3c

0800e22c <RadioSleep>:
{
 800e22c:	b510      	push	{r4, lr}
    SX126xSetSleep( params );
 800e22e:	2004      	movs	r0, #4
 800e230:	f000 fd20 	bl	800ec74 <SX126xSetSleep>
    RADIO_DELAY_MS( 2 );
 800e234:	2002      	movs	r0, #2
 800e236:	f7f5 ff75 	bl	8004124 <HAL_Delay>
}
 800e23a:	bd10      	pop	{r4, pc}

0800e23c <RadioSetRxDutyCycle>:
{
 800e23c:	b510      	push	{r4, lr}
    SX126xSetRxDutyCycle( rxTime, sleepTime );
 800e23e:	f000 fd6b 	bl	800ed18 <SX126xSetRxDutyCycle>
}
 800e242:	bd10      	pop	{r4, pc}

0800e244 <RadioStartCad>:
    SX126xSetDioIrqParams( IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800e244:	20c0      	movs	r0, #192	; 0xc0
 800e246:	2300      	movs	r3, #0
{
 800e248:	b510      	push	{r4, lr}
    SX126xSetDioIrqParams( IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_CAD_DONE | IRQ_CAD_ACTIVITY_DETECTED, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800e24a:	0040      	lsls	r0, r0, #1
 800e24c:	001a      	movs	r2, r3
 800e24e:	0001      	movs	r1, r0
 800e250:	f000 fdfe 	bl	800ee50 <SX126xSetDioIrqParams>
    SX126xSetCad( );
 800e254:	f000 fd76 	bl	800ed44 <SX126xSetCad>
}
 800e258:	bd10      	pop	{r4, pc}
	...

0800e25c <RadioSetTxContinuousWave>:
{
 800e25c:	b570      	push	{r4, r5, r6, lr}
 800e25e:	000d      	movs	r5, r1
 800e260:	0014      	movs	r4, r2
    SX126xSetRfFrequency( freq );
 800e262:	f000 fe3f 	bl	800eee4 <SX126xSetRfFrequency>
    SX126xSetRfTxPower( power );
 800e266:	0028      	movs	r0, r5
 800e268:	f001 f8e6 	bl	800f438 <SX126xSetRfTxPower>
    SX126xSetTxContinuousWave( );
 800e26c:	f000 fd76 	bl	800ed5c <SX126xSetTxContinuousWave>
    uint32_t timeout = ( uint32_t )time * 1000;
 800e270:	21fa      	movs	r1, #250	; 0xfa
 800e272:	0089      	lsls	r1, r1, #2
 800e274:	4361      	muls	r1, r4
    TimerSetValue( &TxTimeoutTimer, timeout );
 800e276:	4c04      	ldr	r4, [pc, #16]	; (800e288 <RadioSetTxContinuousWave+0x2c>)
 800e278:	0020      	movs	r0, r4
 800e27a:	f001 fd97 	bl	800fdac <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800e27e:	0020      	movs	r0, r4
 800e280:	f001 fd52 	bl	800fd28 <UTIL_TIMER_Start>
}
 800e284:	bd70      	pop	{r4, r5, r6, pc}
 800e286:	46c0      	nop			; (mov r8, r8)
 800e288:	2000150c 	.word	0x2000150c

0800e28c <RadioRssi>:
{
 800e28c:	b510      	push	{r4, lr}
    return SX126xGetRssiInst( );
 800e28e:	f000 fee7 	bl	800f060 <SX126xGetRssiInst>
 800e292:	b200      	sxth	r0, r0
}
 800e294:	bd10      	pop	{r4, pc}

0800e296 <RadioWriteBuffer>:
{
 800e296:	b510      	push	{r4, lr}
    SX126xWriteRegisters( addr, buffer, size );
 800e298:	b280      	uxth	r0, r0
 800e29a:	f000 ff23 	bl	800f0e4 <SX126xWriteRegisters>
}
 800e29e:	bd10      	pop	{r4, pc}

0800e2a0 <RadioReadBuffer>:
{
 800e2a0:	b510      	push	{r4, lr}
    SX126xReadRegisters( addr, buffer, size );
 800e2a2:	b280      	uxth	r0, r0
 800e2a4:	f000 fffa 	bl	800f29c <SX126xReadRegisters>
}
 800e2a8:	bd10      	pop	{r4, pc}

0800e2aa <RadioGetWakeupTime>:
{
 800e2aa:	b510      	push	{r4, lr}
    return (uint32_t) Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800e2ac:	f7f6 fb44 	bl	8004938 <SX126x_RADIO_GetWakeUpTime>
 800e2b0:	3003      	adds	r0, #3
}
 800e2b2:	bd10      	pop	{r4, pc}

0800e2b4 <RadioInit>:
{
 800e2b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    RadioEvents = events;
 800e2b6:	4d17      	ldr	r5, [pc, #92]	; (800e314 <RadioInit+0x60>)
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800e2b8:	2601      	movs	r6, #1
    RadioEvents = events;
 800e2ba:	6028      	str	r0, [r5, #0]
    SX126xInit( RadioOnDioIrq );
 800e2bc:	4816      	ldr	r0, [pc, #88]	; (800e318 <RadioInit+0x64>)
 800e2be:	f000 fdef 	bl	800eea0 <SX126xInit>
    SX126xSetStandby( STDBY_RC );
 800e2c2:	2000      	movs	r0, #0
 800e2c4:	f000 fcee 	bl	800eca4 <SX126xSetStandby>
    SX126xSetRegulatorMode( USE_DCDC );
 800e2c8:	2001      	movs	r0, #1
 800e2ca:	f000 fd5c 	bl	800ed86 <SX126xSetRegulatorMode>
    SX126xSetBufferBaseAddress( 0x00, 0x00 );
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	0008      	movs	r0, r1
 800e2d2:	f000 fe85 	bl	800efe0 <SX126xSetBufferBaseAddress>
    SX126xSetTxParams( 0, RADIO_RAMP_200_US );
 800e2d6:	2104      	movs	r1, #4
 800e2d8:	2000      	movs	r0, #0
 800e2da:	f001 f865 	bl	800f3a8 <SX126xSetTxParams>
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800e2de:	2300      	movs	r3, #0
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800e2e0:	2400      	movs	r4, #0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800e2e2:	480e      	ldr	r0, [pc, #56]	; (800e31c <RadioInit+0x68>)
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800e2e4:	4276      	negs	r6, r6
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800e2e6:	001a      	movs	r2, r3
 800e2e8:	0001      	movs	r1, r0
 800e2ea:	f000 fdb1 	bl	800ee50 <SX126xSetDioIrqParams>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800e2ee:	0031      	movs	r1, r6
 800e2f0:	0022      	movs	r2, r4
 800e2f2:	4b0b      	ldr	r3, [pc, #44]	; (800e320 <RadioInit+0x6c>)
 800e2f4:	9400      	str	r4, [sp, #0]
 800e2f6:	480b      	ldr	r0, [pc, #44]	; (800e324 <RadioInit+0x70>)
 800e2f8:	f001 fc62 	bl	800fbc0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800e2fc:	0031      	movs	r1, r6
 800e2fe:	0022      	movs	r2, r4
 800e300:	4b09      	ldr	r3, [pc, #36]	; (800e328 <RadioInit+0x74>)
 800e302:	9400      	str	r4, [sp, #0]
 800e304:	4809      	ldr	r0, [pc, #36]	; (800e32c <RadioInit+0x78>)
 800e306:	f001 fc5b 	bl	800fbc0 <UTIL_TIMER_Create>
    IrqFired = false;
 800e30a:	722c      	strb	r4, [r5, #8]
    return ( uint32_t )RadioGetWakeupTime( ) ;
 800e30c:	f7ff ffcd 	bl	800e2aa <RadioGetWakeupTime>
}
 800e310:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800e312:	46c0      	nop			; (mov r8, r8)
 800e314:	20000e3c 	.word	0x20000e3c
 800e318:	0800e715 	.word	0x0800e715
 800e31c:	0000ffff 	.word	0x0000ffff
 800e320:	0800e161 	.word	0x0800e161
 800e324:	2000150c 	.word	0x2000150c
 800e328:	0800e179 	.word	0x0800e179
 800e32c:	20001638 	.word	0x20001638

0800e330 <RadioGetFskBandwidthRegValue>:
{
 800e330:	b510      	push	{r4, lr}
    if( bandwidth == 0 )
 800e332:	2800      	cmp	r0, #0
 800e334:	d011      	beq.n	800e35a <RadioGetFskBandwidthRegValue+0x2a>
 800e336:	4a0a      	ldr	r2, [pc, #40]	; (800e360 <RadioGetFskBandwidthRegValue+0x30>)
 800e338:	2301      	movs	r3, #1
 800e33a:	0011      	movs	r1, r2
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 800e33c:	6814      	ldr	r4, [r2, #0]
 800e33e:	42a0      	cmp	r0, r4
 800e340:	d306      	bcc.n	800e350 <RadioGetFskBandwidthRegValue+0x20>
 800e342:	6894      	ldr	r4, [r2, #8]
 800e344:	42a0      	cmp	r0, r4
 800e346:	d203      	bcs.n	800e350 <RadioGetFskBandwidthRegValue+0x20>
            return FskBandwidths[i+1].RegValue;
 800e348:	00db      	lsls	r3, r3, #3
 800e34a:	18cb      	adds	r3, r1, r3
 800e34c:	7918      	ldrb	r0, [r3, #4]
}
 800e34e:	bd10      	pop	{r4, pc}
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800e350:	3301      	adds	r3, #1
 800e352:	3208      	adds	r2, #8
 800e354:	2b16      	cmp	r3, #22
 800e356:	d1f1      	bne.n	800e33c <RadioGetFskBandwidthRegValue+0xc>
    while( 1 );
 800e358:	e7fe      	b.n	800e358 <RadioGetFskBandwidthRegValue+0x28>
        return( 0x1F );
 800e35a:	201f      	movs	r0, #31
 800e35c:	e7f7      	b.n	800e34e <RadioGetFskBandwidthRegValue+0x1e>
 800e35e:	46c0      	nop			; (mov r8, r8)
 800e360:	08011734 	.word	0x08011734

0800e364 <RadioTimeOnAir>:
{
 800e364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e366:	0014      	movs	r4, r2
 800e368:	aa08      	add	r2, sp, #32
 800e36a:	8816      	ldrh	r6, [r2, #0]
 800e36c:	aa09      	add	r2, sp, #36	; 0x24
 800e36e:	7817      	ldrb	r7, [r2, #0]
 800e370:	aa0a      	add	r2, sp, #40	; 0x28
 800e372:	7812      	ldrb	r2, [r2, #0]
 800e374:	000d      	movs	r5, r1
 800e376:	a90b      	add	r1, sp, #44	; 0x2c
 800e378:	4694      	mov	ip, r2
 800e37a:	7809      	ldrb	r1, [r1, #0]
    switch( modem )
 800e37c:	2800      	cmp	r0, #0
 800e37e:	d009      	beq.n	800e394 <RadioTimeOnAir+0x30>
 800e380:	2801      	cmp	r0, #1
 800e382:	d017      	beq.n	800e3b4 <RadioTimeOnAir+0x50>
 800e384:	2401      	movs	r4, #1
 800e386:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 800e388:	1900      	adds	r0, r0, r4
 800e38a:	0021      	movs	r1, r4
 800e38c:	3801      	subs	r0, #1
 800e38e:	f7f1 feeb 	bl	8000168 <__udivsi3>
}
 800e392:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
               ( ( crcOn == true ) ? 2 : 0 ) 
 800e394:	1e4b      	subs	r3, r1, #1
 800e396:	4199      	sbcs	r1, r3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800e398:	4278      	negs	r0, r7
 800e39a:	4178      	adcs	r0, r7
               ( ( crcOn == true ) ? 2 : 0 ) 
 800e39c:	0049      	lsls	r1, r1, #1
               ( addrComp == RADIO_ADDRESSCOMP_FILT_OFF ? 0 : 1 ) +
 800e39e:	000a      	movs	r2, r1
           ( ( fixLen == false ) ? 8 : 0 ) +
 800e3a0:	1986      	adds	r6, r0, r6
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800e3a2:	20fa      	movs	r0, #250	; 0xfa
    return ( preambleLen << 3 ) +
 800e3a4:	00f6      	lsls	r6, r6, #3
               ( addrComp == RADIO_ADDRESSCOMP_FILT_OFF ? 0 : 1 ) +
 800e3a6:	4462      	add	r2, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 800e3a8:	3618      	adds	r6, #24
               ) << 3 
 800e3aa:	00d2      	lsls	r2, r2, #3
             ( syncWordLength << 3 ) +
 800e3ac:	1992      	adds	r2, r2, r6
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 800e3ae:	0080      	lsls	r0, r0, #2
 800e3b0:	4350      	muls	r0, r2
        break;
 800e3b2:	e7e9      	b.n	800e388 <RadioTimeOnAir+0x24>
    int32_t crDenom           = coderate + 4;
 800e3b4:	3304      	adds	r3, #4
 800e3b6:	9301      	str	r3, [sp, #4]
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800e3b8:	1f63      	subs	r3, r4, #5
 800e3ba:	2b01      	cmp	r3, #1
 800e3bc:	d804      	bhi.n	800e3c8 <RadioTimeOnAir+0x64>
        if( preambleLen < 12 )
 800e3be:	1c33      	adds	r3, r6, #0
 800e3c0:	2e0c      	cmp	r6, #12
 800e3c2:	d200      	bcs.n	800e3c6 <RadioTimeOnAir+0x62>
 800e3c4:	230c      	movs	r3, #12
 800e3c6:	b29e      	uxth	r6, r3
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e3c8:	2d00      	cmp	r5, #0
 800e3ca:	d139      	bne.n	800e440 <RadioTimeOnAir+0xdc>
 800e3cc:	0023      	movs	r3, r4
 800e3ce:	2001      	movs	r0, #1
 800e3d0:	002a      	movs	r2, r5
 800e3d2:	3b0b      	subs	r3, #11
 800e3d4:	4298      	cmp	r0, r3
 800e3d6:	416a      	adcs	r2, r5
 800e3d8:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800e3da:	b2db      	uxtb	r3, r3
                            ( crcOn ? 16 : 0 ) -
 800e3dc:	1e48      	subs	r0, r1, #1
 800e3de:	4181      	sbcs	r1, r0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800e3e0:	4662      	mov	r2, ip
                            ( crcOn ? 16 : 0 ) -
 800e3e2:	0108      	lsls	r0, r1, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800e3e4:	00d2      	lsls	r2, r2, #3
 800e3e6:	1810      	adds	r0, r2, r0
                            ( fixLen ? 0 : 20 );
 800e3e8:	2200      	movs	r2, #0
                            ( 4 * datarate ) +
 800e3ea:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 800e3ec:	1a40      	subs	r0, r0, r1
                            ( fixLen ? 0 : 20 );
 800e3ee:	4297      	cmp	r7, r2
 800e3f0:	d100      	bne.n	800e3f4 <RadioTimeOnAir+0x90>
 800e3f2:	3214      	adds	r2, #20
                            ( 4 * datarate ) +
 800e3f4:	1880      	adds	r0, r0, r2
    if( datarate <= 6 )
 800e3f6:	1ea7      	subs	r7, r4, #2
 800e3f8:	2c06      	cmp	r4, #6
 800e3fa:	d903      	bls.n	800e404 <RadioTimeOnAir+0xa0>
        ceilNumerator += 8;
 800e3fc:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d000      	beq.n	800e404 <RadioTimeOnAir+0xa0>
            ceilDenominator = 4 * ( datarate - 2 );
 800e402:	00b9      	lsls	r1, r7, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800e404:	43c3      	mvns	r3, r0
 800e406:	17db      	asrs	r3, r3, #31
 800e408:	4018      	ands	r0, r3
 800e40a:	1840      	adds	r0, r0, r1
 800e40c:	3801      	subs	r0, #1
 800e40e:	f7f1 ff35 	bl	800027c <__divsi3>
 800e412:	9b01      	ldr	r3, [sp, #4]
 800e414:	4343      	muls	r3, r0
 800e416:	199e      	adds	r6, r3, r6
        intermediate += 2;
 800e418:	0032      	movs	r2, r6
 800e41a:	320e      	adds	r2, #14
    if( datarate <= 6 )
 800e41c:	2c06      	cmp	r4, #6
 800e41e:	d900      	bls.n	800e422 <RadioTimeOnAir+0xbe>
    int32_t intermediate =
 800e420:	3a02      	subs	r2, #2
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800e422:	4b0c      	ldr	r3, [pc, #48]	; (800e454 <RadioTimeOnAir+0xf0>)
 800e424:	195d      	adds	r5, r3, r5
 800e426:	7929      	ldrb	r1, [r5, #4]
    switch( bw )
 800e428:	290a      	cmp	r1, #10
 800e42a:	d811      	bhi.n	800e450 <RadioTimeOnAir+0xec>
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800e42c:	0092      	lsls	r2, r2, #2
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800e42e:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800e430:	3201      	adds	r2, #1
 800e432:	40ba      	lsls	r2, r7
 800e434:	0089      	lsls	r1, r1, #2
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800e436:	0080      	lsls	r0, r0, #2
 800e438:	185b      	adds	r3, r3, r1
 800e43a:	4350      	muls	r0, r2
 800e43c:	689c      	ldr	r4, [r3, #8]
 800e43e:	e7a3      	b.n	800e388 <RadioTimeOnAir+0x24>
    bool    lowDatareOptimize = false;
 800e440:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e442:	2d01      	cmp	r5, #1
 800e444:	d1ca      	bne.n	800e3dc <RadioTimeOnAir+0x78>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800e446:	0023      	movs	r3, r4
 800e448:	3b0c      	subs	r3, #12
 800e44a:	4258      	negs	r0, r3
 800e44c:	4143      	adcs	r3, r0
 800e44e:	e7c4      	b.n	800e3da <RadioTimeOnAir+0x76>
    return ( numerator + denominator - 1 ) / denominator;
 800e450:	deff      	udf	#255	; 0xff
 800e452:	46c0      	nop			; (mov r8, r8)
 800e454:	080116f8 	.word	0x080116f8

0800e458 <RadioSetMaxPayloadLength>:
{
 800e458:	0003      	movs	r3, r0
 800e45a:	b510      	push	{r4, lr}
 800e45c:	4807      	ldr	r0, [pc, #28]	; (800e47c <RadioSetMaxPayloadLength+0x24>)
    if( modem == MODEM_LORA )
 800e45e:	2b01      	cmp	r3, #1
 800e460:	d105      	bne.n	800e46e <RadioSetMaxPayloadLength+0x16>
        SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800e462:	4b07      	ldr	r3, [pc, #28]	; (800e480 <RadioSetMaxPayloadLength+0x28>)
 800e464:	73c1      	strb	r1, [r0, #15]
 800e466:	7019      	strb	r1, [r3, #0]
            SX126xSetPacketParams( &SX126x.PacketParams );
 800e468:	f000 fe8a 	bl	800f180 <SX126xSetPacketParams>
}
 800e46c:	bd10      	pop	{r4, pc}
        if( SX126x.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 800e46e:	79c3      	ldrb	r3, [r0, #7]
 800e470:	2b01      	cmp	r3, #1
 800e472:	d1fb      	bne.n	800e46c <RadioSetMaxPayloadLength+0x14>
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 800e474:	4b02      	ldr	r3, [pc, #8]	; (800e480 <RadioSetMaxPayloadLength+0x28>)
 800e476:	7201      	strb	r1, [r0, #8]
 800e478:	7019      	strb	r1, [r3, #0]
 800e47a:	e7f5      	b.n	800e468 <RadioSetMaxPayloadLength+0x10>
 800e47c:	200014d0 	.word	0x200014d0
 800e480:	2000016c 	.word	0x2000016c

0800e484 <RadioRx>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800e484:	2300      	movs	r3, #0
 800e486:	490e      	ldr	r1, [pc, #56]	; (800e4c0 <RadioRx+0x3c>)
{
 800e488:	b570      	push	{r4, r5, r6, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800e48a:	001a      	movs	r2, r3
{
 800e48c:	0004      	movs	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800e48e:	0008      	movs	r0, r1
 800e490:	f000 fcde 	bl	800ee50 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 800e494:	2c00      	cmp	r4, #0
 800e496:	d007      	beq.n	800e4a8 <RadioRx+0x24>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800e498:	4d0a      	ldr	r5, [pc, #40]	; (800e4c4 <RadioRx+0x40>)
 800e49a:	0021      	movs	r1, r4
 800e49c:	0028      	movs	r0, r5
 800e49e:	f001 fc85 	bl	800fdac <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800e4a2:	0028      	movs	r0, r5
 800e4a4:	f001 fc40 	bl	800fd28 <UTIL_TIMER_Start>
    if( RxContinuous == true )
 800e4a8:	4b07      	ldr	r3, [pc, #28]	; (800e4c8 <RadioRx+0x44>)
 800e4aa:	7a5a      	ldrb	r2, [r3, #9]
 800e4ac:	2a00      	cmp	r2, #0
 800e4ae:	d003      	beq.n	800e4b8 <RadioRx+0x34>
        SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 800e4b0:	4806      	ldr	r0, [pc, #24]	; (800e4cc <RadioRx+0x48>)
        SX126xSetRx( RxTimeout << 6 );
 800e4b2:	f000 fc1d 	bl	800ecf0 <SX126xSetRx>
}
 800e4b6:	bd70      	pop	{r4, r5, r6, pc}
        SX126xSetRx( RxTimeout << 6 );
 800e4b8:	68d8      	ldr	r0, [r3, #12]
 800e4ba:	0180      	lsls	r0, r0, #6
 800e4bc:	e7f9      	b.n	800e4b2 <RadioRx+0x2e>
 800e4be:	46c0      	nop			; (mov r8, r8)
 800e4c0:	0000ffff 	.word	0x0000ffff
 800e4c4:	20001638 	.word	0x20001638
 800e4c8:	20000e3c 	.word	0x20000e3c
 800e4cc:	00ffffff 	.word	0x00ffffff

0800e4d0 <RadioRxBoosted>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	490e      	ldr	r1, [pc, #56]	; (800e50c <RadioRxBoosted+0x3c>)
{
 800e4d4:	b570      	push	{r4, r5, r6, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800e4d6:	001a      	movs	r2, r3
{
 800e4d8:	0004      	movs	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800e4da:	0008      	movs	r0, r1
 800e4dc:	f000 fcb8 	bl	800ee50 <SX126xSetDioIrqParams>
    if( timeout != 0 )
 800e4e0:	2c00      	cmp	r4, #0
 800e4e2:	d007      	beq.n	800e4f4 <RadioRxBoosted+0x24>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800e4e4:	4d0a      	ldr	r5, [pc, #40]	; (800e510 <RadioRxBoosted+0x40>)
 800e4e6:	0021      	movs	r1, r4
 800e4e8:	0028      	movs	r0, r5
 800e4ea:	f001 fc5f 	bl	800fdac <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800e4ee:	0028      	movs	r0, r5
 800e4f0:	f001 fc1a 	bl	800fd28 <UTIL_TIMER_Start>
    if( RxContinuous == true )
 800e4f4:	4b07      	ldr	r3, [pc, #28]	; (800e514 <RadioRxBoosted+0x44>)
 800e4f6:	7a5a      	ldrb	r2, [r3, #9]
 800e4f8:	2a00      	cmp	r2, #0
 800e4fa:	d003      	beq.n	800e504 <RadioRxBoosted+0x34>
        SX126xSetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800e4fc:	4806      	ldr	r0, [pc, #24]	; (800e518 <RadioRxBoosted+0x48>)
        SX126xSetRxBoosted( RxTimeout << 6 );
 800e4fe:	f000 fe9f 	bl	800f240 <SX126xSetRxBoosted>
}
 800e502:	bd70      	pop	{r4, r5, r6, pc}
        SX126xSetRxBoosted( RxTimeout << 6 );
 800e504:	68d8      	ldr	r0, [r3, #12]
 800e506:	0180      	lsls	r0, r0, #6
 800e508:	e7f9      	b.n	800e4fe <RadioRxBoosted+0x2e>
 800e50a:	46c0      	nop			; (mov r8, r8)
 800e50c:	0000ffff 	.word	0x0000ffff
 800e510:	20001638 	.word	0x20001638
 800e514:	20000e3c 	.word	0x20000e3c
 800e518:	00ffffff 	.word	0x00ffffff

0800e51c <RadioIrqProcess>:

  RadioIrqProcess();
}

void RadioIrqProcess( void )
{
 800e51c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( IrqFired == true )
 800e51e:	4c71      	ldr	r4, [pc, #452]	; (800e6e4 <RadioIrqProcess+0x1c8>)
 800e520:	7a23      	ldrb	r3, [r4, #8]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d100      	bne.n	800e528 <RadioIrqProcess+0xc>
 800e526:	e090      	b.n	800e64a <RadioIrqProcess+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e528:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e52c:	b672      	cpsid	i
    {
        CRITICAL_SECTION_BEGIN( );
        // Clear IRQ flag
        IrqFired = false;
 800e52e:	2600      	movs	r6, #0
 800e530:	7226      	strb	r6, [r4, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e532:	f383 8810 	msr	PRIMASK, r3
        CRITICAL_SECTION_END( );

        uint16_t irqRegs = SX126xGetIrqStatus( );
 800e536:	f000 fd86 	bl	800f046 <SX126xGetIrqStatus>
        SX126xClearIrqStatus( IRQ_RADIO_ALL );

        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 800e53a:	2701      	movs	r7, #1
        uint16_t irqRegs = SX126xGetIrqStatus( );
 800e53c:	0005      	movs	r5, r0
        SX126xClearIrqStatus( IRQ_RADIO_ALL );
 800e53e:	486a      	ldr	r0, [pc, #424]	; (800e6e8 <RadioIrqProcess+0x1cc>)
 800e540:	f000 fd58 	bl	800eff4 <SX126xClearIrqStatus>
        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 800e544:	423d      	tst	r5, r7
 800e546:	d00f      	beq.n	800e568 <RadioIrqProcess+0x4c>
        {
            TimerStop( &TxTimeoutTimer );
 800e548:	4868      	ldr	r0, [pc, #416]	; (800e6ec <RadioIrqProcess+0x1d0>)
 800e54a:	f001 fb99 	bl	800fc80 <UTIL_TIMER_Stop>
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 800e54e:	0038      	movs	r0, r7
 800e550:	f000 fb54 	bl	800ebfc <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800e554:	6823      	ldr	r3, [r4, #0]
 800e556:	42b3      	cmp	r3, r6
 800e558:	d006      	beq.n	800e568 <RadioIrqProcess+0x4c>
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	42b3      	cmp	r3, r6
 800e55e:	d003      	beq.n	800e568 <RadioIrqProcess+0x4c>
            {
                RadioEvents->TxDone( );
 800e560:	4798      	blx	r3
                Sx_Board_SetLedTx(false);
 800e562:	0030      	movs	r0, r6
 800e564:	f7f6 fa51 	bl	8004a0a <SX126x_RADIO_BoardSetLedTx>
            }
        }

        if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 800e568:	2602      	movs	r6, #2
 800e56a:	4235      	tst	r5, r6
 800e56c:	d012      	beq.n	800e594 <RadioIrqProcess+0x78>
        {
            if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 800e56e:	066b      	lsls	r3, r5, #25
 800e570:	d400      	bmi.n	800e574 <RadioIrqProcess+0x58>
 800e572:	e06b      	b.n	800e64c <RadioIrqProcess+0x130>
            {
                if( RxContinuous == false )
 800e574:	7a63      	ldrb	r3, [r4, #9]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d102      	bne.n	800e580 <RadioIrqProcess+0x64>
                {
                    //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 800e57a:	2001      	movs	r0, #1
 800e57c:	f000 fb3e 	bl	800ebfc <SX126xSetOperatingMode>
                }
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800e580:	6823      	ldr	r3, [r4, #0]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d006      	beq.n	800e594 <RadioIrqProcess+0x78>
 800e586:	691b      	ldr	r3, [r3, #16]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d003      	beq.n	800e594 <RadioIrqProcess+0x78>
                {
                    RadioEvents->RxError( );
 800e58c:	4798      	blx	r3
                SX126xGetPayload( RadioRxPayload, &size , 255 );
                SX126xGetPacketStatus( &RadioPktStatus );
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
                {
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
                    Sx_Board_SetLedRx(false);
 800e58e:	2000      	movs	r0, #0
 800e590:	f7f6 fa3c 	bl	8004a0c <SX126x_RADIO_BoardSetLedRx>
                }
            }
        }

        if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 800e594:	062b      	lsls	r3, r5, #24
 800e596:	d50e      	bpl.n	800e5b6 <RadioIrqProcess+0x9a>
        {
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode( MODE_STDBY_RC );
 800e598:	2001      	movs	r0, #1
 800e59a:	f000 fb2f 	bl	800ebfc <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800e59e:	6823      	ldr	r3, [r4, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d008      	beq.n	800e5b6 <RadioIrqProcess+0x9a>
 800e5a4:	699b      	ldr	r3, [r3, #24]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d005      	beq.n	800e5b6 <RadioIrqProcess+0x9a>
            {
                RadioEvents->CadDone( ( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED ) );
 800e5aa:	05e8      	lsls	r0, r5, #23
 800e5ac:	0fc0      	lsrs	r0, r0, #31
 800e5ae:	4798      	blx	r3
                Sx_Board_SetLedRx(false);
 800e5b0:	2000      	movs	r0, #0
 800e5b2:	f7f6 fa2b 	bl	8004a0c <SX126x_RADIO_BoardSetLedRx>
            }
        }

        if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 800e5b6:	05ab      	lsls	r3, r5, #22
 800e5b8:	d514      	bpl.n	800e5e4 <RadioIrqProcess+0xc8>
        {
            if( SX126xGetOperatingMode( ) == MODE_TX )
 800e5ba:	f000 fb19 	bl	800ebf0 <SX126xGetOperatingMode>
 800e5be:	2804      	cmp	r0, #4
 800e5c0:	d000      	beq.n	800e5c4 <RadioIrqProcess+0xa8>
 800e5c2:	e076      	b.n	800e6b2 <RadioIrqProcess+0x196>
            {
                TimerStop( &TxTimeoutTimer );
 800e5c4:	4849      	ldr	r0, [pc, #292]	; (800e6ec <RadioIrqProcess+0x1d0>)
 800e5c6:	f001 fb5b 	bl	800fc80 <UTIL_TIMER_Stop>
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 800e5ca:	2001      	movs	r0, #1
 800e5cc:	f000 fb16 	bl	800ebfc <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800e5d0:	6823      	ldr	r3, [r4, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d006      	beq.n	800e5e4 <RadioIrqProcess+0xc8>
 800e5d6:	685b      	ldr	r3, [r3, #4]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d003      	beq.n	800e5e4 <RadioIrqProcess+0xc8>
                {
                    RadioEvents->TxTimeout( );
 800e5dc:	4798      	blx	r3
                    Sx_Board_SetLedTx(false);
 800e5de:	2000      	movs	r0, #0
 800e5e0:	f7f6 fa13 	bl	8004a0a <SX126x_RADIO_BoardSetLedTx>
                    Sx_Board_SetLedRx(false);
                }
            }
        }

        if( ( irqRegs & IRQ_PREAMBLE_DETECTED ) == IRQ_PREAMBLE_DETECTED )
 800e5e4:	076b      	lsls	r3, r5, #29
 800e5e6:	d505      	bpl.n	800e5f4 <RadioIrqProcess+0xd8>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY PRE OK\n\r" );
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	2003      	movs	r0, #3
 800e5ec:	0011      	movs	r1, r2
 800e5ee:	4b40      	ldr	r3, [pc, #256]	; (800e6f0 <RadioIrqProcess+0x1d4>)
 800e5f0:	f001 f870 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_SYNCWORD_VALID ) == IRQ_SYNCWORD_VALID )
 800e5f4:	072b      	lsls	r3, r5, #28
 800e5f6:	d505      	bpl.n	800e604 <RadioIrqProcess+0xe8>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY SYNC OK\n\r" );
 800e5f8:	2200      	movs	r2, #0
 800e5fa:	2003      	movs	r0, #3
 800e5fc:	0011      	movs	r1, r2
 800e5fe:	4b3d      	ldr	r3, [pc, #244]	; (800e6f4 <RadioIrqProcess+0x1d8>)
 800e600:	f001 f868 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 800e604:	06eb      	lsls	r3, r5, #27
 800e606:	d505      	bpl.n	800e614 <RadioIrqProcess+0xf8>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY HDR OK\n\r" );
 800e608:	2200      	movs	r2, #0
 800e60a:	2003      	movs	r0, #3
 800e60c:	0011      	movs	r1, r2
 800e60e:	4b3a      	ldr	r3, [pc, #232]	; (800e6f8 <RadioIrqProcess+0x1dc>)
 800e610:	f001 f860 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 800e614:	06ab      	lsls	r3, r5, #26
 800e616:	d518      	bpl.n	800e64a <RadioIrqProcess+0x12e>
        {
            TimerStop( &RxTimeoutTimer );
 800e618:	4838      	ldr	r0, [pc, #224]	; (800e6fc <RadioIrqProcess+0x1e0>)
 800e61a:	f001 fb31 	bl	800fc80 <UTIL_TIMER_Stop>
            if( RxContinuous == false )
 800e61e:	7a63      	ldrb	r3, [r4, #9]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d102      	bne.n	800e62a <RadioIrqProcess+0x10e>
            {
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode( MODE_STDBY_RC );
 800e624:	2001      	movs	r0, #1
 800e626:	f000 fae9 	bl	800ebfc <SX126xSetOperatingMode>
            }
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e62a:	6823      	ldr	r3, [r4, #0]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00c      	beq.n	800e64a <RadioIrqProcess+0x12e>
 800e630:	68db      	ldr	r3, [r3, #12]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d009      	beq.n	800e64a <RadioIrqProcess+0x12e>
            {
                RadioEvents->RxTimeout( );
 800e636:	4798      	blx	r3
                MW_LOG(TS_OFF, VLEVEL_H, "PHY HDR KO\n\r" );
 800e638:	2200      	movs	r2, #0
 800e63a:	2003      	movs	r0, #3
 800e63c:	0011      	movs	r1, r2
 800e63e:	4b30      	ldr	r3, [pc, #192]	; (800e700 <RadioIrqProcess+0x1e4>)
 800e640:	f001 f848 	bl	800f6d4 <UTIL_ADV_TRACE_COND_FSend>
                Sx_Board_SetLedRx(false);
 800e644:	2000      	movs	r0, #0
 800e646:	f7f6 f9e1 	bl	8004a0c <SX126x_RADIO_BoardSetLedRx>
            }
        }
    }
}
 800e64a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                TimerStop( &RxTimeoutTimer );
 800e64c:	482b      	ldr	r0, [pc, #172]	; (800e6fc <RadioIrqProcess+0x1e0>)
 800e64e:	f001 fb17 	bl	800fc80 <UTIL_TIMER_Stop>
                if( RxContinuous == false )
 800e652:	7a67      	ldrb	r7, [r4, #9]
 800e654:	2f00      	cmp	r7, #0
 800e656:	d10e      	bne.n	800e676 <RadioIrqProcess+0x15a>
                    SX126xSetOperatingMode( MODE_STDBY_RC );
 800e658:	2001      	movs	r0, #1
 800e65a:	f000 facf 	bl	800ebfc <SX126xSetOperatingMode>
                    SX126xWriteRegister( 0x0902, 0x00 );
 800e65e:	0039      	movs	r1, r7
 800e660:	4828      	ldr	r0, [pc, #160]	; (800e704 <RadioIrqProcess+0x1e8>)
 800e662:	f000 fde3 	bl	800f22c <SX126xWriteRegister>
                    SX126xWriteRegister( 0x0944, SX126xReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800e666:	4828      	ldr	r0, [pc, #160]	; (800e708 <RadioIrqProcess+0x1ec>)
 800e668:	f000 fe3c 	bl	800f2e4 <SX126xReadRegister>
 800e66c:	4306      	orrs	r6, r0
 800e66e:	b2f1      	uxtb	r1, r6
 800e670:	4825      	ldr	r0, [pc, #148]	; (800e708 <RadioIrqProcess+0x1ec>)
 800e672:	f000 fddb 	bl	800f22c <SX126xWriteRegister>
                SX126xGetPayload( RadioRxPayload, &size , 255 );
 800e676:	466b      	mov	r3, sp
 800e678:	4f24      	ldr	r7, [pc, #144]	; (800e70c <RadioIrqProcess+0x1f0>)
 800e67a:	1dd9      	adds	r1, r3, #7
 800e67c:	22ff      	movs	r2, #255	; 0xff
 800e67e:	0038      	movs	r0, r7
 800e680:	f000 ff4d 	bl	800f51e <SX126xGetPayload>
                SX126xGetPacketStatus( &RadioPktStatus );
 800e684:	4e22      	ldr	r6, [pc, #136]	; (800e710 <RadioIrqProcess+0x1f4>)
 800e686:	0030      	movs	r0, r6
 800e688:	f000 fcf6 	bl	800f078 <SX126xGetPacketStatus>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800e68c:	6823      	ldr	r3, [r4, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d100      	bne.n	800e694 <RadioIrqProcess+0x178>
 800e692:	e77f      	b.n	800e594 <RadioIrqProcess+0x78>
 800e694:	689b      	ldr	r3, [r3, #8]
 800e696:	469c      	mov	ip, r3
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d100      	bne.n	800e69e <RadioIrqProcess+0x182>
 800e69c:	e77a      	b.n	800e594 <RadioIrqProcess+0x78>
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
 800e69e:	4669      	mov	r1, sp
 800e6a0:	230d      	movs	r3, #13
 800e6a2:	220c      	movs	r2, #12
 800e6a4:	56f3      	ldrsb	r3, [r6, r3]
 800e6a6:	56b2      	ldrsb	r2, [r6, r2]
 800e6a8:	0038      	movs	r0, r7
 800e6aa:	4666      	mov	r6, ip
 800e6ac:	79c9      	ldrb	r1, [r1, #7]
 800e6ae:	47b0      	blx	r6
 800e6b0:	e76d      	b.n	800e58e <RadioIrqProcess+0x72>
            else if( SX126xGetOperatingMode( ) == MODE_RX )
 800e6b2:	f000 fa9d 	bl	800ebf0 <SX126xGetOperatingMode>
 800e6b6:	2805      	cmp	r0, #5
 800e6b8:	d000      	beq.n	800e6bc <RadioIrqProcess+0x1a0>
 800e6ba:	e793      	b.n	800e5e4 <RadioIrqProcess+0xc8>
                TimerStop( &RxTimeoutTimer );
 800e6bc:	480f      	ldr	r0, [pc, #60]	; (800e6fc <RadioIrqProcess+0x1e0>)
 800e6be:	f001 fadf 	bl	800fc80 <UTIL_TIMER_Stop>
                SX126xSetOperatingMode( MODE_STDBY_RC );
 800e6c2:	2001      	movs	r0, #1
 800e6c4:	f000 fa9a 	bl	800ebfc <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800e6c8:	6823      	ldr	r3, [r4, #0]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d100      	bne.n	800e6d0 <RadioIrqProcess+0x1b4>
 800e6ce:	e789      	b.n	800e5e4 <RadioIrqProcess+0xc8>
 800e6d0:	68db      	ldr	r3, [r3, #12]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d100      	bne.n	800e6d8 <RadioIrqProcess+0x1bc>
 800e6d6:	e785      	b.n	800e5e4 <RadioIrqProcess+0xc8>
                    RadioEvents->RxTimeout( );
 800e6d8:	4798      	blx	r3
                    Sx_Board_SetLedRx(false);
 800e6da:	2000      	movs	r0, #0
 800e6dc:	f7f6 f996 	bl	8004a0c <SX126x_RADIO_BoardSetLedRx>
 800e6e0:	e780      	b.n	800e5e4 <RadioIrqProcess+0xc8>
 800e6e2:	46c0      	nop			; (mov r8, r8)
 800e6e4:	20000e3c 	.word	0x20000e3c
 800e6e8:	0000ffff 	.word	0x0000ffff
 800e6ec:	2000150c 	.word	0x2000150c
 800e6f0:	08011fc9 	.word	0x08011fc9
 800e6f4:	08011fd6 	.word	0x08011fd6
 800e6f8:	08011fe4 	.word	0x08011fe4
 800e6fc:	20001638 	.word	0x20001638
 800e700:	08011ff1 	.word	0x08011ff1
 800e704:	00000902 	.word	0x00000902
 800e708:	00000944 	.word	0x00000944
 800e70c:	20001524 	.word	0x20001524
 800e710:	20001624 	.word	0x20001624

0800e714 <RadioOnDioIrq>:
  IrqFired = true;
 800e714:	2201      	movs	r2, #1
{
 800e716:	b510      	push	{r4, lr}
  IrqFired = true;
 800e718:	4b02      	ldr	r3, [pc, #8]	; (800e724 <RadioOnDioIrq+0x10>)
 800e71a:	721a      	strb	r2, [r3, #8]
  RadioIrqProcess();
 800e71c:	f7ff fefe 	bl	800e51c <RadioIrqProcess>
}
 800e720:	bd10      	pop	{r4, pc}
 800e722:	46c0      	nop			; (mov r8, r8)
 800e724:	20000e3c 	.word	0x20000e3c

0800e728 <RadioSetPublicNetwork>:
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800e728:	4b0c      	ldr	r3, [pc, #48]	; (800e75c <RadioSetPublicNetwork+0x34>)
{
 800e72a:	b510      	push	{r4, lr}
 800e72c:	0004      	movs	r4, r0
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800e72e:	7418      	strb	r0, [r3, #16]
 800e730:	7458      	strb	r0, [r3, #17]
    switch( modem )
 800e732:	f000 f817 	bl	800e764 <RadioSetModem.part.0>
    if( enable == true )
 800e736:	2c00      	cmp	r4, #0
 800e738:	d009      	beq.n	800e74e <RadioSetPublicNetwork+0x26>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800e73a:	20e8      	movs	r0, #232	; 0xe8
 800e73c:	2134      	movs	r1, #52	; 0x34
 800e73e:	00c0      	lsls	r0, r0, #3
 800e740:	f000 fd74 	bl	800f22c <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800e744:	2144      	movs	r1, #68	; 0x44
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800e746:	4806      	ldr	r0, [pc, #24]	; (800e760 <RadioSetPublicNetwork+0x38>)
 800e748:	f000 fd70 	bl	800f22c <SX126xWriteRegister>
}
 800e74c:	bd10      	pop	{r4, pc}
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800e74e:	20e8      	movs	r0, #232	; 0xe8
 800e750:	2114      	movs	r1, #20
 800e752:	00c0      	lsls	r0, r0, #3
 800e754:	f000 fd6a 	bl	800f22c <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800e758:	2124      	movs	r1, #36	; 0x24
 800e75a:	e7f4      	b.n	800e746 <RadioSetPublicNetwork+0x1e>
 800e75c:	20000e3c 	.word	0x20000e3c
 800e760:	00000741 	.word	0x00000741

0800e764 <RadioSetModem.part.0>:
        SX126xSetPacketType( PACKET_TYPE_LORA );
 800e764:	2001      	movs	r0, #1
void RadioSetModem( RadioModems_t modem )
 800e766:	b510      	push	{r4, lr}
        SX126xSetPacketType( PACKET_TYPE_LORA );
 800e768:	f000 fbdc 	bl	800ef24 <SX126xSetPacketType>
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 800e76c:	4b04      	ldr	r3, [pc, #16]	; (800e780 <RadioSetModem.part.0+0x1c>)
 800e76e:	7c18      	ldrb	r0, [r3, #16]
 800e770:	7c5a      	ldrb	r2, [r3, #17]
 800e772:	4282      	cmp	r2, r0
 800e774:	d002      	beq.n	800e77c <RadioSetModem.part.0+0x18>
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 800e776:	7458      	strb	r0, [r3, #17]
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 800e778:	f7ff ffd6 	bl	800e728 <RadioSetPublicNetwork>
}
 800e77c:	bd10      	pop	{r4, pc}
 800e77e:	46c0      	nop			; (mov r8, r8)
 800e780:	20000e3c 	.word	0x20000e3c

0800e784 <RadioSetModem>:
{
 800e784:	b510      	push	{r4, lr}
    switch( modem )
 800e786:	2801      	cmp	r0, #1
 800e788:	d006      	beq.n	800e798 <RadioSetModem+0x14>
        SX126xSetPacketType( PACKET_TYPE_GFSK );
 800e78a:	2000      	movs	r0, #0
 800e78c:	f000 fbca 	bl	800ef24 <SX126xSetPacketType>
        RadioPublicNetwork.Current = false;
 800e790:	2200      	movs	r2, #0
 800e792:	4b03      	ldr	r3, [pc, #12]	; (800e7a0 <RadioSetModem+0x1c>)
 800e794:	745a      	strb	r2, [r3, #17]
}
 800e796:	bd10      	pop	{r4, pc}
 800e798:	f7ff ffe4 	bl	800e764 <RadioSetModem.part.0>
 800e79c:	e7fb      	b.n	800e796 <RadioSetModem+0x12>
 800e79e:	46c0      	nop			; (mov r8, r8)
 800e7a0:	20000e3c 	.word	0x20000e3c

0800e7a4 <RadioSetRxConfig>:
{
 800e7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e7a6:	b089      	sub	sp, #36	; 0x24
 800e7a8:	9304      	str	r3, [sp, #16]
 800e7aa:	ab0f      	add	r3, sp, #60	; 0x3c
 800e7ac:	881b      	ldrh	r3, [r3, #0]
 800e7ae:	0015      	movs	r5, r2
 800e7b0:	9301      	str	r3, [sp, #4]
 800e7b2:	ab10      	add	r3, sp, #64	; 0x40
 800e7b4:	881b      	ldrh	r3, [r3, #0]
 800e7b6:	000f      	movs	r7, r1
 800e7b8:	9300      	str	r3, [sp, #0]
 800e7ba:	ab11      	add	r3, sp, #68	; 0x44
 800e7bc:	781b      	ldrb	r3, [r3, #0]
 800e7be:	a906      	add	r1, sp, #24
 800e7c0:	9302      	str	r3, [sp, #8]
 800e7c2:	ab12      	add	r3, sp, #72	; 0x48
 800e7c4:	781a      	ldrb	r2, [r3, #0]
 800e7c6:	ab13      	add	r3, sp, #76	; 0x4c
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	0006      	movs	r6, r0
 800e7cc:	9303      	str	r3, [sp, #12]
 800e7ce:	2321      	movs	r3, #33	; 0x21
 800e7d0:	185b      	adds	r3, r3, r1
 800e7d2:	7fdb      	ldrb	r3, [r3, #31]
 800e7d4:	9305      	str	r3, [sp, #20]
 800e7d6:	2325      	movs	r3, #37	; 0x25
 800e7d8:	185b      	adds	r3, r3, r1
 800e7da:	7fdb      	ldrb	r3, [r3, #31]
    RxContinuous = rxContinuous;
 800e7dc:	496e      	ldr	r1, [pc, #440]	; (800e998 <RadioSetRxConfig+0x1f4>)
 800e7de:	724b      	strb	r3, [r1, #9]
        symbTimeout = 0;
 800e7e0:	4259      	negs	r1, r3
 800e7e2:	414b      	adcs	r3, r1
 800e7e4:	9900      	ldr	r1, [sp, #0]
 800e7e6:	425b      	negs	r3, r3
 800e7e8:	4019      	ands	r1, r3
    if( fixLen == true )
 800e7ea:	9b02      	ldr	r3, [sp, #8]
        symbTimeout = 0;
 800e7ec:	9100      	str	r1, [sp, #0]
    if( fixLen == true )
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d100      	bne.n	800e7f4 <RadioSetRxConfig+0x50>
        MaxPayloadLength = 0xFF;
 800e7f2:	22ff      	movs	r2, #255	; 0xff
 800e7f4:	4b69      	ldr	r3, [pc, #420]	; (800e99c <RadioSetRxConfig+0x1f8>)
 800e7f6:	701a      	strb	r2, [r3, #0]
    switch( modem )
 800e7f8:	2e00      	cmp	r6, #0
 800e7fa:	d003      	beq.n	800e804 <RadioSetRxConfig+0x60>
 800e7fc:	2e01      	cmp	r6, #1
 800e7fe:	d065      	beq.n	800e8cc <RadioSetRxConfig+0x128>
}
 800e800:	b009      	add	sp, #36	; 0x24
 800e802:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX126xSetStopRxTimerOnPreambleDetect( false );
 800e804:	0030      	movs	r0, r6
 800e806:	f000 fab5 	bl	800ed74 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800e80a:	4c65      	ldr	r4, [pc, #404]	; (800e9a0 <RadioSetRxConfig+0x1fc>)
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800e80c:	220b      	movs	r2, #11
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800e80e:	0023      	movs	r3, r4
 800e810:	3328      	adds	r3, #40	; 0x28
 800e812:	701e      	strb	r6, [r3, #0]
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800e814:	0023      	movs	r3, r4
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800e816:	0078      	lsls	r0, r7, #1
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800e818:	3334      	adds	r3, #52	; 0x34
 800e81a:	701a      	strb	r2, [r3, #0]
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 800e81c:	62e5      	str	r5, [r4, #44]	; 0x2c
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800e81e:	f7ff fd87 	bl	800e330 <RadioGetFskBandwidthRegValue>
 800e822:	0023      	movs	r3, r4
 800e824:	3335      	adds	r3, #53	; 0x35
 800e826:	7018      	strb	r0, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800e828:	9b01      	ldr	r3, [sp, #4]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800e82a:	9a02      	ldr	r2, [sp, #8]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800e82c:	00db      	lsls	r3, r3, #3
 800e82e:	8063      	strh	r3, [r4, #2]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800e830:	4b5c      	ldr	r3, [pc, #368]	; (800e9a4 <RadioSetRxConfig+0x200>)
            if( crcOn == true )
 800e832:	9903      	ldr	r1, [sp, #12]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800e834:	80a3      	strh	r3, [r4, #4]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800e836:	2301      	movs	r3, #1
 800e838:	405a      	eors	r2, r3
 800e83a:	71e2      	strb	r2, [r4, #7]
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800e83c:	4a57      	ldr	r2, [pc, #348]	; (800e99c <RadioSetRxConfig+0x1f8>)
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800e83e:	7026      	strb	r6, [r4, #0]
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800e840:	7812      	ldrb	r2, [r2, #0]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800e842:	71a6      	strb	r6, [r4, #6]
            SX126x.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800e844:	7222      	strb	r2, [r4, #8]
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800e846:	22f2      	movs	r2, #242	; 0xf2
            if( crcOn == true )
 800e848:	2900      	cmp	r1, #0
 800e84a:	d100      	bne.n	800e84e <RadioSetRxConfig+0xaa>
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800e84c:	001a      	movs	r2, r3
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800e84e:	0026      	movs	r6, r4
 800e850:	3628      	adds	r6, #40	; 0x28
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800e852:	72a3      	strb	r3, [r4, #10]
 800e854:	7262      	strb	r2, [r4, #9]
            RadioStandby( );
 800e856:	f7ff fc9b 	bl	800e190 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800e85a:	7830      	ldrb	r0, [r6, #0]
 800e85c:	1e43      	subs	r3, r0, #1
 800e85e:	4198      	sbcs	r0, r3
 800e860:	b2c0      	uxtb	r0, r0
 800e862:	f7ff ff8f 	bl	800e784 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800e866:	0030      	movs	r0, r6
 800e868:	f000 fb6a 	bl	800ef40 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800e86c:	0020      	movs	r0, r4
 800e86e:	f000 fc87 	bl	800f180 <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800e872:	494d      	ldr	r1, [pc, #308]	; (800e9a8 <RadioSetRxConfig+0x204>)
 800e874:	2208      	movs	r2, #8
 800e876:	3134      	adds	r1, #52	; 0x34
 800e878:	a806      	add	r0, sp, #24
 800e87a:	f001 fc51 	bl	8010120 <memcpy>
 800e87e:	a806      	add	r0, sp, #24
 800e880:	f000 fc50 	bl	800f124 <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 800e884:	4849      	ldr	r0, [pc, #292]	; (800e9ac <RadioSetRxConfig+0x208>)
 800e886:	f000 fd37 	bl	800f2f8 <SX126xSetWhiteningSeed>
            RxTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 800e88a:	0028      	movs	r0, r5
 800e88c:	f7f4 fa80 	bl	8002d90 <__aeabi_ui2d>
 800e890:	0002      	movs	r2, r0
 800e892:	000b      	movs	r3, r1
 800e894:	2000      	movs	r0, #0
 800e896:	4946      	ldr	r1, [pc, #280]	; (800e9b0 <RadioSetRxConfig+0x20c>)
 800e898:	f7f3 f810 	bl	80018bc <__aeabi_ddiv>
 800e89c:	2200      	movs	r2, #0
 800e89e:	4b45      	ldr	r3, [pc, #276]	; (800e9b4 <RadioSetRxConfig+0x210>)
 800e8a0:	f7f3 fc12 	bl	80020c8 <__aeabi_dmul>
 800e8a4:	0004      	movs	r4, r0
 800e8a6:	9800      	ldr	r0, [sp, #0]
 800e8a8:	000d      	movs	r5, r1
 800e8aa:	f7f4 fa41 	bl	8002d30 <__aeabi_i2d>
 800e8ae:	0002      	movs	r2, r0
 800e8b0:	000b      	movs	r3, r1
 800e8b2:	0020      	movs	r0, r4
 800e8b4:	0029      	movs	r1, r5
 800e8b6:	f7f3 fc07 	bl	80020c8 <__aeabi_dmul>
 800e8ba:	4b3f      	ldr	r3, [pc, #252]	; (800e9b8 <RadioSetRxConfig+0x214>)
 800e8bc:	2200      	movs	r2, #0
 800e8be:	f7f3 fc03 	bl	80020c8 <__aeabi_dmul>
 800e8c2:	f7f1 fe9f 	bl	8000604 <__aeabi_d2uiz>
 800e8c6:	4b34      	ldr	r3, [pc, #208]	; (800e998 <RadioSetRxConfig+0x1f4>)
 800e8c8:	60d8      	str	r0, [r3, #12]
            break;
 800e8ca:	e799      	b.n	800e800 <RadioSetRxConfig+0x5c>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 800e8cc:	2000      	movs	r0, #0
 800e8ce:	f000 fa51 	bl	800ed74 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800e8d2:	4c33      	ldr	r4, [pc, #204]	; (800e9a0 <RadioSetRxConfig+0x1fc>)
 800e8d4:	0023      	movs	r3, r4
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800e8d6:	0022      	movs	r2, r4
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800e8d8:	0021      	movs	r1, r4
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800e8da:	3328      	adds	r3, #40	; 0x28
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800e8dc:	3238      	adds	r2, #56	; 0x38
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800e8de:	701e      	strb	r6, [r3, #0]
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800e8e0:	b2eb      	uxtb	r3, r5
 800e8e2:	7013      	strb	r3, [r2, #0]
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800e8e4:	4a30      	ldr	r2, [pc, #192]	; (800e9a8 <RadioSetRxConfig+0x204>)
 800e8e6:	3139      	adds	r1, #57	; 0x39
 800e8e8:	19d2      	adds	r2, r2, r7
 800e8ea:	7912      	ldrb	r2, [r2, #4]
 800e8ec:	700a      	strb	r2, [r1, #0]
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800e8ee:	0022      	movs	r2, r4
 800e8f0:	9904      	ldr	r1, [sp, #16]
 800e8f2:	323a      	adds	r2, #58	; 0x3a
 800e8f4:	7011      	strb	r1, [r2, #0]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e8f6:	2f00      	cmp	r7, #0
 800e8f8:	d13d      	bne.n	800e976 <RadioSetRxConfig+0x1d2>
 800e8fa:	3d0b      	subs	r5, #11
 800e8fc:	42ae      	cmp	r6, r5
 800e8fe:	417f      	adcs	r7, r7
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800e900:	b2f9      	uxtb	r1, r7
 800e902:	0022      	movs	r2, r4
 800e904:	323b      	adds	r2, #59	; 0x3b
 800e906:	7011      	strb	r1, [r2, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800e908:	2201      	movs	r2, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800e90a:	3b05      	subs	r3, #5
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800e90c:	7022      	strb	r2, [r4, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800e90e:	4293      	cmp	r3, r2
 800e910:	d839      	bhi.n	800e986 <RadioSetRxConfig+0x1e2>
                if( preambleLen < 12 )
 800e912:	9b01      	ldr	r3, [sp, #4]
 800e914:	2b0b      	cmp	r3, #11
 800e916:	d836      	bhi.n	800e986 <RadioSetRxConfig+0x1e2>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 800e918:	230c      	movs	r3, #12
 800e91a:	81a3      	strh	r3, [r4, #12]
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800e91c:	0025      	movs	r5, r4
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800e91e:	9b02      	ldr	r3, [sp, #8]
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800e920:	3528      	adds	r5, #40	; 0x28
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800e922:	73a3      	strb	r3, [r4, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800e924:	4b1d      	ldr	r3, [pc, #116]	; (800e99c <RadioSetRxConfig+0x1f8>)
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	73e3      	strb	r3, [r4, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800e92a:	9b03      	ldr	r3, [sp, #12]
 800e92c:	7423      	strb	r3, [r4, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800e92e:	9b05      	ldr	r3, [sp, #20]
 800e930:	7463      	strb	r3, [r4, #17]
            RadioStandby( );
 800e932:	f7ff fc2d 	bl	800e190 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800e936:	7828      	ldrb	r0, [r5, #0]
 800e938:	1e43      	subs	r3, r0, #1
 800e93a:	4198      	sbcs	r0, r3
 800e93c:	b2c0      	uxtb	r0, r0
 800e93e:	f7ff ff21 	bl	800e784 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800e942:	0028      	movs	r0, r5
 800e944:	f000 fafc 	bl	800ef40 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800e948:	0020      	movs	r0, r4
 800e94a:	f000 fc19 	bl	800f180 <SX126xSetPacketParams>
            SX126xSetLoRaSymbNumTimeout( symbTimeout );
 800e94e:	466b      	mov	r3, sp
 800e950:	7818      	ldrb	r0, [r3, #0]
 800e952:	f000 fc8d 	bl	800f270 <SX126xSetLoRaSymbNumTimeout>
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800e956:	7c63      	ldrb	r3, [r4, #17]
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800e958:	4818      	ldr	r0, [pc, #96]	; (800e9bc <RadioSetRxConfig+0x218>)
 800e95a:	2404      	movs	r4, #4
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800e95c:	2b01      	cmp	r3, #1
 800e95e:	d116      	bne.n	800e98e <RadioSetRxConfig+0x1ea>
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800e960:	f000 fcc0 	bl	800f2e4 <SX126xReadRegister>
 800e964:	43a0      	bics	r0, r4
 800e966:	b2c1      	uxtb	r1, r0
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800e968:	4814      	ldr	r0, [pc, #80]	; (800e9bc <RadioSetRxConfig+0x218>)
 800e96a:	f000 fc5f 	bl	800f22c <SX126xWriteRegister>
            RxTimeout = 0xFFFF;
 800e96e:	4b0a      	ldr	r3, [pc, #40]	; (800e998 <RadioSetRxConfig+0x1f4>)
 800e970:	4a13      	ldr	r2, [pc, #76]	; (800e9c0 <RadioSetRxConfig+0x21c>)
 800e972:	60da      	str	r2, [r3, #12]
}
 800e974:	e744      	b.n	800e800 <RadioSetRxConfig+0x5c>
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800e976:	2100      	movs	r1, #0
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800e978:	2f01      	cmp	r7, #1
 800e97a:	d1c2      	bne.n	800e902 <RadioSetRxConfig+0x15e>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800e97c:	3d0c      	subs	r5, #12
 800e97e:	426a      	negs	r2, r5
 800e980:	4155      	adcs	r5, r2
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800e982:	b2e9      	uxtb	r1, r5
 800e984:	e7bd      	b.n	800e902 <RadioSetRxConfig+0x15e>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800e986:	4b06      	ldr	r3, [pc, #24]	; (800e9a0 <RadioSetRxConfig+0x1fc>)
 800e988:	9a01      	ldr	r2, [sp, #4]
 800e98a:	819a      	strh	r2, [r3, #12]
 800e98c:	e7c6      	b.n	800e91c <RadioSetRxConfig+0x178>
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800e98e:	f000 fca9 	bl	800f2e4 <SX126xReadRegister>
 800e992:	4304      	orrs	r4, r0
 800e994:	b2e1      	uxtb	r1, r4
 800e996:	e7e7      	b.n	800e968 <RadioSetRxConfig+0x1c4>
 800e998:	20000e3c 	.word	0x20000e3c
 800e99c:	2000016c 	.word	0x2000016c
 800e9a0:	200014d0 	.word	0x200014d0
 800e9a4:	00001804 	.word	0x00001804
 800e9a8:	080116f8 	.word	0x080116f8
 800e9ac:	000001ff 	.word	0x000001ff
 800e9b0:	3ff00000 	.word	0x3ff00000
 800e9b4:	40200000 	.word	0x40200000
 800e9b8:	408f4000 	.word	0x408f4000
 800e9bc:	00000736 	.word	0x00000736
 800e9c0:	0000ffff 	.word	0x0000ffff

0800e9c4 <RadioSetTxConfig>:
{
 800e9c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9c6:	b087      	sub	sp, #28
 800e9c8:	9102      	str	r1, [sp, #8]
 800e9ca:	a90c      	add	r1, sp, #48	; 0x30
 800e9cc:	0017      	movs	r7, r2
 800e9ce:	c904      	ldmia	r1!, {r2}
 800e9d0:	0005      	movs	r5, r0
 800e9d2:	7809      	ldrb	r1, [r1, #0]
 800e9d4:	468c      	mov	ip, r1
 800e9d6:	a90e      	add	r1, sp, #56	; 0x38
 800e9d8:	880e      	ldrh	r6, [r1, #0]
 800e9da:	a90f      	add	r1, sp, #60	; 0x3c
 800e9dc:	7809      	ldrb	r1, [r1, #0]
 800e9de:	9100      	str	r1, [sp, #0]
 800e9e0:	a910      	add	r1, sp, #64	; 0x40
 800e9e2:	7809      	ldrb	r1, [r1, #0]
 800e9e4:	9101      	str	r1, [sp, #4]
 800e9e6:	a913      	add	r1, sp, #76	; 0x4c
 800e9e8:	7809      	ldrb	r1, [r1, #0]
 800e9ea:	9103      	str	r1, [sp, #12]
    switch( modem )
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d008      	beq.n	800ea02 <RadioSetTxConfig+0x3e>
 800e9f0:	2801      	cmp	r0, #1
 800e9f2:	d044      	beq.n	800ea7e <RadioSetTxConfig+0xba>
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800e9f4:	4850      	ldr	r0, [pc, #320]	; (800eb38 <RadioSetTxConfig+0x174>)
 800e9f6:	f000 fc75 	bl	800f2e4 <SX126xReadRegister>
 800e9fa:	2104      	movs	r1, #4
 800e9fc:	4301      	orrs	r1, r0
 800e9fe:	b2c9      	uxtb	r1, r1
 800ea00:	e084      	b.n	800eb0c <RadioSetTxConfig+0x148>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ea02:	4c4e      	ldr	r4, [pc, #312]	; (800eb3c <RadioSetTxConfig+0x178>)
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800ea04:	00f6      	lsls	r6, r6, #3
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ea06:	0021      	movs	r1, r4
            SX126x.ModulationParams.Params.Gfsk.BitRate = datarate;
 800ea08:	62e2      	str	r2, [r4, #44]	; 0x2c
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ea0a:	3128      	adds	r1, #40	; 0x28
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800ea0c:	0022      	movs	r2, r4
            SX126x.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800ea0e:	7008      	strb	r0, [r1, #0]
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800ea10:	210b      	movs	r1, #11
 800ea12:	3234      	adds	r2, #52	; 0x34
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800ea14:	0058      	lsls	r0, r3, #1
            SX126x.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 800ea16:	7011      	strb	r1, [r2, #0]
            SX126x.ModulationParams.Params.Gfsk.Bandwidth = RadioGetFskBandwidthRegValue( bandwidth << 1 ); // SX126x badwidth is double sided
 800ea18:	f7ff fc8a 	bl	800e330 <RadioGetFskBandwidthRegValue>
 800ea1c:	0023      	movs	r3, r4
 800ea1e:	3335      	adds	r3, #53	; 0x35
 800ea20:	7018      	strb	r0, [r3, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800ea22:	4b47      	ldr	r3, [pc, #284]	; (800eb40 <RadioSetTxConfig+0x17c>)
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800ea24:	9a00      	ldr	r2, [sp, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800ea26:	80a3      	strh	r3, [r4, #4]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800ea28:	2301      	movs	r3, #1
            if( crcOn == true )
 800ea2a:	9901      	ldr	r1, [sp, #4]
            SX126x.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800ea2c:	405a      	eors	r2, r3
 800ea2e:	71e2      	strb	r2, [r4, #7]
            SX126x.ModulationParams.Params.Gfsk.Fdev = fdev;
 800ea30:	6327      	str	r7, [r4, #48]	; 0x30
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800ea32:	22f2      	movs	r2, #242	; 0xf2
            SX126x.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800ea34:	7025      	strb	r5, [r4, #0]
            SX126x.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800ea36:	8066      	strh	r6, [r4, #2]
            SX126x.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 800ea38:	71a5      	strb	r5, [r4, #6]
            if( crcOn == true )
 800ea3a:	2900      	cmp	r1, #0
 800ea3c:	d100      	bne.n	800ea40 <RadioSetTxConfig+0x7c>
                SX126x.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 800ea3e:	001a      	movs	r2, r3
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800ea40:	0025      	movs	r5, r4
 800ea42:	3528      	adds	r5, #40	; 0x28
            SX126x.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800ea44:	72a3      	strb	r3, [r4, #10]
 800ea46:	7262      	strb	r2, [r4, #9]
            RadioStandby( );
 800ea48:	f7ff fba2 	bl	800e190 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800ea4c:	7828      	ldrb	r0, [r5, #0]
 800ea4e:	1e43      	subs	r3, r0, #1
 800ea50:	4198      	sbcs	r0, r3
 800ea52:	b2c0      	uxtb	r0, r0
 800ea54:	f7ff fe96 	bl	800e784 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800ea58:	0028      	movs	r0, r5
 800ea5a:	f000 fa71 	bl	800ef40 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800ea5e:	0020      	movs	r0, r4
 800ea60:	f000 fb8e 	bl	800f180 <SX126xSetPacketParams>
            SX126xSetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800ea64:	4937      	ldr	r1, [pc, #220]	; (800eb44 <RadioSetTxConfig+0x180>)
 800ea66:	2208      	movs	r2, #8
 800ea68:	3134      	adds	r1, #52	; 0x34
 800ea6a:	a804      	add	r0, sp, #16
 800ea6c:	f001 fb58 	bl	8010120 <memcpy>
 800ea70:	a804      	add	r0, sp, #16
 800ea72:	f000 fb57 	bl	800f124 <SX126xSetSyncWord>
            SX126xSetWhiteningSeed( 0x01FF );
 800ea76:	4834      	ldr	r0, [pc, #208]	; (800eb48 <RadioSetTxConfig+0x184>)
 800ea78:	f000 fc3e 	bl	800f2f8 <SX126xSetWhiteningSeed>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800ea7c:	e7ba      	b.n	800e9f4 <RadioSetTxConfig+0x30>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800ea7e:	4c2f      	ldr	r4, [pc, #188]	; (800eb3c <RadioSetTxConfig+0x178>)
 800ea80:	0021      	movs	r1, r4
 800ea82:	3128      	adds	r1, #40	; 0x28
 800ea84:	7008      	strb	r0, [r1, #0]
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800ea86:	0020      	movs	r0, r4
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800ea88:	0027      	movs	r7, r4
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800ea8a:	3038      	adds	r0, #56	; 0x38
 800ea8c:	b2d1      	uxtb	r1, r2
 800ea8e:	7001      	strb	r1, [r0, #0]
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800ea90:	482c      	ldr	r0, [pc, #176]	; (800eb44 <RadioSetTxConfig+0x180>)
 800ea92:	3739      	adds	r7, #57	; 0x39
 800ea94:	18c0      	adds	r0, r0, r3
 800ea96:	7900      	ldrb	r0, [r0, #4]
 800ea98:	7038      	strb	r0, [r7, #0]
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800ea9a:	0020      	movs	r0, r4
 800ea9c:	4667      	mov	r7, ip
 800ea9e:	303a      	adds	r0, #58	; 0x3a
 800eaa0:	7007      	strb	r7, [r0, #0]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d13d      	bne.n	800eb22 <RadioSetTxConfig+0x15e>
 800eaa6:	3a0b      	subs	r2, #11
 800eaa8:	4295      	cmp	r5, r2
 800eaaa:	415b      	adcs	r3, r3
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800eaac:	b2d8      	uxtb	r0, r3
 800eaae:	0023      	movs	r3, r4
 800eab0:	333b      	adds	r3, #59	; 0x3b
 800eab2:	7018      	strb	r0, [r3, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800eab4:	2301      	movs	r3, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800eab6:	3905      	subs	r1, #5
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800eab8:	7023      	strb	r3, [r4, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800eaba:	4299      	cmp	r1, r3
 800eabc:	d839      	bhi.n	800eb32 <RadioSetTxConfig+0x16e>
                if( preambleLen < 12 )
 800eabe:	2e0b      	cmp	r6, #11
 800eac0:	d837      	bhi.n	800eb32 <RadioSetTxConfig+0x16e>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 800eac2:	330b      	adds	r3, #11
 800eac4:	81a3      	strh	r3, [r4, #12]
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800eac6:	0025      	movs	r5, r4
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800eac8:	9b00      	ldr	r3, [sp, #0]
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800eaca:	3528      	adds	r5, #40	; 0x28
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800eacc:	73a3      	strb	r3, [r4, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800eace:	4b1f      	ldr	r3, [pc, #124]	; (800eb4c <RadioSetTxConfig+0x188>)
 800ead0:	781b      	ldrb	r3, [r3, #0]
 800ead2:	73e3      	strb	r3, [r4, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800ead4:	9b01      	ldr	r3, [sp, #4]
 800ead6:	7423      	strb	r3, [r4, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800ead8:	9b03      	ldr	r3, [sp, #12]
 800eada:	7463      	strb	r3, [r4, #17]
            RadioStandby( );
 800eadc:	f7ff fb58 	bl	800e190 <RadioStandby>
            RadioSetModem( ( SX126x.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800eae0:	7828      	ldrb	r0, [r5, #0]
 800eae2:	1e43      	subs	r3, r0, #1
 800eae4:	4198      	sbcs	r0, r3
 800eae6:	b2c0      	uxtb	r0, r0
 800eae8:	f7ff fe4c 	bl	800e784 <RadioSetModem>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800eaec:	0028      	movs	r0, r5
 800eaee:	f000 fa27 	bl	800ef40 <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800eaf2:	0020      	movs	r0, r4
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800eaf4:	3439      	adds	r4, #57	; 0x39
            SX126xSetPacketParams( &SX126x.PacketParams );
 800eaf6:	f000 fb43 	bl	800f180 <SX126xSetPacketParams>
    if( ( modem == MODEM_LORA ) && ( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 800eafa:	7823      	ldrb	r3, [r4, #0]
 800eafc:	2b06      	cmp	r3, #6
 800eafe:	d000      	beq.n	800eb02 <RadioSetTxConfig+0x13e>
 800eb00:	e778      	b.n	800e9f4 <RadioSetTxConfig+0x30>
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800eb02:	480d      	ldr	r0, [pc, #52]	; (800eb38 <RadioSetTxConfig+0x174>)
 800eb04:	f000 fbee 	bl	800f2e4 <SX126xReadRegister>
 800eb08:	21fb      	movs	r1, #251	; 0xfb
 800eb0a:	4001      	ands	r1, r0
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800eb0c:	480a      	ldr	r0, [pc, #40]	; (800eb38 <RadioSetTxConfig+0x174>)
 800eb0e:	f000 fb8d 	bl	800f22c <SX126xWriteRegister>
    SX126xSetRfTxPower( power );
 800eb12:	9802      	ldr	r0, [sp, #8]
 800eb14:	f000 fc90 	bl	800f438 <SX126xSetRfTxPower>
    TxTimeout = timeout;
 800eb18:	4b0d      	ldr	r3, [pc, #52]	; (800eb50 <RadioSetTxConfig+0x18c>)
 800eb1a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800eb1c:	605a      	str	r2, [r3, #4]
}
 800eb1e:	b007      	add	sp, #28
 800eb20:	bdf0      	pop	{r4, r5, r6, r7, pc}
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800eb22:	2000      	movs	r0, #0
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	d1c2      	bne.n	800eaae <RadioSetTxConfig+0xea>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800eb28:	3a0c      	subs	r2, #12
 800eb2a:	4253      	negs	r3, r2
 800eb2c:	415a      	adcs	r2, r3
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800eb2e:	b2d0      	uxtb	r0, r2
 800eb30:	e7bd      	b.n	800eaae <RadioSetTxConfig+0xea>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800eb32:	4b02      	ldr	r3, [pc, #8]	; (800eb3c <RadioSetTxConfig+0x178>)
 800eb34:	819e      	strh	r6, [r3, #12]
 800eb36:	e7c6      	b.n	800eac6 <RadioSetTxConfig+0x102>
 800eb38:	00000889 	.word	0x00000889
 800eb3c:	200014d0 	.word	0x200014d0
 800eb40:	00001804 	.word	0x00001804
 800eb44:	080116f8 	.word	0x080116f8
 800eb48:	000001ff 	.word	0x000001ff
 800eb4c:	2000016c 	.word	0x2000016c
 800eb50:	20000e3c 	.word	0x20000e3c

0800eb54 <RadioIsChannelFree>:
{
 800eb54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb56:	0004      	movs	r4, r0
 800eb58:	b08d      	sub	sp, #52	; 0x34
    RadioSetModem( MODEM_FSK );
 800eb5a:	2000      	movs	r0, #0
{
 800eb5c:	000d      	movs	r5, r1
 800eb5e:	0016      	movs	r6, r2
 800eb60:	930b      	str	r3, [sp, #44]	; 0x2c
    RadioSetModem( MODEM_FSK );
 800eb62:	f7ff fe0f 	bl	800e784 <RadioSetModem>
    SX126xSetRfFrequency( freq );
 800eb66:	0020      	movs	r0, r4
 800eb68:	f000 f9bc 	bl	800eee4 <SX126xSetRfFrequency>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 800eb6c:	2400      	movs	r4, #0
 800eb6e:	2701      	movs	r7, #1
 800eb70:	2303      	movs	r3, #3
 800eb72:	2296      	movs	r2, #150	; 0x96
 800eb74:	0029      	movs	r1, r5
 800eb76:	0092      	lsls	r2, r2, #2
 800eb78:	0020      	movs	r0, r4
 800eb7a:	9408      	str	r4, [sp, #32]
 800eb7c:	9407      	str	r4, [sp, #28]
 800eb7e:	9406      	str	r4, [sp, #24]
 800eb80:	9405      	str	r4, [sp, #20]
 800eb82:	9404      	str	r4, [sp, #16]
 800eb84:	9403      	str	r4, [sp, #12]
 800eb86:	9402      	str	r4, [sp, #8]
 800eb88:	9301      	str	r3, [sp, #4]
 800eb8a:	9709      	str	r7, [sp, #36]	; 0x24
 800eb8c:	0023      	movs	r3, r4
 800eb8e:	9500      	str	r5, [sp, #0]
 800eb90:	f7ff fe08 	bl	800e7a4 <RadioSetRxConfig>
    RadioRx( 0 );
 800eb94:	0020      	movs	r0, r4
 800eb96:	f7ff fc75 	bl	800e484 <RadioRx>
    RADIO_DELAY_MS( 1 );
 800eb9a:	0038      	movs	r0, r7
 800eb9c:	f7f5 fac2 	bl	8004124 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800eba0:	f001 f82a 	bl	800fbf8 <UTIL_TIMER_GetCurrentTime>
 800eba4:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800eba6:	0020      	movs	r0, r4
 800eba8:	f001 f830 	bl	800fc0c <UTIL_TIMER_GetElapsedTime>
 800ebac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebae:	4298      	cmp	r0, r3
 800ebb0:	d305      	bcc.n	800ebbe <RadioIsChannelFree+0x6a>
    bool     status           = true;
 800ebb2:	2401      	movs	r4, #1
    RadioSleep( );
 800ebb4:	f7ff fb3a 	bl	800e22c <RadioSleep>
}
 800ebb8:	0020      	movs	r0, r4
 800ebba:	b00d      	add	sp, #52	; 0x34
 800ebbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SX126xGetRssiInst( );
 800ebbe:	f000 fa4f 	bl	800f060 <SX126xGetRssiInst>
        if( rssi > rssiThresh )
 800ebc2:	b200      	sxth	r0, r0
 800ebc4:	4286      	cmp	r6, r0
 800ebc6:	daee      	bge.n	800eba6 <RadioIsChannelFree+0x52>
            status = false;
 800ebc8:	2400      	movs	r4, #0
 800ebca:	e7f3      	b.n	800ebb4 <RadioIsChannelFree+0x60>

0800ebcc <RadioRandom>:
{
 800ebcc:	b510      	push	{r4, lr}
 800ebce:	f7ff fdc9 	bl	800e764 <RadioSetModem.part.0>
    SX126xSetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	001a      	movs	r2, r3
 800ebd6:	0019      	movs	r1, r3
 800ebd8:	0018      	movs	r0, r3
 800ebda:	f000 f939 	bl	800ee50 <SX126xSetDioIrqParams>
    rnd = SX126xGetRandom( );
 800ebde:	f000 fba9 	bl	800f334 <SX126xGetRandom>
 800ebe2:	0004      	movs	r4, r0
    Sx_Board_SetLedRx(false);
 800ebe4:	2000      	movs	r0, #0
 800ebe6:	f7f5 ff11 	bl	8004a0c <SX126x_RADIO_BoardSetLedRx>
}
 800ebea:	0020      	movs	r0, r4
 800ebec:	bd10      	pop	{r4, pc}
	...

0800ebf0 <SX126xGetOperatingMode>:
    SX126xSetOperatingMode( MODE_STDBY_RC );
}

RadioOperatingModes_t SX126xGetOperatingMode( void )
{
    return OperatingMode;
 800ebf0:	4b01      	ldr	r3, [pc, #4]	; (800ebf8 <SX126xGetOperatingMode+0x8>)
 800ebf2:	7818      	ldrb	r0, [r3, #0]
}
 800ebf4:	4770      	bx	lr
 800ebf6:	46c0      	nop			; (mov r8, r8)
 800ebf8:	20000e50 	.word	0x20000e50

0800ebfc <SX126xSetOperatingMode>:

void SX126xSetOperatingMode( RadioOperatingModes_t mode )
{
    OperatingMode = mode;
 800ebfc:	4b01      	ldr	r3, [pc, #4]	; (800ec04 <SX126xSetOperatingMode+0x8>)
 800ebfe:	7018      	strb	r0, [r3, #0]
}
 800ec00:	4770      	bx	lr
 800ec02:	46c0      	nop			; (mov r8, r8)
 800ec04:	20000e50 	.word	0x20000e50

0800ec08 <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady( void )
{
 800ec08:	b510      	push	{r4, lr}
    return OperatingMode;
 800ec0a:	4b05      	ldr	r3, [pc, #20]	; (800ec20 <SX126xCheckDeviceReady+0x18>)
 800ec0c:	781b      	ldrb	r3, [r3, #0]
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d001      	beq.n	800ec16 <SX126xCheckDeviceReady+0xe>
 800ec12:	2b06      	cmp	r3, #6
 800ec14:	d101      	bne.n	800ec1a <SX126xCheckDeviceReady+0x12>
    {
        Sx_Board_WakeUp( );
 800ec16:	f7f5 ff0d 	bl	8004a34 <SX126x_RADIO_WakeUp>
        // Switch is turned off when device is in sleep mode and turned on is all other modes
        //@Murata already ready for tx or sleep on Murata module.
        //Sx_Board_SetAntSw( RFSW_ON );
    }
    Sx_Board_WaitOnBusy( );
 800ec1a:	f7f5 fecd 	bl	80049b8 <SX126x_RADIO_WaitOnBusy>
}
 800ec1e:	bd10      	pop	{r4, pc}
 800ec20:	20000e50 	.word	0x20000e50

0800ec24 <SX126xGetPacketType>:
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
}

RadioPacketTypes_t SX126xGetPacketType( void )
{
    return PacketType;
 800ec24:	4b01      	ldr	r3, [pc, #4]	; (800ec2c <SX126xGetPacketType+0x8>)
 800ec26:	7858      	ldrb	r0, [r3, #1]
}
 800ec28:	4770      	bx	lr
 800ec2a:	46c0      	nop			; (mov r8, r8)
 800ec2c:	20000e50 	.word	0x20000e50

0800ec30 <SX126xWriteCommand>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SX126xWriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800ec30:	b570      	push	{r4, r5, r6, lr}
 800ec32:	0005      	movs	r5, r0
 800ec34:	000c      	movs	r4, r1
 800ec36:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 800ec38:	f7ff ffe6 	bl	800ec08 <SX126xCheckDeviceReady>

  if(command == RADIO_SET_RX)//@Murta allow rx   
 800ec3c:	2d82      	cmp	r5, #130	; 0x82
 800ec3e:	d102      	bne.n	800ec46 <SX126xWriteCommand+0x16>
    Sx_Board_SetAntSw( RFSW_RX );
 800ec40:	2001      	movs	r0, #1
 800ec42:	f7f5 fed3 	bl	80049ec <SX126x_RADIO_SetAntSw>

    Sx_Board_ChipSelect( 0 );
 800ec46:	2000      	movs	r0, #0
 800ec48:	f7f5 fec0 	bl	80049cc <SX126x_RADIO_ChipSelect>

    Sx_Board_SendRecv(  ( uint8_t )command );
 800ec4c:	b2a8      	uxth	r0, r5
 800ec4e:	f7f5 fee2 	bl	8004a16 <SX126x_RADIO_SendRecv>

    for( uint16_t i = 0; i < size; i++ )
 800ec52:	19a6      	adds	r6, r4, r6
 800ec54:	42b4      	cmp	r4, r6
 800ec56:	d107      	bne.n	800ec68 <SX126xWriteCommand+0x38>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }

    Sx_Board_ChipSelect( 1 );
 800ec58:	2001      	movs	r0, #1
 800ec5a:	f7f5 feb7 	bl	80049cc <SX126x_RADIO_ChipSelect>

    if( command != RADIO_SET_SLEEP )
 800ec5e:	2d84      	cmp	r5, #132	; 0x84
 800ec60:	d001      	beq.n	800ec66 <SX126xWriteCommand+0x36>
    {
        Sx_Board_WaitOnBusy( );
 800ec62:	f7f5 fea9 	bl	80049b8 <SX126x_RADIO_WaitOnBusy>
    }
}
 800ec66:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv(  buffer[i] );
 800ec68:	7820      	ldrb	r0, [r4, #0]
 800ec6a:	f7f5 fed4 	bl	8004a16 <SX126x_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800ec6e:	3401      	adds	r4, #1
 800ec70:	e7f0      	b.n	800ec54 <SX126xWriteCommand+0x24>
	...

0800ec74 <SX126xSetSleep>:
{
 800ec74:	b513      	push	{r0, r1, r4, lr}
 800ec76:	1c04      	adds	r4, r0, #0
    Sx_Board_SetAntSw( RFSW_OFF );
 800ec78:	2000      	movs	r0, #0
 800ec7a:	f7f5 feb7 	bl	80049ec <SX126x_RADIO_SetAntSw>
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800ec7e:	2006      	movs	r0, #6
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800ec80:	466b      	mov	r3, sp
 800ec82:	4020      	ands	r0, r4
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800ec84:	07e4      	lsls	r4, r4, #31
 800ec86:	0fe4      	lsrs	r4, r4, #31
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800ec88:	1dd9      	adds	r1, r3, #7
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800ec8a:	4304      	orrs	r4, r0
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800ec8c:	2201      	movs	r2, #1
 800ec8e:	2084      	movs	r0, #132	; 0x84
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800ec90:	700c      	strb	r4, [r1, #0]
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800ec92:	f7ff ffcd 	bl	800ec30 <SX126xWriteCommand>
    OperatingMode = mode;
 800ec96:	2200      	movs	r2, #0
 800ec98:	4b01      	ldr	r3, [pc, #4]	; (800eca0 <SX126xSetSleep+0x2c>)
 800ec9a:	701a      	strb	r2, [r3, #0]
}
 800ec9c:	bd13      	pop	{r0, r1, r4, pc}
 800ec9e:	46c0      	nop			; (mov r8, r8)
 800eca0:	20000e50 	.word	0x20000e50

0800eca4 <SX126xSetStandby>:
{
 800eca4:	b507      	push	{r0, r1, r2, lr}
 800eca6:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800eca8:	2201      	movs	r2, #1
{
 800ecaa:	71d8      	strb	r0, [r3, #7]
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800ecac:	1dd9      	adds	r1, r3, #7
 800ecae:	2080      	movs	r0, #128	; 0x80
 800ecb0:	f7ff ffbe 	bl	800ec30 <SX126xWriteCommand>
    if( standbyConfig == STDBY_RC )
 800ecb4:	466b      	mov	r3, sp
 800ecb6:	79db      	ldrb	r3, [r3, #7]
    OperatingMode = mode;
 800ecb8:	1e5a      	subs	r2, r3, #1
 800ecba:	4193      	sbcs	r3, r2
 800ecbc:	4a01      	ldr	r2, [pc, #4]	; (800ecc4 <SX126xSetStandby+0x20>)
 800ecbe:	3301      	adds	r3, #1
 800ecc0:	7013      	strb	r3, [r2, #0]
}
 800ecc2:	bd07      	pop	{r0, r1, r2, pc}
 800ecc4:	20000e50 	.word	0x20000e50

0800ecc8 <SX126xSetTx>:
{
 800ecc8:	b507      	push	{r0, r1, r2, lr}
    OperatingMode = mode;
 800ecca:	2204      	movs	r2, #4
 800eccc:	4b07      	ldr	r3, [pc, #28]	; (800ecec <SX126xSetTx+0x24>)
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ecce:	a901      	add	r1, sp, #4
    OperatingMode = mode;
 800ecd0:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ecd2:	0c03      	lsrs	r3, r0, #16
 800ecd4:	700b      	strb	r3, [r1, #0]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800ecd6:	7088      	strb	r0, [r1, #2]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ecd8:	0a03      	lsrs	r3, r0, #8
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 800ecda:	3a01      	subs	r2, #1
 800ecdc:	2083      	movs	r0, #131	; 0x83
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ecde:	704b      	strb	r3, [r1, #1]
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 800ece0:	f7ff ffa6 	bl	800ec30 <SX126xWriteCommand>
    Sx_Board_SetLedTx(true);
 800ece4:	2001      	movs	r0, #1
 800ece6:	f7f5 fe90 	bl	8004a0a <SX126x_RADIO_BoardSetLedTx>
}
 800ecea:	bd07      	pop	{r0, r1, r2, pc}
 800ecec:	20000e50 	.word	0x20000e50

0800ecf0 <SX126xSetRx>:
{
 800ecf0:	b507      	push	{r0, r1, r2, lr}
    OperatingMode = mode;
 800ecf2:	2205      	movs	r2, #5
 800ecf4:	4b07      	ldr	r3, [pc, #28]	; (800ed14 <SX126xSetRx+0x24>)
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ecf6:	a901      	add	r1, sp, #4
    OperatingMode = mode;
 800ecf8:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ecfa:	0c03      	lsrs	r3, r0, #16
 800ecfc:	700b      	strb	r3, [r1, #0]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800ecfe:	7088      	strb	r0, [r1, #2]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ed00:	0a03      	lsrs	r3, r0, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800ed02:	3a02      	subs	r2, #2
 800ed04:	2082      	movs	r0, #130	; 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ed06:	704b      	strb	r3, [r1, #1]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800ed08:	f7ff ff92 	bl	800ec30 <SX126xWriteCommand>
    Sx_Board_SetLedRx(true);
 800ed0c:	2001      	movs	r0, #1
 800ed0e:	f7f5 fe7d 	bl	8004a0c <SX126x_RADIO_BoardSetLedRx>
}
 800ed12:	bd07      	pop	{r0, r1, r2, pc}
 800ed14:	20000e50 	.word	0x20000e50

0800ed18 <SX126xSetRxDutyCycle>:
{
 800ed18:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800ed1a:	466a      	mov	r2, sp
 800ed1c:	0c03      	lsrs	r3, r0, #16
 800ed1e:	7013      	strb	r3, [r2, #0]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800ed20:	0a03      	lsrs	r3, r0, #8
 800ed22:	7053      	strb	r3, [r2, #1]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800ed24:	0c0b      	lsrs	r3, r1, #16
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800ed26:	ba49      	rev16	r1, r1
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800ed28:	7090      	strb	r0, [r2, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800ed2a:	70d3      	strb	r3, [r2, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800ed2c:	8091      	strh	r1, [r2, #4]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800ed2e:	2094      	movs	r0, #148	; 0x94
 800ed30:	2206      	movs	r2, #6
 800ed32:	4669      	mov	r1, sp
 800ed34:	f7ff ff7c 	bl	800ec30 <SX126xWriteCommand>
    OperatingMode = mode;
 800ed38:	2206      	movs	r2, #6
 800ed3a:	4b01      	ldr	r3, [pc, #4]	; (800ed40 <SX126xSetRxDutyCycle+0x28>)
 800ed3c:	701a      	strb	r2, [r3, #0]
}
 800ed3e:	bd07      	pop	{r0, r1, r2, pc}
 800ed40:	20000e50 	.word	0x20000e50

0800ed44 <SX126xSetCad>:
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 800ed44:	2200      	movs	r2, #0
{
 800ed46:	b510      	push	{r4, lr}
    SX126xWriteCommand( RADIO_SET_CAD, 0, 0 );
 800ed48:	0011      	movs	r1, r2
 800ed4a:	20c5      	movs	r0, #197	; 0xc5
 800ed4c:	f7ff ff70 	bl	800ec30 <SX126xWriteCommand>
    OperatingMode = mode;
 800ed50:	2207      	movs	r2, #7
 800ed52:	4b01      	ldr	r3, [pc, #4]	; (800ed58 <SX126xSetCad+0x14>)
 800ed54:	701a      	strb	r2, [r3, #0]
}
 800ed56:	bd10      	pop	{r4, pc}
 800ed58:	20000e50 	.word	0x20000e50

0800ed5c <SX126xSetTxContinuousWave>:
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800ed5c:	2200      	movs	r2, #0
{
 800ed5e:	b510      	push	{r4, lr}
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800ed60:	0011      	movs	r1, r2
 800ed62:	20d1      	movs	r0, #209	; 0xd1
 800ed64:	f7ff ff64 	bl	800ec30 <SX126xWriteCommand>
    OperatingMode = mode;
 800ed68:	2204      	movs	r2, #4
 800ed6a:	4b01      	ldr	r3, [pc, #4]	; (800ed70 <SX126xSetTxContinuousWave+0x14>)
 800ed6c:	701a      	strb	r2, [r3, #0]
}
 800ed6e:	bd10      	pop	{r4, pc}
 800ed70:	20000e50 	.word	0x20000e50

0800ed74 <SX126xSetStopRxTimerOnPreambleDetect>:
{
 800ed74:	b507      	push	{r0, r1, r2, lr}
 800ed76:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800ed78:	2201      	movs	r2, #1
{
 800ed7a:	1dd9      	adds	r1, r3, #7
 800ed7c:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800ed7e:	209f      	movs	r0, #159	; 0x9f
 800ed80:	f7ff ff56 	bl	800ec30 <SX126xWriteCommand>
}
 800ed84:	bd07      	pop	{r0, r1, r2, pc}

0800ed86 <SX126xSetRegulatorMode>:
{
 800ed86:	b507      	push	{r0, r1, r2, lr}
 800ed88:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800ed8a:	2201      	movs	r2, #1
{
 800ed8c:	1dd9      	adds	r1, r3, #7
 800ed8e:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800ed90:	2096      	movs	r0, #150	; 0x96
 800ed92:	f7ff ff4d 	bl	800ec30 <SX126xWriteCommand>
}
 800ed96:	bd07      	pop	{r0, r1, r2, pc}

0800ed98 <SX126xCalibrate>:
{
 800ed98:	b507      	push	{r0, r1, r2, lr}
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ed9a:	466a      	mov	r2, sp
{
 800ed9c:	1c03      	adds	r3, r0, #0
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800ed9e:	2060      	movs	r0, #96	; 0x60
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800eda0:	1dd1      	adds	r1, r2, #7
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800eda2:	07da      	lsls	r2, r3, #31
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800eda4:	4018      	ands	r0, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800eda6:	0fd2      	lsrs	r2, r2, #31
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800eda8:	4310      	orrs	r0, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800edaa:	2210      	movs	r2, #16
 800edac:	401a      	ands	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800edae:	4310      	orrs	r0, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800edb0:	2208      	movs	r2, #8
 800edb2:	401a      	ands	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800edb4:	4310      	orrs	r0, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800edb6:	2204      	movs	r2, #4
 800edb8:	401a      	ands	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800edba:	4310      	orrs	r0, r2
 800edbc:	2202      	movs	r2, #2
 800edbe:	4013      	ands	r3, r2
 800edc0:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800edc2:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_CALIBRATE, &value, 1 );
 800edc4:	3a01      	subs	r2, #1
 800edc6:	2089      	movs	r0, #137	; 0x89
 800edc8:	f7ff ff32 	bl	800ec30 <SX126xWriteCommand>
}
 800edcc:	bd07      	pop	{r0, r1, r2, pc}
	...

0800edd0 <SX126xCalibrateImage>:
{
 800edd0:	b507      	push	{r0, r1, r2, lr}
    if( freq > 900000000 )
 800edd2:	4b0f      	ldr	r3, [pc, #60]	; (800ee10 <SX126xCalibrateImage+0x40>)
 800edd4:	a901      	add	r1, sp, #4
 800edd6:	4298      	cmp	r0, r3
 800edd8:	d906      	bls.n	800ede8 <SX126xCalibrateImage+0x18>
        calFreq[0] = 0xE1;
 800edda:	4b0e      	ldr	r3, [pc, #56]	; (800ee14 <SX126xCalibrateImage+0x44>)
        calFreq[0] = 0x6B;
 800eddc:	800b      	strh	r3, [r1, #0]
    SX126xWriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800edde:	2202      	movs	r2, #2
 800ede0:	2098      	movs	r0, #152	; 0x98
 800ede2:	f7ff ff25 	bl	800ec30 <SX126xWriteCommand>
}
 800ede6:	bd07      	pop	{r0, r1, r2, pc}
    else if( freq > 850000000 )
 800ede8:	4b0b      	ldr	r3, [pc, #44]	; (800ee18 <SX126xCalibrateImage+0x48>)
 800edea:	4298      	cmp	r0, r3
 800edec:	d901      	bls.n	800edf2 <SX126xCalibrateImage+0x22>
        calFreq[0] = 0xD7;
 800edee:	4b0b      	ldr	r3, [pc, #44]	; (800ee1c <SX126xCalibrateImage+0x4c>)
 800edf0:	e7f4      	b.n	800eddc <SX126xCalibrateImage+0xc>
    else if( freq > 770000000 )
 800edf2:	4b0b      	ldr	r3, [pc, #44]	; (800ee20 <SX126xCalibrateImage+0x50>)
 800edf4:	4298      	cmp	r0, r3
 800edf6:	d901      	bls.n	800edfc <SX126xCalibrateImage+0x2c>
        calFreq[0] = 0xC1;
 800edf8:	4b0a      	ldr	r3, [pc, #40]	; (800ee24 <SX126xCalibrateImage+0x54>)
 800edfa:	e7ef      	b.n	800eddc <SX126xCalibrateImage+0xc>
    else if( freq > 460000000 )
 800edfc:	4b0a      	ldr	r3, [pc, #40]	; (800ee28 <SX126xCalibrateImage+0x58>)
 800edfe:	4298      	cmp	r0, r3
 800ee00:	d901      	bls.n	800ee06 <SX126xCalibrateImage+0x36>
        calFreq[0] = 0x75;
 800ee02:	4b0a      	ldr	r3, [pc, #40]	; (800ee2c <SX126xCalibrateImage+0x5c>)
 800ee04:	e7ea      	b.n	800eddc <SX126xCalibrateImage+0xc>
    else if( freq > 425000000 )
 800ee06:	4b0a      	ldr	r3, [pc, #40]	; (800ee30 <SX126xCalibrateImage+0x60>)
 800ee08:	4298      	cmp	r0, r3
 800ee0a:	d9e8      	bls.n	800edde <SX126xCalibrateImage+0xe>
        calFreq[0] = 0x6B;
 800ee0c:	4b09      	ldr	r3, [pc, #36]	; (800ee34 <SX126xCalibrateImage+0x64>)
 800ee0e:	e7e5      	b.n	800eddc <SX126xCalibrateImage+0xc>
 800ee10:	35a4e900 	.word	0x35a4e900
 800ee14:	ffffe9e1 	.word	0xffffe9e1
 800ee18:	32a9f880 	.word	0x32a9f880
 800ee1c:	ffffdbd7 	.word	0xffffdbd7
 800ee20:	2de54480 	.word	0x2de54480
 800ee24:	ffffc5c1 	.word	0xffffc5c1
 800ee28:	1b6b0b00 	.word	0x1b6b0b00
 800ee2c:	ffff8175 	.word	0xffff8175
 800ee30:	1954fc40 	.word	0x1954fc40
 800ee34:	00006f6b 	.word	0x00006f6b

0800ee38 <SX126xSetPaConfig>:
{
 800ee38:	b513      	push	{r0, r1, r4, lr}
    buf[0] = paDutyCycle;
 800ee3a:	ac01      	add	r4, sp, #4
 800ee3c:	7020      	strb	r0, [r4, #0]
    buf[1] = hpMax;
 800ee3e:	7061      	strb	r1, [r4, #1]
    buf[2] = deviceSel;
 800ee40:	70a2      	strb	r2, [r4, #2]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800ee42:	0021      	movs	r1, r4
 800ee44:	2204      	movs	r2, #4
 800ee46:	2095      	movs	r0, #149	; 0x95
    buf[3] = paLut;
 800ee48:	70e3      	strb	r3, [r4, #3]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800ee4a:	f7ff fef1 	bl	800ec30 <SX126xWriteCommand>
}
 800ee4e:	bd13      	pop	{r0, r1, r4, pc}

0800ee50 <SX126xSetDioIrqParams>:
{
 800ee50:	b513      	push	{r0, r1, r4, lr}
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800ee52:	466c      	mov	r4, sp
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800ee54:	ba52      	rev16	r2, r2
 800ee56:	80a2      	strh	r2, [r4, #4]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800ee58:	2208      	movs	r2, #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800ee5a:	ba40      	rev16	r0, r0
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800ee5c:	ba49      	rev16	r1, r1
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800ee5e:	8020      	strh	r0, [r4, #0]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800ee60:	8061      	strh	r1, [r4, #2]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800ee62:	ba5b      	rev16	r3, r3
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800ee64:	4669      	mov	r1, sp
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800ee66:	0010      	movs	r0, r2
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800ee68:	80e3      	strh	r3, [r4, #6]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800ee6a:	f7ff fee1 	bl	800ec30 <SX126xWriteCommand>
}
 800ee6e:	bd13      	pop	{r0, r1, r4, pc}

0800ee70 <SX126xSetDio2AsRfSwitchCtrl>:
{
 800ee70:	b507      	push	{r0, r1, r2, lr}
 800ee72:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 800ee74:	2201      	movs	r2, #1
{
 800ee76:	1dd9      	adds	r1, r3, #7
 800ee78:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 800ee7a:	209d      	movs	r0, #157	; 0x9d
 800ee7c:	f7ff fed8 	bl	800ec30 <SX126xWriteCommand>
}
 800ee80:	bd07      	pop	{r0, r1, r2, pc}

0800ee82 <SX126xSetDio3AsTcxoCtrl>:
{
 800ee82:	b507      	push	{r0, r1, r2, lr}
 800ee84:	000b      	movs	r3, r1
    buf[0] = tcxoVoltage & 0x07;
 800ee86:	2207      	movs	r2, #7
 800ee88:	a901      	add	r1, sp, #4
 800ee8a:	4010      	ands	r0, r2
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ee8c:	0c1a      	lsrs	r2, r3, #16
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ee8e:	ba5b      	rev16	r3, r3
    buf[0] = tcxoVoltage & 0x07;
 800ee90:	7008      	strb	r0, [r1, #0]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ee92:	704a      	strb	r2, [r1, #1]
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800ee94:	2097      	movs	r0, #151	; 0x97
 800ee96:	2204      	movs	r2, #4
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800ee98:	804b      	strh	r3, [r1, #2]
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800ee9a:	f7ff fec9 	bl	800ec30 <SX126xWriteCommand>
}
 800ee9e:	bd07      	pop	{r0, r1, r2, pc}

0800eea0 <SX126xInit>:
{
 800eea0:	b507      	push	{r0, r1, r2, lr}
 800eea2:	9001      	str	r0, [sp, #4]
    Sx_Board_Reset( );
 800eea4:	f7f5 fd4a 	bl	800493c <SX126x_RADIO_Reset>
    Sx_Board_IoIrqInit( &dioIrq );
 800eea8:	a801      	add	r0, sp, #4
 800eeaa:	f7f5 fd2d 	bl	8004908 <SX126x_RADIO_IoIrqInit>
    Sx_Board_WakeUp( );
 800eeae:	f7f5 fdc1 	bl	8004a34 <SX126x_RADIO_WakeUp>
    SX126xSetStandby( STDBY_RC );
 800eeb2:	2000      	movs	r0, #0
 800eeb4:	f7ff fef6 	bl	800eca4 <SX126xSetStandby>
    if (Sx_Board_IsTcxo()  == true )
 800eeb8:	f7f5 fda5 	bl	8004a06 <SX126x_RADIO_BoardIsTcxo>
 800eebc:	2800      	cmp	r0, #0
 800eebe:	d008      	beq.n	800eed2 <SX126xInit+0x32>
      SX126xSetDio3AsTcxoCtrl( TCXO_CTRL_1_7V, Sx_Board_GetWakeUpTime( ) << 6 ); // convert from ms to SX126x time base
 800eec0:	f7f5 fd3a 	bl	8004938 <SX126x_RADIO_GetWakeUpTime>
 800eec4:	0181      	lsls	r1, r0, #6
 800eec6:	2001      	movs	r0, #1
 800eec8:	f7ff ffdb 	bl	800ee82 <SX126xSetDio3AsTcxoCtrl>
      SX126xCalibrate( calibParam );
 800eecc:	207f      	movs	r0, #127	; 0x7f
 800eece:	f7ff ff63 	bl	800ed98 <SX126xCalibrate>
    SX126xSetDio2AsRfSwitchCtrl( true );
 800eed2:	2001      	movs	r0, #1
 800eed4:	f7ff ffcc 	bl	800ee70 <SX126xSetDio2AsRfSwitchCtrl>
    OperatingMode = mode;
 800eed8:	2201      	movs	r2, #1
 800eeda:	4b01      	ldr	r3, [pc, #4]	; (800eee0 <SX126xInit+0x40>)
 800eedc:	701a      	strb	r2, [r3, #0]
}
 800eede:	bd07      	pop	{r0, r1, r2, pc}
 800eee0:	20000e50 	.word	0x20000e50

0800eee4 <SX126xSetRfFrequency>:
{
 800eee4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ImageCalibrated == false )
 800eee6:	4d0d      	ldr	r5, [pc, #52]	; (800ef1c <SX126xSetRfFrequency+0x38>)
{
 800eee8:	0004      	movs	r4, r0
    if( ImageCalibrated == false )
 800eeea:	78ab      	ldrb	r3, [r5, #2]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d103      	bne.n	800eef8 <SX126xSetRfFrequency+0x14>
        SX126xCalibrateImage( frequency );
 800eef0:	f7ff ff6e 	bl	800edd0 <SX126xCalibrateImage>
        ImageCalibrated = true;
 800eef4:	2301      	movs	r3, #1
 800eef6:	70ab      	strb	r3, [r5, #2]
    freq = ( uint32_t )( ( double )frequency / ( double )FREQ_STEP );
 800eef8:	0020      	movs	r0, r4
 800eefa:	f7f3 ff49 	bl	8002d90 <__aeabi_ui2d>
 800eefe:	4b08      	ldr	r3, [pc, #32]	; (800ef20 <SX126xSetRfFrequency+0x3c>)
 800ef00:	2200      	movs	r2, #0
 800ef02:	f7f2 fcdb 	bl	80018bc <__aeabi_ddiv>
 800ef06:	f7f1 fb7d 	bl	8000604 <__aeabi_d2uiz>
 800ef0a:	ba00      	rev	r0, r0
    buf[0] = ( uint8_t )( ( freq >> 24 ) & 0xFF );
 800ef0c:	9001      	str	r0, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800ef0e:	2204      	movs	r2, #4
 800ef10:	2086      	movs	r0, #134	; 0x86
 800ef12:	a901      	add	r1, sp, #4
 800ef14:	f7ff fe8c 	bl	800ec30 <SX126xWriteCommand>
}
 800ef18:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800ef1a:	46c0      	nop			; (mov r8, r8)
 800ef1c:	20000e50 	.word	0x20000e50
 800ef20:	3fee8480 	.word	0x3fee8480

0800ef24 <SX126xSetPacketType>:
{
 800ef24:	b507      	push	{r0, r1, r2, lr}
 800ef26:	466b      	mov	r3, sp
 800ef28:	1dd9      	adds	r1, r3, #7
    PacketType = packetType;
 800ef2a:	4b04      	ldr	r3, [pc, #16]	; (800ef3c <SX126xSetPacketType+0x18>)
{
 800ef2c:	7008      	strb	r0, [r1, #0]
    PacketType = packetType;
 800ef2e:	7058      	strb	r0, [r3, #1]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800ef30:	2201      	movs	r2, #1
 800ef32:	208a      	movs	r0, #138	; 0x8a
 800ef34:	f7ff fe7c 	bl	800ec30 <SX126xWriteCommand>
}
 800ef38:	bd07      	pop	{r0, r1, r2, pc}
 800ef3a:	46c0      	nop			; (mov r8, r8)
 800ef3c:	20000e50 	.word	0x20000e50

0800ef40 <SX126xSetModulationParams>:
{
 800ef40:	b513      	push	{r0, r1, r4, lr}
 800ef42:	0004      	movs	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800ef44:	2208      	movs	r2, #8
 800ef46:	4668      	mov	r0, sp
 800ef48:	4920      	ldr	r1, [pc, #128]	; (800efcc <SX126xSetModulationParams+0x8c>)
 800ef4a:	f001 f8e9 	bl	8010120 <memcpy>
    if( PacketType != modulationParams->PacketType )
 800ef4e:	4b20      	ldr	r3, [pc, #128]	; (800efd0 <SX126xSetModulationParams+0x90>)
 800ef50:	7820      	ldrb	r0, [r4, #0]
 800ef52:	785b      	ldrb	r3, [r3, #1]
 800ef54:	4283      	cmp	r3, r0
 800ef56:	d001      	beq.n	800ef5c <SX126xSetModulationParams+0x1c>
        SX126xSetPacketType( modulationParams->PacketType );
 800ef58:	f7ff ffe4 	bl	800ef24 <SX126xSetPacketType>
    switch( modulationParams->PacketType )
 800ef5c:	7823      	ldrb	r3, [r4, #0]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d002      	beq.n	800ef68 <SX126xSetModulationParams+0x28>
 800ef62:	2b01      	cmp	r3, #1
 800ef64:	d02d      	beq.n	800efc2 <SX126xSetModulationParams+0x82>
}
 800ef66:	bd13      	pop	{r0, r1, r4, pc}
        tempVal = ( uint32_t )( 32 * ( ( double )XTAL_FREQ / ( double )modulationParams->Params.Gfsk.BitRate ) );
 800ef68:	6860      	ldr	r0, [r4, #4]
 800ef6a:	f7f3 ff11 	bl	8002d90 <__aeabi_ui2d>
 800ef6e:	0002      	movs	r2, r0
 800ef70:	000b      	movs	r3, r1
 800ef72:	2000      	movs	r0, #0
 800ef74:	4917      	ldr	r1, [pc, #92]	; (800efd4 <SX126xSetModulationParams+0x94>)
 800ef76:	f7f2 fca1 	bl	80018bc <__aeabi_ddiv>
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	4b16      	ldr	r3, [pc, #88]	; (800efd8 <SX126xSetModulationParams+0x98>)
 800ef7e:	f7f3 f8a3 	bl	80020c8 <__aeabi_dmul>
 800ef82:	f7f1 fb3f 	bl	8000604 <__aeabi_d2uiz>
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 800ef86:	466a      	mov	r2, sp
 800ef88:	0c03      	lsrs	r3, r0, #16
 800ef8a:	7013      	strb	r3, [r2, #0]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800ef8c:	0a03      	lsrs	r3, r0, #8
        buf[2] = tempVal & 0xFF;
 800ef8e:	7090      	strb	r0, [r2, #2]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800ef90:	7053      	strb	r3, [r2, #1]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800ef92:	7b23      	ldrb	r3, [r4, #12]
        tempVal = ( uint32_t )( ( double )modulationParams->Params.Gfsk.Fdev / ( double )FREQ_STEP );
 800ef94:	68a0      	ldr	r0, [r4, #8]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800ef96:	70d3      	strb	r3, [r2, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800ef98:	7b63      	ldrb	r3, [r4, #13]
 800ef9a:	7113      	strb	r3, [r2, #4]
        tempVal = ( uint32_t )( ( double )modulationParams->Params.Gfsk.Fdev / ( double )FREQ_STEP );
 800ef9c:	f7f3 fef8 	bl	8002d90 <__aeabi_ui2d>
 800efa0:	2200      	movs	r2, #0
 800efa2:	4b0e      	ldr	r3, [pc, #56]	; (800efdc <SX126xSetModulationParams+0x9c>)
 800efa4:	f7f2 fc8a 	bl	80018bc <__aeabi_ddiv>
 800efa8:	f7f1 fb2c 	bl	8000604 <__aeabi_d2uiz>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800efac:	466a      	mov	r2, sp
 800efae:	0c03      	lsrs	r3, r0, #16
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800efb0:	ba40      	rev16	r0, r0
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 800efb2:	7153      	strb	r3, [r2, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 800efb4:	80d0      	strh	r0, [r2, #6]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800efb6:	2208      	movs	r2, #8
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800efb8:	4669      	mov	r1, sp
 800efba:	208b      	movs	r0, #139	; 0x8b
 800efbc:	f7ff fe38 	bl	800ec30 <SX126xWriteCommand>
        break;
 800efc0:	e7d1      	b.n	800ef66 <SX126xSetModulationParams+0x26>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800efc2:	6923      	ldr	r3, [r4, #16]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800efc4:	2204      	movs	r2, #4
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800efc6:	9300      	str	r3, [sp, #0]
 800efc8:	e7f6      	b.n	800efb8 <SX126xSetModulationParams+0x78>
 800efca:	46c0      	nop			; (mov r8, r8)
 800efcc:	08011850 	.word	0x08011850
 800efd0:	20000e50 	.word	0x20000e50
 800efd4:	417e8480 	.word	0x417e8480
 800efd8:	40400000 	.word	0x40400000
 800efdc:	3fee8480 	.word	0x3fee8480

0800efe0 <SX126xSetBufferBaseAddress>:
{
 800efe0:	b507      	push	{r0, r1, r2, lr}
    buf[0] = txBaseAddress;
 800efe2:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800efe4:	2202      	movs	r2, #2
    buf[0] = txBaseAddress;
 800efe6:	7118      	strb	r0, [r3, #4]
    buf[1] = rxBaseAddress;
 800efe8:	7159      	strb	r1, [r3, #5]
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800efea:	208f      	movs	r0, #143	; 0x8f
 800efec:	a901      	add	r1, sp, #4
 800efee:	f7ff fe1f 	bl	800ec30 <SX126xWriteCommand>
}
 800eff2:	bd07      	pop	{r0, r1, r2, pc}

0800eff4 <SX126xClearIrqStatus>:
{
 800eff4:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 800eff6:	2202      	movs	r2, #2
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 800eff8:	a901      	add	r1, sp, #4
 800effa:	ba40      	rev16	r0, r0
 800effc:	8008      	strh	r0, [r1, #0]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 800effe:	0010      	movs	r0, r2
 800f000:	f7ff fe16 	bl	800ec30 <SX126xWriteCommand>
}
 800f004:	bd07      	pop	{r0, r1, r2, pc}

0800f006 <SX126xReadCommand>:

uint8_t SX126xReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800f006:	b570      	push	{r4, r5, r6, lr}
 800f008:	0006      	movs	r6, r0
 800f00a:	000c      	movs	r4, r1
 800f00c:	0015      	movs	r5, r2
    uint8_t status = 0;

    SX126xCheckDeviceReady( );
 800f00e:	f7ff fdfb 	bl	800ec08 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800f012:	2000      	movs	r0, #0
 800f014:	f7f5 fcda 	bl	80049cc <SX126x_RADIO_ChipSelect>

    Sx_Board_SendRecv(  ( uint8_t )command );
 800f018:	b2b0      	uxth	r0, r6
 800f01a:	f7f5 fcfc 	bl	8004a16 <SX126x_RADIO_SendRecv>
    status = Sx_Board_SendRecv(  0x00 );
 800f01e:	2000      	movs	r0, #0
 800f020:	f7f5 fcf9 	bl	8004a16 <SX126x_RADIO_SendRecv>
 800f024:	1965      	adds	r5, r4, r5
 800f026:	b2c6      	uxtb	r6, r0
    for( uint16_t i = 0; i < size; i++ )
 800f028:	42ac      	cmp	r4, r5
 800f02a:	d106      	bne.n	800f03a <SX126xReadCommand+0x34>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }

    Sx_Board_ChipSelect( 1 );
 800f02c:	2001      	movs	r0, #1
 800f02e:	f7f5 fccd 	bl	80049cc <SX126x_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800f032:	f7f5 fcc1 	bl	80049b8 <SX126x_RADIO_WaitOnBusy>

    return status;
}
 800f036:	0030      	movs	r0, r6
 800f038:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv(  0 );
 800f03a:	2000      	movs	r0, #0
 800f03c:	f7f5 fceb 	bl	8004a16 <SX126x_RADIO_SendRecv>
 800f040:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 800f042:	3401      	adds	r4, #1
 800f044:	e7f0      	b.n	800f028 <SX126xReadCommand+0x22>

0800f046 <SX126xGetIrqStatus>:
{
 800f046:	b507      	push	{r0, r1, r2, lr}
    SX126xReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 800f048:	2202      	movs	r2, #2
 800f04a:	2012      	movs	r0, #18
 800f04c:	a901      	add	r1, sp, #4
 800f04e:	f7ff ffda 	bl	800f006 <SX126xReadCommand>
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 800f052:	466b      	mov	r3, sp
 800f054:	466a      	mov	r2, sp
 800f056:	791b      	ldrb	r3, [r3, #4]
 800f058:	7950      	ldrb	r0, [r2, #5]
 800f05a:	021b      	lsls	r3, r3, #8
 800f05c:	4318      	orrs	r0, r3
}
 800f05e:	bd0e      	pop	{r1, r2, r3, pc}

0800f060 <SX126xGetRssiInst>:
{
 800f060:	b513      	push	{r0, r1, r4, lr}
    SX126xReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 800f062:	ac01      	add	r4, sp, #4
 800f064:	2201      	movs	r2, #1
 800f066:	0021      	movs	r1, r4
 800f068:	2015      	movs	r0, #21
 800f06a:	f7ff ffcc 	bl	800f006 <SX126xReadCommand>
    rssi = -buf[0] >> 1;
 800f06e:	7820      	ldrb	r0, [r4, #0]
 800f070:	4240      	negs	r0, r0
 800f072:	1040      	asrs	r0, r0, #1
}
 800f074:	bd16      	pop	{r1, r2, r4, pc}
	...

0800f078 <SX126xGetPacketStatus>:
{
 800f078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f07a:	0004      	movs	r4, r0
    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800f07c:	ad01      	add	r5, sp, #4
 800f07e:	2203      	movs	r2, #3
 800f080:	0029      	movs	r1, r5
 800f082:	2014      	movs	r0, #20
 800f084:	f7ff ffbf 	bl	800f006 <SX126xReadCommand>
    return PacketType;
 800f088:	4a15      	ldr	r2, [pc, #84]	; (800f0e0 <SX126xGetPacketStatus+0x68>)
 800f08a:	7851      	ldrb	r1, [r2, #1]
    pktStatus->packetType = SX126xGetPacketType( );
 800f08c:	7021      	strb	r1, [r4, #0]
    switch( pktStatus->packetType )
 800f08e:	2900      	cmp	r1, #0
 800f090:	d009      	beq.n	800f0a6 <SX126xGetPacketStatus+0x2e>
 800f092:	2901      	cmp	r1, #1
 800f094:	d013      	beq.n	800f0be <SX126xGetPacketStatus+0x46>
            memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 800f096:	2214      	movs	r2, #20
 800f098:	2100      	movs	r1, #0
 800f09a:	0020      	movs	r0, r4
 800f09c:	f001 f849 	bl	8010132 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800f0a0:	230f      	movs	r3, #15
 800f0a2:	7023      	strb	r3, [r4, #0]
}
 800f0a4:	e00a      	b.n	800f0bc <SX126xGetPacketStatus+0x44>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800f0a6:	782b      	ldrb	r3, [r5, #0]
            pktStatus->Params.Gfsk.FreqError = 0;
 800f0a8:	60a1      	str	r1, [r4, #8]
            pktStatus->Params.Gfsk.RxStatus = status[0];
 800f0aa:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 800f0ac:	786b      	ldrb	r3, [r5, #1]
 800f0ae:	425b      	negs	r3, r3
 800f0b0:	105b      	asrs	r3, r3, #1
 800f0b2:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 800f0b4:	78ab      	ldrb	r3, [r5, #2]
 800f0b6:	425b      	negs	r3, r3
 800f0b8:	105b      	asrs	r3, r3, #1
 800f0ba:	7163      	strb	r3, [r4, #5]
}
 800f0bc:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800f0be:	782b      	ldrb	r3, [r5, #0]
 800f0c0:	425b      	negs	r3, r3
 800f0c2:	105b      	asrs	r3, r3, #1
 800f0c4:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800f0c6:	2301      	movs	r3, #1
 800f0c8:	56eb      	ldrsb	r3, [r5, r3]
 800f0ca:	3302      	adds	r3, #2
 800f0cc:	109b      	asrs	r3, r3, #2
 800f0ce:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800f0d0:	78ab      	ldrb	r3, [r5, #2]
 800f0d2:	425b      	negs	r3, r3
 800f0d4:	105b      	asrs	r3, r3, #1
 800f0d6:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800f0d8:	6853      	ldr	r3, [r2, #4]
 800f0da:	6123      	str	r3, [r4, #16]
            break;
 800f0dc:	e7ee      	b.n	800f0bc <SX126xGetPacketStatus+0x44>
 800f0de:	46c0      	nop			; (mov r8, r8)
 800f0e0:	20000e50 	.word	0x20000e50

0800f0e4 <SX126xWriteRegisters>:

void SX126xWriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800f0e4:	b570      	push	{r4, r5, r6, lr}
 800f0e6:	0005      	movs	r5, r0
 800f0e8:	000c      	movs	r4, r1
 800f0ea:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 800f0ec:	f7ff fd8c 	bl	800ec08 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800f0f0:	2000      	movs	r0, #0
 800f0f2:	f7f5 fc6b 	bl	80049cc <SX126x_RADIO_ChipSelect>
    
    Sx_Board_SendRecv(  RADIO_WRITE_REGISTER );
 800f0f6:	200d      	movs	r0, #13
 800f0f8:	f7f5 fc8d 	bl	8004a16 <SX126x_RADIO_SendRecv>
    Sx_Board_SendRecv(  ( address & 0xFF00 ) >> 8 );
 800f0fc:	0a28      	lsrs	r0, r5, #8
 800f0fe:	f7f5 fc8a 	bl	8004a16 <SX126x_RADIO_SendRecv>
    Sx_Board_SendRecv(  address & 0x00FF );
 800f102:	b2e8      	uxtb	r0, r5
 800f104:	f7f5 fc87 	bl	8004a16 <SX126x_RADIO_SendRecv>
    
    for( uint16_t i = 0; i < size; i++ )
 800f108:	19a6      	adds	r6, r4, r6
 800f10a:	42b4      	cmp	r4, r6
 800f10c:	d105      	bne.n	800f11a <SX126xWriteRegisters+0x36>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }

    Sx_Board_ChipSelect( 1 );
 800f10e:	2001      	movs	r0, #1
 800f110:	f7f5 fc5c 	bl	80049cc <SX126x_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800f114:	f7f5 fc50 	bl	80049b8 <SX126x_RADIO_WaitOnBusy>
}
 800f118:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv(  buffer[i] );
 800f11a:	7820      	ldrb	r0, [r4, #0]
 800f11c:	f7f5 fc7b 	bl	8004a16 <SX126x_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800f120:	3401      	adds	r4, #1
 800f122:	e7f2      	b.n	800f10a <SX126xWriteRegisters+0x26>

0800f124 <SX126xSetSyncWord>:
{
 800f124:	0001      	movs	r1, r0
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800f126:	20d8      	movs	r0, #216	; 0xd8
{
 800f128:	b510      	push	{r4, lr}
    SX126xWriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 800f12a:	00c0      	lsls	r0, r0, #3
 800f12c:	2208      	movs	r2, #8
 800f12e:	f7ff ffd9 	bl	800f0e4 <SX126xWriteRegisters>
}
 800f132:	2000      	movs	r0, #0
 800f134:	bd10      	pop	{r4, pc}
	...

0800f138 <SX126xSetCrcSeed>:
{
 800f138:	b507      	push	{r0, r1, r2, lr}
    return PacketType;
 800f13a:	4b06      	ldr	r3, [pc, #24]	; (800f154 <SX126xSetCrcSeed+0x1c>)
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800f13c:	a901      	add	r1, sp, #4
    switch( SX126xGetPacketType( ) )
 800f13e:	785b      	ldrb	r3, [r3, #1]
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 800f140:	ba40      	rev16	r0, r0
 800f142:	8008      	strh	r0, [r1, #0]
    switch( SX126xGetPacketType( ) )
 800f144:	2b00      	cmp	r3, #0
 800f146:	d103      	bne.n	800f150 <SX126xSetCrcSeed+0x18>
            SX126xWriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800f148:	2202      	movs	r2, #2
 800f14a:	4803      	ldr	r0, [pc, #12]	; (800f158 <SX126xSetCrcSeed+0x20>)
 800f14c:	f7ff ffca 	bl	800f0e4 <SX126xWriteRegisters>
}
 800f150:	bd07      	pop	{r0, r1, r2, pc}
 800f152:	46c0      	nop			; (mov r8, r8)
 800f154:	20000e50 	.word	0x20000e50
 800f158:	000006bc 	.word	0x000006bc

0800f15c <SX126xSetCrcPolynomial>:
{
 800f15c:	b507      	push	{r0, r1, r2, lr}
    return PacketType;
 800f15e:	4b06      	ldr	r3, [pc, #24]	; (800f178 <SX126xSetCrcPolynomial+0x1c>)
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800f160:	a901      	add	r1, sp, #4
    switch( SX126xGetPacketType( ) )
 800f162:	785b      	ldrb	r3, [r3, #1]
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800f164:	ba40      	rev16	r0, r0
 800f166:	8008      	strh	r0, [r1, #0]
    switch( SX126xGetPacketType( ) )
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d103      	bne.n	800f174 <SX126xSetCrcPolynomial+0x18>
            SX126xWriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 800f16c:	2202      	movs	r2, #2
 800f16e:	4803      	ldr	r0, [pc, #12]	; (800f17c <SX126xSetCrcPolynomial+0x20>)
 800f170:	f7ff ffb8 	bl	800f0e4 <SX126xWriteRegisters>
}
 800f174:	bd07      	pop	{r0, r1, r2, pc}
 800f176:	46c0      	nop			; (mov r8, r8)
 800f178:	20000e50 	.word	0x20000e50
 800f17c:	000006be 	.word	0x000006be

0800f180 <SX126xSetPacketParams>:
{
 800f180:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f182:	0004      	movs	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800f184:	4923      	ldr	r1, [pc, #140]	; (800f214 <SX126xSetPacketParams+0x94>)
 800f186:	ad01      	add	r5, sp, #4
 800f188:	2209      	movs	r2, #9
 800f18a:	0028      	movs	r0, r5
 800f18c:	3108      	adds	r1, #8
 800f18e:	f000 ffc7 	bl	8010120 <memcpy>
    if( PacketType != packetParams->PacketType )
 800f192:	4e21      	ldr	r6, [pc, #132]	; (800f218 <SX126xSetPacketParams+0x98>)
 800f194:	7820      	ldrb	r0, [r4, #0]
 800f196:	7873      	ldrb	r3, [r6, #1]
 800f198:	4283      	cmp	r3, r0
 800f19a:	d001      	beq.n	800f1a0 <SX126xSetPacketParams+0x20>
        SX126xSetPacketType( packetParams->PacketType );
 800f19c:	f7ff fec2 	bl	800ef24 <SX126xSetPacketType>
    switch( packetParams->PacketType )
 800f1a0:	7823      	ldrb	r3, [r4, #0]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d002      	beq.n	800f1ac <SX126xSetPacketParams+0x2c>
 800f1a6:	2b01      	cmp	r3, #1
 800f1a8:	d027      	beq.n	800f1fa <SX126xSetPacketParams+0x7a>
}
 800f1aa:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800f1ac:	7a63      	ldrb	r3, [r4, #9]
 800f1ae:	2bf1      	cmp	r3, #241	; 0xf1
 800f1b0:	d119      	bne.n	800f1e6 <SX126xSetPacketParams+0x66>
            SX126xSetCrcSeed( CRC_IBM_SEED );
 800f1b2:	481a      	ldr	r0, [pc, #104]	; (800f21c <SX126xSetPacketParams+0x9c>)
 800f1b4:	f7ff ffc0 	bl	800f138 <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800f1b8:	4819      	ldr	r0, [pc, #100]	; (800f220 <SX126xSetPacketParams+0xa0>)
 800f1ba:	f7ff ffcf 	bl	800f15c <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 800f1be:	2302      	movs	r3, #2
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800f1c0:	8862      	ldrh	r2, [r4, #2]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800f1c2:	88a1      	ldrh	r1, [r4, #4]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 800f1c4:	ba52      	rev16	r2, r2
 800f1c6:	802a      	strh	r2, [r5, #0]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800f1c8:	7a22      	ldrb	r2, [r4, #8]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 800f1ca:	8069      	strh	r1, [r5, #2]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800f1cc:	71aa      	strb	r2, [r5, #6]
        n = 9;
 800f1ce:	2209      	movs	r2, #9
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800f1d0:	88e1      	ldrh	r1, [r4, #6]
        buf[7] = crcVal;
 800f1d2:	71eb      	strb	r3, [r5, #7]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800f1d4:	7aa3      	ldrb	r3, [r4, #10]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 800f1d6:	80a9      	strh	r1, [r5, #4]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 800f1d8:	722b      	strb	r3, [r5, #8]
    SX126xWriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800f1da:	0029      	movs	r1, r5
 800f1dc:	208c      	movs	r0, #140	; 0x8c
 800f1de:	b292      	uxth	r2, r2
 800f1e0:	f7ff fd26 	bl	800ec30 <SX126xWriteCommand>
 800f1e4:	e7e1      	b.n	800f1aa <SX126xSetPacketParams+0x2a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800f1e6:	2bf2      	cmp	r3, #242	; 0xf2
 800f1e8:	d1ea      	bne.n	800f1c0 <SX126xSetPacketParams+0x40>
            SX126xSetCrcSeed( CRC_CCITT_SEED );
 800f1ea:	480e      	ldr	r0, [pc, #56]	; (800f224 <SX126xSetPacketParams+0xa4>)
 800f1ec:	f7ff ffa4 	bl	800f138 <SX126xSetCrcSeed>
            SX126xSetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800f1f0:	480d      	ldr	r0, [pc, #52]	; (800f228 <SX126xSetPacketParams+0xa8>)
 800f1f2:	f7ff ffb3 	bl	800f15c <SX126xSetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 800f1f6:	2306      	movs	r3, #6
 800f1f8:	e7e2      	b.n	800f1c0 <SX126xSetPacketParams+0x40>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800f1fa:	89a3      	ldrh	r3, [r4, #12]
        n = 6;
 800f1fc:	2206      	movs	r2, #6
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800f1fe:	ba5b      	rev16	r3, r3
 800f200:	802b      	strh	r3, [r5, #0]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800f202:	7ba3      	ldrb	r3, [r4, #14]
 800f204:	7233      	strb	r3, [r6, #8]
 800f206:	70ab      	strb	r3, [r5, #2]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800f208:	7be3      	ldrb	r3, [r4, #15]
 800f20a:	70eb      	strb	r3, [r5, #3]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800f20c:	8a23      	ldrh	r3, [r4, #16]
 800f20e:	80ab      	strh	r3, [r5, #4]
        break;
 800f210:	e7e3      	b.n	800f1da <SX126xSetPacketParams+0x5a>
 800f212:	46c0      	nop			; (mov r8, r8)
 800f214:	08011850 	.word	0x08011850
 800f218:	20000e50 	.word	0x20000e50
 800f21c:	0000ffff 	.word	0x0000ffff
 800f220:	00008005 	.word	0x00008005
 800f224:	00001d0f 	.word	0x00001d0f
 800f228:	00001021 	.word	0x00001021

0800f22c <SX126xWriteRegister>:

void SX126xWriteRegister( uint16_t address, uint8_t value )
{
 800f22c:	b507      	push	{r0, r1, r2, lr}
 800f22e:	466b      	mov	r3, sp
 800f230:	71d9      	strb	r1, [r3, #7]
 800f232:	3307      	adds	r3, #7
    SX126xWriteRegisters( address, &value, 1 );
 800f234:	2201      	movs	r2, #1
 800f236:	0019      	movs	r1, r3
 800f238:	f7ff ff54 	bl	800f0e4 <SX126xWriteRegisters>
}
 800f23c:	bd07      	pop	{r0, r1, r2, pc}
	...

0800f240 <SX126xSetRxBoosted>:
{
 800f240:	b513      	push	{r0, r1, r4, lr}
    OperatingMode = mode;
 800f242:	2205      	movs	r2, #5
{
 800f244:	0004      	movs	r4, r0
    OperatingMode = mode;
 800f246:	4b08      	ldr	r3, [pc, #32]	; (800f268 <SX126xSetRxBoosted+0x28>)
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 800f248:	2196      	movs	r1, #150	; 0x96
 800f24a:	4808      	ldr	r0, [pc, #32]	; (800f26c <SX126xSetRxBoosted+0x2c>)
    OperatingMode = mode;
 800f24c:	701a      	strb	r2, [r3, #0]
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 800f24e:	f7ff ffed 	bl	800f22c <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800f252:	a901      	add	r1, sp, #4
 800f254:	0c23      	lsrs	r3, r4, #16
 800f256:	700b      	strb	r3, [r1, #0]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800f258:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f25a:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800f25c:	2082      	movs	r0, #130	; 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800f25e:	704b      	strb	r3, [r1, #1]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800f260:	708c      	strb	r4, [r1, #2]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800f262:	f7ff fce5 	bl	800ec30 <SX126xWriteCommand>
}
 800f266:	bd13      	pop	{r0, r1, r4, pc}
 800f268:	20000e50 	.word	0x20000e50
 800f26c:	000008ac 	.word	0x000008ac

0800f270 <SX126xSetLoRaSymbNumTimeout>:
{
 800f270:	b507      	push	{r0, r1, r2, lr}
 800f272:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800f274:	2201      	movs	r2, #1
{
 800f276:	71d8      	strb	r0, [r3, #7]
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800f278:	1dd9      	adds	r1, r3, #7
 800f27a:	20a0      	movs	r0, #160	; 0xa0
 800f27c:	f7ff fcd8 	bl	800ec30 <SX126xWriteCommand>
    if( symbNum >= 64 )
 800f280:	466b      	mov	r3, sp
 800f282:	79d9      	ldrb	r1, [r3, #7]
 800f284:	293f      	cmp	r1, #63	; 0x3f
 800f286:	d906      	bls.n	800f296 <SX126xSetLoRaSymbNumTimeout+0x26>
            mant >>= 2;
 800f288:	08c9      	lsrs	r1, r1, #3
        reg = exp + ( mant << 3 );
 800f28a:	00c9      	lsls	r1, r1, #3
 800f28c:	3101      	adds	r1, #1
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800f28e:	4802      	ldr	r0, [pc, #8]	; (800f298 <SX126xSetLoRaSymbNumTimeout+0x28>)
 800f290:	b2c9      	uxtb	r1, r1
 800f292:	f7ff ffcb 	bl	800f22c <SX126xWriteRegister>
}
 800f296:	bd07      	pop	{r0, r1, r2, pc}
 800f298:	00000706 	.word	0x00000706

0800f29c <SX126xReadRegisters>:

void SX126xReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800f29c:	b570      	push	{r4, r5, r6, lr}
 800f29e:	0005      	movs	r5, r0
 800f2a0:	000c      	movs	r4, r1
 800f2a2:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 800f2a4:	f7ff fcb0 	bl	800ec08 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800f2a8:	2000      	movs	r0, #0
 800f2aa:	f7f5 fb8f 	bl	80049cc <SX126x_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_READ_REGISTER );
 800f2ae:	201d      	movs	r0, #29
 800f2b0:	f7f5 fbb1 	bl	8004a16 <SX126x_RADIO_SendRecv>
    Sx_Board_SendRecv(  ( address & 0xFF00 ) >> 8 );
 800f2b4:	0a28      	lsrs	r0, r5, #8
 800f2b6:	f7f5 fbae 	bl	8004a16 <SX126x_RADIO_SendRecv>
    Sx_Board_SendRecv(  address & 0x00FF );
 800f2ba:	b2e8      	uxtb	r0, r5
 800f2bc:	f7f5 fbab 	bl	8004a16 <SX126x_RADIO_SendRecv>
    Sx_Board_SendRecv(  0 );
 800f2c0:	2000      	movs	r0, #0
 800f2c2:	f7f5 fba8 	bl	8004a16 <SX126x_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800f2c6:	19a6      	adds	r6, r4, r6
 800f2c8:	42b4      	cmp	r4, r6
 800f2ca:	d105      	bne.n	800f2d8 <SX126xReadRegisters+0x3c>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }
    Sx_Board_ChipSelect( 1 );
 800f2cc:	2001      	movs	r0, #1
 800f2ce:	f7f5 fb7d 	bl	80049cc <SX126x_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800f2d2:	f7f5 fb71 	bl	80049b8 <SX126x_RADIO_WaitOnBusy>
}
 800f2d6:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv(  0 );
 800f2d8:	2000      	movs	r0, #0
 800f2da:	f7f5 fb9c 	bl	8004a16 <SX126x_RADIO_SendRecv>
 800f2de:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 800f2e0:	3401      	adds	r4, #1
 800f2e2:	e7f1      	b.n	800f2c8 <SX126xReadRegisters+0x2c>

0800f2e4 <SX126xReadRegister>:

uint8_t SX126xReadRegister( uint16_t address )
{
 800f2e4:	b513      	push	{r0, r1, r4, lr}
    uint8_t data;
    SX126xReadRegisters( address, &data, 1 );
 800f2e6:	466b      	mov	r3, sp
 800f2e8:	1ddc      	adds	r4, r3, #7
 800f2ea:	2201      	movs	r2, #1
 800f2ec:	0021      	movs	r1, r4
 800f2ee:	f7ff ffd5 	bl	800f29c <SX126xReadRegisters>
    return data;
 800f2f2:	7820      	ldrb	r0, [r4, #0]
}
 800f2f4:	bd16      	pop	{r1, r2, r4, pc}
	...

0800f2f8 <SX126xSetWhiteningSeed>:
{
 800f2f8:	b510      	push	{r4, lr}
    return PacketType;
 800f2fa:	4b0c      	ldr	r3, [pc, #48]	; (800f32c <SX126xSetWhiteningSeed+0x34>)
{
 800f2fc:	0004      	movs	r4, r0
    switch( SX126xGetPacketType( ) )
 800f2fe:	785b      	ldrb	r3, [r3, #1]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d111      	bne.n	800f328 <SX126xSetWhiteningSeed+0x30>
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800f304:	20d7      	movs	r0, #215	; 0xd7
 800f306:	00c0      	lsls	r0, r0, #3
 800f308:	f7ff ffec 	bl	800f2e4 <SX126xReadRegister>
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800f30c:	2301      	movs	r3, #1
 800f30e:	0a21      	lsrs	r1, r4, #8
            regValue = SX126xReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800f310:	4398      	bics	r0, r3
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 800f312:	4019      	ands	r1, r3
 800f314:	4301      	orrs	r1, r0
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800f316:	20d7      	movs	r0, #215	; 0xd7
 800f318:	b2c9      	uxtb	r1, r1
 800f31a:	00c0      	lsls	r0, r0, #3
 800f31c:	f7ff ff86 	bl	800f22c <SX126xWriteRegister>
            SX126xWriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, ( uint8_t )seed );
 800f320:	4803      	ldr	r0, [pc, #12]	; (800f330 <SX126xSetWhiteningSeed+0x38>)
 800f322:	b2e1      	uxtb	r1, r4
 800f324:	f7ff ff82 	bl	800f22c <SX126xWriteRegister>
}
 800f328:	bd10      	pop	{r4, pc}
 800f32a:	46c0      	nop			; (mov r8, r8)
 800f32c:	20000e50 	.word	0x20000e50
 800f330:	000006b9 	.word	0x000006b9

0800f334 <SX126xGetRandom>:
{
 800f334:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint32_t number = 0;
 800f336:	2500      	movs	r5, #0
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800f338:	4f17      	ldr	r7, [pc, #92]	; (800f398 <SX126xGetRandom+0x64>)
{
 800f33a:	b085      	sub	sp, #20
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800f33c:	0038      	movs	r0, r7
    uint32_t number = 0;
 800f33e:	9503      	str	r5, [sp, #12]
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800f340:	f7ff ffd0 	bl	800f2e4 <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800f344:	21fe      	movs	r1, #254	; 0xfe
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 800f346:	4e15      	ldr	r6, [pc, #84]	; (800f39c <SX126xGetRandom+0x68>)
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800f348:	4001      	ands	r1, r0
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800f34a:	0004      	movs	r4, r0
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800f34c:	0038      	movs	r0, r7
 800f34e:	f7ff ff6d 	bl	800f22c <SX126xWriteRegister>
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 800f352:	0030      	movs	r0, r6
 800f354:	f7ff ffc6 	bl	800f2e4 <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800f358:	217f      	movs	r1, #127	; 0x7f
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 800f35a:	9001      	str	r0, [sp, #4]
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800f35c:	4001      	ands	r1, r0
 800f35e:	0030      	movs	r0, r6
 800f360:	f7ff ff64 	bl	800f22c <SX126xWriteRegister>
    SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 800f364:	480e      	ldr	r0, [pc, #56]	; (800f3a0 <SX126xGetRandom+0x6c>)
 800f366:	f7ff fcc3 	bl	800ecf0 <SX126xSetRx>
    SX126xReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800f36a:	2204      	movs	r2, #4
 800f36c:	a903      	add	r1, sp, #12
 800f36e:	480d      	ldr	r0, [pc, #52]	; (800f3a4 <SX126xGetRandom+0x70>)
 800f370:	f7ff ff94 	bl	800f29c <SX126xReadRegisters>
    SX126xSetStandby( STDBY_RC );
 800f374:	0028      	movs	r0, r5
 800f376:	f7ff fc95 	bl	800eca4 <SX126xSetStandby>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna );
 800f37a:	0021      	movs	r1, r4
 800f37c:	0038      	movs	r0, r7
 800f37e:	f7ff ff55 	bl	800f22c <SX126xWriteRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer );
 800f382:	0030      	movs	r0, r6
 800f384:	9901      	ldr	r1, [sp, #4]
 800f386:	f7ff ff51 	bl	800f22c <SX126xWriteRegister>
    Sx_Board_SetLedRx(false);
 800f38a:	0028      	movs	r0, r5
 800f38c:	f7f5 fb3e 	bl	8004a0c <SX126x_RADIO_BoardSetLedRx>
}
 800f390:	9803      	ldr	r0, [sp, #12]
 800f392:	b005      	add	sp, #20
 800f394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f396:	46c0      	nop			; (mov r8, r8)
 800f398:	000008e2 	.word	0x000008e2
 800f39c:	000008e5 	.word	0x000008e5
 800f3a0:	00ffffff 	.word	0x00ffffff
 800f3a4:	00000819 	.word	0x00000819

0800f3a8 <SX126xSetTxParams>:
{
 800f3a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3aa:	0005      	movs	r5, r0
    if( Sx_Board_GetPaSelect( 0 ) == SX1261 )
 800f3ac:	2000      	movs	r0, #0
{
 800f3ae:	000c      	movs	r4, r1
    if( Sx_Board_GetPaSelect( 0 ) == SX1261 )
 800f3b0:	f7f5 fb1a 	bl	80049e8 <SX126x_RADIO_GetPaSelect>
 800f3b4:	0002      	movs	r2, r0
 800f3b6:	2801      	cmp	r0, #1
 800f3b8:	d11e      	bne.n	800f3f8 <SX126xSetTxParams+0x50>
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800f3ba:	0003      	movs	r3, r0
 800f3bc:	2100      	movs	r1, #0
        if( power == 15 )
 800f3be:	2d0f      	cmp	r5, #15
 800f3c0:	d111      	bne.n	800f3e6 <SX126xSetTxParams+0x3e>
            SX126xSetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800f3c2:	2006      	movs	r0, #6
 800f3c4:	f7ff fd38 	bl	800ee38 <SX126xSetPaConfig>
 800f3c8:	1c2b      	adds	r3, r5, #0
 800f3ca:	b25a      	sxtb	r2, r3
 800f3cc:	2a0e      	cmp	r2, #14
 800f3ce:	dd00      	ble.n	800f3d2 <SX126xSetTxParams+0x2a>
 800f3d0:	230e      	movs	r3, #14
    buf[0] = power;
 800f3d2:	466a      	mov	r2, sp
 800f3d4:	b25b      	sxtb	r3, r3
 800f3d6:	7113      	strb	r3, [r2, #4]
    buf[1] = ( uint8_t )rampTime;
 800f3d8:	7154      	strb	r4, [r2, #5]
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800f3da:	208e      	movs	r0, #142	; 0x8e
 800f3dc:	2202      	movs	r2, #2
 800f3de:	a901      	add	r1, sp, #4
 800f3e0:	f7ff fc26 	bl	800ec30 <SX126xWriteCommand>
}
 800f3e4:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
            SX126xSetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800f3e6:	2004      	movs	r0, #4
 800f3e8:	f7ff fd26 	bl	800ee38 <SX126xSetPaConfig>
        if( power >= 14 )
 800f3ec:	1c2b      	adds	r3, r5, #0
 800f3ee:	3511      	adds	r5, #17
 800f3f0:	daeb      	bge.n	800f3ca <SX126xSetTxParams+0x22>
 800f3f2:	4b0e      	ldr	r3, [pc, #56]	; (800f42c <SX126xSetTxParams+0x84>)
 800f3f4:	781b      	ldrb	r3, [r3, #0]
 800f3f6:	e7ec      	b.n	800f3d2 <SX126xSetTxParams+0x2a>
        SX126xWriteRegister( 0x08D8, SX126xReadRegister( 0x08D8 ) | ( 0x0F << 1 ) );
 800f3f8:	480d      	ldr	r0, [pc, #52]	; (800f430 <SX126xSetTxParams+0x88>)
 800f3fa:	f7ff ff73 	bl	800f2e4 <SX126xReadRegister>
 800f3fe:	211e      	movs	r1, #30
 800f400:	4301      	orrs	r1, r0
 800f402:	b2c9      	uxtb	r1, r1
 800f404:	480a      	ldr	r0, [pc, #40]	; (800f430 <SX126xSetTxParams+0x88>)
 800f406:	f7ff ff11 	bl	800f22c <SX126xWriteRegister>
        SX126xSetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800f40a:	2301      	movs	r3, #1
 800f40c:	2200      	movs	r2, #0
 800f40e:	2107      	movs	r1, #7
 800f410:	2004      	movs	r0, #4
 800f412:	f7ff fd11 	bl	800ee38 <SX126xSetPaConfig>
        if( power > 22 )
 800f416:	1c2b      	adds	r3, r5, #0
 800f418:	3509      	adds	r5, #9
 800f41a:	da01      	bge.n	800f420 <SX126xSetTxParams+0x78>
 800f41c:	4b05      	ldr	r3, [pc, #20]	; (800f434 <SX126xSetTxParams+0x8c>)
 800f41e:	e7e9      	b.n	800f3f4 <SX126xSetTxParams+0x4c>
 800f420:	b25a      	sxtb	r2, r3
 800f422:	2a16      	cmp	r2, #22
 800f424:	ddd5      	ble.n	800f3d2 <SX126xSetTxParams+0x2a>
 800f426:	2316      	movs	r3, #22
 800f428:	e7d3      	b.n	800f3d2 <SX126xSetTxParams+0x2a>
 800f42a:	46c0      	nop			; (mov r8, r8)
 800f42c:	08011ffe 	.word	0x08011ffe
 800f430:	000008d8 	.word	0x000008d8
 800f434:	08011fff 	.word	0x08011fff

0800f438 <SX126xSetRfTxPower>:
{
 800f438:	b510      	push	{r4, lr}
    SX126xSetTxParams( power, RADIO_RAMP_40_US );
 800f43a:	2102      	movs	r1, #2
 800f43c:	f7ff ffb4 	bl	800f3a8 <SX126xSetTxParams>
}
 800f440:	bd10      	pop	{r4, pc}
	...

0800f444 <SX126xGetRxBufferStatus>:
{
 800f444:	b537      	push	{r0, r1, r2, r4, r5, lr}
    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800f446:	2202      	movs	r2, #2
{
 800f448:	0004      	movs	r4, r0
 800f44a:	000d      	movs	r5, r1
    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800f44c:	2013      	movs	r0, #19
 800f44e:	a901      	add	r1, sp, #4
 800f450:	f7ff fdd9 	bl	800f006 <SX126xReadCommand>
    return PacketType;
 800f454:	4b09      	ldr	r3, [pc, #36]	; (800f47c <SX126xGetRxBufferStatus+0x38>)
    if( ( SX126xGetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800f456:	785a      	ldrb	r2, [r3, #1]
 800f458:	2a01      	cmp	r2, #1
 800f45a:	d10a      	bne.n	800f472 <SX126xGetRxBufferStatus+0x2e>
 800f45c:	7a1b      	ldrb	r3, [r3, #8]
 800f45e:	2b01      	cmp	r3, #1
 800f460:	d107      	bne.n	800f472 <SX126xGetRxBufferStatus+0x2e>
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 800f462:	4807      	ldr	r0, [pc, #28]	; (800f480 <SX126xGetRxBufferStatus+0x3c>)
 800f464:	f7ff ff3e 	bl	800f2e4 <SX126xReadRegister>
 800f468:	7020      	strb	r0, [r4, #0]
    *rxStartBufferPointer = status[1];
 800f46a:	466b      	mov	r3, sp
 800f46c:	795b      	ldrb	r3, [r3, #5]
 800f46e:	702b      	strb	r3, [r5, #0]
}
 800f470:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        *payloadLength = status[0];
 800f472:	466b      	mov	r3, sp
 800f474:	791b      	ldrb	r3, [r3, #4]
 800f476:	7023      	strb	r3, [r4, #0]
 800f478:	e7f7      	b.n	800f46a <SX126xGetRxBufferStatus+0x26>
 800f47a:	46c0      	nop			; (mov r8, r8)
 800f47c:	20000e50 	.word	0x20000e50
 800f480:	00000702 	.word	0x00000702

0800f484 <SX126xWriteBuffer>:

void SX126xWriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800f484:	b570      	push	{r4, r5, r6, lr}
 800f486:	0005      	movs	r5, r0
 800f488:	000c      	movs	r4, r1
 800f48a:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 800f48c:	f7ff fbbc 	bl	800ec08 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800f490:	2000      	movs	r0, #0
 800f492:	f7f5 fa9b 	bl	80049cc <SX126x_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_WRITE_BUFFER );
 800f496:	200e      	movs	r0, #14
 800f498:	f7f5 fabd 	bl	8004a16 <SX126x_RADIO_SendRecv>
    Sx_Board_SendRecv(  offset );
 800f49c:	b2a8      	uxth	r0, r5
 800f49e:	f7f5 faba 	bl	8004a16 <SX126x_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800f4a2:	19a6      	adds	r6, r4, r6
 800f4a4:	42b4      	cmp	r4, r6
 800f4a6:	d105      	bne.n	800f4b4 <SX126xWriteBuffer+0x30>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }
    Sx_Board_ChipSelect( 1 );
 800f4a8:	2001      	movs	r0, #1
 800f4aa:	f7f5 fa8f 	bl	80049cc <SX126x_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800f4ae:	f7f5 fa83 	bl	80049b8 <SX126x_RADIO_WaitOnBusy>
}
 800f4b2:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv(  buffer[i] );
 800f4b4:	7820      	ldrb	r0, [r4, #0]
 800f4b6:	f7f5 faae 	bl	8004a16 <SX126x_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800f4ba:	3401      	adds	r4, #1
 800f4bc:	e7f2      	b.n	800f4a4 <SX126xWriteBuffer+0x20>

0800f4be <SX126xSetPayload>:
{
 800f4be:	b510      	push	{r4, lr}
 800f4c0:	000a      	movs	r2, r1
    SX126xWriteBuffer( 0x00, payload, size );
 800f4c2:	0001      	movs	r1, r0
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	f7ff ffdd 	bl	800f484 <SX126xWriteBuffer>
}
 800f4ca:	bd10      	pop	{r4, pc}

0800f4cc <SX126xSendPayload>:
{
 800f4cc:	b510      	push	{r4, lr}
 800f4ce:	0014      	movs	r4, r2
    SX126xSetPayload( payload, size );
 800f4d0:	f7ff fff5 	bl	800f4be <SX126xSetPayload>
    SX126xSetTx( timeout );
 800f4d4:	0020      	movs	r0, r4
 800f4d6:	f7ff fbf7 	bl	800ecc8 <SX126xSetTx>
}
 800f4da:	bd10      	pop	{r4, pc}

0800f4dc <SX126xReadBuffer>:

void SX126xReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800f4dc:	b570      	push	{r4, r5, r6, lr}
 800f4de:	0005      	movs	r5, r0
 800f4e0:	000c      	movs	r4, r1
 800f4e2:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 800f4e4:	f7ff fb90 	bl	800ec08 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800f4e8:	2000      	movs	r0, #0
 800f4ea:	f7f5 fa6f 	bl	80049cc <SX126x_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_READ_BUFFER );
 800f4ee:	201e      	movs	r0, #30
 800f4f0:	f7f5 fa91 	bl	8004a16 <SX126x_RADIO_SendRecv>
    Sx_Board_SendRecv(  offset );
 800f4f4:	b2a8      	uxth	r0, r5
 800f4f6:	f7f5 fa8e 	bl	8004a16 <SX126x_RADIO_SendRecv>
    Sx_Board_SendRecv(  0 );
 800f4fa:	2000      	movs	r0, #0
 800f4fc:	f7f5 fa8b 	bl	8004a16 <SX126x_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800f500:	19a6      	adds	r6, r4, r6
 800f502:	42b4      	cmp	r4, r6
 800f504:	d105      	bne.n	800f512 <SX126xReadBuffer+0x36>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }
    Sx_Board_ChipSelect( 1 );
 800f506:	2001      	movs	r0, #1
 800f508:	f7f5 fa60 	bl	80049cc <SX126x_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800f50c:	f7f5 fa54 	bl	80049b8 <SX126x_RADIO_WaitOnBusy>
}
 800f510:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv(  0 );
 800f512:	2000      	movs	r0, #0
 800f514:	f7f5 fa7f 	bl	8004a16 <SX126x_RADIO_SendRecv>
 800f518:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 800f51a:	3401      	adds	r4, #1
 800f51c:	e7f1      	b.n	800f502 <SX126xReadBuffer+0x26>

0800f51e <SX126xGetPayload>:
{
 800f51e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f520:	000c      	movs	r4, r1
    uint8_t offset = 0;
 800f522:	466b      	mov	r3, sp
 800f524:	2700      	movs	r7, #0
{
 800f526:	0005      	movs	r5, r0
    SX126xGetRxBufferStatus( size, &offset );
 800f528:	1dd9      	adds	r1, r3, #7
 800f52a:	0020      	movs	r0, r4
{
 800f52c:	0016      	movs	r6, r2
    uint8_t offset = 0;
 800f52e:	71df      	strb	r7, [r3, #7]
    SX126xGetRxBufferStatus( size, &offset );
 800f530:	f7ff ff88 	bl	800f444 <SX126xGetRxBufferStatus>
    if( *size > maxSize )
 800f534:	7822      	ldrb	r2, [r4, #0]
        return 1;
 800f536:	2001      	movs	r0, #1
    if( *size > maxSize )
 800f538:	42b2      	cmp	r2, r6
 800f53a:	d805      	bhi.n	800f548 <SX126xGetPayload+0x2a>
    SX126xReadBuffer( offset, buffer, *size );
 800f53c:	466b      	mov	r3, sp
 800f53e:	0029      	movs	r1, r5
 800f540:	79d8      	ldrb	r0, [r3, #7]
 800f542:	f7ff ffcb 	bl	800f4dc <SX126xReadBuffer>
    return 0;
 800f546:	0038      	movs	r0, r7
}
 800f548:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0800f54c <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800f54c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f54e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f552:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800f554:	4b16      	ldr	r3, [pc, #88]	; (800f5b0 <TRACE_AllocateBufer+0x64>)
 800f556:	8a5d      	ldrh	r5, [r3, #18]
 800f558:	8a1a      	ldrh	r2, [r3, #16]
 800f55a:	4295      	cmp	r5, r2
 800f55c:	d114      	bne.n	800f588 <TRACE_AllocateBufer+0x3c>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800f55e:	2280      	movs	r2, #128	; 0x80
 800f560:	0092      	lsls	r2, r2, #2
 800f562:	1b52      	subs	r2, r2, r5
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800f564:	b292      	uxth	r2, r2
 800f566:	4290      	cmp	r0, r2
 800f568:	d306      	bcc.n	800f578 <TRACE_AllocateBufer+0x2c>
 800f56a:	4285      	cmp	r5, r0
 800f56c:	d916      	bls.n	800f59c <TRACE_AllocateBufer+0x50>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800f56e:	2201      	movs	r2, #1
 800f570:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800f572:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800f574:	801d      	strh	r5, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800f576:	825a      	strh	r2, [r3, #18]
#endif
  }
  
  if (freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800f578:	8a5a      	ldrh	r2, [r3, #18]
 800f57a:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800f57c:	1812      	adds	r2, r2, r0
 800f57e:	05d2      	lsls	r2, r2, #23
 800f580:	0dd2      	lsrs	r2, r2, #23
    ret = 0;
 800f582:	2000      	movs	r0, #0
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800f584:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800f586:	e00b      	b.n	800f5a0 <TRACE_AllocateBufer+0x54>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800f588:	4295      	cmp	r5, r2
 800f58a:	d90c      	bls.n	800f5a6 <TRACE_AllocateBufer+0x5a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800f58c:	2680      	movs	r6, #128	; 0x80
 800f58e:	00b6      	lsls	r6, r6, #2
 800f590:	1b76      	subs	r6, r6, r5
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800f592:	b2b6      	uxth	r6, r6
 800f594:	4286      	cmp	r6, r0
 800f596:	d8ef      	bhi.n	800f578 <TRACE_AllocateBufer+0x2c>
 800f598:	4282      	cmp	r2, r0
 800f59a:	d8e8      	bhi.n	800f56e <TRACE_AllocateBufer+0x22>
  int16_t ret = -1;
 800f59c:	2001      	movs	r0, #1
 800f59e:	4240      	negs	r0, r0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f5a0:	f384 8810 	msr	PRIMASK, r4
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
}
 800f5a4:	bd70      	pop	{r4, r5, r6, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800f5a6:	1b52      	subs	r2, r2, r5
  if (freesize > Size)
 800f5a8:	b292      	uxth	r2, r2
 800f5aa:	4282      	cmp	r2, r0
 800f5ac:	d8e4      	bhi.n	800f578 <TRACE_AllocateBufer+0x2c>
 800f5ae:	e7f5      	b.n	800f59c <TRACE_AllocateBufer+0x50>
 800f5b0:	20000e5c 	.word	0x20000e5c

0800f5b4 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f5b4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f5b8:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800f5ba:	4a03      	ldr	r2, [pc, #12]	; (800f5c8 <TRACE_Lock+0x14>)
 800f5bc:	8ad3      	ldrh	r3, [r2, #22]
 800f5be:	3301      	adds	r3, #1
 800f5c0:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f5c2:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800f5c6:	4770      	bx	lr
 800f5c8:	20000e5c 	.word	0x20000e5c

0800f5cc <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f5cc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f5d0:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800f5d2:	4a03      	ldr	r2, [pc, #12]	; (800f5e0 <TRACE_UnLock+0x14>)
 800f5d4:	8ad3      	ldrh	r3, [r2, #22]
 800f5d6:	3b01      	subs	r3, #1
 800f5d8:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f5da:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800f5de:	4770      	bx	lr
 800f5e0:	20000e5c 	.word	0x20000e5c

0800f5e4 <UTIL_ADV_TRACE_Init>:
{
 800f5e4:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800f5e6:	2218      	movs	r2, #24
 800f5e8:	2100      	movs	r1, #0
 800f5ea:	4807      	ldr	r0, [pc, #28]	; (800f608 <UTIL_ADV_TRACE_Init+0x24>)
 800f5ec:	f000 f996 	bl	800f91c <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800f5f0:	2280      	movs	r2, #128	; 0x80
 800f5f2:	2100      	movs	r1, #0
 800f5f4:	4805      	ldr	r0, [pc, #20]	; (800f60c <UTIL_ADV_TRACE_Init+0x28>)
 800f5f6:	0092      	lsls	r2, r2, #2
 800f5f8:	f000 f990 	bl	800f91c <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800f5fc:	4b04      	ldr	r3, [pc, #16]	; (800f610 <UTIL_ADV_TRACE_Init+0x2c>)
 800f5fe:	4805      	ldr	r0, [pc, #20]	; (800f614 <UTIL_ADV_TRACE_Init+0x30>)
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	4798      	blx	r3
}
 800f604:	bd10      	pop	{r4, pc}
 800f606:	46c0      	nop			; (mov r8, r8)
 800f608:	20000e5c 	.word	0x20000e5c
 800f60c:	20000f74 	.word	0x20000f74
 800f610:	08011234 	.word	0x08011234
 800f614:	0800f7a1 	.word	0x0800f7a1

0800f618 <UTIL_ADV_TRACE_IoInit>:
{
 800f618:	b510      	push	{r4, lr}
  return UTIL_TraceDriver.IoInit();
 800f61a:	4b02      	ldr	r3, [pc, #8]	; (800f624 <UTIL_ADV_TRACE_IoInit+0xc>)
 800f61c:	691b      	ldr	r3, [r3, #16]
 800f61e:	4798      	blx	r3
}
 800f620:	bd10      	pop	{r4, pc}
 800f622:	46c0      	nop			; (mov r8, r8)
 800f624:	08011234 	.word	0x08011234

0800f628 <UTIL_ADV_TRACE_IoDeInit>:
{
 800f628:	b510      	push	{r4, lr}
  return UTIL_TraceDriver.IoDeInit();
 800f62a:	4b02      	ldr	r3, [pc, #8]	; (800f634 <UTIL_ADV_TRACE_IoDeInit+0xc>)
 800f62c:	695b      	ldr	r3, [r3, #20]
 800f62e:	4798      	blx	r3
}
 800f630:	bd10      	pop	{r4, pc}
 800f632:	46c0      	nop			; (mov r8, r8)
 800f634:	08011234 	.word	0x08011234

0800f638 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
	ADV_TRACE_Ctx.timestamp_func = *cb;
 800f638:	4b01      	ldr	r3, [pc, #4]	; (800f640 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800f63a:	6058      	str	r0, [r3, #4]
}
 800f63c:	4770      	bx	lr
 800f63e:	46c0      	nop			; (mov r8, r8)
 800f640:	20000e5c 	.word	0x20000e5c

0800f644 <UTIL_ADV_TRACE_SetVerboseLevel>:
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800f644:	4b01      	ldr	r3, [pc, #4]	; (800f64c <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800f646:	7218      	strb	r0, [r3, #8]
}
 800f648:	4770      	bx	lr
 800f64a:	46c0      	nop			; (mov r8, r8)
 800f64c:	20000e5c 	.word	0x20000e5c

0800f650 <TRACE_Send>:
{
 800f650:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f652:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f656:	b672      	cpsid	i
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800f658:	4c1b      	ldr	r4, [pc, #108]	; (800f6c8 <TRACE_Send+0x78>)
  if(TRACE_IsLocked() == 0u)
 800f65a:	8ae5      	ldrh	r5, [r4, #22]
 800f65c:	2d00      	cmp	r5, #0
 800f65e:	d12e      	bne.n	800f6be <TRACE_Send+0x6e>
    TRACE_Lock();
 800f660:	f7ff ffa8 	bl	800f5b4 <TRACE_Lock>
    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800f664:	8a20      	ldrh	r0, [r4, #16]
 800f666:	8a62      	ldrh	r2, [r4, #18]
 800f668:	4290      	cmp	r0, r2
 800f66a:	d026      	beq.n	800f6ba <TRACE_Send+0x6a>
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800f66c:	78a1      	ldrb	r1, [r4, #2]
 800f66e:	2901      	cmp	r1, #1
 800f670:	d110      	bne.n	800f694 <TRACE_Send+0x44>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800f672:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800f674:	3101      	adds	r1, #1
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800f676:	1a1b      	subs	r3, r3, r0
 800f678:	b29b      	uxth	r3, r3
 800f67a:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800f67c:	70a1      	strb	r1, [r4, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800f67e:	8025      	strh	r5, [r4, #0]
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 800f680:	2b00      	cmp	r3, #0
 800f682:	d109      	bne.n	800f698 <TRACE_Send+0x48>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800f684:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800f686:	8223      	strh	r3, [r4, #16]
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800f688:	8a23      	ldrh	r3, [r4, #16]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d912      	bls.n	800f6b4 <TRACE_Send+0x64>
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800f68e:	1ad2      	subs	r2, r2, r3
 800f690:	82a2      	strh	r2, [r4, #20]
 800f692:	e001      	b.n	800f698 <TRACE_Send+0x48>
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800f694:	2900      	cmp	r1, #0
 800f696:	d0f7      	beq.n	800f688 <TRACE_Send+0x38>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800f698:	8a25      	ldrh	r5, [r4, #16]
 800f69a:	4b0c      	ldr	r3, [pc, #48]	; (800f6cc <TRACE_Send+0x7c>)
 800f69c:	18ed      	adds	r5, r5, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f69e:	f386 8810 	msr	PRIMASK, r6
      UTIL_ADV_TRACE_PreSendHook(); 
 800f6a2:	f7f4 fd2d 	bl	8004100 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800f6a6:	4b0a      	ldr	r3, [pc, #40]	; (800f6d0 <TRACE_Send+0x80>)
 800f6a8:	8aa1      	ldrh	r1, [r4, #20]
 800f6aa:	68db      	ldr	r3, [r3, #12]
 800f6ac:	0028      	movs	r0, r5
 800f6ae:	9301      	str	r3, [sp, #4]
 800f6b0:	4798      	blx	r3
}
 800f6b2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800f6b4:	2280      	movs	r2, #128	; 0x80
 800f6b6:	0092      	lsls	r2, r2, #2
 800f6b8:	e7e9      	b.n	800f68e <TRACE_Send+0x3e>
      TRACE_UnLock();
 800f6ba:	f7ff ff87 	bl	800f5cc <TRACE_UnLock>
 800f6be:	f386 8810 	msr	PRIMASK, r6
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 800f6c2:	2000      	movs	r0, #0
}
 800f6c4:	e7f5      	b.n	800f6b2 <TRACE_Send+0x62>
 800f6c6:	46c0      	nop			; (mov r8, r8)
 800f6c8:	20000e5c 	.word	0x20000e5c
 800f6cc:	20000f74 	.word	0x20000f74
 800f6d0:	08011234 	.word	0x08011234

0800f6d4 <UTIL_ADV_TRACE_COND_FSend>:
{
 800f6d4:	b408      	push	{r3}
 800f6d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6d8:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	466c      	mov	r4, sp
 800f6de:	8023      	strh	r3, [r4, #0]
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800f6e0:	4b2c      	ldr	r3, [pc, #176]	; (800f794 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800f6e2:	7a1c      	ldrb	r4, [r3, #8]
 800f6e4:	4284      	cmp	r4, r0
 800f6e6:	d350      	bcc.n	800f78a <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800f6e8:	68d8      	ldr	r0, [r3, #12]
 800f6ea:	4008      	ands	r0, r1
 800f6ec:	4288      	cmp	r0, r1
 800f6ee:	d14e      	bne.n	800f78e <UTIL_ADV_TRACE_COND_FSend+0xba>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d004      	beq.n	800f700 <UTIL_ADV_TRACE_COND_FSend+0x2c>
 800f6f6:	2a00      	cmp	r2, #0
 800f6f8:	d002      	beq.n	800f700 <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800f6fa:	4669      	mov	r1, sp
 800f6fc:	a802      	add	r0, sp, #8
 800f6fe:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800f700:	2180      	movs	r1, #128	; 0x80
  va_start( vaArgs, strFormat);
 800f702:	ab0c      	add	r3, sp, #48	; 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800f704:	0049      	lsls	r1, r1, #1
 800f706:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f708:	4823      	ldr	r0, [pc, #140]	; (800f798 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
  va_start( vaArgs, strFormat);
 800f70a:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800f70c:	f000 fbb0 	bl	800fe70 <tiny_vsnprintf_like>
 800f710:	0005      	movs	r5, r0
  TRACE_Lock();
 800f712:	f7ff ff4f 	bl	800f5b4 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800f716:	466b      	mov	r3, sp
 800f718:	8818      	ldrh	r0, [r3, #0]
 800f71a:	1c9c      	adds	r4, r3, #2
 800f71c:	1940      	adds	r0, r0, r5
 800f71e:	0021      	movs	r1, r4
 800f720:	b280      	uxth	r0, r0
 800f722:	f7ff ff13 	bl	800f54c <TRACE_AllocateBufer>
 800f726:	1c43      	adds	r3, r0, #1
 800f728:	d02a      	beq.n	800f780 <UTIL_ADV_TRACE_COND_FSend+0xac>
    for (idx = 0u; idx < timestamp_size; idx++)
 800f72a:	2200      	movs	r2, #0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800f72c:	2101      	movs	r1, #1
    for (idx = 0u; idx < timestamp_size; idx++)
 800f72e:	466b      	mov	r3, sp
 800f730:	0015      	movs	r5, r2
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800f732:	468c      	mov	ip, r1
    for (idx = 0u; idx < timestamp_size; idx++)
 800f734:	881b      	ldrh	r3, [r3, #0]
 800f736:	8826      	ldrh	r6, [r4, #0]
 800f738:	4818      	ldr	r0, [pc, #96]	; (800f79c <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 800f73a:	b297      	uxth	r7, r2
 800f73c:	19f1      	adds	r1, r6, r7
 800f73e:	b289      	uxth	r1, r1
 800f740:	42bb      	cmp	r3, r7
 800f742:	d815      	bhi.n	800f770 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 800f744:	199b      	adds	r3, r3, r6
 800f746:	b29b      	uxth	r3, r3
 800f748:	2d00      	cmp	r5, #0
 800f74a:	d000      	beq.n	800f74e <UTIL_ADV_TRACE_COND_FSend+0x7a>
 800f74c:	8023      	strh	r3, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800f74e:	2180      	movs	r1, #128	; 0x80
 800f750:	8823      	ldrh	r3, [r4, #0]
 800f752:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f754:	0049      	lsls	r1, r1, #1
 800f756:	18c0      	adds	r0, r0, r3
 800f758:	9b01      	ldr	r3, [sp, #4]
 800f75a:	f000 fb89 	bl	800fe70 <tiny_vsnprintf_like>
    TRACE_UnLock();
 800f75e:	f7ff ff35 	bl	800f5cc <TRACE_UnLock>
    return TRACE_Send();
 800f762:	f7ff ff75 	bl	800f650 <TRACE_Send>
}
 800f766:	b006      	add	sp, #24
 800f768:	bcf0      	pop	{r4, r5, r6, r7}
 800f76a:	bc08      	pop	{r3}
 800f76c:	b001      	add	sp, #4
 800f76e:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800f770:	466d      	mov	r5, sp
 800f772:	2708      	movs	r7, #8
 800f774:	19ed      	adds	r5, r5, r7
 800f776:	5cad      	ldrb	r5, [r5, r2]
 800f778:	3201      	adds	r2, #1
 800f77a:	5445      	strb	r5, [r0, r1]
 800f77c:	4665      	mov	r5, ip
 800f77e:	e7dc      	b.n	800f73a <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 800f780:	f7ff ff24 	bl	800f5cc <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800f784:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 800f786:	4240      	negs	r0, r0
 800f788:	e7ed      	b.n	800f766 <UTIL_ADV_TRACE_COND_FSend+0x92>
    return UTIL_ADV_TRACE_GIVEUP;
 800f78a:	2005      	movs	r0, #5
 800f78c:	e7fb      	b.n	800f786 <UTIL_ADV_TRACE_COND_FSend+0xb2>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800f78e:	2006      	movs	r0, #6
 800f790:	e7f9      	b.n	800f786 <UTIL_ADV_TRACE_COND_FSend+0xb2>
 800f792:	46c0      	nop			; (mov r8, r8)
 800f794:	20000e5c 	.word	0x20000e5c
 800f798:	20000e74 	.word	0x20000e74
 800f79c:	20000f74 	.word	0x20000f74

0800f7a0 <TRACE_TxCpltCallback>:
{ 
 800f7a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f7a2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f7a6:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800f7a8:	4b1f      	ldr	r3, [pc, #124]	; (800f828 <TRACE_TxCpltCallback+0x88>)
 800f7aa:	789a      	ldrb	r2, [r3, #2]
 800f7ac:	2a02      	cmp	r2, #2
 800f7ae:	d11e      	bne.n	800f7ee <TRACE_TxCpltCallback+0x4e>
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800f7b4:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800f7b6:	8a1d      	ldrh	r5, [r3, #16]
 800f7b8:	8a59      	ldrh	r1, [r3, #18]
 800f7ba:	428d      	cmp	r5, r1
 800f7bc:	d02d      	beq.n	800f81a <TRACE_TxCpltCallback+0x7a>
 800f7be:	8ada      	ldrh	r2, [r3, #22]
 800f7c0:	2a01      	cmp	r2, #1
 800f7c2:	d12a      	bne.n	800f81a <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800f7c4:	7898      	ldrb	r0, [r3, #2]
 800f7c6:	2801      	cmp	r0, #1
 800f7c8:	d117      	bne.n	800f7fa <TRACE_TxCpltCallback+0x5a>
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800f7ca:	3001      	adds	r0, #1
 800f7cc:	7098      	strb	r0, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 800f7ce:	2000      	movs	r0, #0
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800f7d0:	881a      	ldrh	r2, [r3, #0]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 800f7d2:	8018      	strh	r0, [r3, #0]
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800f7d4:	1b52      	subs	r2, r2, r5
 800f7d6:	b292      	uxth	r2, r2
 800f7d8:	829a      	strh	r2, [r3, #20]
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 800f7da:	4282      	cmp	r2, r0
 800f7dc:	d10f      	bne.n	800f7fe <TRACE_TxCpltCallback+0x5e>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800f7de:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800f7e0:	821a      	strh	r2, [r3, #16]
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800f7e2:	8a1a      	ldrh	r2, [r3, #16]
 800f7e4:	4291      	cmp	r1, r2
 800f7e6:	d915      	bls.n	800f814 <TRACE_TxCpltCallback+0x74>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800f7e8:	1a89      	subs	r1, r1, r2
 800f7ea:	8299      	strh	r1, [r3, #20]
 800f7ec:	e007      	b.n	800f7fe <TRACE_TxCpltCallback+0x5e>
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800f7ee:	8a1a      	ldrh	r2, [r3, #16]
 800f7f0:	8a99      	ldrh	r1, [r3, #20]
 800f7f2:	1852      	adds	r2, r2, r1
 800f7f4:	05d2      	lsls	r2, r2, #23
 800f7f6:	0dd2      	lsrs	r2, r2, #23
 800f7f8:	e7dc      	b.n	800f7b4 <TRACE_TxCpltCallback+0x14>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800f7fa:	2800      	cmp	r0, #0
 800f7fc:	d0f1      	beq.n	800f7e2 <TRACE_TxCpltCallback+0x42>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f7fe:	f384 8810 	msr	PRIMASK, r4
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 800f802:	8a18      	ldrh	r0, [r3, #16]
 800f804:	8a99      	ldrh	r1, [r3, #20]
 800f806:	4b09      	ldr	r3, [pc, #36]	; (800f82c <TRACE_TxCpltCallback+0x8c>)
 800f808:	18c0      	adds	r0, r0, r3
 800f80a:	4b09      	ldr	r3, [pc, #36]	; (800f830 <TRACE_TxCpltCallback+0x90>)
 800f80c:	68db      	ldr	r3, [r3, #12]
 800f80e:	9301      	str	r3, [sp, #4]
 800f810:	4798      	blx	r3
}
 800f812:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800f814:	2180      	movs	r1, #128	; 0x80
 800f816:	0089      	lsls	r1, r1, #2
 800f818:	e7e6      	b.n	800f7e8 <TRACE_TxCpltCallback+0x48>
    UTIL_ADV_TRACE_PostSendHook();      
 800f81a:	f7f4 fc77 	bl	800410c <UTIL_ADV_TRACE_PostSendHook>
 800f81e:	f384 8810 	msr	PRIMASK, r4
    TRACE_UnLock();
 800f822:	f7ff fed3 	bl	800f5cc <TRACE_UnLock>
}
 800f826:	e7f4      	b.n	800f812 <TRACE_TxCpltCallback+0x72>
 800f828:	20000e5c 	.word	0x20000e5c
 800f82c:	20000f74 	.word	0x20000f74
 800f830:	08011234 	.word	0x08011234

0800f834 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800f834:	2200      	movs	r2, #0
 800f836:	4b02      	ldr	r3, [pc, #8]	; (800f840 <UTIL_LPM_Init+0xc>)
 800f838:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800f83a:	605a      	str	r2, [r3, #4]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800f83c:	4770      	bx	lr
 800f83e:	46c0      	nop			; (mov r8, r8)
 800f840:	20001174 	.word	0x20001174

0800f844 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800f844:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f846:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f84a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800f84c:	2900      	cmp	r1, #0
 800f84e:	d008      	beq.n	800f862 <UTIL_LPM_SetStopMode+0x1e>
 800f850:	2901      	cmp	r1, #1
 800f852:	d103      	bne.n	800f85c <UTIL_LPM_SetStopMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800f854:	4b05      	ldr	r3, [pc, #20]	; (800f86c <UTIL_LPM_SetStopMode+0x28>)
 800f856:	681a      	ldr	r2, [r3, #0]
 800f858:	4310      	orrs	r0, r2
 800f85a:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f85c:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800f860:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 800f862:	4a02      	ldr	r2, [pc, #8]	; (800f86c <UTIL_LPM_SetStopMode+0x28>)
 800f864:	6813      	ldr	r3, [r2, #0]
 800f866:	4383      	bics	r3, r0
 800f868:	6013      	str	r3, [r2, #0]
      break;
 800f86a:	e7f7      	b.n	800f85c <UTIL_LPM_SetStopMode+0x18>
 800f86c:	20001174 	.word	0x20001174

0800f870 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800f870:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f872:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f876:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800f878:	2900      	cmp	r1, #0
 800f87a:	d008      	beq.n	800f88e <UTIL_LPM_SetOffMode+0x1e>
 800f87c:	2901      	cmp	r1, #1
 800f87e:	d103      	bne.n	800f888 <UTIL_LPM_SetOffMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800f880:	4b05      	ldr	r3, [pc, #20]	; (800f898 <UTIL_LPM_SetOffMode+0x28>)
 800f882:	685a      	ldr	r2, [r3, #4]
 800f884:	4310      	orrs	r0, r2
 800f886:	6058      	str	r0, [r3, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f888:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800f88c:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 800f88e:	4a02      	ldr	r2, [pc, #8]	; (800f898 <UTIL_LPM_SetOffMode+0x28>)
 800f890:	6853      	ldr	r3, [r2, #4]
 800f892:	4383      	bics	r3, r0
 800f894:	6053      	str	r3, [r2, #4]
      break;
 800f896:	e7f7      	b.n	800f888 <UTIL_LPM_SetOffMode+0x18>
 800f898:	20001174 	.word	0x20001174

0800f89c <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f89c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f8a0:	b672      	cpsid	i
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 800f8a2:	2000      	movs	r0, #0
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800f8a4:	4b05      	ldr	r3, [pc, #20]	; (800f8bc <UTIL_LPM_GetMode+0x20>)
 800f8a6:	6819      	ldr	r1, [r3, #0]
 800f8a8:	4281      	cmp	r1, r0
 800f8aa:	d103      	bne.n	800f8b4 <UTIL_LPM_GetMode+0x18>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800f8ac:	6858      	ldr	r0, [r3, #4]
       */
      mode_selected = UTIL_LPM_STOPMODE;
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 800f8ae:	4243      	negs	r3, r0
 800f8b0:	4158      	adcs	r0, r3
 800f8b2:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f8b4:	f382 8810 	msr	PRIMASK, r2
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 800f8b8:	4770      	bx	lr
 800f8ba:	46c0      	nop			; (mov r8, r8)
 800f8bc:	20001174 	.word	0x20001174

0800f8c0 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 800f8c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f8c2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f8c6:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800f8c8:	4b0d      	ldr	r3, [pc, #52]	; (800f900 <UTIL_LPM_EnterLowPower+0x40>)
 800f8ca:	4c0e      	ldr	r4, [pc, #56]	; (800f904 <UTIL_LPM_EnterLowPower+0x44>)
 800f8cc:	681a      	ldr	r2, [r3, #0]
 800f8ce:	2a00      	cmp	r2, #0
 800f8d0:	d008      	beq.n	800f8e4 <UTIL_LPM_EnterLowPower+0x24>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800f8d2:	6823      	ldr	r3, [r4, #0]
 800f8d4:	9301      	str	r3, [sp, #4]
 800f8d6:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800f8d8:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 800f8da:	9301      	str	r3, [sp, #4]
 800f8dc:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f8de:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800f8e2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800f8e4:	685b      	ldr	r3, [r3, #4]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d004      	beq.n	800f8f4 <UTIL_LPM_EnterLowPower+0x34>
        UTIL_PowerDriver.EnterStopMode( );
 800f8ea:	68a3      	ldr	r3, [r4, #8]
 800f8ec:	9301      	str	r3, [sp, #4]
 800f8ee:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800f8f0:	68e3      	ldr	r3, [r4, #12]
 800f8f2:	e7f2      	b.n	800f8da <UTIL_LPM_EnterLowPower+0x1a>
      UTIL_PowerDriver.EnterOffMode( );
 800f8f4:	6923      	ldr	r3, [r4, #16]
 800f8f6:	9301      	str	r3, [sp, #4]
 800f8f8:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800f8fa:	6963      	ldr	r3, [r4, #20]
 800f8fc:	e7ed      	b.n	800f8da <UTIL_LPM_EnterLowPower+0x1a>
 800f8fe:	46c0      	nop			; (mov r8, r8)
 800f900:	20001174 	.word	0x20001174
 800f904:	0801121c 	.word	0x0801121c

0800f908 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800f908:	2300      	movs	r3, #0
{
 800f90a:	b510      	push	{r4, lr}
  while( size-- )
 800f90c:	4293      	cmp	r3, r2
 800f90e:	d100      	bne.n	800f912 <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 800f910:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 800f912:	5ccc      	ldrb	r4, [r1, r3]
 800f914:	54c4      	strb	r4, [r0, r3]
 800f916:	3301      	adds	r3, #1
 800f918:	e7f8      	b.n	800f90c <UTIL_MEM_cpy_8+0x4>
	...

0800f91c <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 800f91c:	4b04      	ldr	r3, [pc, #16]	; (800f930 <UTIL_MEM_set_8+0x14>)
 800f91e:	3a01      	subs	r2, #1
 800f920:	b292      	uxth	r2, r2
 800f922:	429a      	cmp	r2, r3
 800f924:	d100      	bne.n	800f928 <UTIL_MEM_set_8+0xc>
  {
    *dst8++ = value;
  }
}
 800f926:	4770      	bx	lr
    *dst8++ = value;
 800f928:	7001      	strb	r1, [r0, #0]
 800f92a:	3001      	adds	r0, #1
 800f92c:	e7f7      	b.n	800f91e <UTIL_MEM_set_8+0x2>
 800f92e:	46c0      	nop			; (mov r8, r8)
 800f930:	0000ffff 	.word	0x0000ffff

0800f934 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800f934:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f936:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f93a:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800f93c:	4b05      	ldr	r3, [pc, #20]	; (800f954 <UTIL_SEQ_SetTask+0x20>)
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800f93e:	00c9      	lsls	r1, r1, #3
  TaskSet |= TaskId_bm;
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	4302      	orrs	r2, r0
 800f944:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800f946:	185b      	adds	r3, r3, r1
 800f948:	691a      	ldr	r2, [r3, #16]
 800f94a:	4310      	orrs	r0, r2
 800f94c:	6118      	str	r0, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f94e:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800f952:	bd10      	pop	{r4, pc}
 800f954:	2000117c 	.word	0x2000117c

0800f958 <UTIL_SEQ_PreIdle>:
 800f958:	4770      	bx	lr

0800f95a <UTIL_SEQ_PostIdle>:
 800f95a:	4770      	bx	lr

0800f95c <SEQ_BitPosition>:
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;
 800f95c:	2300      	movs	r3, #0

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800f95e:	0c02      	lsrs	r2, r0, #16
 800f960:	429a      	cmp	r2, r3
 800f962:	d101      	bne.n	800f968 <SEQ_BitPosition+0xc>
 800f964:	0400      	lsls	r0, r0, #16
 800f966:	3310      	adds	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800f968:	0e02      	lsrs	r2, r0, #24
 800f96a:	d102      	bne.n	800f972 <SEQ_BitPosition+0x16>
 800f96c:	3308      	adds	r3, #8
 800f96e:	b2db      	uxtb	r3, r3
 800f970:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800f972:	0f02      	lsrs	r2, r0, #28
 800f974:	d102      	bne.n	800f97c <SEQ_BitPosition+0x20>
 800f976:	3304      	adds	r3, #4
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 800f97c:	221f      	movs	r2, #31
 800f97e:	1ad3      	subs	r3, r2, r3
 800f980:	4a02      	ldr	r2, [pc, #8]	; (800f98c <SEQ_BitPosition+0x30>)
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800f982:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 800f984:	5c10      	ldrb	r0, [r2, r0]
 800f986:	1a18      	subs	r0, r3, r0
 800f988:	b2c0      	uxtb	r0, r0
}
 800f98a:	4770      	bx	lr
 800f98c:	08011861 	.word	0x08011861

0800f990 <UTIL_SEQ_Run>:
{
 800f990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  super_mask_backup = SuperMask;
 800f992:	4e2f      	ldr	r6, [pc, #188]	; (800fa50 <UTIL_SEQ_Run+0xc0>)
 800f994:	6873      	ldr	r3, [r6, #4]
  SuperMask &= Mask_bm;
 800f996:	4018      	ands	r0, r3
  super_mask_backup = SuperMask;
 800f998:	9301      	str	r3, [sp, #4]
  SuperMask &= Mask_bm;
 800f99a:	6070      	str	r0, [r6, #4]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800f99c:	4c2d      	ldr	r4, [pc, #180]	; (800fa54 <UTIL_SEQ_Run+0xc4>)
 800f99e:	6830      	ldr	r0, [r6, #0]
 800f9a0:	6822      	ldr	r2, [r4, #0]
 800f9a2:	6873      	ldr	r3, [r6, #4]
 800f9a4:	4002      	ands	r2, r0
 800f9a6:	4213      	tst	r3, r2
 800f9a8:	d037      	beq.n	800fa1a <UTIL_SEQ_Run+0x8a>
 800f9aa:	68a1      	ldr	r1, [r4, #8]
 800f9ac:	6862      	ldr	r2, [r4, #4]
 800f9ae:	000d      	movs	r5, r1
 800f9b0:	4015      	ands	r5, r2
 800f9b2:	4211      	tst	r1, r2
 800f9b4:	d131      	bne.n	800fa1a <UTIL_SEQ_Run+0x8a>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800f9b6:	6922      	ldr	r2, [r4, #16]
 800f9b8:	4003      	ands	r3, r0
 800f9ba:	0010      	movs	r0, r2
 800f9bc:	4018      	ands	r0, r3
 800f9be:	421a      	tst	r2, r3
 800f9c0:	d102      	bne.n	800f9c8 <UTIL_SEQ_Run+0x38>
      counter++;
 800f9c2:	2501      	movs	r5, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800f9c4:	69a0      	ldr	r0, [r4, #24]
 800f9c6:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800f9c8:	00ed      	lsls	r5, r5, #3
 800f9ca:	1963      	adds	r3, r4, r5
 800f9cc:	695a      	ldr	r2, [r3, #20]
 800f9ce:	4202      	tst	r2, r0
 800f9d0:	d102      	bne.n	800f9d8 <UTIL_SEQ_Run+0x48>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	4252      	negs	r2, r2
 800f9d6:	615a      	str	r2, [r3, #20]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800f9d8:	1965      	adds	r5, r4, r5
 800f9da:	696f      	ldr	r7, [r5, #20]
 800f9dc:	4038      	ands	r0, r7
 800f9de:	f7ff ffbd 	bl	800f95c <SEQ_BitPosition>
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	4083      	lsls	r3, r0
 800f9e6:	439f      	bics	r7, r3
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800f9e8:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800f9ea:	616f      	str	r7, [r5, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f9ec:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800f9f0:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800f9f2:	2301      	movs	r3, #1
 800f9f4:	68e2      	ldr	r2, [r4, #12]
 800f9f6:	4093      	lsls	r3, r2
 800f9f8:	6822      	ldr	r2, [r4, #0]
 800f9fa:	439a      	bics	r2, r3
 800f9fc:	6022      	str	r2, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800f9fe:	69a2      	ldr	r2, [r4, #24]
 800fa00:	439a      	bics	r2, r3
 800fa02:	61a2      	str	r2, [r4, #24]
 800fa04:	6922      	ldr	r2, [r4, #16]
 800fa06:	439a      	bics	r2, r3
 800fa08:	6122      	str	r2, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa0a:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800fa0e:	68e3      	ldr	r3, [r4, #12]
 800fa10:	4a11      	ldr	r2, [pc, #68]	; (800fa58 <UTIL_SEQ_Run+0xc8>)
 800fa12:	009b      	lsls	r3, r3, #2
 800fa14:	589b      	ldr	r3, [r3, r2]
 800fa16:	4798      	blx	r3
 800fa18:	e7c0      	b.n	800f99c <UTIL_SEQ_Run+0xc>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	425b      	negs	r3, r3
 800fa1e:	60e3      	str	r3, [r4, #12]
  UTIL_SEQ_PreIdle( );
 800fa20:	f7ff ff9a 	bl	800f958 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa24:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fa28:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800fa2a:	6822      	ldr	r2, [r4, #0]
 800fa2c:	6833      	ldr	r3, [r6, #0]
 800fa2e:	6861      	ldr	r1, [r4, #4]
 800fa30:	4013      	ands	r3, r2
 800fa32:	6872      	ldr	r2, [r6, #4]
 800fa34:	4013      	ands	r3, r2
 800fa36:	68a2      	ldr	r2, [r4, #8]
 800fa38:	400a      	ands	r2, r1
 800fa3a:	4313      	orrs	r3, r2
 800fa3c:	d101      	bne.n	800fa42 <UTIL_SEQ_Run+0xb2>
	UTIL_SEQ_Idle( );
 800fa3e:	f7f4 fb09 	bl	8004054 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa42:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 800fa46:	f7ff ff88 	bl	800f95a <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800fa4a:	9b01      	ldr	r3, [sp, #4]
 800fa4c:	6073      	str	r3, [r6, #4]
}
 800fa4e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800fa50:	20000170 	.word	0x20000170
 800fa54:	2000117c 	.word	0x2000117c
 800fa58:	2000119c 	.word	0x2000119c

0800fa5c <UTIL_SEQ_RegTask>:
{
 800fa5c:	b570      	push	{r4, r5, r6, lr}
 800fa5e:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fa60:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fa64:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800fa66:	f7ff ff79 	bl	800f95c <SEQ_BitPosition>
 800fa6a:	4b03      	ldr	r3, [pc, #12]	; (800fa78 <UTIL_SEQ_RegTask+0x1c>)
 800fa6c:	0080      	lsls	r0, r0, #2
 800fa6e:	50c4      	str	r4, [r0, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fa70:	f385 8810 	msr	PRIMASK, r5
}
 800fa74:	bd70      	pop	{r4, r5, r6, pc}
 800fa76:	46c0      	nop			; (mov r8, r8)
 800fa78:	2000119c 	.word	0x2000119c

0800fa7c <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800fa7c:	b082      	sub	sp, #8
 800fa7e:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 800fa80:	18c9      	adds	r1, r1, r3
{
 800fa82:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800fa84:	ab05      	add	r3, sp, #20
 800fa86:	889c      	ldrh	r4, [r3, #4]
 800fa88:	18a2      	adds	r2, r4, r2
  if( c.SubSeconds >= 1000 )
 800fa8a:	24fa      	movs	r4, #250	; 0xfa
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800fa8c:	b293      	uxth	r3, r2
 800fa8e:	b212      	sxth	r2, r2
  if( c.SubSeconds >= 1000 )
 800fa90:	00a4      	lsls	r4, r4, #2
 800fa92:	42a2      	cmp	r2, r4
 800fa94:	db03      	blt.n	800fa9e <SysTimeAdd+0x22>
  {
    c.Seconds++;
    c.SubSeconds -= 1000;
 800fa96:	4a05      	ldr	r2, [pc, #20]	; (800faac <SysTimeAdd+0x30>)
    c.Seconds++;
 800fa98:	3101      	adds	r1, #1
    c.SubSeconds -= 1000;
 800fa9a:	189b      	adds	r3, r3, r2
 800fa9c:	b21a      	sxth	r2, r3
  }
  return c;
 800fa9e:	6001      	str	r1, [r0, #0]
 800faa0:	8082      	strh	r2, [r0, #4]
}
 800faa2:	bc16      	pop	{r1, r2, r4}
 800faa4:	bc08      	pop	{r3}
 800faa6:	b002      	add	sp, #8
 800faa8:	4718      	bx	r3
 800faaa:	46c0      	nop			; (mov r8, r8)
 800faac:	fffffc18 	.word	0xfffffc18

0800fab0 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800fab0:	b082      	sub	sp, #8
 800fab2:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 800fab4:	1ac9      	subs	r1, r1, r3
{
 800fab6:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800fab8:	ab05      	add	r3, sp, #20
 800faba:	889b      	ldrh	r3, [r3, #4]
 800fabc:	1ad2      	subs	r2, r2, r3
 800fabe:	b293      	uxth	r3, r2
 800fac0:	b214      	sxth	r4, r2
  if( c.SubSeconds < 0 )
 800fac2:	0412      	lsls	r2, r2, #16
 800fac4:	d504      	bpl.n	800fad0 <SysTimeSub+0x20>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
 800fac6:	22fa      	movs	r2, #250	; 0xfa
 800fac8:	0092      	lsls	r2, r2, #2
 800faca:	189b      	adds	r3, r3, r2
    c.Seconds--;
 800facc:	3901      	subs	r1, #1
    c.SubSeconds += 1000;
 800face:	b21c      	sxth	r4, r3
  }
  return c;
 800fad0:	6001      	str	r1, [r0, #0]
 800fad2:	8084      	strh	r4, [r0, #4]
}
 800fad4:	bc16      	pop	{r1, r2, r4}
 800fad6:	bc08      	pop	{r3}
 800fad8:	b002      	add	sp, #8
 800fada:	4718      	bx	r3

0800fadc <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800fadc:	2300      	movs	r3, #0
{
 800fade:	b530      	push	{r4, r5, lr}

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800fae0:	4c11      	ldr	r4, [pc, #68]	; (800fb28 <SysTimeSet+0x4c>)
{
 800fae2:	b087      	sub	sp, #28
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800fae4:	ad04      	add	r5, sp, #16
 800fae6:	80ab      	strh	r3, [r5, #4]
 800fae8:	9304      	str	r3, [sp, #16]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800faea:	6923      	ldr	r3, [r4, #16]
{
 800faec:	9002      	str	r0, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800faee:	a805      	add	r0, sp, #20
 800faf0:	9301      	str	r3, [sp, #4]
{
 800faf2:	9103      	str	r1, [sp, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800faf4:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 800faf6:	9b02      	ldr	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800faf8:	9004      	str	r0, [sp, #16]
  c.Seconds = a.Seconds - b.Seconds;
 800fafa:	1a18      	subs	r0, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800fafc:	ab02      	add	r3, sp, #8
 800fafe:	88aa      	ldrh	r2, [r5, #4]
 800fb00:	889b      	ldrh	r3, [r3, #4]
 800fb02:	1a9b      	subs	r3, r3, r2
 800fb04:	b29a      	uxth	r2, r3
 800fb06:	b21d      	sxth	r5, r3
  if( c.SubSeconds < 0 )
 800fb08:	041b      	lsls	r3, r3, #16
 800fb0a:	d504      	bpl.n	800fb16 <SysTimeSet+0x3a>
    c.SubSeconds += 1000;
 800fb0c:	23fa      	movs	r3, #250	; 0xfa
 800fb0e:	009b      	lsls	r3, r3, #2
 800fb10:	18d2      	adds	r2, r2, r3
    c.Seconds--;
 800fb12:	3801      	subs	r0, #1
    c.SubSeconds += 1000;
 800fb14:	b215      	sxth	r5, r2

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 800fb16:	6823      	ldr	r3, [r4, #0]
 800fb18:	9301      	str	r3, [sp, #4]
 800fb1a:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 800fb1c:	68a3      	ldr	r3, [r4, #8]
 800fb1e:	0028      	movs	r0, r5
 800fb20:	9301      	str	r3, [sp, #4]
 800fb22:	4798      	blx	r3
}
 800fb24:	b007      	add	sp, #28
 800fb26:	bd30      	pop	{r4, r5, pc}
 800fb28:	080111dc 	.word	0x080111dc

0800fb2c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 800fb2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800fb2e:	2300      	movs	r3, #0
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800fb30:	4e12      	ldr	r6, [pc, #72]	; (800fb7c <SysTimeGet+0x50>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800fb32:	aa02      	add	r2, sp, #8
 800fb34:	8093      	strh	r3, [r2, #4]
 800fb36:	9302      	str	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800fb38:	6933      	ldr	r3, [r6, #16]
{
 800fb3a:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800fb3c:	a803      	add	r0, sp, #12
 800fb3e:	9301      	str	r3, [sp, #4]
 800fb40:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800fb42:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800fb44:	9002      	str	r0, [sp, #8]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800fb46:	9301      	str	r3, [sp, #4]
 800fb48:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800fb4a:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800fb4c:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800fb4e:	9301      	str	r3, [sp, #4]
 800fb50:	4798      	blx	r3
  if( c.SubSeconds >= 1000 )
 800fb52:	22fa      	movs	r2, #250	; 0xfa
  c.Seconds = a.Seconds + b.Seconds;
 800fb54:	9b02      	ldr	r3, [sp, #8]
  if( c.SubSeconds >= 1000 )
 800fb56:	0092      	lsls	r2, r2, #2
  c.Seconds = a.Seconds + b.Seconds;
 800fb58:	18c0      	adds	r0, r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800fb5a:	ab02      	add	r3, sp, #8
 800fb5c:	889b      	ldrh	r3, [r3, #4]
 800fb5e:	195b      	adds	r3, r3, r5
 800fb60:	b299      	uxth	r1, r3
 800fb62:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800fb64:	4293      	cmp	r3, r2
 800fb66:	db03      	blt.n	800fb70 <SysTimeGet+0x44>
    c.SubSeconds -= 1000;
 800fb68:	4b05      	ldr	r3, [pc, #20]	; (800fb80 <SysTimeGet+0x54>)
    c.Seconds++;
 800fb6a:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 800fb6c:	18c9      	adds	r1, r1, r3
 800fb6e:	b20b      	sxth	r3, r1

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 800fb70:	6020      	str	r0, [r4, #0]
}
 800fb72:	0020      	movs	r0, r4
  return sysTime;
 800fb74:	80a3      	strh	r3, [r4, #4]
}
 800fb76:	b004      	add	sp, #16
 800fb78:	bd70      	pop	{r4, r5, r6, pc}
 800fb7a:	46c0      	nop			; (mov r8, r8)
 800fb7c:	080111dc 	.word	0x080111dc
 800fb80:	fffffc18 	.word	0xfffffc18

0800fb84 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 800fb84:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800fb86:	2300      	movs	r3, #0
 800fb88:	466d      	mov	r5, sp
{
 800fb8a:	0004      	movs	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800fb8c:	9300      	str	r3, [sp, #0]
 800fb8e:	80ab      	strh	r3, [r5, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800fb90:	4b04      	ldr	r3, [pc, #16]	; (800fba4 <SysTimeGetMcuTime+0x20>)
 800fb92:	a801      	add	r0, sp, #4
 800fb94:	691b      	ldr	r3, [r3, #16]
 800fb96:	4798      	blx	r3
  
  return calendarTime;
 800fb98:	0023      	movs	r3, r4
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800fb9a:	9000      	str	r0, [sp, #0]
  return calendarTime;
 800fb9c:	cd06      	ldmia	r5!, {r1, r2}
 800fb9e:	c306      	stmia	r3!, {r1, r2}
}
 800fba0:	0020      	movs	r0, r4
 800fba2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800fba4:	080111dc 	.word	0x080111dc

0800fba8 <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800fba8:	2200      	movs	r2, #0
{
 800fbaa:	b510      	push	{r4, lr}
  TimerListHead = NULL;
 800fbac:	4b02      	ldr	r3, [pc, #8]	; (800fbb8 <UTIL_TIMER_Init+0x10>)
 800fbae:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800fbb0:	4b02      	ldr	r3, [pc, #8]	; (800fbbc <UTIL_TIMER_Init+0x14>)
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	4798      	blx	r3
}
 800fbb6:	bd10      	pop	{r4, pc}
 800fbb8:	2000121c 	.word	0x2000121c
 800fbbc:	080111f0 	.word	0x080111f0

0800fbc0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800fbc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fbc2:	0004      	movs	r4, r0
 800fbc4:	0017      	movs	r7, r2
 800fbc6:	0008      	movs	r0, r1
 800fbc8:	001e      	movs	r6, r3
    TimerObject->Next = NULL;
    return UTIL_TIMER_OK;
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800fbca:	2501      	movs	r5, #1
  if((TimerObject != NULL) && (Callback != NULL))
 800fbcc:	2c00      	cmp	r4, #0
 800fbce:	d00f      	beq.n	800fbf0 <UTIL_TIMER_Create+0x30>
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d00d      	beq.n	800fbf0 <UTIL_TIMER_Create+0x30>
    TimerObject->Timestamp = 0U;
 800fbd4:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800fbd6:	4b07      	ldr	r3, [pc, #28]	; (800fbf4 <UTIL_TIMER_Create+0x34>)
    TimerObject->Timestamp = 0U;
 800fbd8:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800fbda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbdc:	9301      	str	r3, [sp, #4]
 800fbde:	4798      	blx	r3
    TimerObject->argument = Argument;
 800fbe0:	9b08      	ldr	r3, [sp, #32]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800fbe2:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 800fbe4:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800fbe6:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800fbe8:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800fbea:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800fbec:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800fbee:	6165      	str	r5, [r4, #20]
  }
}
 800fbf0:	0028      	movs	r0, r5
 800fbf2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fbf4:	080111f0 	.word	0x080111f0

0800fbf8 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800fbf8:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800fbfa:	4c03      	ldr	r4, [pc, #12]	; (800fc08 <UTIL_TIMER_GetCurrentTime+0x10>)
 800fbfc:	69e3      	ldr	r3, [r4, #28]
 800fbfe:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800fc00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fc02:	4798      	blx	r3
}
 800fc04:	bd10      	pop	{r4, pc}
 800fc06:	46c0      	nop			; (mov r8, r8)
 800fc08:	080111f0 	.word	0x080111f0

0800fc0c <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800fc0c:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800fc0e:	4d06      	ldr	r5, [pc, #24]	; (800fc28 <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 800fc10:	0006      	movs	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800fc12:	69eb      	ldr	r3, [r5, #28]
 800fc14:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800fc16:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800fc18:	0004      	movs	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800fc1a:	0030      	movs	r0, r6
 800fc1c:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800fc1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800fc20:	1a20      	subs	r0, r4, r0
 800fc22:	4798      	blx	r3
}
 800fc24:	bd70      	pop	{r4, r5, r6, pc}
 800fc26:	46c0      	nop			; (mov r8, r8)
 800fc28:	080111f0 	.word	0x080111f0

0800fc2c <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800fc2c:	4a05      	ldr	r2, [pc, #20]	; (800fc44 <TimerExists+0x18>)
{
 800fc2e:	0003      	movs	r3, r0
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800fc30:	6810      	ldr	r0, [r2, #0]

  while( cur != NULL )
 800fc32:	2800      	cmp	r0, #0
 800fc34:	d100      	bne.n	800fc38 <TimerExists+0xc>
      return true;
    }
    cur = cur->Next;
  }
  return false;
}
 800fc36:	4770      	bx	lr
    if( cur == TimerObject )
 800fc38:	4298      	cmp	r0, r3
 800fc3a:	d001      	beq.n	800fc40 <TimerExists+0x14>
    cur = cur->Next;
 800fc3c:	6940      	ldr	r0, [r0, #20]
 800fc3e:	e7f8      	b.n	800fc32 <TimerExists+0x6>
      return true;
 800fc40:	2001      	movs	r0, #1
 800fc42:	e7f8      	b.n	800fc36 <TimerExists+0xa>
 800fc44:	2000121c 	.word	0x2000121c

0800fc48 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800fc48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800fc4a:	4e0c      	ldr	r6, [pc, #48]	; (800fc7c <TimerSetTimeout+0x34>)
{
 800fc4c:	0004      	movs	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800fc4e:	6a33      	ldr	r3, [r6, #32]
 800fc50:	9301      	str	r3, [sp, #4]
 800fc52:	4798      	blx	r3
  TimerObject->IsPending = 1;
 800fc54:	2301      	movs	r3, #1
 800fc56:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800fc58:	69b3      	ldr	r3, [r6, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800fc5a:	0005      	movs	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800fc5c:	6827      	ldr	r7, [r4, #0]
 800fc5e:	9301      	str	r3, [sp, #4]
 800fc60:	4798      	blx	r3
 800fc62:	1940      	adds	r0, r0, r5
 800fc64:	4287      	cmp	r7, r0
 800fc66:	d203      	bcs.n	800fc70 <TimerSetTimeout+0x28>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800fc68:	9b01      	ldr	r3, [sp, #4]
 800fc6a:	4798      	blx	r3
 800fc6c:	1945      	adds	r5, r0, r5
 800fc6e:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800fc70:	68b3      	ldr	r3, [r6, #8]
 800fc72:	6820      	ldr	r0, [r4, #0]
 800fc74:	9301      	str	r3, [sp, #4]
 800fc76:	4798      	blx	r3
}
 800fc78:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800fc7a:	46c0      	nop			; (mov r8, r8)
 800fc7c:	080111f0 	.word	0x080111f0

0800fc80 <UTIL_TIMER_Stop>:
{
 800fc80:	0003      	movs	r3, r0
 800fc82:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ret = UTIL_TIMER_INVALID_PARAM;
 800fc84:	2001      	movs	r0, #1
  if (NULL != TimerObject)
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d016      	beq.n	800fcb8 <UTIL_TIMER_Stop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fc8a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fc8e:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800fc90:	4c11      	ldr	r4, [pc, #68]	; (800fcd8 <UTIL_TIMER_Stop+0x58>)
    TimerObject->IsReloadStopped = 1U;
 800fc92:	7298      	strb	r0, [r3, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800fc94:	6822      	ldr	r2, [r4, #0]
    if(NULL != TimerListHead)
 800fc96:	2a00      	cmp	r2, #0
 800fc98:	d00b      	beq.n	800fcb2 <UTIL_TIMER_Stop+0x32>
      TimerObject->IsRunning = 0U;
 800fc9a:	2100      	movs	r1, #0
 800fc9c:	7259      	strb	r1, [r3, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d111      	bne.n	800fcc6 <UTIL_TIMER_Stop+0x46>
 800fca2:	695e      	ldr	r6, [r3, #20]
          TimerListHead->IsPending = 0;
 800fca4:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 800fca6:	428e      	cmp	r6, r1
 800fca8:	d007      	beq.n	800fcba <UTIL_TIMER_Stop+0x3a>
            TimerSetTimeout( TimerListHead );
 800fcaa:	0030      	movs	r0, r6
            TimerListHead = TimerListHead->Next;
 800fcac:	6026      	str	r6, [r4, #0]
            TimerSetTimeout( TimerListHead );
 800fcae:	f7ff ffcb 	bl	800fc48 <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fcb2:	f385 8810 	msr	PRIMASK, r5
}
 800fcb6:	2000      	movs	r0, #0
}
 800fcb8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 800fcba:	4b08      	ldr	r3, [pc, #32]	; (800fcdc <UTIL_TIMER_Stop+0x5c>)
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	9301      	str	r3, [sp, #4]
 800fcc0:	4798      	blx	r3
            TimerListHead = NULL;
 800fcc2:	6026      	str	r6, [r4, #0]
 800fcc4:	e7f5      	b.n	800fcb2 <UTIL_TIMER_Stop+0x32>
            cur = cur->Next;
 800fcc6:	0011      	movs	r1, r2
 800fcc8:	6952      	ldr	r2, [r2, #20]
        while( cur != NULL )
 800fcca:	2a00      	cmp	r2, #0
 800fccc:	d0f1      	beq.n	800fcb2 <UTIL_TIMER_Stop+0x32>
          if( cur == TimerObject )
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d1f9      	bne.n	800fcc6 <UTIL_TIMER_Stop+0x46>
            if( cur->Next != NULL )
 800fcd2:	695b      	ldr	r3, [r3, #20]
 800fcd4:	614b      	str	r3, [r1, #20]
 800fcd6:	e7ec      	b.n	800fcb2 <UTIL_TIMER_Stop+0x32>
 800fcd8:	2000121c 	.word	0x2000121c
 800fcdc:	080111f0 	.word	0x080111f0

0800fce0 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800fce0:	4b09      	ldr	r3, [pc, #36]	; (800fd08 <TimerInsertTimer+0x28>)
 800fce2:	681b      	ldr	r3, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800fce4:	695a      	ldr	r2, [r3, #20]

  while (cur->Next != NULL )
 800fce6:	6959      	ldr	r1, [r3, #20]
 800fce8:	2900      	cmp	r1, #0
 800fcea:	d102      	bne.n	800fcf2 <TimerInsertTimer+0x12>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 800fcec:	6158      	str	r0, [r3, #20]
  TimerObject->Next = NULL;
 800fcee:	6141      	str	r1, [r0, #20]
 800fcf0:	e009      	b.n	800fd06 <TimerInsertTimer+0x26>
    if( TimerObject->Timestamp  > next->Timestamp )
 800fcf2:	6801      	ldr	r1, [r0, #0]
 800fcf4:	468c      	mov	ip, r1
 800fcf6:	6811      	ldr	r1, [r2, #0]
 800fcf8:	458c      	cmp	ip, r1
 800fcfa:	d902      	bls.n	800fd02 <TimerInsertTimer+0x22>
        next = next->Next;
 800fcfc:	0013      	movs	r3, r2
 800fcfe:	6952      	ldr	r2, [r2, #20]
 800fd00:	e7f1      	b.n	800fce6 <TimerInsertTimer+0x6>
        cur->Next = TimerObject;
 800fd02:	6158      	str	r0, [r3, #20]
        TimerObject->Next = next;
 800fd04:	6142      	str	r2, [r0, #20]
}
 800fd06:	4770      	bx	lr
 800fd08:	2000121c 	.word	0x2000121c

0800fd0c <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800fd0c:	4a05      	ldr	r2, [pc, #20]	; (800fd24 <TimerInsertNewHeadTimer+0x18>)
{
 800fd0e:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800fd10:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d001      	beq.n	800fd1a <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsPending = 0;
 800fd16:	2100      	movs	r1, #0
 800fd18:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 800fd1a:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800fd1c:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800fd1e:	f7ff ff93 	bl	800fc48 <TimerSetTimeout>
}
 800fd22:	bd10      	pop	{r4, pc}
 800fd24:	2000121c 	.word	0x2000121c

0800fd28 <UTIL_TIMER_Start>:
{
 800fd28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd2a:	0004      	movs	r4, r0
    ret =  UTIL_TIMER_INVALID_PARAM;
 800fd2c:	2501      	movs	r5, #1
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	d025      	beq.n	800fd7e <UTIL_TIMER_Start+0x56>
 800fd32:	f7ff ff7b 	bl	800fc2c <TimerExists>
 800fd36:	2800      	cmp	r0, #0
 800fd38:	d121      	bne.n	800fd7e <UTIL_TIMER_Start+0x56>
 800fd3a:	7a65      	ldrb	r5, [r4, #9]
 800fd3c:	2d00      	cmp	r5, #0
 800fd3e:	d12e      	bne.n	800fd9e <UTIL_TIMER_Start+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fd40:	f3ef 8310 	mrs	r3, PRIMASK
 800fd44:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800fd46:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800fd48:	4e16      	ldr	r6, [pc, #88]	; (800fda4 <UTIL_TIMER_Start+0x7c>)
    ticks = TimerObject->ReloadValue;
 800fd4a:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800fd4c:	6a33      	ldr	r3, [r6, #32]
 800fd4e:	9301      	str	r3, [sp, #4]
 800fd50:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 800fd52:	4287      	cmp	r7, r0
 800fd54:	d200      	bcs.n	800fd58 <UTIL_TIMER_Start+0x30>
 800fd56:	0007      	movs	r7, r0
    TimerObject->IsPending = 0U;
 800fd58:	2380      	movs	r3, #128	; 0x80
 800fd5a:	005b      	lsls	r3, r3, #1
 800fd5c:	8123      	strh	r3, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800fd5e:	2300      	movs	r3, #0
    TimerObject->Timestamp = ticks;
 800fd60:	6027      	str	r7, [r4, #0]
    if( TimerListHead == NULL )
 800fd62:	4f11      	ldr	r7, [pc, #68]	; (800fda8 <UTIL_TIMER_Start+0x80>)
    TimerObject->IsReloadStopped = 0U;
 800fd64:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d10a      	bne.n	800fd82 <UTIL_TIMER_Start+0x5a>
      UTIL_TimerDriver.SetTimerContext();
 800fd6c:	6933      	ldr	r3, [r6, #16]
 800fd6e:	9301      	str	r3, [sp, #4]
 800fd70:	4798      	blx	r3
        TimerInsertNewHeadTimer( TimerObject);
 800fd72:	0020      	movs	r0, r4
 800fd74:	f7ff ffca 	bl	800fd0c <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fd78:	9b00      	ldr	r3, [sp, #0]
 800fd7a:	f383 8810 	msr	PRIMASK, r3
}
 800fd7e:	0028      	movs	r0, r5
 800fd80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800fd82:	69b3      	ldr	r3, [r6, #24]
 800fd84:	9301      	str	r3, [sp, #4]
 800fd86:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800fd88:	6823      	ldr	r3, [r4, #0]
 800fd8a:	18c0      	adds	r0, r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800fd8c:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 800fd8e:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	4298      	cmp	r0, r3
 800fd94:	d3ed      	bcc.n	800fd72 <UTIL_TIMER_Start+0x4a>
        TimerInsertTimer( TimerObject);
 800fd96:	0020      	movs	r0, r4
 800fd98:	f7ff ffa2 	bl	800fce0 <TimerInsertTimer>
 800fd9c:	e7ec      	b.n	800fd78 <UTIL_TIMER_Start+0x50>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800fd9e:	2501      	movs	r5, #1
 800fda0:	e7ed      	b.n	800fd7e <UTIL_TIMER_Start+0x56>
 800fda2:	46c0      	nop			; (mov r8, r8)
 800fda4:	080111f0 	.word	0x080111f0
 800fda8:	2000121c 	.word	0x2000121c

0800fdac <UTIL_TIMER_SetPeriod>:
{
 800fdac:	b513      	push	{r0, r1, r4, lr}
	  ret = UTIL_TIMER_INVALID_PARAM;
 800fdae:	2301      	movs	r3, #1
{
 800fdb0:	0004      	movs	r4, r0
 800fdb2:	0008      	movs	r0, r1
  if(NULL == TimerObject)
 800fdb4:	2c00      	cmp	r4, #0
 800fdb6:	d011      	beq.n	800fddc <UTIL_TIMER_SetPeriod+0x30>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800fdb8:	4b09      	ldr	r3, [pc, #36]	; (800fde0 <UTIL_TIMER_SetPeriod+0x34>)
 800fdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdbc:	9301      	str	r3, [sp, #4]
 800fdbe:	4798      	blx	r3
 800fdc0:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800fdc2:	0020      	movs	r0, r4
 800fdc4:	f7ff ff32 	bl	800fc2c <TimerExists>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800fdc8:	2300      	movs	r3, #0
    if(TimerExists(TimerObject))
 800fdca:	4298      	cmp	r0, r3
 800fdcc:	d006      	beq.n	800fddc <UTIL_TIMER_SetPeriod+0x30>
      (void)UTIL_TIMER_Stop(TimerObject);
 800fdce:	0020      	movs	r0, r4
 800fdd0:	f7ff ff56 	bl	800fc80 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800fdd4:	0020      	movs	r0, r4
 800fdd6:	f7ff ffa7 	bl	800fd28 <UTIL_TIMER_Start>
 800fdda:	0003      	movs	r3, r0
}
 800fddc:	0018      	movs	r0, r3
 800fdde:	bd16      	pop	{r1, r2, r4, pc}
 800fde0:	080111f0 	.word	0x080111f0

0800fde4 <UTIL_TIMER_IRQ_Handler>:
{
 800fde4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fde6:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800fdea:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800fdec:	4e1e      	ldr	r6, [pc, #120]	; (800fe68 <UTIL_TIMER_IRQ_Handler+0x84>)
 800fdee:	6973      	ldr	r3, [r6, #20]
 800fdf0:	9301      	str	r3, [sp, #4]
 800fdf2:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800fdf4:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800fdf6:	0004      	movs	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800fdf8:	9301      	str	r3, [sp, #4]
 800fdfa:	4798      	blx	r3
  if ( TimerListHead != NULL )
 800fdfc:	4d1b      	ldr	r5, [pc, #108]	; (800fe6c <UTIL_TIMER_IRQ_Handler+0x88>)
  DeltaContext = now  - old; /*intentional wrap around */
 800fdfe:	1b01      	subs	r1, r0, r4
  if ( TimerListHead != NULL )
 800fe00:	682b      	ldr	r3, [r5, #0]
        cur->Timestamp -= DeltaContext;
 800fe02:	1a24      	subs	r4, r4, r0
  if ( TimerListHead != NULL )
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d01f      	beq.n	800fe48 <UTIL_TIMER_IRQ_Handler+0x64>
      if (cur->Timestamp > DeltaContext)
 800fe08:	6818      	ldr	r0, [r3, #0]
        cur->Timestamp = 0;
 800fe0a:	2200      	movs	r2, #0
      if (cur->Timestamp > DeltaContext)
 800fe0c:	4288      	cmp	r0, r1
 800fe0e:	d900      	bls.n	800fe12 <UTIL_TIMER_IRQ_Handler+0x2e>
        cur->Timestamp -= DeltaContext;
 800fe10:	1822      	adds	r2, r4, r0
 800fe12:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800fe14:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800fe16:	e7f5      	b.n	800fe04 <UTIL_TIMER_IRQ_Handler+0x20>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800fe18:	681c      	ldr	r4, [r3, #0]
 800fe1a:	2c00      	cmp	r4, #0
 800fe1c:	d004      	beq.n	800fe28 <UTIL_TIMER_IRQ_Handler+0x44>
 800fe1e:	69b3      	ldr	r3, [r6, #24]
 800fe20:	9301      	str	r3, [sp, #4]
 800fe22:	4798      	blx	r3
 800fe24:	4284      	cmp	r4, r0
 800fe26:	d212      	bcs.n	800fe4e <UTIL_TIMER_IRQ_Handler+0x6a>
      cur = TimerListHead;
 800fe28:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 800fe2a:	6963      	ldr	r3, [r4, #20]
      cur->Callback(cur->argument);
 800fe2c:	6920      	ldr	r0, [r4, #16]
      TimerListHead = TimerListHead->Next;
 800fe2e:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 800fe30:	2300      	movs	r3, #0
 800fe32:	8123      	strh	r3, [r4, #8]
      cur->Callback(cur->argument);
 800fe34:	68e3      	ldr	r3, [r4, #12]
 800fe36:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800fe38:	2280      	movs	r2, #128	; 0x80
 800fe3a:	8963      	ldrh	r3, [r4, #10]
 800fe3c:	0052      	lsls	r2, r2, #1
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d102      	bne.n	800fe48 <UTIL_TIMER_IRQ_Handler+0x64>
        (void)UTIL_TIMER_Start(cur);
 800fe42:	0020      	movs	r0, r4
 800fe44:	f7ff ff70 	bl	800fd28 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800fe48:	682b      	ldr	r3, [r5, #0]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d1e4      	bne.n	800fe18 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800fe4e:	6828      	ldr	r0, [r5, #0]
 800fe50:	2800      	cmp	r0, #0
 800fe52:	d102      	bne.n	800fe5a <UTIL_TIMER_IRQ_Handler+0x76>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe54:	f387 8810 	msr	PRIMASK, r7
}
 800fe58:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800fe5a:	7a03      	ldrb	r3, [r0, #8]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d1f9      	bne.n	800fe54 <UTIL_TIMER_IRQ_Handler+0x70>
    TimerSetTimeout( TimerListHead );
 800fe60:	f7ff fef2 	bl	800fc48 <TimerSetTimeout>
 800fe64:	e7f6      	b.n	800fe54 <UTIL_TIMER_IRQ_Handler+0x70>
 800fe66:	46c0      	nop			; (mov r8, r8)
 800fe68:	080111f0 	.word	0x080111f0
 800fe6c:	2000121c 	.word	0x2000121c

0800fe70 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800fe70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe72:	b09f      	sub	sp, #124	; 0x7c
 800fe74:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 800fe76:	2000      	movs	r0, #0
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800fe78:	9c02      	ldr	r4, [sp, #8]
{
 800fe7a:	910a      	str	r1, [sp, #40]	; 0x28
  if (size <= 0)
 800fe7c:	4281      	cmp	r1, r0
 800fe7e:	dc0a      	bgt.n	800fe96 <tiny_vsnprintf_like+0x26>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
  return str - buf;
}
 800fe80:	b01f      	add	sp, #124	; 0x7c
 800fe82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 800fe84:	4288      	cmp	r0, r1
 800fe86:	da0d      	bge.n	800fea4 <tiny_vsnprintf_like+0x34>
    if (*fmt != '%')
 800fe88:	2d25      	cmp	r5, #37	; 0x25
 800fe8a:	d00e      	beq.n	800feaa <tiny_vsnprintf_like+0x3a>
      *str++ = *fmt;
 800fe8c:	7025      	strb	r5, [r4, #0]
      continue;
 800fe8e:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 800fe90:	3401      	adds	r4, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800fe92:	9a01      	ldr	r2, [sp, #4]
 800fe94:	3201      	adds	r2, #1
 800fe96:	9902      	ldr	r1, [sp, #8]
 800fe98:	7815      	ldrb	r5, [r2, #0]
 800fe9a:	1a60      	subs	r0, r4, r1
 800fe9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fe9e:	3901      	subs	r1, #1
 800fea0:	2d00      	cmp	r5, #0
 800fea2:	d1ef      	bne.n	800fe84 <tiny_vsnprintf_like+0x14>
  *str = '\0';
 800fea4:	2300      	movs	r3, #0
 800fea6:	7023      	strb	r3, [r4, #0]
  return str - buf;
 800fea8:	e7ea      	b.n	800fe80 <tiny_vsnprintf_like+0x10>
 800feaa:	1c50      	adds	r0, r2, #1
    if (*fmt == '0')
 800feac:	7852      	ldrb	r2, [r2, #1]
 800feae:	9001      	str	r0, [sp, #4]
 800feb0:	0015      	movs	r5, r2
 800feb2:	3d30      	subs	r5, #48	; 0x30
 800feb4:	9205      	str	r2, [sp, #20]
 800feb6:	4268      	negs	r0, r5
 800feb8:	4168      	adcs	r0, r5
    if (is_digit(*fmt))
 800feba:	b2ed      	uxtb	r5, r5
      flags |= ZEROPAD;
 800febc:	0002      	movs	r2, r0
    if (is_digit(*fmt))
 800febe:	2d09      	cmp	r5, #9
 800fec0:	d92d      	bls.n	800ff1e <tiny_vsnprintf_like+0xae>
    field_width = -1;
 800fec2:	2701      	movs	r7, #1
 800fec4:	427f      	negs	r7, r7
    switch (*fmt)
 800fec6:	9d01      	ldr	r5, [sp, #4]
 800fec8:	782e      	ldrb	r6, [r5, #0]
 800feca:	2e69      	cmp	r6, #105	; 0x69
 800fecc:	d100      	bne.n	800fed0 <tiny_vsnprintf_like+0x60>
 800fece:	e0ab      	b.n	8010028 <tiny_vsnprintf_like+0x1b8>
 800fed0:	d827      	bhi.n	800ff22 <tiny_vsnprintf_like+0xb2>
 800fed2:	2e63      	cmp	r6, #99	; 0x63
 800fed4:	d036      	beq.n	800ff44 <tiny_vsnprintf_like+0xd4>
 800fed6:	2e64      	cmp	r6, #100	; 0x64
 800fed8:	d100      	bne.n	800fedc <tiny_vsnprintf_like+0x6c>
 800feda:	e0a5      	b.n	8010028 <tiny_vsnprintf_like+0x1b8>
 800fedc:	2e58      	cmp	r6, #88	; 0x58
 800fede:	d068      	beq.n	800ffb2 <tiny_vsnprintf_like+0x142>
        if (*fmt != '%') *str++ = '%';
 800fee0:	0020      	movs	r0, r4
 800fee2:	2e25      	cmp	r6, #37	; 0x25
 800fee4:	d125      	bne.n	800ff32 <tiny_vsnprintf_like+0xc2>
        if (*fmt)
 800fee6:	9c01      	ldr	r4, [sp, #4]
 800fee8:	7825      	ldrb	r5, [r4, #0]
 800feea:	2d00      	cmp	r5, #0
 800feec:	d100      	bne.n	800fef0 <tiny_vsnprintf_like+0x80>
 800feee:	e09f      	b.n	8010030 <tiny_vsnprintf_like+0x1c0>
          *str++ = *fmt;
 800fef0:	1c44      	adds	r4, r0, #1
 800fef2:	7005      	strb	r5, [r0, #0]
        CHECK_STR_SIZE(buf, str, size);
 800fef4:	9802      	ldr	r0, [sp, #8]
    base = 10;
 800fef6:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 800fef8:	1a20      	subs	r0, r4, r0
 800fefa:	4288      	cmp	r0, r1
 800fefc:	da5c      	bge.n	800ffb8 <tiny_vsnprintf_like+0x148>
 800fefe:	e7c8      	b.n	800fe92 <tiny_vsnprintf_like+0x22>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800ff00:	9e01      	ldr	r6, [sp, #4]
 800ff02:	3601      	adds	r6, #1
 800ff04:	9601      	str	r6, [sp, #4]
 800ff06:	260a      	movs	r6, #10
 800ff08:	4377      	muls	r7, r6
 800ff0a:	197d      	adds	r5, r7, r5
 800ff0c:	3d30      	subs	r5, #48	; 0x30
 800ff0e:	002f      	movs	r7, r5
 800ff10:	9d01      	ldr	r5, [sp, #4]
 800ff12:	782d      	ldrb	r5, [r5, #0]
 800ff14:	002e      	movs	r6, r5
 800ff16:	3e30      	subs	r6, #48	; 0x30
 800ff18:	2e09      	cmp	r6, #9
 800ff1a:	d9f1      	bls.n	800ff00 <tiny_vsnprintf_like+0x90>
 800ff1c:	e7d3      	b.n	800fec6 <tiny_vsnprintf_like+0x56>
  int i = 0;
 800ff1e:	2700      	movs	r7, #0
 800ff20:	e7f6      	b.n	800ff10 <tiny_vsnprintf_like+0xa0>
    switch (*fmt)
 800ff22:	2e75      	cmp	r6, #117	; 0x75
 800ff24:	d100      	bne.n	800ff28 <tiny_vsnprintf_like+0xb8>
 800ff26:	e081      	b.n	801002c <tiny_vsnprintf_like+0x1bc>
 800ff28:	2510      	movs	r5, #16
 800ff2a:	2e78      	cmp	r6, #120	; 0x78
 800ff2c:	d044      	beq.n	800ffb8 <tiny_vsnprintf_like+0x148>
 800ff2e:	2e73      	cmp	r6, #115	; 0x73
 800ff30:	d020      	beq.n	800ff74 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 800ff32:	2525      	movs	r5, #37	; 0x25
 800ff34:	1c60      	adds	r0, r4, #1
 800ff36:	7025      	strb	r5, [r4, #0]
        CHECK_STR_SIZE(buf, str, size);
 800ff38:	9c02      	ldr	r4, [sp, #8]
 800ff3a:	1b04      	subs	r4, r0, r4
 800ff3c:	428c      	cmp	r4, r1
 800ff3e:	dbd2      	blt.n	800fee6 <tiny_vsnprintf_like+0x76>
        if (*fmt != '%') *str++ = '%';
 800ff40:	0004      	movs	r4, r0
 800ff42:	e073      	b.n	801002c <tiny_vsnprintf_like+0x1bc>
 800ff44:	0021      	movs	r1, r4
    switch (*fmt)
 800ff46:	003a      	movs	r2, r7
          while (--field_width > 0) *str++ = ' ';
 800ff48:	3a01      	subs	r2, #1
 800ff4a:	2a00      	cmp	r2, #0
 800ff4c:	dc0e      	bgt.n	800ff6c <tiny_vsnprintf_like+0xfc>
 800ff4e:	2200      	movs	r2, #0
 800ff50:	4297      	cmp	r7, r2
 800ff52:	dd00      	ble.n	800ff56 <tiny_vsnprintf_like+0xe6>
 800ff54:	1e7a      	subs	r2, r7, #1
 800ff56:	2101      	movs	r1, #1
 800ff58:	18a2      	adds	r2, r4, r2
 800ff5a:	2f00      	cmp	r7, #0
 800ff5c:	dd00      	ble.n	800ff60 <tiny_vsnprintf_like+0xf0>
 800ff5e:	0039      	movs	r1, r7
        *str++ = (unsigned char) va_arg(args, int);
 800ff60:	001d      	movs	r5, r3
 800ff62:	cd08      	ldmia	r5!, {r3}
 800ff64:	1864      	adds	r4, r4, r1
 800ff66:	7013      	strb	r3, [r2, #0]
        s = va_arg(args, char *);
 800ff68:	002b      	movs	r3, r5
 800ff6a:	e792      	b.n	800fe92 <tiny_vsnprintf_like+0x22>
          while (--field_width > 0) *str++ = ' ';
 800ff6c:	2020      	movs	r0, #32
 800ff6e:	7008      	strb	r0, [r1, #0]
 800ff70:	3101      	adds	r1, #1
 800ff72:	e7e9      	b.n	800ff48 <tiny_vsnprintf_like+0xd8>
        s = va_arg(args, char *);
 800ff74:	001d      	movs	r5, r3
 800ff76:	cd40      	ldmia	r5!, {r6}
        if (!s) s = "<NULL>";
 800ff78:	2e00      	cmp	r6, #0
 800ff7a:	d100      	bne.n	800ff7e <tiny_vsnprintf_like+0x10e>
 800ff7c:	4e50      	ldr	r6, [pc, #320]	; (80100c0 <tiny_vsnprintf_like+0x250>)
        len = strlen(s);
 800ff7e:	0030      	movs	r0, r6
 800ff80:	f7f0 f8c2 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 800ff84:	0023      	movs	r3, r4
 800ff86:	19e1      	adds	r1, r4, r7
 800ff88:	1aca      	subs	r2, r1, r3
 800ff8a:	4290      	cmp	r0, r2
 800ff8c:	db09      	blt.n	800ffa2 <tiny_vsnprintf_like+0x132>
 800ff8e:	2300      	movs	r3, #0
 800ff90:	4287      	cmp	r7, r0
 800ff92:	db00      	blt.n	800ff96 <tiny_vsnprintf_like+0x126>
 800ff94:	1a3b      	subs	r3, r7, r0
 800ff96:	18e4      	adds	r4, r4, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 800ff98:	2300      	movs	r3, #0
 800ff9a:	4283      	cmp	r3, r0
 800ff9c:	db05      	blt.n	800ffaa <tiny_vsnprintf_like+0x13a>
 800ff9e:	1824      	adds	r4, r4, r0
 800ffa0:	e7e2      	b.n	800ff68 <tiny_vsnprintf_like+0xf8>
          while (len < field_width--) *str++ = ' ';
 800ffa2:	2220      	movs	r2, #32
 800ffa4:	701a      	strb	r2, [r3, #0]
 800ffa6:	3301      	adds	r3, #1
 800ffa8:	e7ee      	b.n	800ff88 <tiny_vsnprintf_like+0x118>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800ffaa:	5cf2      	ldrb	r2, [r6, r3]
 800ffac:	54e2      	strb	r2, [r4, r3]
 800ffae:	3301      	adds	r3, #1
 800ffb0:	e7f3      	b.n	800ff9a <tiny_vsnprintf_like+0x12a>
        flags |= UPPERCASE;
 800ffb2:	2240      	movs	r2, #64	; 0x40
        base = 16;
 800ffb4:	2510      	movs	r5, #16
        flags |= UPPERCASE;
 800ffb6:	4302      	orrs	r2, r0
    else if (flags & SIGN)
 800ffb8:	2602      	movs	r6, #2
 800ffba:	9306      	str	r3, [sp, #24]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800ffbc:	9b02      	ldr	r3, [sp, #8]
    else if (flags & SIGN)
 800ffbe:	4016      	ands	r6, r2
 800ffc0:	46b4      	mov	ip, r6
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800ffc2:	1ae6      	subs	r6, r4, r3
 800ffc4:	9b06      	ldr	r3, [sp, #24]
 800ffc6:	1b8e      	subs	r6, r1, r6
 800ffc8:	cb01      	ldmia	r3!, {r0}
  if (type & UPPERCASE)  dig = upper_digits;
 800ffca:	493e      	ldr	r1, [pc, #248]	; (80100c4 <tiny_vsnprintf_like+0x254>)
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800ffcc:	9306      	str	r3, [sp, #24]
  if (type & UPPERCASE)  dig = upper_digits;
 800ffce:	2340      	movs	r3, #64	; 0x40
 800ffd0:	9108      	str	r1, [sp, #32]
 800ffd2:	421a      	tst	r2, r3
 800ffd4:	d101      	bne.n	800ffda <tiny_vsnprintf_like+0x16a>
  char *dig = lower_digits;
 800ffd6:	4b3c      	ldr	r3, [pc, #240]	; (80100c8 <tiny_vsnprintf_like+0x258>)
 800ffd8:	9308      	str	r3, [sp, #32]
  c = (type & ZEROPAD) ? '0' : ' ';
 800ffda:	2330      	movs	r3, #48	; 0x30
 800ffdc:	9309      	str	r3, [sp, #36]	; 0x24
 800ffde:	9b05      	ldr	r3, [sp, #20]
 800ffe0:	2b30      	cmp	r3, #48	; 0x30
 800ffe2:	d001      	beq.n	800ffe8 <tiny_vsnprintf_like+0x178>
 800ffe4:	2320      	movs	r3, #32
 800ffe6:	9309      	str	r3, [sp, #36]	; 0x24
  if (type & SIGN)
 800ffe8:	4663      	mov	r3, ip
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d025      	beq.n	801003a <tiny_vsnprintf_like+0x1ca>
    if (num < 0)
 800ffee:	2800      	cmp	r0, #0
 800fff0:	da23      	bge.n	801003a <tiny_vsnprintf_like+0x1ca>
      sign = '-';
 800fff2:	232d      	movs	r3, #45	; 0x2d
      num = -num;
 800fff4:	4240      	negs	r0, r0
      size--;
 800fff6:	3f01      	subs	r7, #1
  if (num == 0)
 800fff8:	9304      	str	r3, [sp, #16]
  if (base < 2 || base > 36) return 0;
 800fffa:	2300      	movs	r3, #0
 800fffc:	9303      	str	r3, [sp, #12]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800fffe:	0029      	movs	r1, r5
 8010000:	9007      	str	r0, [sp, #28]
 8010002:	f7f0 f937 	bl	8000274 <__aeabi_uidivmod>
 8010006:	9b03      	ldr	r3, [sp, #12]
 8010008:	000a      	movs	r2, r1
 801000a:	469c      	mov	ip, r3
 801000c:	900b      	str	r0, [sp, #44]	; 0x2c
 801000e:	4660      	mov	r0, ip
 8010010:	0019      	movs	r1, r3
 8010012:	9b08      	ldr	r3, [sp, #32]
 8010014:	3101      	adds	r1, #1
 8010016:	5c9a      	ldrb	r2, [r3, r2]
 8010018:	ab0d      	add	r3, sp, #52	; 0x34
 801001a:	541a      	strb	r2, [r3, r0]
    while (num != 0)
 801001c:	9b07      	ldr	r3, [sp, #28]
      num = ((unsigned long) num) / (unsigned) base;
 801001e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8010020:	9103      	str	r1, [sp, #12]
    while (num != 0)
 8010022:	429d      	cmp	r5, r3
 8010024:	d9eb      	bls.n	800fffe <tiny_vsnprintf_like+0x18e>
 8010026:	e011      	b.n	801004c <tiny_vsnprintf_like+0x1dc>
        flags |= SIGN;
 8010028:	2202      	movs	r2, #2
 801002a:	4302      	orrs	r2, r0
    base = 10;
 801002c:	250a      	movs	r5, #10
 801002e:	e7c3      	b.n	800ffb8 <tiny_vsnprintf_like+0x148>
          --fmt;
 8010030:	9a01      	ldr	r2, [sp, #4]
 8010032:	0004      	movs	r4, r0
 8010034:	3a01      	subs	r2, #1
 8010036:	9201      	str	r2, [sp, #4]
        CHECK_STR_SIZE(buf, str, size);
 8010038:	e72b      	b.n	800fe92 <tiny_vsnprintf_like+0x22>
  if (num == 0)
 801003a:	2800      	cmp	r0, #0
 801003c:	d001      	beq.n	8010042 <tiny_vsnprintf_like+0x1d2>
 801003e:	2300      	movs	r3, #0
 8010040:	e7da      	b.n	800fff8 <tiny_vsnprintf_like+0x188>
    tmp[i++] = '0';
 8010042:	2230      	movs	r2, #48	; 0x30
 8010044:	2101      	movs	r1, #1
 8010046:	ab0d      	add	r3, sp, #52	; 0x34
 8010048:	701a      	strb	r2, [r3, #0]
 801004a:	9004      	str	r0, [sp, #16]
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801004c:	9b05      	ldr	r3, [sp, #20]
  size -= precision;
 801004e:	1a78      	subs	r0, r7, r1
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010050:	2b30      	cmp	r3, #48	; 0x30
 8010052:	d005      	beq.n	8010060 <tiny_vsnprintf_like+0x1f0>
 8010054:	0023      	movs	r3, r4
 8010056:	0002      	movs	r2, r0
 8010058:	001c      	movs	r4, r3
 801005a:	3801      	subs	r0, #1
 801005c:	2a00      	cmp	r2, #0
 801005e:	dc0b      	bgt.n	8010078 <tiny_vsnprintf_like+0x208>
  if (sign) ASSIGN_STR(sign);
 8010060:	9b04      	ldr	r3, [sp, #16]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d005      	beq.n	8010072 <tiny_vsnprintf_like+0x202>
 8010066:	1c62      	adds	r2, r4, #1
 8010068:	3e01      	subs	r6, #1
 801006a:	7023      	strb	r3, [r4, #0]
 801006c:	0014      	movs	r4, r2
 801006e:	2e00      	cmp	r6, #0
 8010070:	d009      	beq.n	8010086 <tiny_vsnprintf_like+0x216>
 8010072:	0033      	movs	r3, r6
 8010074:	1b80      	subs	r0, r0, r6
 8010076:	e010      	b.n	801009a <tiny_vsnprintf_like+0x22a>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8010078:	2520      	movs	r5, #32
 801007a:	3301      	adds	r3, #1
 801007c:	3e01      	subs	r6, #1
 801007e:	001a      	movs	r2, r3
 8010080:	7025      	strb	r5, [r4, #0]
 8010082:	2e00      	cmp	r6, #0
 8010084:	d1e7      	bne.n	8010056 <tiny_vsnprintf_like+0x1e6>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8010086:	0014      	movs	r4, r2
 8010088:	9b06      	ldr	r3, [sp, #24]
 801008a:	e702      	b.n	800fe92 <tiny_vsnprintf_like+0x22>
  while (size-- > 0) ASSIGN_STR(c);
 801008c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801008e:	3401      	adds	r4, #1
 8010090:	3b01      	subs	r3, #1
 8010092:	0022      	movs	r2, r4
 8010094:	702e      	strb	r6, [r5, #0]
 8010096:	2b00      	cmp	r3, #0
 8010098:	d0f5      	beq.n	8010086 <tiny_vsnprintf_like+0x216>
 801009a:	18c2      	adds	r2, r0, r3
 801009c:	0025      	movs	r5, r4
 801009e:	2a00      	cmp	r2, #0
 80100a0:	dcf4      	bgt.n	801008c <tiny_vsnprintf_like+0x21c>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 80100a2:	ad0d      	add	r5, sp, #52	; 0x34
 80100a4:	191b      	adds	r3, r3, r4
 80100a6:	0020      	movs	r0, r4
 80100a8:	3901      	subs	r1, #1
 80100aa:	d201      	bcs.n	80100b0 <tiny_vsnprintf_like+0x240>
 80100ac:	0022      	movs	r2, r4
 80100ae:	e7ea      	b.n	8010086 <tiny_vsnprintf_like+0x216>
 80100b0:	5d4e      	ldrb	r6, [r1, r5]
 80100b2:	3401      	adds	r4, #1
 80100b4:	0022      	movs	r2, r4
 80100b6:	7006      	strb	r6, [r0, #0]
 80100b8:	429c      	cmp	r4, r3
 80100ba:	d1f4      	bne.n	80100a6 <tiny_vsnprintf_like+0x236>
 80100bc:	e7e3      	b.n	8010086 <tiny_vsnprintf_like+0x216>
 80100be:	46c0      	nop			; (mov r8, r8)
 80100c0:	08012000 	.word	0x08012000
 80100c4:	08012007 	.word	0x08012007
 80100c8:	0801202c 	.word	0x0801202c

080100cc <__errno>:
 80100cc:	4b01      	ldr	r3, [pc, #4]	; (80100d4 <__errno+0x8>)
 80100ce:	6818      	ldr	r0, [r3, #0]
 80100d0:	4770      	bx	lr
 80100d2:	46c0      	nop			; (mov r8, r8)
 80100d4:	20000178 	.word	0x20000178

080100d8 <__libc_init_array>:
 80100d8:	b570      	push	{r4, r5, r6, lr}
 80100da:	2600      	movs	r6, #0
 80100dc:	4d0c      	ldr	r5, [pc, #48]	; (8010110 <__libc_init_array+0x38>)
 80100de:	4c0d      	ldr	r4, [pc, #52]	; (8010114 <__libc_init_array+0x3c>)
 80100e0:	1b64      	subs	r4, r4, r5
 80100e2:	10a4      	asrs	r4, r4, #2
 80100e4:	42a6      	cmp	r6, r4
 80100e6:	d109      	bne.n	80100fc <__libc_init_array+0x24>
 80100e8:	2600      	movs	r6, #0
 80100ea:	f001 f853 	bl	8011194 <_init>
 80100ee:	4d0a      	ldr	r5, [pc, #40]	; (8010118 <__libc_init_array+0x40>)
 80100f0:	4c0a      	ldr	r4, [pc, #40]	; (801011c <__libc_init_array+0x44>)
 80100f2:	1b64      	subs	r4, r4, r5
 80100f4:	10a4      	asrs	r4, r4, #2
 80100f6:	42a6      	cmp	r6, r4
 80100f8:	d105      	bne.n	8010106 <__libc_init_array+0x2e>
 80100fa:	bd70      	pop	{r4, r5, r6, pc}
 80100fc:	00b3      	lsls	r3, r6, #2
 80100fe:	58eb      	ldr	r3, [r5, r3]
 8010100:	4798      	blx	r3
 8010102:	3601      	adds	r6, #1
 8010104:	e7ee      	b.n	80100e4 <__libc_init_array+0xc>
 8010106:	00b3      	lsls	r3, r6, #2
 8010108:	58eb      	ldr	r3, [r5, r3]
 801010a:	4798      	blx	r3
 801010c:	3601      	adds	r6, #1
 801010e:	e7f2      	b.n	80100f6 <__libc_init_array+0x1e>
 8010110:	080120f4 	.word	0x080120f4
 8010114:	080120f4 	.word	0x080120f4
 8010118:	080120f4 	.word	0x080120f4
 801011c:	080120f8 	.word	0x080120f8

08010120 <memcpy>:
 8010120:	2300      	movs	r3, #0
 8010122:	b510      	push	{r4, lr}
 8010124:	429a      	cmp	r2, r3
 8010126:	d100      	bne.n	801012a <memcpy+0xa>
 8010128:	bd10      	pop	{r4, pc}
 801012a:	5ccc      	ldrb	r4, [r1, r3]
 801012c:	54c4      	strb	r4, [r0, r3]
 801012e:	3301      	adds	r3, #1
 8010130:	e7f8      	b.n	8010124 <memcpy+0x4>

08010132 <memset>:
 8010132:	0003      	movs	r3, r0
 8010134:	1882      	adds	r2, r0, r2
 8010136:	4293      	cmp	r3, r2
 8010138:	d100      	bne.n	801013c <memset+0xa>
 801013a:	4770      	bx	lr
 801013c:	7019      	strb	r1, [r3, #0]
 801013e:	3301      	adds	r3, #1
 8010140:	e7f9      	b.n	8010136 <memset+0x4>
	...

08010144 <iprintf>:
 8010144:	b40f      	push	{r0, r1, r2, r3}
 8010146:	4b0b      	ldr	r3, [pc, #44]	; (8010174 <iprintf+0x30>)
 8010148:	b513      	push	{r0, r1, r4, lr}
 801014a:	681c      	ldr	r4, [r3, #0]
 801014c:	2c00      	cmp	r4, #0
 801014e:	d005      	beq.n	801015c <iprintf+0x18>
 8010150:	69a3      	ldr	r3, [r4, #24]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d102      	bne.n	801015c <iprintf+0x18>
 8010156:	0020      	movs	r0, r4
 8010158:	f000 f870 	bl	801023c <__sinit>
 801015c:	ab05      	add	r3, sp, #20
 801015e:	0020      	movs	r0, r4
 8010160:	9a04      	ldr	r2, [sp, #16]
 8010162:	68a1      	ldr	r1, [r4, #8]
 8010164:	9301      	str	r3, [sp, #4]
 8010166:	f000 f993 	bl	8010490 <_vfiprintf_r>
 801016a:	bc16      	pop	{r1, r2, r4}
 801016c:	bc08      	pop	{r3}
 801016e:	b004      	add	sp, #16
 8010170:	4718      	bx	r3
 8010172:	46c0      	nop			; (mov r8, r8)
 8010174:	20000178 	.word	0x20000178

08010178 <std>:
 8010178:	2300      	movs	r3, #0
 801017a:	b510      	push	{r4, lr}
 801017c:	0004      	movs	r4, r0
 801017e:	6003      	str	r3, [r0, #0]
 8010180:	6043      	str	r3, [r0, #4]
 8010182:	6083      	str	r3, [r0, #8]
 8010184:	8181      	strh	r1, [r0, #12]
 8010186:	6643      	str	r3, [r0, #100]	; 0x64
 8010188:	0019      	movs	r1, r3
 801018a:	81c2      	strh	r2, [r0, #14]
 801018c:	6103      	str	r3, [r0, #16]
 801018e:	6143      	str	r3, [r0, #20]
 8010190:	6183      	str	r3, [r0, #24]
 8010192:	2208      	movs	r2, #8
 8010194:	305c      	adds	r0, #92	; 0x5c
 8010196:	f7ff ffcc 	bl	8010132 <memset>
 801019a:	4b05      	ldr	r3, [pc, #20]	; (80101b0 <std+0x38>)
 801019c:	6263      	str	r3, [r4, #36]	; 0x24
 801019e:	4b05      	ldr	r3, [pc, #20]	; (80101b4 <std+0x3c>)
 80101a0:	6224      	str	r4, [r4, #32]
 80101a2:	62a3      	str	r3, [r4, #40]	; 0x28
 80101a4:	4b04      	ldr	r3, [pc, #16]	; (80101b8 <std+0x40>)
 80101a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80101a8:	4b04      	ldr	r3, [pc, #16]	; (80101bc <std+0x44>)
 80101aa:	6323      	str	r3, [r4, #48]	; 0x30
 80101ac:	bd10      	pop	{r4, pc}
 80101ae:	46c0      	nop			; (mov r8, r8)
 80101b0:	08010a2d 	.word	0x08010a2d
 80101b4:	08010a55 	.word	0x08010a55
 80101b8:	08010a8d 	.word	0x08010a8d
 80101bc:	08010ab9 	.word	0x08010ab9

080101c0 <_cleanup_r>:
 80101c0:	b510      	push	{r4, lr}
 80101c2:	4902      	ldr	r1, [pc, #8]	; (80101cc <_cleanup_r+0xc>)
 80101c4:	f000 f8ba 	bl	801033c <_fwalk_reent>
 80101c8:	bd10      	pop	{r4, pc}
 80101ca:	46c0      	nop			; (mov r8, r8)
 80101cc:	08010dc5 	.word	0x08010dc5

080101d0 <__sfmoreglue>:
 80101d0:	b570      	push	{r4, r5, r6, lr}
 80101d2:	2568      	movs	r5, #104	; 0x68
 80101d4:	1e4a      	subs	r2, r1, #1
 80101d6:	4355      	muls	r5, r2
 80101d8:	000e      	movs	r6, r1
 80101da:	0029      	movs	r1, r5
 80101dc:	3174      	adds	r1, #116	; 0x74
 80101de:	f000 f8d1 	bl	8010384 <_malloc_r>
 80101e2:	1e04      	subs	r4, r0, #0
 80101e4:	d008      	beq.n	80101f8 <__sfmoreglue+0x28>
 80101e6:	2100      	movs	r1, #0
 80101e8:	002a      	movs	r2, r5
 80101ea:	6001      	str	r1, [r0, #0]
 80101ec:	6046      	str	r6, [r0, #4]
 80101ee:	300c      	adds	r0, #12
 80101f0:	60a0      	str	r0, [r4, #8]
 80101f2:	3268      	adds	r2, #104	; 0x68
 80101f4:	f7ff ff9d 	bl	8010132 <memset>
 80101f8:	0020      	movs	r0, r4
 80101fa:	bd70      	pop	{r4, r5, r6, pc}

080101fc <__sfp_lock_acquire>:
 80101fc:	b510      	push	{r4, lr}
 80101fe:	4802      	ldr	r0, [pc, #8]	; (8010208 <__sfp_lock_acquire+0xc>)
 8010200:	f000 f8bd 	bl	801037e <__retarget_lock_acquire_recursive>
 8010204:	bd10      	pop	{r4, pc}
 8010206:	46c0      	nop			; (mov r8, r8)
 8010208:	20001658 	.word	0x20001658

0801020c <__sfp_lock_release>:
 801020c:	b510      	push	{r4, lr}
 801020e:	4802      	ldr	r0, [pc, #8]	; (8010218 <__sfp_lock_release+0xc>)
 8010210:	f000 f8b6 	bl	8010380 <__retarget_lock_release_recursive>
 8010214:	bd10      	pop	{r4, pc}
 8010216:	46c0      	nop			; (mov r8, r8)
 8010218:	20001658 	.word	0x20001658

0801021c <__sinit_lock_acquire>:
 801021c:	b510      	push	{r4, lr}
 801021e:	4802      	ldr	r0, [pc, #8]	; (8010228 <__sinit_lock_acquire+0xc>)
 8010220:	f000 f8ad 	bl	801037e <__retarget_lock_acquire_recursive>
 8010224:	bd10      	pop	{r4, pc}
 8010226:	46c0      	nop			; (mov r8, r8)
 8010228:	20001653 	.word	0x20001653

0801022c <__sinit_lock_release>:
 801022c:	b510      	push	{r4, lr}
 801022e:	4802      	ldr	r0, [pc, #8]	; (8010238 <__sinit_lock_release+0xc>)
 8010230:	f000 f8a6 	bl	8010380 <__retarget_lock_release_recursive>
 8010234:	bd10      	pop	{r4, pc}
 8010236:	46c0      	nop			; (mov r8, r8)
 8010238:	20001653 	.word	0x20001653

0801023c <__sinit>:
 801023c:	b513      	push	{r0, r1, r4, lr}
 801023e:	0004      	movs	r4, r0
 8010240:	f7ff ffec 	bl	801021c <__sinit_lock_acquire>
 8010244:	69a3      	ldr	r3, [r4, #24]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d002      	beq.n	8010250 <__sinit+0x14>
 801024a:	f7ff ffef 	bl	801022c <__sinit_lock_release>
 801024e:	bd13      	pop	{r0, r1, r4, pc}
 8010250:	64a3      	str	r3, [r4, #72]	; 0x48
 8010252:	64e3      	str	r3, [r4, #76]	; 0x4c
 8010254:	6523      	str	r3, [r4, #80]	; 0x50
 8010256:	4b13      	ldr	r3, [pc, #76]	; (80102a4 <__sinit+0x68>)
 8010258:	4a13      	ldr	r2, [pc, #76]	; (80102a8 <__sinit+0x6c>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	62a2      	str	r2, [r4, #40]	; 0x28
 801025e:	9301      	str	r3, [sp, #4]
 8010260:	42a3      	cmp	r3, r4
 8010262:	d101      	bne.n	8010268 <__sinit+0x2c>
 8010264:	2301      	movs	r3, #1
 8010266:	61a3      	str	r3, [r4, #24]
 8010268:	0020      	movs	r0, r4
 801026a:	f000 f81f 	bl	80102ac <__sfp>
 801026e:	6060      	str	r0, [r4, #4]
 8010270:	0020      	movs	r0, r4
 8010272:	f000 f81b 	bl	80102ac <__sfp>
 8010276:	60a0      	str	r0, [r4, #8]
 8010278:	0020      	movs	r0, r4
 801027a:	f000 f817 	bl	80102ac <__sfp>
 801027e:	2200      	movs	r2, #0
 8010280:	2104      	movs	r1, #4
 8010282:	60e0      	str	r0, [r4, #12]
 8010284:	6860      	ldr	r0, [r4, #4]
 8010286:	f7ff ff77 	bl	8010178 <std>
 801028a:	2201      	movs	r2, #1
 801028c:	2109      	movs	r1, #9
 801028e:	68a0      	ldr	r0, [r4, #8]
 8010290:	f7ff ff72 	bl	8010178 <std>
 8010294:	2202      	movs	r2, #2
 8010296:	2112      	movs	r1, #18
 8010298:	68e0      	ldr	r0, [r4, #12]
 801029a:	f7ff ff6d 	bl	8010178 <std>
 801029e:	2301      	movs	r3, #1
 80102a0:	61a3      	str	r3, [r4, #24]
 80102a2:	e7d2      	b.n	801024a <__sinit+0xe>
 80102a4:	08012054 	.word	0x08012054
 80102a8:	080101c1 	.word	0x080101c1

080102ac <__sfp>:
 80102ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80102ae:	0007      	movs	r7, r0
 80102b0:	f7ff ffa4 	bl	80101fc <__sfp_lock_acquire>
 80102b4:	4b1f      	ldr	r3, [pc, #124]	; (8010334 <__sfp+0x88>)
 80102b6:	681e      	ldr	r6, [r3, #0]
 80102b8:	69b3      	ldr	r3, [r6, #24]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d102      	bne.n	80102c4 <__sfp+0x18>
 80102be:	0030      	movs	r0, r6
 80102c0:	f7ff ffbc 	bl	801023c <__sinit>
 80102c4:	3648      	adds	r6, #72	; 0x48
 80102c6:	68b4      	ldr	r4, [r6, #8]
 80102c8:	6873      	ldr	r3, [r6, #4]
 80102ca:	3b01      	subs	r3, #1
 80102cc:	d504      	bpl.n	80102d8 <__sfp+0x2c>
 80102ce:	6833      	ldr	r3, [r6, #0]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d022      	beq.n	801031a <__sfp+0x6e>
 80102d4:	6836      	ldr	r6, [r6, #0]
 80102d6:	e7f6      	b.n	80102c6 <__sfp+0x1a>
 80102d8:	220c      	movs	r2, #12
 80102da:	5ea5      	ldrsh	r5, [r4, r2]
 80102dc:	2d00      	cmp	r5, #0
 80102de:	d11a      	bne.n	8010316 <__sfp+0x6a>
 80102e0:	0020      	movs	r0, r4
 80102e2:	4b15      	ldr	r3, [pc, #84]	; (8010338 <__sfp+0x8c>)
 80102e4:	3058      	adds	r0, #88	; 0x58
 80102e6:	60e3      	str	r3, [r4, #12]
 80102e8:	6665      	str	r5, [r4, #100]	; 0x64
 80102ea:	f000 f847 	bl	801037c <__retarget_lock_init_recursive>
 80102ee:	f7ff ff8d 	bl	801020c <__sfp_lock_release>
 80102f2:	0020      	movs	r0, r4
 80102f4:	2208      	movs	r2, #8
 80102f6:	0029      	movs	r1, r5
 80102f8:	6025      	str	r5, [r4, #0]
 80102fa:	60a5      	str	r5, [r4, #8]
 80102fc:	6065      	str	r5, [r4, #4]
 80102fe:	6125      	str	r5, [r4, #16]
 8010300:	6165      	str	r5, [r4, #20]
 8010302:	61a5      	str	r5, [r4, #24]
 8010304:	305c      	adds	r0, #92	; 0x5c
 8010306:	f7ff ff14 	bl	8010132 <memset>
 801030a:	6365      	str	r5, [r4, #52]	; 0x34
 801030c:	63a5      	str	r5, [r4, #56]	; 0x38
 801030e:	64a5      	str	r5, [r4, #72]	; 0x48
 8010310:	64e5      	str	r5, [r4, #76]	; 0x4c
 8010312:	0020      	movs	r0, r4
 8010314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010316:	3468      	adds	r4, #104	; 0x68
 8010318:	e7d7      	b.n	80102ca <__sfp+0x1e>
 801031a:	2104      	movs	r1, #4
 801031c:	0038      	movs	r0, r7
 801031e:	f7ff ff57 	bl	80101d0 <__sfmoreglue>
 8010322:	1e04      	subs	r4, r0, #0
 8010324:	6030      	str	r0, [r6, #0]
 8010326:	d1d5      	bne.n	80102d4 <__sfp+0x28>
 8010328:	f7ff ff70 	bl	801020c <__sfp_lock_release>
 801032c:	230c      	movs	r3, #12
 801032e:	603b      	str	r3, [r7, #0]
 8010330:	e7ef      	b.n	8010312 <__sfp+0x66>
 8010332:	46c0      	nop			; (mov r8, r8)
 8010334:	08012054 	.word	0x08012054
 8010338:	ffff0001 	.word	0xffff0001

0801033c <_fwalk_reent>:
 801033c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801033e:	0004      	movs	r4, r0
 8010340:	0006      	movs	r6, r0
 8010342:	2700      	movs	r7, #0
 8010344:	9101      	str	r1, [sp, #4]
 8010346:	3448      	adds	r4, #72	; 0x48
 8010348:	6863      	ldr	r3, [r4, #4]
 801034a:	68a5      	ldr	r5, [r4, #8]
 801034c:	9300      	str	r3, [sp, #0]
 801034e:	9b00      	ldr	r3, [sp, #0]
 8010350:	3b01      	subs	r3, #1
 8010352:	9300      	str	r3, [sp, #0]
 8010354:	d504      	bpl.n	8010360 <_fwalk_reent+0x24>
 8010356:	6824      	ldr	r4, [r4, #0]
 8010358:	2c00      	cmp	r4, #0
 801035a:	d1f5      	bne.n	8010348 <_fwalk_reent+0xc>
 801035c:	0038      	movs	r0, r7
 801035e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010360:	89ab      	ldrh	r3, [r5, #12]
 8010362:	2b01      	cmp	r3, #1
 8010364:	d908      	bls.n	8010378 <_fwalk_reent+0x3c>
 8010366:	220e      	movs	r2, #14
 8010368:	5eab      	ldrsh	r3, [r5, r2]
 801036a:	3301      	adds	r3, #1
 801036c:	d004      	beq.n	8010378 <_fwalk_reent+0x3c>
 801036e:	0029      	movs	r1, r5
 8010370:	0030      	movs	r0, r6
 8010372:	9b01      	ldr	r3, [sp, #4]
 8010374:	4798      	blx	r3
 8010376:	4307      	orrs	r7, r0
 8010378:	3568      	adds	r5, #104	; 0x68
 801037a:	e7e8      	b.n	801034e <_fwalk_reent+0x12>

0801037c <__retarget_lock_init_recursive>:
 801037c:	4770      	bx	lr

0801037e <__retarget_lock_acquire_recursive>:
 801037e:	4770      	bx	lr

08010380 <__retarget_lock_release_recursive>:
 8010380:	4770      	bx	lr
	...

08010384 <_malloc_r>:
 8010384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010386:	2303      	movs	r3, #3
 8010388:	1ccd      	adds	r5, r1, #3
 801038a:	439d      	bics	r5, r3
 801038c:	3508      	adds	r5, #8
 801038e:	0006      	movs	r6, r0
 8010390:	2d0c      	cmp	r5, #12
 8010392:	d21f      	bcs.n	80103d4 <_malloc_r+0x50>
 8010394:	250c      	movs	r5, #12
 8010396:	42a9      	cmp	r1, r5
 8010398:	d81e      	bhi.n	80103d8 <_malloc_r+0x54>
 801039a:	0030      	movs	r0, r6
 801039c:	f000 fdde 	bl	8010f5c <__malloc_lock>
 80103a0:	4925      	ldr	r1, [pc, #148]	; (8010438 <_malloc_r+0xb4>)
 80103a2:	680a      	ldr	r2, [r1, #0]
 80103a4:	0014      	movs	r4, r2
 80103a6:	2c00      	cmp	r4, #0
 80103a8:	d11a      	bne.n	80103e0 <_malloc_r+0x5c>
 80103aa:	4f24      	ldr	r7, [pc, #144]	; (801043c <_malloc_r+0xb8>)
 80103ac:	683b      	ldr	r3, [r7, #0]
 80103ae:	2b00      	cmp	r3, #0
 80103b0:	d104      	bne.n	80103bc <_malloc_r+0x38>
 80103b2:	0021      	movs	r1, r4
 80103b4:	0030      	movs	r0, r6
 80103b6:	f000 fb27 	bl	8010a08 <_sbrk_r>
 80103ba:	6038      	str	r0, [r7, #0]
 80103bc:	0029      	movs	r1, r5
 80103be:	0030      	movs	r0, r6
 80103c0:	f000 fb22 	bl	8010a08 <_sbrk_r>
 80103c4:	1c43      	adds	r3, r0, #1
 80103c6:	d12b      	bne.n	8010420 <_malloc_r+0x9c>
 80103c8:	230c      	movs	r3, #12
 80103ca:	0030      	movs	r0, r6
 80103cc:	6033      	str	r3, [r6, #0]
 80103ce:	f000 fdcd 	bl	8010f6c <__malloc_unlock>
 80103d2:	e003      	b.n	80103dc <_malloc_r+0x58>
 80103d4:	2d00      	cmp	r5, #0
 80103d6:	dade      	bge.n	8010396 <_malloc_r+0x12>
 80103d8:	230c      	movs	r3, #12
 80103da:	6033      	str	r3, [r6, #0]
 80103dc:	2000      	movs	r0, #0
 80103de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103e0:	6823      	ldr	r3, [r4, #0]
 80103e2:	1b5b      	subs	r3, r3, r5
 80103e4:	d419      	bmi.n	801041a <_malloc_r+0x96>
 80103e6:	2b0b      	cmp	r3, #11
 80103e8:	d903      	bls.n	80103f2 <_malloc_r+0x6e>
 80103ea:	6023      	str	r3, [r4, #0]
 80103ec:	18e4      	adds	r4, r4, r3
 80103ee:	6025      	str	r5, [r4, #0]
 80103f0:	e003      	b.n	80103fa <_malloc_r+0x76>
 80103f2:	6863      	ldr	r3, [r4, #4]
 80103f4:	42a2      	cmp	r2, r4
 80103f6:	d10e      	bne.n	8010416 <_malloc_r+0x92>
 80103f8:	600b      	str	r3, [r1, #0]
 80103fa:	0030      	movs	r0, r6
 80103fc:	f000 fdb6 	bl	8010f6c <__malloc_unlock>
 8010400:	0020      	movs	r0, r4
 8010402:	2207      	movs	r2, #7
 8010404:	300b      	adds	r0, #11
 8010406:	1d23      	adds	r3, r4, #4
 8010408:	4390      	bics	r0, r2
 801040a:	1ac2      	subs	r2, r0, r3
 801040c:	4298      	cmp	r0, r3
 801040e:	d0e6      	beq.n	80103de <_malloc_r+0x5a>
 8010410:	1a1b      	subs	r3, r3, r0
 8010412:	50a3      	str	r3, [r4, r2]
 8010414:	e7e3      	b.n	80103de <_malloc_r+0x5a>
 8010416:	6053      	str	r3, [r2, #4]
 8010418:	e7ef      	b.n	80103fa <_malloc_r+0x76>
 801041a:	0022      	movs	r2, r4
 801041c:	6864      	ldr	r4, [r4, #4]
 801041e:	e7c2      	b.n	80103a6 <_malloc_r+0x22>
 8010420:	2303      	movs	r3, #3
 8010422:	1cc4      	adds	r4, r0, #3
 8010424:	439c      	bics	r4, r3
 8010426:	42a0      	cmp	r0, r4
 8010428:	d0e1      	beq.n	80103ee <_malloc_r+0x6a>
 801042a:	1a21      	subs	r1, r4, r0
 801042c:	0030      	movs	r0, r6
 801042e:	f000 faeb 	bl	8010a08 <_sbrk_r>
 8010432:	1c43      	adds	r3, r0, #1
 8010434:	d1db      	bne.n	80103ee <_malloc_r+0x6a>
 8010436:	e7c7      	b.n	80103c8 <_malloc_r+0x44>
 8010438:	20001220 	.word	0x20001220
 801043c:	20001224 	.word	0x20001224

08010440 <__sfputc_r>:
 8010440:	6893      	ldr	r3, [r2, #8]
 8010442:	b510      	push	{r4, lr}
 8010444:	3b01      	subs	r3, #1
 8010446:	6093      	str	r3, [r2, #8]
 8010448:	2b00      	cmp	r3, #0
 801044a:	da04      	bge.n	8010456 <__sfputc_r+0x16>
 801044c:	6994      	ldr	r4, [r2, #24]
 801044e:	42a3      	cmp	r3, r4
 8010450:	db07      	blt.n	8010462 <__sfputc_r+0x22>
 8010452:	290a      	cmp	r1, #10
 8010454:	d005      	beq.n	8010462 <__sfputc_r+0x22>
 8010456:	6813      	ldr	r3, [r2, #0]
 8010458:	1c58      	adds	r0, r3, #1
 801045a:	6010      	str	r0, [r2, #0]
 801045c:	7019      	strb	r1, [r3, #0]
 801045e:	0008      	movs	r0, r1
 8010460:	bd10      	pop	{r4, pc}
 8010462:	f000 fb2f 	bl	8010ac4 <__swbuf_r>
 8010466:	0001      	movs	r1, r0
 8010468:	e7f9      	b.n	801045e <__sfputc_r+0x1e>

0801046a <__sfputs_r>:
 801046a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801046c:	0006      	movs	r6, r0
 801046e:	000f      	movs	r7, r1
 8010470:	0014      	movs	r4, r2
 8010472:	18d5      	adds	r5, r2, r3
 8010474:	42ac      	cmp	r4, r5
 8010476:	d101      	bne.n	801047c <__sfputs_r+0x12>
 8010478:	2000      	movs	r0, #0
 801047a:	e007      	b.n	801048c <__sfputs_r+0x22>
 801047c:	7821      	ldrb	r1, [r4, #0]
 801047e:	003a      	movs	r2, r7
 8010480:	0030      	movs	r0, r6
 8010482:	f7ff ffdd 	bl	8010440 <__sfputc_r>
 8010486:	3401      	adds	r4, #1
 8010488:	1c43      	adds	r3, r0, #1
 801048a:	d1f3      	bne.n	8010474 <__sfputs_r+0xa>
 801048c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010490 <_vfiprintf_r>:
 8010490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010492:	b0a1      	sub	sp, #132	; 0x84
 8010494:	0006      	movs	r6, r0
 8010496:	000c      	movs	r4, r1
 8010498:	001f      	movs	r7, r3
 801049a:	9203      	str	r2, [sp, #12]
 801049c:	2800      	cmp	r0, #0
 801049e:	d004      	beq.n	80104aa <_vfiprintf_r+0x1a>
 80104a0:	6983      	ldr	r3, [r0, #24]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d101      	bne.n	80104aa <_vfiprintf_r+0x1a>
 80104a6:	f7ff fec9 	bl	801023c <__sinit>
 80104aa:	4b8e      	ldr	r3, [pc, #568]	; (80106e4 <_vfiprintf_r+0x254>)
 80104ac:	429c      	cmp	r4, r3
 80104ae:	d11c      	bne.n	80104ea <_vfiprintf_r+0x5a>
 80104b0:	6874      	ldr	r4, [r6, #4]
 80104b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80104b4:	07db      	lsls	r3, r3, #31
 80104b6:	d405      	bmi.n	80104c4 <_vfiprintf_r+0x34>
 80104b8:	89a3      	ldrh	r3, [r4, #12]
 80104ba:	059b      	lsls	r3, r3, #22
 80104bc:	d402      	bmi.n	80104c4 <_vfiprintf_r+0x34>
 80104be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104c0:	f7ff ff5d 	bl	801037e <__retarget_lock_acquire_recursive>
 80104c4:	89a3      	ldrh	r3, [r4, #12]
 80104c6:	071b      	lsls	r3, r3, #28
 80104c8:	d502      	bpl.n	80104d0 <_vfiprintf_r+0x40>
 80104ca:	6923      	ldr	r3, [r4, #16]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d11d      	bne.n	801050c <_vfiprintf_r+0x7c>
 80104d0:	0021      	movs	r1, r4
 80104d2:	0030      	movs	r0, r6
 80104d4:	f000 fb60 	bl	8010b98 <__swsetup_r>
 80104d8:	2800      	cmp	r0, #0
 80104da:	d017      	beq.n	801050c <_vfiprintf_r+0x7c>
 80104dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80104de:	07db      	lsls	r3, r3, #31
 80104e0:	d50d      	bpl.n	80104fe <_vfiprintf_r+0x6e>
 80104e2:	2001      	movs	r0, #1
 80104e4:	4240      	negs	r0, r0
 80104e6:	b021      	add	sp, #132	; 0x84
 80104e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104ea:	4b7f      	ldr	r3, [pc, #508]	; (80106e8 <_vfiprintf_r+0x258>)
 80104ec:	429c      	cmp	r4, r3
 80104ee:	d101      	bne.n	80104f4 <_vfiprintf_r+0x64>
 80104f0:	68b4      	ldr	r4, [r6, #8]
 80104f2:	e7de      	b.n	80104b2 <_vfiprintf_r+0x22>
 80104f4:	4b7d      	ldr	r3, [pc, #500]	; (80106ec <_vfiprintf_r+0x25c>)
 80104f6:	429c      	cmp	r4, r3
 80104f8:	d1db      	bne.n	80104b2 <_vfiprintf_r+0x22>
 80104fa:	68f4      	ldr	r4, [r6, #12]
 80104fc:	e7d9      	b.n	80104b2 <_vfiprintf_r+0x22>
 80104fe:	89a3      	ldrh	r3, [r4, #12]
 8010500:	059b      	lsls	r3, r3, #22
 8010502:	d4ee      	bmi.n	80104e2 <_vfiprintf_r+0x52>
 8010504:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010506:	f7ff ff3b 	bl	8010380 <__retarget_lock_release_recursive>
 801050a:	e7ea      	b.n	80104e2 <_vfiprintf_r+0x52>
 801050c:	2300      	movs	r3, #0
 801050e:	ad08      	add	r5, sp, #32
 8010510:	616b      	str	r3, [r5, #20]
 8010512:	3320      	adds	r3, #32
 8010514:	766b      	strb	r3, [r5, #25]
 8010516:	3310      	adds	r3, #16
 8010518:	76ab      	strb	r3, [r5, #26]
 801051a:	9707      	str	r7, [sp, #28]
 801051c:	9f03      	ldr	r7, [sp, #12]
 801051e:	783b      	ldrb	r3, [r7, #0]
 8010520:	2b00      	cmp	r3, #0
 8010522:	d001      	beq.n	8010528 <_vfiprintf_r+0x98>
 8010524:	2b25      	cmp	r3, #37	; 0x25
 8010526:	d14e      	bne.n	80105c6 <_vfiprintf_r+0x136>
 8010528:	9b03      	ldr	r3, [sp, #12]
 801052a:	1afb      	subs	r3, r7, r3
 801052c:	9305      	str	r3, [sp, #20]
 801052e:	9b03      	ldr	r3, [sp, #12]
 8010530:	429f      	cmp	r7, r3
 8010532:	d00d      	beq.n	8010550 <_vfiprintf_r+0xc0>
 8010534:	9b05      	ldr	r3, [sp, #20]
 8010536:	0021      	movs	r1, r4
 8010538:	0030      	movs	r0, r6
 801053a:	9a03      	ldr	r2, [sp, #12]
 801053c:	f7ff ff95 	bl	801046a <__sfputs_r>
 8010540:	1c43      	adds	r3, r0, #1
 8010542:	d100      	bne.n	8010546 <_vfiprintf_r+0xb6>
 8010544:	e0b5      	b.n	80106b2 <_vfiprintf_r+0x222>
 8010546:	696a      	ldr	r2, [r5, #20]
 8010548:	9b05      	ldr	r3, [sp, #20]
 801054a:	4694      	mov	ip, r2
 801054c:	4463      	add	r3, ip
 801054e:	616b      	str	r3, [r5, #20]
 8010550:	783b      	ldrb	r3, [r7, #0]
 8010552:	2b00      	cmp	r3, #0
 8010554:	d100      	bne.n	8010558 <_vfiprintf_r+0xc8>
 8010556:	e0ac      	b.n	80106b2 <_vfiprintf_r+0x222>
 8010558:	2201      	movs	r2, #1
 801055a:	1c7b      	adds	r3, r7, #1
 801055c:	9303      	str	r3, [sp, #12]
 801055e:	2300      	movs	r3, #0
 8010560:	4252      	negs	r2, r2
 8010562:	606a      	str	r2, [r5, #4]
 8010564:	a904      	add	r1, sp, #16
 8010566:	3254      	adds	r2, #84	; 0x54
 8010568:	1852      	adds	r2, r2, r1
 801056a:	602b      	str	r3, [r5, #0]
 801056c:	60eb      	str	r3, [r5, #12]
 801056e:	60ab      	str	r3, [r5, #8]
 8010570:	7013      	strb	r3, [r2, #0]
 8010572:	65ab      	str	r3, [r5, #88]	; 0x58
 8010574:	9b03      	ldr	r3, [sp, #12]
 8010576:	2205      	movs	r2, #5
 8010578:	7819      	ldrb	r1, [r3, #0]
 801057a:	485d      	ldr	r0, [pc, #372]	; (80106f0 <_vfiprintf_r+0x260>)
 801057c:	f000 fce2 	bl	8010f44 <memchr>
 8010580:	9b03      	ldr	r3, [sp, #12]
 8010582:	1c5f      	adds	r7, r3, #1
 8010584:	2800      	cmp	r0, #0
 8010586:	d120      	bne.n	80105ca <_vfiprintf_r+0x13a>
 8010588:	682a      	ldr	r2, [r5, #0]
 801058a:	06d3      	lsls	r3, r2, #27
 801058c:	d504      	bpl.n	8010598 <_vfiprintf_r+0x108>
 801058e:	2353      	movs	r3, #83	; 0x53
 8010590:	a904      	add	r1, sp, #16
 8010592:	185b      	adds	r3, r3, r1
 8010594:	2120      	movs	r1, #32
 8010596:	7019      	strb	r1, [r3, #0]
 8010598:	0713      	lsls	r3, r2, #28
 801059a:	d504      	bpl.n	80105a6 <_vfiprintf_r+0x116>
 801059c:	2353      	movs	r3, #83	; 0x53
 801059e:	a904      	add	r1, sp, #16
 80105a0:	185b      	adds	r3, r3, r1
 80105a2:	212b      	movs	r1, #43	; 0x2b
 80105a4:	7019      	strb	r1, [r3, #0]
 80105a6:	9b03      	ldr	r3, [sp, #12]
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	2b2a      	cmp	r3, #42	; 0x2a
 80105ac:	d016      	beq.n	80105dc <_vfiprintf_r+0x14c>
 80105ae:	2100      	movs	r1, #0
 80105b0:	68eb      	ldr	r3, [r5, #12]
 80105b2:	9f03      	ldr	r7, [sp, #12]
 80105b4:	783a      	ldrb	r2, [r7, #0]
 80105b6:	1c78      	adds	r0, r7, #1
 80105b8:	3a30      	subs	r2, #48	; 0x30
 80105ba:	4684      	mov	ip, r0
 80105bc:	2a09      	cmp	r2, #9
 80105be:	d94f      	bls.n	8010660 <_vfiprintf_r+0x1d0>
 80105c0:	2900      	cmp	r1, #0
 80105c2:	d111      	bne.n	80105e8 <_vfiprintf_r+0x158>
 80105c4:	e017      	b.n	80105f6 <_vfiprintf_r+0x166>
 80105c6:	3701      	adds	r7, #1
 80105c8:	e7a9      	b.n	801051e <_vfiprintf_r+0x8e>
 80105ca:	4b49      	ldr	r3, [pc, #292]	; (80106f0 <_vfiprintf_r+0x260>)
 80105cc:	682a      	ldr	r2, [r5, #0]
 80105ce:	1ac0      	subs	r0, r0, r3
 80105d0:	2301      	movs	r3, #1
 80105d2:	4083      	lsls	r3, r0
 80105d4:	4313      	orrs	r3, r2
 80105d6:	602b      	str	r3, [r5, #0]
 80105d8:	9703      	str	r7, [sp, #12]
 80105da:	e7cb      	b.n	8010574 <_vfiprintf_r+0xe4>
 80105dc:	9b07      	ldr	r3, [sp, #28]
 80105de:	1d19      	adds	r1, r3, #4
 80105e0:	681b      	ldr	r3, [r3, #0]
 80105e2:	9107      	str	r1, [sp, #28]
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	db01      	blt.n	80105ec <_vfiprintf_r+0x15c>
 80105e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80105ea:	e004      	b.n	80105f6 <_vfiprintf_r+0x166>
 80105ec:	425b      	negs	r3, r3
 80105ee:	60eb      	str	r3, [r5, #12]
 80105f0:	2302      	movs	r3, #2
 80105f2:	4313      	orrs	r3, r2
 80105f4:	602b      	str	r3, [r5, #0]
 80105f6:	783b      	ldrb	r3, [r7, #0]
 80105f8:	2b2e      	cmp	r3, #46	; 0x2e
 80105fa:	d10a      	bne.n	8010612 <_vfiprintf_r+0x182>
 80105fc:	787b      	ldrb	r3, [r7, #1]
 80105fe:	2b2a      	cmp	r3, #42	; 0x2a
 8010600:	d137      	bne.n	8010672 <_vfiprintf_r+0x1e2>
 8010602:	9b07      	ldr	r3, [sp, #28]
 8010604:	3702      	adds	r7, #2
 8010606:	1d1a      	adds	r2, r3, #4
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	9207      	str	r2, [sp, #28]
 801060c:	2b00      	cmp	r3, #0
 801060e:	db2d      	blt.n	801066c <_vfiprintf_r+0x1dc>
 8010610:	9309      	str	r3, [sp, #36]	; 0x24
 8010612:	2203      	movs	r2, #3
 8010614:	7839      	ldrb	r1, [r7, #0]
 8010616:	4837      	ldr	r0, [pc, #220]	; (80106f4 <_vfiprintf_r+0x264>)
 8010618:	f000 fc94 	bl	8010f44 <memchr>
 801061c:	2800      	cmp	r0, #0
 801061e:	d007      	beq.n	8010630 <_vfiprintf_r+0x1a0>
 8010620:	4b34      	ldr	r3, [pc, #208]	; (80106f4 <_vfiprintf_r+0x264>)
 8010622:	682a      	ldr	r2, [r5, #0]
 8010624:	1ac0      	subs	r0, r0, r3
 8010626:	2340      	movs	r3, #64	; 0x40
 8010628:	4083      	lsls	r3, r0
 801062a:	4313      	orrs	r3, r2
 801062c:	3701      	adds	r7, #1
 801062e:	602b      	str	r3, [r5, #0]
 8010630:	7839      	ldrb	r1, [r7, #0]
 8010632:	1c7b      	adds	r3, r7, #1
 8010634:	2206      	movs	r2, #6
 8010636:	4830      	ldr	r0, [pc, #192]	; (80106f8 <_vfiprintf_r+0x268>)
 8010638:	9303      	str	r3, [sp, #12]
 801063a:	7629      	strb	r1, [r5, #24]
 801063c:	f000 fc82 	bl	8010f44 <memchr>
 8010640:	2800      	cmp	r0, #0
 8010642:	d045      	beq.n	80106d0 <_vfiprintf_r+0x240>
 8010644:	4b2d      	ldr	r3, [pc, #180]	; (80106fc <_vfiprintf_r+0x26c>)
 8010646:	2b00      	cmp	r3, #0
 8010648:	d127      	bne.n	801069a <_vfiprintf_r+0x20a>
 801064a:	2207      	movs	r2, #7
 801064c:	9b07      	ldr	r3, [sp, #28]
 801064e:	3307      	adds	r3, #7
 8010650:	4393      	bics	r3, r2
 8010652:	3308      	adds	r3, #8
 8010654:	9307      	str	r3, [sp, #28]
 8010656:	696b      	ldr	r3, [r5, #20]
 8010658:	9a04      	ldr	r2, [sp, #16]
 801065a:	189b      	adds	r3, r3, r2
 801065c:	616b      	str	r3, [r5, #20]
 801065e:	e75d      	b.n	801051c <_vfiprintf_r+0x8c>
 8010660:	210a      	movs	r1, #10
 8010662:	434b      	muls	r3, r1
 8010664:	4667      	mov	r7, ip
 8010666:	189b      	adds	r3, r3, r2
 8010668:	3909      	subs	r1, #9
 801066a:	e7a3      	b.n	80105b4 <_vfiprintf_r+0x124>
 801066c:	2301      	movs	r3, #1
 801066e:	425b      	negs	r3, r3
 8010670:	e7ce      	b.n	8010610 <_vfiprintf_r+0x180>
 8010672:	2300      	movs	r3, #0
 8010674:	001a      	movs	r2, r3
 8010676:	3701      	adds	r7, #1
 8010678:	606b      	str	r3, [r5, #4]
 801067a:	7839      	ldrb	r1, [r7, #0]
 801067c:	1c78      	adds	r0, r7, #1
 801067e:	3930      	subs	r1, #48	; 0x30
 8010680:	4684      	mov	ip, r0
 8010682:	2909      	cmp	r1, #9
 8010684:	d903      	bls.n	801068e <_vfiprintf_r+0x1fe>
 8010686:	2b00      	cmp	r3, #0
 8010688:	d0c3      	beq.n	8010612 <_vfiprintf_r+0x182>
 801068a:	9209      	str	r2, [sp, #36]	; 0x24
 801068c:	e7c1      	b.n	8010612 <_vfiprintf_r+0x182>
 801068e:	230a      	movs	r3, #10
 8010690:	435a      	muls	r2, r3
 8010692:	4667      	mov	r7, ip
 8010694:	1852      	adds	r2, r2, r1
 8010696:	3b09      	subs	r3, #9
 8010698:	e7ef      	b.n	801067a <_vfiprintf_r+0x1ea>
 801069a:	ab07      	add	r3, sp, #28
 801069c:	9300      	str	r3, [sp, #0]
 801069e:	0022      	movs	r2, r4
 80106a0:	0029      	movs	r1, r5
 80106a2:	0030      	movs	r0, r6
 80106a4:	4b16      	ldr	r3, [pc, #88]	; (8010700 <_vfiprintf_r+0x270>)
 80106a6:	e000      	b.n	80106aa <_vfiprintf_r+0x21a>
 80106a8:	bf00      	nop
 80106aa:	9004      	str	r0, [sp, #16]
 80106ac:	9b04      	ldr	r3, [sp, #16]
 80106ae:	3301      	adds	r3, #1
 80106b0:	d1d1      	bne.n	8010656 <_vfiprintf_r+0x1c6>
 80106b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106b4:	07db      	lsls	r3, r3, #31
 80106b6:	d405      	bmi.n	80106c4 <_vfiprintf_r+0x234>
 80106b8:	89a3      	ldrh	r3, [r4, #12]
 80106ba:	059b      	lsls	r3, r3, #22
 80106bc:	d402      	bmi.n	80106c4 <_vfiprintf_r+0x234>
 80106be:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106c0:	f7ff fe5e 	bl	8010380 <__retarget_lock_release_recursive>
 80106c4:	89a3      	ldrh	r3, [r4, #12]
 80106c6:	065b      	lsls	r3, r3, #25
 80106c8:	d500      	bpl.n	80106cc <_vfiprintf_r+0x23c>
 80106ca:	e70a      	b.n	80104e2 <_vfiprintf_r+0x52>
 80106cc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80106ce:	e70a      	b.n	80104e6 <_vfiprintf_r+0x56>
 80106d0:	ab07      	add	r3, sp, #28
 80106d2:	9300      	str	r3, [sp, #0]
 80106d4:	0022      	movs	r2, r4
 80106d6:	0029      	movs	r1, r5
 80106d8:	0030      	movs	r0, r6
 80106da:	4b09      	ldr	r3, [pc, #36]	; (8010700 <_vfiprintf_r+0x270>)
 80106dc:	f000 f882 	bl	80107e4 <_printf_i>
 80106e0:	e7e3      	b.n	80106aa <_vfiprintf_r+0x21a>
 80106e2:	46c0      	nop			; (mov r8, r8)
 80106e4:	08012078 	.word	0x08012078
 80106e8:	08012098 	.word	0x08012098
 80106ec:	08012058 	.word	0x08012058
 80106f0:	080120b8 	.word	0x080120b8
 80106f4:	080120be 	.word	0x080120be
 80106f8:	080120c2 	.word	0x080120c2
 80106fc:	00000000 	.word	0x00000000
 8010700:	0801046b 	.word	0x0801046b

08010704 <_printf_common>:
 8010704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010706:	0015      	movs	r5, r2
 8010708:	9301      	str	r3, [sp, #4]
 801070a:	688a      	ldr	r2, [r1, #8]
 801070c:	690b      	ldr	r3, [r1, #16]
 801070e:	000c      	movs	r4, r1
 8010710:	9000      	str	r0, [sp, #0]
 8010712:	4293      	cmp	r3, r2
 8010714:	da00      	bge.n	8010718 <_printf_common+0x14>
 8010716:	0013      	movs	r3, r2
 8010718:	0022      	movs	r2, r4
 801071a:	602b      	str	r3, [r5, #0]
 801071c:	3243      	adds	r2, #67	; 0x43
 801071e:	7812      	ldrb	r2, [r2, #0]
 8010720:	2a00      	cmp	r2, #0
 8010722:	d001      	beq.n	8010728 <_printf_common+0x24>
 8010724:	3301      	adds	r3, #1
 8010726:	602b      	str	r3, [r5, #0]
 8010728:	6823      	ldr	r3, [r4, #0]
 801072a:	069b      	lsls	r3, r3, #26
 801072c:	d502      	bpl.n	8010734 <_printf_common+0x30>
 801072e:	682b      	ldr	r3, [r5, #0]
 8010730:	3302      	adds	r3, #2
 8010732:	602b      	str	r3, [r5, #0]
 8010734:	6822      	ldr	r2, [r4, #0]
 8010736:	2306      	movs	r3, #6
 8010738:	0017      	movs	r7, r2
 801073a:	401f      	ands	r7, r3
 801073c:	421a      	tst	r2, r3
 801073e:	d027      	beq.n	8010790 <_printf_common+0x8c>
 8010740:	0023      	movs	r3, r4
 8010742:	3343      	adds	r3, #67	; 0x43
 8010744:	781b      	ldrb	r3, [r3, #0]
 8010746:	1e5a      	subs	r2, r3, #1
 8010748:	4193      	sbcs	r3, r2
 801074a:	6822      	ldr	r2, [r4, #0]
 801074c:	0692      	lsls	r2, r2, #26
 801074e:	d430      	bmi.n	80107b2 <_printf_common+0xae>
 8010750:	0022      	movs	r2, r4
 8010752:	9901      	ldr	r1, [sp, #4]
 8010754:	9800      	ldr	r0, [sp, #0]
 8010756:	9e08      	ldr	r6, [sp, #32]
 8010758:	3243      	adds	r2, #67	; 0x43
 801075a:	47b0      	blx	r6
 801075c:	1c43      	adds	r3, r0, #1
 801075e:	d025      	beq.n	80107ac <_printf_common+0xa8>
 8010760:	2306      	movs	r3, #6
 8010762:	6820      	ldr	r0, [r4, #0]
 8010764:	682a      	ldr	r2, [r5, #0]
 8010766:	68e1      	ldr	r1, [r4, #12]
 8010768:	2500      	movs	r5, #0
 801076a:	4003      	ands	r3, r0
 801076c:	2b04      	cmp	r3, #4
 801076e:	d103      	bne.n	8010778 <_printf_common+0x74>
 8010770:	1a8d      	subs	r5, r1, r2
 8010772:	43eb      	mvns	r3, r5
 8010774:	17db      	asrs	r3, r3, #31
 8010776:	401d      	ands	r5, r3
 8010778:	68a3      	ldr	r3, [r4, #8]
 801077a:	6922      	ldr	r2, [r4, #16]
 801077c:	4293      	cmp	r3, r2
 801077e:	dd01      	ble.n	8010784 <_printf_common+0x80>
 8010780:	1a9b      	subs	r3, r3, r2
 8010782:	18ed      	adds	r5, r5, r3
 8010784:	2700      	movs	r7, #0
 8010786:	42bd      	cmp	r5, r7
 8010788:	d120      	bne.n	80107cc <_printf_common+0xc8>
 801078a:	2000      	movs	r0, #0
 801078c:	e010      	b.n	80107b0 <_printf_common+0xac>
 801078e:	3701      	adds	r7, #1
 8010790:	68e3      	ldr	r3, [r4, #12]
 8010792:	682a      	ldr	r2, [r5, #0]
 8010794:	1a9b      	subs	r3, r3, r2
 8010796:	42bb      	cmp	r3, r7
 8010798:	ddd2      	ble.n	8010740 <_printf_common+0x3c>
 801079a:	0022      	movs	r2, r4
 801079c:	2301      	movs	r3, #1
 801079e:	9901      	ldr	r1, [sp, #4]
 80107a0:	9800      	ldr	r0, [sp, #0]
 80107a2:	9e08      	ldr	r6, [sp, #32]
 80107a4:	3219      	adds	r2, #25
 80107a6:	47b0      	blx	r6
 80107a8:	1c43      	adds	r3, r0, #1
 80107aa:	d1f0      	bne.n	801078e <_printf_common+0x8a>
 80107ac:	2001      	movs	r0, #1
 80107ae:	4240      	negs	r0, r0
 80107b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80107b2:	2030      	movs	r0, #48	; 0x30
 80107b4:	18e1      	adds	r1, r4, r3
 80107b6:	3143      	adds	r1, #67	; 0x43
 80107b8:	7008      	strb	r0, [r1, #0]
 80107ba:	0021      	movs	r1, r4
 80107bc:	1c5a      	adds	r2, r3, #1
 80107be:	3145      	adds	r1, #69	; 0x45
 80107c0:	7809      	ldrb	r1, [r1, #0]
 80107c2:	18a2      	adds	r2, r4, r2
 80107c4:	3243      	adds	r2, #67	; 0x43
 80107c6:	3302      	adds	r3, #2
 80107c8:	7011      	strb	r1, [r2, #0]
 80107ca:	e7c1      	b.n	8010750 <_printf_common+0x4c>
 80107cc:	0022      	movs	r2, r4
 80107ce:	2301      	movs	r3, #1
 80107d0:	9901      	ldr	r1, [sp, #4]
 80107d2:	9800      	ldr	r0, [sp, #0]
 80107d4:	9e08      	ldr	r6, [sp, #32]
 80107d6:	321a      	adds	r2, #26
 80107d8:	47b0      	blx	r6
 80107da:	1c43      	adds	r3, r0, #1
 80107dc:	d0e6      	beq.n	80107ac <_printf_common+0xa8>
 80107de:	3701      	adds	r7, #1
 80107e0:	e7d1      	b.n	8010786 <_printf_common+0x82>
	...

080107e4 <_printf_i>:
 80107e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80107e6:	b08b      	sub	sp, #44	; 0x2c
 80107e8:	9206      	str	r2, [sp, #24]
 80107ea:	000a      	movs	r2, r1
 80107ec:	3243      	adds	r2, #67	; 0x43
 80107ee:	9307      	str	r3, [sp, #28]
 80107f0:	9005      	str	r0, [sp, #20]
 80107f2:	9204      	str	r2, [sp, #16]
 80107f4:	7e0a      	ldrb	r2, [r1, #24]
 80107f6:	000c      	movs	r4, r1
 80107f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80107fa:	2a78      	cmp	r2, #120	; 0x78
 80107fc:	d806      	bhi.n	801080c <_printf_i+0x28>
 80107fe:	2a62      	cmp	r2, #98	; 0x62
 8010800:	d808      	bhi.n	8010814 <_printf_i+0x30>
 8010802:	2a00      	cmp	r2, #0
 8010804:	d100      	bne.n	8010808 <_printf_i+0x24>
 8010806:	e0c0      	b.n	801098a <_printf_i+0x1a6>
 8010808:	2a58      	cmp	r2, #88	; 0x58
 801080a:	d052      	beq.n	80108b2 <_printf_i+0xce>
 801080c:	0026      	movs	r6, r4
 801080e:	3642      	adds	r6, #66	; 0x42
 8010810:	7032      	strb	r2, [r6, #0]
 8010812:	e022      	b.n	801085a <_printf_i+0x76>
 8010814:	0010      	movs	r0, r2
 8010816:	3863      	subs	r0, #99	; 0x63
 8010818:	2815      	cmp	r0, #21
 801081a:	d8f7      	bhi.n	801080c <_printf_i+0x28>
 801081c:	f7ef fc90 	bl	8000140 <__gnu_thumb1_case_shi>
 8010820:	001f0016 	.word	0x001f0016
 8010824:	fff6fff6 	.word	0xfff6fff6
 8010828:	fff6fff6 	.word	0xfff6fff6
 801082c:	fff6001f 	.word	0xfff6001f
 8010830:	fff6fff6 	.word	0xfff6fff6
 8010834:	00a8fff6 	.word	0x00a8fff6
 8010838:	009a0036 	.word	0x009a0036
 801083c:	fff6fff6 	.word	0xfff6fff6
 8010840:	fff600b9 	.word	0xfff600b9
 8010844:	fff60036 	.word	0xfff60036
 8010848:	009efff6 	.word	0x009efff6
 801084c:	0026      	movs	r6, r4
 801084e:	681a      	ldr	r2, [r3, #0]
 8010850:	3642      	adds	r6, #66	; 0x42
 8010852:	1d11      	adds	r1, r2, #4
 8010854:	6019      	str	r1, [r3, #0]
 8010856:	6813      	ldr	r3, [r2, #0]
 8010858:	7033      	strb	r3, [r6, #0]
 801085a:	2301      	movs	r3, #1
 801085c:	e0a7      	b.n	80109ae <_printf_i+0x1ca>
 801085e:	6808      	ldr	r0, [r1, #0]
 8010860:	6819      	ldr	r1, [r3, #0]
 8010862:	1d0a      	adds	r2, r1, #4
 8010864:	0605      	lsls	r5, r0, #24
 8010866:	d50b      	bpl.n	8010880 <_printf_i+0x9c>
 8010868:	680d      	ldr	r5, [r1, #0]
 801086a:	601a      	str	r2, [r3, #0]
 801086c:	2d00      	cmp	r5, #0
 801086e:	da03      	bge.n	8010878 <_printf_i+0x94>
 8010870:	232d      	movs	r3, #45	; 0x2d
 8010872:	9a04      	ldr	r2, [sp, #16]
 8010874:	426d      	negs	r5, r5
 8010876:	7013      	strb	r3, [r2, #0]
 8010878:	4b61      	ldr	r3, [pc, #388]	; (8010a00 <_printf_i+0x21c>)
 801087a:	270a      	movs	r7, #10
 801087c:	9303      	str	r3, [sp, #12]
 801087e:	e032      	b.n	80108e6 <_printf_i+0x102>
 8010880:	680d      	ldr	r5, [r1, #0]
 8010882:	601a      	str	r2, [r3, #0]
 8010884:	0641      	lsls	r1, r0, #25
 8010886:	d5f1      	bpl.n	801086c <_printf_i+0x88>
 8010888:	b22d      	sxth	r5, r5
 801088a:	e7ef      	b.n	801086c <_printf_i+0x88>
 801088c:	680d      	ldr	r5, [r1, #0]
 801088e:	6819      	ldr	r1, [r3, #0]
 8010890:	1d08      	adds	r0, r1, #4
 8010892:	6018      	str	r0, [r3, #0]
 8010894:	062e      	lsls	r6, r5, #24
 8010896:	d501      	bpl.n	801089c <_printf_i+0xb8>
 8010898:	680d      	ldr	r5, [r1, #0]
 801089a:	e003      	b.n	80108a4 <_printf_i+0xc0>
 801089c:	066d      	lsls	r5, r5, #25
 801089e:	d5fb      	bpl.n	8010898 <_printf_i+0xb4>
 80108a0:	680d      	ldr	r5, [r1, #0]
 80108a2:	b2ad      	uxth	r5, r5
 80108a4:	4b56      	ldr	r3, [pc, #344]	; (8010a00 <_printf_i+0x21c>)
 80108a6:	270a      	movs	r7, #10
 80108a8:	9303      	str	r3, [sp, #12]
 80108aa:	2a6f      	cmp	r2, #111	; 0x6f
 80108ac:	d117      	bne.n	80108de <_printf_i+0xfa>
 80108ae:	2708      	movs	r7, #8
 80108b0:	e015      	b.n	80108de <_printf_i+0xfa>
 80108b2:	3145      	adds	r1, #69	; 0x45
 80108b4:	700a      	strb	r2, [r1, #0]
 80108b6:	4a52      	ldr	r2, [pc, #328]	; (8010a00 <_printf_i+0x21c>)
 80108b8:	9203      	str	r2, [sp, #12]
 80108ba:	681a      	ldr	r2, [r3, #0]
 80108bc:	6821      	ldr	r1, [r4, #0]
 80108be:	ca20      	ldmia	r2!, {r5}
 80108c0:	601a      	str	r2, [r3, #0]
 80108c2:	0608      	lsls	r0, r1, #24
 80108c4:	d550      	bpl.n	8010968 <_printf_i+0x184>
 80108c6:	07cb      	lsls	r3, r1, #31
 80108c8:	d502      	bpl.n	80108d0 <_printf_i+0xec>
 80108ca:	2320      	movs	r3, #32
 80108cc:	4319      	orrs	r1, r3
 80108ce:	6021      	str	r1, [r4, #0]
 80108d0:	2710      	movs	r7, #16
 80108d2:	2d00      	cmp	r5, #0
 80108d4:	d103      	bne.n	80108de <_printf_i+0xfa>
 80108d6:	2320      	movs	r3, #32
 80108d8:	6822      	ldr	r2, [r4, #0]
 80108da:	439a      	bics	r2, r3
 80108dc:	6022      	str	r2, [r4, #0]
 80108de:	0023      	movs	r3, r4
 80108e0:	2200      	movs	r2, #0
 80108e2:	3343      	adds	r3, #67	; 0x43
 80108e4:	701a      	strb	r2, [r3, #0]
 80108e6:	6863      	ldr	r3, [r4, #4]
 80108e8:	60a3      	str	r3, [r4, #8]
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	db03      	blt.n	80108f6 <_printf_i+0x112>
 80108ee:	2204      	movs	r2, #4
 80108f0:	6821      	ldr	r1, [r4, #0]
 80108f2:	4391      	bics	r1, r2
 80108f4:	6021      	str	r1, [r4, #0]
 80108f6:	2d00      	cmp	r5, #0
 80108f8:	d102      	bne.n	8010900 <_printf_i+0x11c>
 80108fa:	9e04      	ldr	r6, [sp, #16]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d00c      	beq.n	801091a <_printf_i+0x136>
 8010900:	9e04      	ldr	r6, [sp, #16]
 8010902:	0028      	movs	r0, r5
 8010904:	0039      	movs	r1, r7
 8010906:	f7ef fcb5 	bl	8000274 <__aeabi_uidivmod>
 801090a:	9b03      	ldr	r3, [sp, #12]
 801090c:	3e01      	subs	r6, #1
 801090e:	5c5b      	ldrb	r3, [r3, r1]
 8010910:	7033      	strb	r3, [r6, #0]
 8010912:	002b      	movs	r3, r5
 8010914:	0005      	movs	r5, r0
 8010916:	429f      	cmp	r7, r3
 8010918:	d9f3      	bls.n	8010902 <_printf_i+0x11e>
 801091a:	2f08      	cmp	r7, #8
 801091c:	d109      	bne.n	8010932 <_printf_i+0x14e>
 801091e:	6823      	ldr	r3, [r4, #0]
 8010920:	07db      	lsls	r3, r3, #31
 8010922:	d506      	bpl.n	8010932 <_printf_i+0x14e>
 8010924:	6863      	ldr	r3, [r4, #4]
 8010926:	6922      	ldr	r2, [r4, #16]
 8010928:	4293      	cmp	r3, r2
 801092a:	dc02      	bgt.n	8010932 <_printf_i+0x14e>
 801092c:	2330      	movs	r3, #48	; 0x30
 801092e:	3e01      	subs	r6, #1
 8010930:	7033      	strb	r3, [r6, #0]
 8010932:	9b04      	ldr	r3, [sp, #16]
 8010934:	1b9b      	subs	r3, r3, r6
 8010936:	6123      	str	r3, [r4, #16]
 8010938:	9b07      	ldr	r3, [sp, #28]
 801093a:	0021      	movs	r1, r4
 801093c:	9300      	str	r3, [sp, #0]
 801093e:	9805      	ldr	r0, [sp, #20]
 8010940:	9b06      	ldr	r3, [sp, #24]
 8010942:	aa09      	add	r2, sp, #36	; 0x24
 8010944:	f7ff fede 	bl	8010704 <_printf_common>
 8010948:	1c43      	adds	r3, r0, #1
 801094a:	d135      	bne.n	80109b8 <_printf_i+0x1d4>
 801094c:	2001      	movs	r0, #1
 801094e:	4240      	negs	r0, r0
 8010950:	b00b      	add	sp, #44	; 0x2c
 8010952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010954:	2220      	movs	r2, #32
 8010956:	6809      	ldr	r1, [r1, #0]
 8010958:	430a      	orrs	r2, r1
 801095a:	6022      	str	r2, [r4, #0]
 801095c:	0022      	movs	r2, r4
 801095e:	2178      	movs	r1, #120	; 0x78
 8010960:	3245      	adds	r2, #69	; 0x45
 8010962:	7011      	strb	r1, [r2, #0]
 8010964:	4a27      	ldr	r2, [pc, #156]	; (8010a04 <_printf_i+0x220>)
 8010966:	e7a7      	b.n	80108b8 <_printf_i+0xd4>
 8010968:	0648      	lsls	r0, r1, #25
 801096a:	d5ac      	bpl.n	80108c6 <_printf_i+0xe2>
 801096c:	b2ad      	uxth	r5, r5
 801096e:	e7aa      	b.n	80108c6 <_printf_i+0xe2>
 8010970:	681a      	ldr	r2, [r3, #0]
 8010972:	680d      	ldr	r5, [r1, #0]
 8010974:	1d10      	adds	r0, r2, #4
 8010976:	6949      	ldr	r1, [r1, #20]
 8010978:	6018      	str	r0, [r3, #0]
 801097a:	6813      	ldr	r3, [r2, #0]
 801097c:	062e      	lsls	r6, r5, #24
 801097e:	d501      	bpl.n	8010984 <_printf_i+0x1a0>
 8010980:	6019      	str	r1, [r3, #0]
 8010982:	e002      	b.n	801098a <_printf_i+0x1a6>
 8010984:	066d      	lsls	r5, r5, #25
 8010986:	d5fb      	bpl.n	8010980 <_printf_i+0x19c>
 8010988:	8019      	strh	r1, [r3, #0]
 801098a:	2300      	movs	r3, #0
 801098c:	9e04      	ldr	r6, [sp, #16]
 801098e:	6123      	str	r3, [r4, #16]
 8010990:	e7d2      	b.n	8010938 <_printf_i+0x154>
 8010992:	681a      	ldr	r2, [r3, #0]
 8010994:	1d11      	adds	r1, r2, #4
 8010996:	6019      	str	r1, [r3, #0]
 8010998:	6816      	ldr	r6, [r2, #0]
 801099a:	2100      	movs	r1, #0
 801099c:	0030      	movs	r0, r6
 801099e:	6862      	ldr	r2, [r4, #4]
 80109a0:	f000 fad0 	bl	8010f44 <memchr>
 80109a4:	2800      	cmp	r0, #0
 80109a6:	d001      	beq.n	80109ac <_printf_i+0x1c8>
 80109a8:	1b80      	subs	r0, r0, r6
 80109aa:	6060      	str	r0, [r4, #4]
 80109ac:	6863      	ldr	r3, [r4, #4]
 80109ae:	6123      	str	r3, [r4, #16]
 80109b0:	2300      	movs	r3, #0
 80109b2:	9a04      	ldr	r2, [sp, #16]
 80109b4:	7013      	strb	r3, [r2, #0]
 80109b6:	e7bf      	b.n	8010938 <_printf_i+0x154>
 80109b8:	6923      	ldr	r3, [r4, #16]
 80109ba:	0032      	movs	r2, r6
 80109bc:	9906      	ldr	r1, [sp, #24]
 80109be:	9805      	ldr	r0, [sp, #20]
 80109c0:	9d07      	ldr	r5, [sp, #28]
 80109c2:	47a8      	blx	r5
 80109c4:	1c43      	adds	r3, r0, #1
 80109c6:	d0c1      	beq.n	801094c <_printf_i+0x168>
 80109c8:	6823      	ldr	r3, [r4, #0]
 80109ca:	079b      	lsls	r3, r3, #30
 80109cc:	d415      	bmi.n	80109fa <_printf_i+0x216>
 80109ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109d0:	68e0      	ldr	r0, [r4, #12]
 80109d2:	4298      	cmp	r0, r3
 80109d4:	dabc      	bge.n	8010950 <_printf_i+0x16c>
 80109d6:	0018      	movs	r0, r3
 80109d8:	e7ba      	b.n	8010950 <_printf_i+0x16c>
 80109da:	0022      	movs	r2, r4
 80109dc:	2301      	movs	r3, #1
 80109de:	9906      	ldr	r1, [sp, #24]
 80109e0:	9805      	ldr	r0, [sp, #20]
 80109e2:	9e07      	ldr	r6, [sp, #28]
 80109e4:	3219      	adds	r2, #25
 80109e6:	47b0      	blx	r6
 80109e8:	1c43      	adds	r3, r0, #1
 80109ea:	d0af      	beq.n	801094c <_printf_i+0x168>
 80109ec:	3501      	adds	r5, #1
 80109ee:	68e3      	ldr	r3, [r4, #12]
 80109f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80109f2:	1a9b      	subs	r3, r3, r2
 80109f4:	42ab      	cmp	r3, r5
 80109f6:	dcf0      	bgt.n	80109da <_printf_i+0x1f6>
 80109f8:	e7e9      	b.n	80109ce <_printf_i+0x1ea>
 80109fa:	2500      	movs	r5, #0
 80109fc:	e7f7      	b.n	80109ee <_printf_i+0x20a>
 80109fe:	46c0      	nop			; (mov r8, r8)
 8010a00:	080120c9 	.word	0x080120c9
 8010a04:	080120da 	.word	0x080120da

08010a08 <_sbrk_r>:
 8010a08:	2300      	movs	r3, #0
 8010a0a:	b570      	push	{r4, r5, r6, lr}
 8010a0c:	4d06      	ldr	r5, [pc, #24]	; (8010a28 <_sbrk_r+0x20>)
 8010a0e:	0004      	movs	r4, r0
 8010a10:	0008      	movs	r0, r1
 8010a12:	602b      	str	r3, [r5, #0]
 8010a14:	f7f3 fdf6 	bl	8004604 <_sbrk>
 8010a18:	1c43      	adds	r3, r0, #1
 8010a1a:	d103      	bne.n	8010a24 <_sbrk_r+0x1c>
 8010a1c:	682b      	ldr	r3, [r5, #0]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d000      	beq.n	8010a24 <_sbrk_r+0x1c>
 8010a22:	6023      	str	r3, [r4, #0]
 8010a24:	bd70      	pop	{r4, r5, r6, pc}
 8010a26:	46c0      	nop			; (mov r8, r8)
 8010a28:	2000165c 	.word	0x2000165c

08010a2c <__sread>:
 8010a2c:	b570      	push	{r4, r5, r6, lr}
 8010a2e:	000c      	movs	r4, r1
 8010a30:	250e      	movs	r5, #14
 8010a32:	5f49      	ldrsh	r1, [r1, r5]
 8010a34:	f000 faec 	bl	8011010 <_read_r>
 8010a38:	2800      	cmp	r0, #0
 8010a3a:	db03      	blt.n	8010a44 <__sread+0x18>
 8010a3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8010a3e:	181b      	adds	r3, r3, r0
 8010a40:	6563      	str	r3, [r4, #84]	; 0x54
 8010a42:	bd70      	pop	{r4, r5, r6, pc}
 8010a44:	89a3      	ldrh	r3, [r4, #12]
 8010a46:	4a02      	ldr	r2, [pc, #8]	; (8010a50 <__sread+0x24>)
 8010a48:	4013      	ands	r3, r2
 8010a4a:	81a3      	strh	r3, [r4, #12]
 8010a4c:	e7f9      	b.n	8010a42 <__sread+0x16>
 8010a4e:	46c0      	nop			; (mov r8, r8)
 8010a50:	ffffefff 	.word	0xffffefff

08010a54 <__swrite>:
 8010a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a56:	001f      	movs	r7, r3
 8010a58:	898b      	ldrh	r3, [r1, #12]
 8010a5a:	0005      	movs	r5, r0
 8010a5c:	000c      	movs	r4, r1
 8010a5e:	0016      	movs	r6, r2
 8010a60:	05db      	lsls	r3, r3, #23
 8010a62:	d505      	bpl.n	8010a70 <__swrite+0x1c>
 8010a64:	230e      	movs	r3, #14
 8010a66:	5ec9      	ldrsh	r1, [r1, r3]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	2302      	movs	r3, #2
 8010a6c:	f000 f9ea 	bl	8010e44 <_lseek_r>
 8010a70:	89a3      	ldrh	r3, [r4, #12]
 8010a72:	4a05      	ldr	r2, [pc, #20]	; (8010a88 <__swrite+0x34>)
 8010a74:	0028      	movs	r0, r5
 8010a76:	4013      	ands	r3, r2
 8010a78:	81a3      	strh	r3, [r4, #12]
 8010a7a:	0032      	movs	r2, r6
 8010a7c:	230e      	movs	r3, #14
 8010a7e:	5ee1      	ldrsh	r1, [r4, r3]
 8010a80:	003b      	movs	r3, r7
 8010a82:	f000 f875 	bl	8010b70 <_write_r>
 8010a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010a88:	ffffefff 	.word	0xffffefff

08010a8c <__sseek>:
 8010a8c:	b570      	push	{r4, r5, r6, lr}
 8010a8e:	000c      	movs	r4, r1
 8010a90:	250e      	movs	r5, #14
 8010a92:	5f49      	ldrsh	r1, [r1, r5]
 8010a94:	f000 f9d6 	bl	8010e44 <_lseek_r>
 8010a98:	89a3      	ldrh	r3, [r4, #12]
 8010a9a:	1c42      	adds	r2, r0, #1
 8010a9c:	d103      	bne.n	8010aa6 <__sseek+0x1a>
 8010a9e:	4a05      	ldr	r2, [pc, #20]	; (8010ab4 <__sseek+0x28>)
 8010aa0:	4013      	ands	r3, r2
 8010aa2:	81a3      	strh	r3, [r4, #12]
 8010aa4:	bd70      	pop	{r4, r5, r6, pc}
 8010aa6:	2280      	movs	r2, #128	; 0x80
 8010aa8:	0152      	lsls	r2, r2, #5
 8010aaa:	4313      	orrs	r3, r2
 8010aac:	81a3      	strh	r3, [r4, #12]
 8010aae:	6560      	str	r0, [r4, #84]	; 0x54
 8010ab0:	e7f8      	b.n	8010aa4 <__sseek+0x18>
 8010ab2:	46c0      	nop			; (mov r8, r8)
 8010ab4:	ffffefff 	.word	0xffffefff

08010ab8 <__sclose>:
 8010ab8:	b510      	push	{r4, lr}
 8010aba:	230e      	movs	r3, #14
 8010abc:	5ec9      	ldrsh	r1, [r1, r3]
 8010abe:	f000 f8e3 	bl	8010c88 <_close_r>
 8010ac2:	bd10      	pop	{r4, pc}

08010ac4 <__swbuf_r>:
 8010ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ac6:	0005      	movs	r5, r0
 8010ac8:	000e      	movs	r6, r1
 8010aca:	0014      	movs	r4, r2
 8010acc:	2800      	cmp	r0, #0
 8010ace:	d004      	beq.n	8010ada <__swbuf_r+0x16>
 8010ad0:	6983      	ldr	r3, [r0, #24]
 8010ad2:	2b00      	cmp	r3, #0
 8010ad4:	d101      	bne.n	8010ada <__swbuf_r+0x16>
 8010ad6:	f7ff fbb1 	bl	801023c <__sinit>
 8010ada:	4b22      	ldr	r3, [pc, #136]	; (8010b64 <__swbuf_r+0xa0>)
 8010adc:	429c      	cmp	r4, r3
 8010ade:	d12e      	bne.n	8010b3e <__swbuf_r+0x7a>
 8010ae0:	686c      	ldr	r4, [r5, #4]
 8010ae2:	69a3      	ldr	r3, [r4, #24]
 8010ae4:	60a3      	str	r3, [r4, #8]
 8010ae6:	89a3      	ldrh	r3, [r4, #12]
 8010ae8:	071b      	lsls	r3, r3, #28
 8010aea:	d532      	bpl.n	8010b52 <__swbuf_r+0x8e>
 8010aec:	6923      	ldr	r3, [r4, #16]
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d02f      	beq.n	8010b52 <__swbuf_r+0x8e>
 8010af2:	6823      	ldr	r3, [r4, #0]
 8010af4:	6922      	ldr	r2, [r4, #16]
 8010af6:	b2f7      	uxtb	r7, r6
 8010af8:	1a98      	subs	r0, r3, r2
 8010afa:	6963      	ldr	r3, [r4, #20]
 8010afc:	b2f6      	uxtb	r6, r6
 8010afe:	4283      	cmp	r3, r0
 8010b00:	dc05      	bgt.n	8010b0e <__swbuf_r+0x4a>
 8010b02:	0021      	movs	r1, r4
 8010b04:	0028      	movs	r0, r5
 8010b06:	f000 f95d 	bl	8010dc4 <_fflush_r>
 8010b0a:	2800      	cmp	r0, #0
 8010b0c:	d127      	bne.n	8010b5e <__swbuf_r+0x9a>
 8010b0e:	68a3      	ldr	r3, [r4, #8]
 8010b10:	3001      	adds	r0, #1
 8010b12:	3b01      	subs	r3, #1
 8010b14:	60a3      	str	r3, [r4, #8]
 8010b16:	6823      	ldr	r3, [r4, #0]
 8010b18:	1c5a      	adds	r2, r3, #1
 8010b1a:	6022      	str	r2, [r4, #0]
 8010b1c:	701f      	strb	r7, [r3, #0]
 8010b1e:	6963      	ldr	r3, [r4, #20]
 8010b20:	4283      	cmp	r3, r0
 8010b22:	d004      	beq.n	8010b2e <__swbuf_r+0x6a>
 8010b24:	89a3      	ldrh	r3, [r4, #12]
 8010b26:	07db      	lsls	r3, r3, #31
 8010b28:	d507      	bpl.n	8010b3a <__swbuf_r+0x76>
 8010b2a:	2e0a      	cmp	r6, #10
 8010b2c:	d105      	bne.n	8010b3a <__swbuf_r+0x76>
 8010b2e:	0021      	movs	r1, r4
 8010b30:	0028      	movs	r0, r5
 8010b32:	f000 f947 	bl	8010dc4 <_fflush_r>
 8010b36:	2800      	cmp	r0, #0
 8010b38:	d111      	bne.n	8010b5e <__swbuf_r+0x9a>
 8010b3a:	0030      	movs	r0, r6
 8010b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b3e:	4b0a      	ldr	r3, [pc, #40]	; (8010b68 <__swbuf_r+0xa4>)
 8010b40:	429c      	cmp	r4, r3
 8010b42:	d101      	bne.n	8010b48 <__swbuf_r+0x84>
 8010b44:	68ac      	ldr	r4, [r5, #8]
 8010b46:	e7cc      	b.n	8010ae2 <__swbuf_r+0x1e>
 8010b48:	4b08      	ldr	r3, [pc, #32]	; (8010b6c <__swbuf_r+0xa8>)
 8010b4a:	429c      	cmp	r4, r3
 8010b4c:	d1c9      	bne.n	8010ae2 <__swbuf_r+0x1e>
 8010b4e:	68ec      	ldr	r4, [r5, #12]
 8010b50:	e7c7      	b.n	8010ae2 <__swbuf_r+0x1e>
 8010b52:	0021      	movs	r1, r4
 8010b54:	0028      	movs	r0, r5
 8010b56:	f000 f81f 	bl	8010b98 <__swsetup_r>
 8010b5a:	2800      	cmp	r0, #0
 8010b5c:	d0c9      	beq.n	8010af2 <__swbuf_r+0x2e>
 8010b5e:	2601      	movs	r6, #1
 8010b60:	4276      	negs	r6, r6
 8010b62:	e7ea      	b.n	8010b3a <__swbuf_r+0x76>
 8010b64:	08012078 	.word	0x08012078
 8010b68:	08012098 	.word	0x08012098
 8010b6c:	08012058 	.word	0x08012058

08010b70 <_write_r>:
 8010b70:	b570      	push	{r4, r5, r6, lr}
 8010b72:	0004      	movs	r4, r0
 8010b74:	0008      	movs	r0, r1
 8010b76:	0011      	movs	r1, r2
 8010b78:	001a      	movs	r2, r3
 8010b7a:	2300      	movs	r3, #0
 8010b7c:	4d05      	ldr	r5, [pc, #20]	; (8010b94 <_write_r+0x24>)
 8010b7e:	602b      	str	r3, [r5, #0]
 8010b80:	f7f3 fd32 	bl	80045e8 <_write>
 8010b84:	1c43      	adds	r3, r0, #1
 8010b86:	d103      	bne.n	8010b90 <_write_r+0x20>
 8010b88:	682b      	ldr	r3, [r5, #0]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d000      	beq.n	8010b90 <_write_r+0x20>
 8010b8e:	6023      	str	r3, [r4, #0]
 8010b90:	bd70      	pop	{r4, r5, r6, pc}
 8010b92:	46c0      	nop			; (mov r8, r8)
 8010b94:	2000165c 	.word	0x2000165c

08010b98 <__swsetup_r>:
 8010b98:	4b37      	ldr	r3, [pc, #220]	; (8010c78 <__swsetup_r+0xe0>)
 8010b9a:	b570      	push	{r4, r5, r6, lr}
 8010b9c:	681d      	ldr	r5, [r3, #0]
 8010b9e:	0006      	movs	r6, r0
 8010ba0:	000c      	movs	r4, r1
 8010ba2:	2d00      	cmp	r5, #0
 8010ba4:	d005      	beq.n	8010bb2 <__swsetup_r+0x1a>
 8010ba6:	69ab      	ldr	r3, [r5, #24]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d102      	bne.n	8010bb2 <__swsetup_r+0x1a>
 8010bac:	0028      	movs	r0, r5
 8010bae:	f7ff fb45 	bl	801023c <__sinit>
 8010bb2:	4b32      	ldr	r3, [pc, #200]	; (8010c7c <__swsetup_r+0xe4>)
 8010bb4:	429c      	cmp	r4, r3
 8010bb6:	d10f      	bne.n	8010bd8 <__swsetup_r+0x40>
 8010bb8:	686c      	ldr	r4, [r5, #4]
 8010bba:	230c      	movs	r3, #12
 8010bbc:	5ee2      	ldrsh	r2, [r4, r3]
 8010bbe:	b293      	uxth	r3, r2
 8010bc0:	0711      	lsls	r1, r2, #28
 8010bc2:	d42d      	bmi.n	8010c20 <__swsetup_r+0x88>
 8010bc4:	06d9      	lsls	r1, r3, #27
 8010bc6:	d411      	bmi.n	8010bec <__swsetup_r+0x54>
 8010bc8:	2309      	movs	r3, #9
 8010bca:	2001      	movs	r0, #1
 8010bcc:	6033      	str	r3, [r6, #0]
 8010bce:	3337      	adds	r3, #55	; 0x37
 8010bd0:	4313      	orrs	r3, r2
 8010bd2:	81a3      	strh	r3, [r4, #12]
 8010bd4:	4240      	negs	r0, r0
 8010bd6:	bd70      	pop	{r4, r5, r6, pc}
 8010bd8:	4b29      	ldr	r3, [pc, #164]	; (8010c80 <__swsetup_r+0xe8>)
 8010bda:	429c      	cmp	r4, r3
 8010bdc:	d101      	bne.n	8010be2 <__swsetup_r+0x4a>
 8010bde:	68ac      	ldr	r4, [r5, #8]
 8010be0:	e7eb      	b.n	8010bba <__swsetup_r+0x22>
 8010be2:	4b28      	ldr	r3, [pc, #160]	; (8010c84 <__swsetup_r+0xec>)
 8010be4:	429c      	cmp	r4, r3
 8010be6:	d1e8      	bne.n	8010bba <__swsetup_r+0x22>
 8010be8:	68ec      	ldr	r4, [r5, #12]
 8010bea:	e7e6      	b.n	8010bba <__swsetup_r+0x22>
 8010bec:	075b      	lsls	r3, r3, #29
 8010bee:	d513      	bpl.n	8010c18 <__swsetup_r+0x80>
 8010bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010bf2:	2900      	cmp	r1, #0
 8010bf4:	d008      	beq.n	8010c08 <__swsetup_r+0x70>
 8010bf6:	0023      	movs	r3, r4
 8010bf8:	3344      	adds	r3, #68	; 0x44
 8010bfa:	4299      	cmp	r1, r3
 8010bfc:	d002      	beq.n	8010c04 <__swsetup_r+0x6c>
 8010bfe:	0030      	movs	r0, r6
 8010c00:	f000 f9bc 	bl	8010f7c <_free_r>
 8010c04:	2300      	movs	r3, #0
 8010c06:	6363      	str	r3, [r4, #52]	; 0x34
 8010c08:	2224      	movs	r2, #36	; 0x24
 8010c0a:	89a3      	ldrh	r3, [r4, #12]
 8010c0c:	4393      	bics	r3, r2
 8010c0e:	81a3      	strh	r3, [r4, #12]
 8010c10:	2300      	movs	r3, #0
 8010c12:	6063      	str	r3, [r4, #4]
 8010c14:	6923      	ldr	r3, [r4, #16]
 8010c16:	6023      	str	r3, [r4, #0]
 8010c18:	2308      	movs	r3, #8
 8010c1a:	89a2      	ldrh	r2, [r4, #12]
 8010c1c:	4313      	orrs	r3, r2
 8010c1e:	81a3      	strh	r3, [r4, #12]
 8010c20:	6923      	ldr	r3, [r4, #16]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d10b      	bne.n	8010c3e <__swsetup_r+0xa6>
 8010c26:	21a0      	movs	r1, #160	; 0xa0
 8010c28:	2280      	movs	r2, #128	; 0x80
 8010c2a:	89a3      	ldrh	r3, [r4, #12]
 8010c2c:	0089      	lsls	r1, r1, #2
 8010c2e:	0092      	lsls	r2, r2, #2
 8010c30:	400b      	ands	r3, r1
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d003      	beq.n	8010c3e <__swsetup_r+0xa6>
 8010c36:	0021      	movs	r1, r4
 8010c38:	0030      	movs	r0, r6
 8010c3a:	f000 f93f 	bl	8010ebc <__smakebuf_r>
 8010c3e:	220c      	movs	r2, #12
 8010c40:	5ea3      	ldrsh	r3, [r4, r2]
 8010c42:	2001      	movs	r0, #1
 8010c44:	001a      	movs	r2, r3
 8010c46:	b299      	uxth	r1, r3
 8010c48:	4002      	ands	r2, r0
 8010c4a:	4203      	tst	r3, r0
 8010c4c:	d00f      	beq.n	8010c6e <__swsetup_r+0xd6>
 8010c4e:	2200      	movs	r2, #0
 8010c50:	60a2      	str	r2, [r4, #8]
 8010c52:	6962      	ldr	r2, [r4, #20]
 8010c54:	4252      	negs	r2, r2
 8010c56:	61a2      	str	r2, [r4, #24]
 8010c58:	2000      	movs	r0, #0
 8010c5a:	6922      	ldr	r2, [r4, #16]
 8010c5c:	4282      	cmp	r2, r0
 8010c5e:	d1ba      	bne.n	8010bd6 <__swsetup_r+0x3e>
 8010c60:	060a      	lsls	r2, r1, #24
 8010c62:	d5b8      	bpl.n	8010bd6 <__swsetup_r+0x3e>
 8010c64:	2240      	movs	r2, #64	; 0x40
 8010c66:	4313      	orrs	r3, r2
 8010c68:	81a3      	strh	r3, [r4, #12]
 8010c6a:	3801      	subs	r0, #1
 8010c6c:	e7b3      	b.n	8010bd6 <__swsetup_r+0x3e>
 8010c6e:	0788      	lsls	r0, r1, #30
 8010c70:	d400      	bmi.n	8010c74 <__swsetup_r+0xdc>
 8010c72:	6962      	ldr	r2, [r4, #20]
 8010c74:	60a2      	str	r2, [r4, #8]
 8010c76:	e7ef      	b.n	8010c58 <__swsetup_r+0xc0>
 8010c78:	20000178 	.word	0x20000178
 8010c7c:	08012078 	.word	0x08012078
 8010c80:	08012098 	.word	0x08012098
 8010c84:	08012058 	.word	0x08012058

08010c88 <_close_r>:
 8010c88:	2300      	movs	r3, #0
 8010c8a:	b570      	push	{r4, r5, r6, lr}
 8010c8c:	4d06      	ldr	r5, [pc, #24]	; (8010ca8 <_close_r+0x20>)
 8010c8e:	0004      	movs	r4, r0
 8010c90:	0008      	movs	r0, r1
 8010c92:	602b      	str	r3, [r5, #0]
 8010c94:	f7f3 fcd0 	bl	8004638 <_close>
 8010c98:	1c43      	adds	r3, r0, #1
 8010c9a:	d103      	bne.n	8010ca4 <_close_r+0x1c>
 8010c9c:	682b      	ldr	r3, [r5, #0]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d000      	beq.n	8010ca4 <_close_r+0x1c>
 8010ca2:	6023      	str	r3, [r4, #0]
 8010ca4:	bd70      	pop	{r4, r5, r6, pc}
 8010ca6:	46c0      	nop			; (mov r8, r8)
 8010ca8:	2000165c 	.word	0x2000165c

08010cac <__sflush_r>:
 8010cac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010cae:	898b      	ldrh	r3, [r1, #12]
 8010cb0:	0005      	movs	r5, r0
 8010cb2:	000c      	movs	r4, r1
 8010cb4:	071a      	lsls	r2, r3, #28
 8010cb6:	d45f      	bmi.n	8010d78 <__sflush_r+0xcc>
 8010cb8:	684a      	ldr	r2, [r1, #4]
 8010cba:	2a00      	cmp	r2, #0
 8010cbc:	dc04      	bgt.n	8010cc8 <__sflush_r+0x1c>
 8010cbe:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8010cc0:	2a00      	cmp	r2, #0
 8010cc2:	dc01      	bgt.n	8010cc8 <__sflush_r+0x1c>
 8010cc4:	2000      	movs	r0, #0
 8010cc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010cc8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010cca:	2f00      	cmp	r7, #0
 8010ccc:	d0fa      	beq.n	8010cc4 <__sflush_r+0x18>
 8010cce:	2200      	movs	r2, #0
 8010cd0:	2180      	movs	r1, #128	; 0x80
 8010cd2:	682e      	ldr	r6, [r5, #0]
 8010cd4:	602a      	str	r2, [r5, #0]
 8010cd6:	001a      	movs	r2, r3
 8010cd8:	0149      	lsls	r1, r1, #5
 8010cda:	400a      	ands	r2, r1
 8010cdc:	420b      	tst	r3, r1
 8010cde:	d034      	beq.n	8010d4a <__sflush_r+0x9e>
 8010ce0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010ce2:	89a3      	ldrh	r3, [r4, #12]
 8010ce4:	075b      	lsls	r3, r3, #29
 8010ce6:	d506      	bpl.n	8010cf6 <__sflush_r+0x4a>
 8010ce8:	6863      	ldr	r3, [r4, #4]
 8010cea:	1ac0      	subs	r0, r0, r3
 8010cec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d001      	beq.n	8010cf6 <__sflush_r+0x4a>
 8010cf2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010cf4:	1ac0      	subs	r0, r0, r3
 8010cf6:	0002      	movs	r2, r0
 8010cf8:	6a21      	ldr	r1, [r4, #32]
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	0028      	movs	r0, r5
 8010cfe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010d00:	47b8      	blx	r7
 8010d02:	89a1      	ldrh	r1, [r4, #12]
 8010d04:	1c43      	adds	r3, r0, #1
 8010d06:	d106      	bne.n	8010d16 <__sflush_r+0x6a>
 8010d08:	682b      	ldr	r3, [r5, #0]
 8010d0a:	2b1d      	cmp	r3, #29
 8010d0c:	d831      	bhi.n	8010d72 <__sflush_r+0xc6>
 8010d0e:	4a2c      	ldr	r2, [pc, #176]	; (8010dc0 <__sflush_r+0x114>)
 8010d10:	40da      	lsrs	r2, r3
 8010d12:	07d3      	lsls	r3, r2, #31
 8010d14:	d52d      	bpl.n	8010d72 <__sflush_r+0xc6>
 8010d16:	2300      	movs	r3, #0
 8010d18:	6063      	str	r3, [r4, #4]
 8010d1a:	6923      	ldr	r3, [r4, #16]
 8010d1c:	6023      	str	r3, [r4, #0]
 8010d1e:	04cb      	lsls	r3, r1, #19
 8010d20:	d505      	bpl.n	8010d2e <__sflush_r+0x82>
 8010d22:	1c43      	adds	r3, r0, #1
 8010d24:	d102      	bne.n	8010d2c <__sflush_r+0x80>
 8010d26:	682b      	ldr	r3, [r5, #0]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d100      	bne.n	8010d2e <__sflush_r+0x82>
 8010d2c:	6560      	str	r0, [r4, #84]	; 0x54
 8010d2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d30:	602e      	str	r6, [r5, #0]
 8010d32:	2900      	cmp	r1, #0
 8010d34:	d0c6      	beq.n	8010cc4 <__sflush_r+0x18>
 8010d36:	0023      	movs	r3, r4
 8010d38:	3344      	adds	r3, #68	; 0x44
 8010d3a:	4299      	cmp	r1, r3
 8010d3c:	d002      	beq.n	8010d44 <__sflush_r+0x98>
 8010d3e:	0028      	movs	r0, r5
 8010d40:	f000 f91c 	bl	8010f7c <_free_r>
 8010d44:	2000      	movs	r0, #0
 8010d46:	6360      	str	r0, [r4, #52]	; 0x34
 8010d48:	e7bd      	b.n	8010cc6 <__sflush_r+0x1a>
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	0028      	movs	r0, r5
 8010d4e:	6a21      	ldr	r1, [r4, #32]
 8010d50:	47b8      	blx	r7
 8010d52:	1c43      	adds	r3, r0, #1
 8010d54:	d1c5      	bne.n	8010ce2 <__sflush_r+0x36>
 8010d56:	682b      	ldr	r3, [r5, #0]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d0c2      	beq.n	8010ce2 <__sflush_r+0x36>
 8010d5c:	2b1d      	cmp	r3, #29
 8010d5e:	d001      	beq.n	8010d64 <__sflush_r+0xb8>
 8010d60:	2b16      	cmp	r3, #22
 8010d62:	d101      	bne.n	8010d68 <__sflush_r+0xbc>
 8010d64:	602e      	str	r6, [r5, #0]
 8010d66:	e7ad      	b.n	8010cc4 <__sflush_r+0x18>
 8010d68:	2340      	movs	r3, #64	; 0x40
 8010d6a:	89a2      	ldrh	r2, [r4, #12]
 8010d6c:	4313      	orrs	r3, r2
 8010d6e:	81a3      	strh	r3, [r4, #12]
 8010d70:	e7a9      	b.n	8010cc6 <__sflush_r+0x1a>
 8010d72:	2340      	movs	r3, #64	; 0x40
 8010d74:	430b      	orrs	r3, r1
 8010d76:	e7fa      	b.n	8010d6e <__sflush_r+0xc2>
 8010d78:	690f      	ldr	r7, [r1, #16]
 8010d7a:	2f00      	cmp	r7, #0
 8010d7c:	d0a2      	beq.n	8010cc4 <__sflush_r+0x18>
 8010d7e:	680a      	ldr	r2, [r1, #0]
 8010d80:	600f      	str	r7, [r1, #0]
 8010d82:	1bd2      	subs	r2, r2, r7
 8010d84:	9201      	str	r2, [sp, #4]
 8010d86:	2200      	movs	r2, #0
 8010d88:	079b      	lsls	r3, r3, #30
 8010d8a:	d100      	bne.n	8010d8e <__sflush_r+0xe2>
 8010d8c:	694a      	ldr	r2, [r1, #20]
 8010d8e:	60a2      	str	r2, [r4, #8]
 8010d90:	9b01      	ldr	r3, [sp, #4]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	dc00      	bgt.n	8010d98 <__sflush_r+0xec>
 8010d96:	e795      	b.n	8010cc4 <__sflush_r+0x18>
 8010d98:	003a      	movs	r2, r7
 8010d9a:	0028      	movs	r0, r5
 8010d9c:	9b01      	ldr	r3, [sp, #4]
 8010d9e:	6a21      	ldr	r1, [r4, #32]
 8010da0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010da2:	47b0      	blx	r6
 8010da4:	2800      	cmp	r0, #0
 8010da6:	dc06      	bgt.n	8010db6 <__sflush_r+0x10a>
 8010da8:	2340      	movs	r3, #64	; 0x40
 8010daa:	2001      	movs	r0, #1
 8010dac:	89a2      	ldrh	r2, [r4, #12]
 8010dae:	4240      	negs	r0, r0
 8010db0:	4313      	orrs	r3, r2
 8010db2:	81a3      	strh	r3, [r4, #12]
 8010db4:	e787      	b.n	8010cc6 <__sflush_r+0x1a>
 8010db6:	9b01      	ldr	r3, [sp, #4]
 8010db8:	183f      	adds	r7, r7, r0
 8010dba:	1a1b      	subs	r3, r3, r0
 8010dbc:	9301      	str	r3, [sp, #4]
 8010dbe:	e7e7      	b.n	8010d90 <__sflush_r+0xe4>
 8010dc0:	20400001 	.word	0x20400001

08010dc4 <_fflush_r>:
 8010dc4:	690b      	ldr	r3, [r1, #16]
 8010dc6:	b570      	push	{r4, r5, r6, lr}
 8010dc8:	0005      	movs	r5, r0
 8010dca:	000c      	movs	r4, r1
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d102      	bne.n	8010dd6 <_fflush_r+0x12>
 8010dd0:	2500      	movs	r5, #0
 8010dd2:	0028      	movs	r0, r5
 8010dd4:	bd70      	pop	{r4, r5, r6, pc}
 8010dd6:	2800      	cmp	r0, #0
 8010dd8:	d004      	beq.n	8010de4 <_fflush_r+0x20>
 8010dda:	6983      	ldr	r3, [r0, #24]
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d101      	bne.n	8010de4 <_fflush_r+0x20>
 8010de0:	f7ff fa2c 	bl	801023c <__sinit>
 8010de4:	4b14      	ldr	r3, [pc, #80]	; (8010e38 <_fflush_r+0x74>)
 8010de6:	429c      	cmp	r4, r3
 8010de8:	d11b      	bne.n	8010e22 <_fflush_r+0x5e>
 8010dea:	686c      	ldr	r4, [r5, #4]
 8010dec:	220c      	movs	r2, #12
 8010dee:	5ea3      	ldrsh	r3, [r4, r2]
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	d0ed      	beq.n	8010dd0 <_fflush_r+0xc>
 8010df4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010df6:	07d2      	lsls	r2, r2, #31
 8010df8:	d404      	bmi.n	8010e04 <_fflush_r+0x40>
 8010dfa:	059b      	lsls	r3, r3, #22
 8010dfc:	d402      	bmi.n	8010e04 <_fflush_r+0x40>
 8010dfe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e00:	f7ff fabd 	bl	801037e <__retarget_lock_acquire_recursive>
 8010e04:	0028      	movs	r0, r5
 8010e06:	0021      	movs	r1, r4
 8010e08:	f7ff ff50 	bl	8010cac <__sflush_r>
 8010e0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e0e:	0005      	movs	r5, r0
 8010e10:	07db      	lsls	r3, r3, #31
 8010e12:	d4de      	bmi.n	8010dd2 <_fflush_r+0xe>
 8010e14:	89a3      	ldrh	r3, [r4, #12]
 8010e16:	059b      	lsls	r3, r3, #22
 8010e18:	d4db      	bmi.n	8010dd2 <_fflush_r+0xe>
 8010e1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e1c:	f7ff fab0 	bl	8010380 <__retarget_lock_release_recursive>
 8010e20:	e7d7      	b.n	8010dd2 <_fflush_r+0xe>
 8010e22:	4b06      	ldr	r3, [pc, #24]	; (8010e3c <_fflush_r+0x78>)
 8010e24:	429c      	cmp	r4, r3
 8010e26:	d101      	bne.n	8010e2c <_fflush_r+0x68>
 8010e28:	68ac      	ldr	r4, [r5, #8]
 8010e2a:	e7df      	b.n	8010dec <_fflush_r+0x28>
 8010e2c:	4b04      	ldr	r3, [pc, #16]	; (8010e40 <_fflush_r+0x7c>)
 8010e2e:	429c      	cmp	r4, r3
 8010e30:	d1dc      	bne.n	8010dec <_fflush_r+0x28>
 8010e32:	68ec      	ldr	r4, [r5, #12]
 8010e34:	e7da      	b.n	8010dec <_fflush_r+0x28>
 8010e36:	46c0      	nop			; (mov r8, r8)
 8010e38:	08012078 	.word	0x08012078
 8010e3c:	08012098 	.word	0x08012098
 8010e40:	08012058 	.word	0x08012058

08010e44 <_lseek_r>:
 8010e44:	b570      	push	{r4, r5, r6, lr}
 8010e46:	0004      	movs	r4, r0
 8010e48:	0008      	movs	r0, r1
 8010e4a:	0011      	movs	r1, r2
 8010e4c:	001a      	movs	r2, r3
 8010e4e:	2300      	movs	r3, #0
 8010e50:	4d05      	ldr	r5, [pc, #20]	; (8010e68 <_lseek_r+0x24>)
 8010e52:	602b      	str	r3, [r5, #0]
 8010e54:	f7f3 fbfa 	bl	800464c <_lseek>
 8010e58:	1c43      	adds	r3, r0, #1
 8010e5a:	d103      	bne.n	8010e64 <_lseek_r+0x20>
 8010e5c:	682b      	ldr	r3, [r5, #0]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d000      	beq.n	8010e64 <_lseek_r+0x20>
 8010e62:	6023      	str	r3, [r4, #0]
 8010e64:	bd70      	pop	{r4, r5, r6, pc}
 8010e66:	46c0      	nop			; (mov r8, r8)
 8010e68:	2000165c 	.word	0x2000165c

08010e6c <__swhatbuf_r>:
 8010e6c:	b570      	push	{r4, r5, r6, lr}
 8010e6e:	000e      	movs	r6, r1
 8010e70:	001d      	movs	r5, r3
 8010e72:	230e      	movs	r3, #14
 8010e74:	5ec9      	ldrsh	r1, [r1, r3]
 8010e76:	0014      	movs	r4, r2
 8010e78:	b096      	sub	sp, #88	; 0x58
 8010e7a:	2900      	cmp	r1, #0
 8010e7c:	da07      	bge.n	8010e8e <__swhatbuf_r+0x22>
 8010e7e:	2300      	movs	r3, #0
 8010e80:	602b      	str	r3, [r5, #0]
 8010e82:	89b3      	ldrh	r3, [r6, #12]
 8010e84:	061b      	lsls	r3, r3, #24
 8010e86:	d411      	bmi.n	8010eac <__swhatbuf_r+0x40>
 8010e88:	2380      	movs	r3, #128	; 0x80
 8010e8a:	00db      	lsls	r3, r3, #3
 8010e8c:	e00f      	b.n	8010eae <__swhatbuf_r+0x42>
 8010e8e:	466a      	mov	r2, sp
 8010e90:	f000 f8d2 	bl	8011038 <_fstat_r>
 8010e94:	2800      	cmp	r0, #0
 8010e96:	dbf2      	blt.n	8010e7e <__swhatbuf_r+0x12>
 8010e98:	23f0      	movs	r3, #240	; 0xf0
 8010e9a:	9901      	ldr	r1, [sp, #4]
 8010e9c:	021b      	lsls	r3, r3, #8
 8010e9e:	4019      	ands	r1, r3
 8010ea0:	4b05      	ldr	r3, [pc, #20]	; (8010eb8 <__swhatbuf_r+0x4c>)
 8010ea2:	18c9      	adds	r1, r1, r3
 8010ea4:	424b      	negs	r3, r1
 8010ea6:	4159      	adcs	r1, r3
 8010ea8:	6029      	str	r1, [r5, #0]
 8010eaa:	e7ed      	b.n	8010e88 <__swhatbuf_r+0x1c>
 8010eac:	2340      	movs	r3, #64	; 0x40
 8010eae:	2000      	movs	r0, #0
 8010eb0:	6023      	str	r3, [r4, #0]
 8010eb2:	b016      	add	sp, #88	; 0x58
 8010eb4:	bd70      	pop	{r4, r5, r6, pc}
 8010eb6:	46c0      	nop			; (mov r8, r8)
 8010eb8:	ffffe000 	.word	0xffffe000

08010ebc <__smakebuf_r>:
 8010ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010ebe:	2602      	movs	r6, #2
 8010ec0:	898b      	ldrh	r3, [r1, #12]
 8010ec2:	0005      	movs	r5, r0
 8010ec4:	000c      	movs	r4, r1
 8010ec6:	4233      	tst	r3, r6
 8010ec8:	d006      	beq.n	8010ed8 <__smakebuf_r+0x1c>
 8010eca:	0023      	movs	r3, r4
 8010ecc:	3347      	adds	r3, #71	; 0x47
 8010ece:	6023      	str	r3, [r4, #0]
 8010ed0:	6123      	str	r3, [r4, #16]
 8010ed2:	2301      	movs	r3, #1
 8010ed4:	6163      	str	r3, [r4, #20]
 8010ed6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8010ed8:	466a      	mov	r2, sp
 8010eda:	ab01      	add	r3, sp, #4
 8010edc:	f7ff ffc6 	bl	8010e6c <__swhatbuf_r>
 8010ee0:	9900      	ldr	r1, [sp, #0]
 8010ee2:	0007      	movs	r7, r0
 8010ee4:	0028      	movs	r0, r5
 8010ee6:	f7ff fa4d 	bl	8010384 <_malloc_r>
 8010eea:	2800      	cmp	r0, #0
 8010eec:	d108      	bne.n	8010f00 <__smakebuf_r+0x44>
 8010eee:	220c      	movs	r2, #12
 8010ef0:	5ea3      	ldrsh	r3, [r4, r2]
 8010ef2:	059a      	lsls	r2, r3, #22
 8010ef4:	d4ef      	bmi.n	8010ed6 <__smakebuf_r+0x1a>
 8010ef6:	2203      	movs	r2, #3
 8010ef8:	4393      	bics	r3, r2
 8010efa:	431e      	orrs	r6, r3
 8010efc:	81a6      	strh	r6, [r4, #12]
 8010efe:	e7e4      	b.n	8010eca <__smakebuf_r+0xe>
 8010f00:	4b0f      	ldr	r3, [pc, #60]	; (8010f40 <__smakebuf_r+0x84>)
 8010f02:	62ab      	str	r3, [r5, #40]	; 0x28
 8010f04:	2380      	movs	r3, #128	; 0x80
 8010f06:	89a2      	ldrh	r2, [r4, #12]
 8010f08:	6020      	str	r0, [r4, #0]
 8010f0a:	4313      	orrs	r3, r2
 8010f0c:	81a3      	strh	r3, [r4, #12]
 8010f0e:	9b00      	ldr	r3, [sp, #0]
 8010f10:	6120      	str	r0, [r4, #16]
 8010f12:	6163      	str	r3, [r4, #20]
 8010f14:	9b01      	ldr	r3, [sp, #4]
 8010f16:	2b00      	cmp	r3, #0
 8010f18:	d00d      	beq.n	8010f36 <__smakebuf_r+0x7a>
 8010f1a:	0028      	movs	r0, r5
 8010f1c:	230e      	movs	r3, #14
 8010f1e:	5ee1      	ldrsh	r1, [r4, r3]
 8010f20:	f000 f89c 	bl	801105c <_isatty_r>
 8010f24:	2800      	cmp	r0, #0
 8010f26:	d006      	beq.n	8010f36 <__smakebuf_r+0x7a>
 8010f28:	2203      	movs	r2, #3
 8010f2a:	89a3      	ldrh	r3, [r4, #12]
 8010f2c:	4393      	bics	r3, r2
 8010f2e:	001a      	movs	r2, r3
 8010f30:	2301      	movs	r3, #1
 8010f32:	4313      	orrs	r3, r2
 8010f34:	81a3      	strh	r3, [r4, #12]
 8010f36:	89a0      	ldrh	r0, [r4, #12]
 8010f38:	4307      	orrs	r7, r0
 8010f3a:	81a7      	strh	r7, [r4, #12]
 8010f3c:	e7cb      	b.n	8010ed6 <__smakebuf_r+0x1a>
 8010f3e:	46c0      	nop			; (mov r8, r8)
 8010f40:	080101c1 	.word	0x080101c1

08010f44 <memchr>:
 8010f44:	b2c9      	uxtb	r1, r1
 8010f46:	1882      	adds	r2, r0, r2
 8010f48:	4290      	cmp	r0, r2
 8010f4a:	d101      	bne.n	8010f50 <memchr+0xc>
 8010f4c:	2000      	movs	r0, #0
 8010f4e:	4770      	bx	lr
 8010f50:	7803      	ldrb	r3, [r0, #0]
 8010f52:	428b      	cmp	r3, r1
 8010f54:	d0fb      	beq.n	8010f4e <memchr+0xa>
 8010f56:	3001      	adds	r0, #1
 8010f58:	e7f6      	b.n	8010f48 <memchr+0x4>
	...

08010f5c <__malloc_lock>:
 8010f5c:	b510      	push	{r4, lr}
 8010f5e:	4802      	ldr	r0, [pc, #8]	; (8010f68 <__malloc_lock+0xc>)
 8010f60:	f7ff fa0d 	bl	801037e <__retarget_lock_acquire_recursive>
 8010f64:	bd10      	pop	{r4, pc}
 8010f66:	46c0      	nop			; (mov r8, r8)
 8010f68:	20001654 	.word	0x20001654

08010f6c <__malloc_unlock>:
 8010f6c:	b510      	push	{r4, lr}
 8010f6e:	4802      	ldr	r0, [pc, #8]	; (8010f78 <__malloc_unlock+0xc>)
 8010f70:	f7ff fa06 	bl	8010380 <__retarget_lock_release_recursive>
 8010f74:	bd10      	pop	{r4, pc}
 8010f76:	46c0      	nop			; (mov r8, r8)
 8010f78:	20001654 	.word	0x20001654

08010f7c <_free_r>:
 8010f7c:	b570      	push	{r4, r5, r6, lr}
 8010f7e:	0005      	movs	r5, r0
 8010f80:	2900      	cmp	r1, #0
 8010f82:	d010      	beq.n	8010fa6 <_free_r+0x2a>
 8010f84:	1f0c      	subs	r4, r1, #4
 8010f86:	6823      	ldr	r3, [r4, #0]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	da00      	bge.n	8010f8e <_free_r+0x12>
 8010f8c:	18e4      	adds	r4, r4, r3
 8010f8e:	0028      	movs	r0, r5
 8010f90:	f7ff ffe4 	bl	8010f5c <__malloc_lock>
 8010f94:	4a1d      	ldr	r2, [pc, #116]	; (801100c <_free_r+0x90>)
 8010f96:	6813      	ldr	r3, [r2, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d105      	bne.n	8010fa8 <_free_r+0x2c>
 8010f9c:	6063      	str	r3, [r4, #4]
 8010f9e:	6014      	str	r4, [r2, #0]
 8010fa0:	0028      	movs	r0, r5
 8010fa2:	f7ff ffe3 	bl	8010f6c <__malloc_unlock>
 8010fa6:	bd70      	pop	{r4, r5, r6, pc}
 8010fa8:	42a3      	cmp	r3, r4
 8010faa:	d908      	bls.n	8010fbe <_free_r+0x42>
 8010fac:	6821      	ldr	r1, [r4, #0]
 8010fae:	1860      	adds	r0, r4, r1
 8010fb0:	4283      	cmp	r3, r0
 8010fb2:	d1f3      	bne.n	8010f9c <_free_r+0x20>
 8010fb4:	6818      	ldr	r0, [r3, #0]
 8010fb6:	685b      	ldr	r3, [r3, #4]
 8010fb8:	1841      	adds	r1, r0, r1
 8010fba:	6021      	str	r1, [r4, #0]
 8010fbc:	e7ee      	b.n	8010f9c <_free_r+0x20>
 8010fbe:	001a      	movs	r2, r3
 8010fc0:	685b      	ldr	r3, [r3, #4]
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d001      	beq.n	8010fca <_free_r+0x4e>
 8010fc6:	42a3      	cmp	r3, r4
 8010fc8:	d9f9      	bls.n	8010fbe <_free_r+0x42>
 8010fca:	6811      	ldr	r1, [r2, #0]
 8010fcc:	1850      	adds	r0, r2, r1
 8010fce:	42a0      	cmp	r0, r4
 8010fd0:	d10b      	bne.n	8010fea <_free_r+0x6e>
 8010fd2:	6820      	ldr	r0, [r4, #0]
 8010fd4:	1809      	adds	r1, r1, r0
 8010fd6:	1850      	adds	r0, r2, r1
 8010fd8:	6011      	str	r1, [r2, #0]
 8010fda:	4283      	cmp	r3, r0
 8010fdc:	d1e0      	bne.n	8010fa0 <_free_r+0x24>
 8010fde:	6818      	ldr	r0, [r3, #0]
 8010fe0:	685b      	ldr	r3, [r3, #4]
 8010fe2:	1841      	adds	r1, r0, r1
 8010fe4:	6011      	str	r1, [r2, #0]
 8010fe6:	6053      	str	r3, [r2, #4]
 8010fe8:	e7da      	b.n	8010fa0 <_free_r+0x24>
 8010fea:	42a0      	cmp	r0, r4
 8010fec:	d902      	bls.n	8010ff4 <_free_r+0x78>
 8010fee:	230c      	movs	r3, #12
 8010ff0:	602b      	str	r3, [r5, #0]
 8010ff2:	e7d5      	b.n	8010fa0 <_free_r+0x24>
 8010ff4:	6821      	ldr	r1, [r4, #0]
 8010ff6:	1860      	adds	r0, r4, r1
 8010ff8:	4283      	cmp	r3, r0
 8010ffa:	d103      	bne.n	8011004 <_free_r+0x88>
 8010ffc:	6818      	ldr	r0, [r3, #0]
 8010ffe:	685b      	ldr	r3, [r3, #4]
 8011000:	1841      	adds	r1, r0, r1
 8011002:	6021      	str	r1, [r4, #0]
 8011004:	6063      	str	r3, [r4, #4]
 8011006:	6054      	str	r4, [r2, #4]
 8011008:	e7ca      	b.n	8010fa0 <_free_r+0x24>
 801100a:	46c0      	nop			; (mov r8, r8)
 801100c:	20001220 	.word	0x20001220

08011010 <_read_r>:
 8011010:	b570      	push	{r4, r5, r6, lr}
 8011012:	0004      	movs	r4, r0
 8011014:	0008      	movs	r0, r1
 8011016:	0011      	movs	r1, r2
 8011018:	001a      	movs	r2, r3
 801101a:	2300      	movs	r3, #0
 801101c:	4d05      	ldr	r5, [pc, #20]	; (8011034 <_read_r+0x24>)
 801101e:	602b      	str	r3, [r5, #0]
 8011020:	f7f3 fad5 	bl	80045ce <_read>
 8011024:	1c43      	adds	r3, r0, #1
 8011026:	d103      	bne.n	8011030 <_read_r+0x20>
 8011028:	682b      	ldr	r3, [r5, #0]
 801102a:	2b00      	cmp	r3, #0
 801102c:	d000      	beq.n	8011030 <_read_r+0x20>
 801102e:	6023      	str	r3, [r4, #0]
 8011030:	bd70      	pop	{r4, r5, r6, pc}
 8011032:	46c0      	nop			; (mov r8, r8)
 8011034:	2000165c 	.word	0x2000165c

08011038 <_fstat_r>:
 8011038:	2300      	movs	r3, #0
 801103a:	b570      	push	{r4, r5, r6, lr}
 801103c:	4d06      	ldr	r5, [pc, #24]	; (8011058 <_fstat_r+0x20>)
 801103e:	0004      	movs	r4, r0
 8011040:	0008      	movs	r0, r1
 8011042:	0011      	movs	r1, r2
 8011044:	602b      	str	r3, [r5, #0]
 8011046:	f7f3 fafa 	bl	800463e <_fstat>
 801104a:	1c43      	adds	r3, r0, #1
 801104c:	d103      	bne.n	8011056 <_fstat_r+0x1e>
 801104e:	682b      	ldr	r3, [r5, #0]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d000      	beq.n	8011056 <_fstat_r+0x1e>
 8011054:	6023      	str	r3, [r4, #0]
 8011056:	bd70      	pop	{r4, r5, r6, pc}
 8011058:	2000165c 	.word	0x2000165c

0801105c <_isatty_r>:
 801105c:	2300      	movs	r3, #0
 801105e:	b570      	push	{r4, r5, r6, lr}
 8011060:	4d06      	ldr	r5, [pc, #24]	; (801107c <_isatty_r+0x20>)
 8011062:	0004      	movs	r4, r0
 8011064:	0008      	movs	r0, r1
 8011066:	602b      	str	r3, [r5, #0]
 8011068:	f7f3 faee 	bl	8004648 <_isatty>
 801106c:	1c43      	adds	r3, r0, #1
 801106e:	d103      	bne.n	8011078 <_isatty_r+0x1c>
 8011070:	682b      	ldr	r3, [r5, #0]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d000      	beq.n	8011078 <_isatty_r+0x1c>
 8011076:	6023      	str	r3, [r4, #0]
 8011078:	bd70      	pop	{r4, r5, r6, pc}
 801107a:	46c0      	nop			; (mov r8, r8)
 801107c:	2000165c 	.word	0x2000165c

08011080 <floor>:
 8011080:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011082:	004b      	lsls	r3, r1, #1
 8011084:	4a3d      	ldr	r2, [pc, #244]	; (801117c <floor+0xfc>)
 8011086:	0d5b      	lsrs	r3, r3, #21
 8011088:	189f      	adds	r7, r3, r2
 801108a:	4684      	mov	ip, r0
 801108c:	000e      	movs	r6, r1
 801108e:	000d      	movs	r5, r1
 8011090:	0004      	movs	r4, r0
 8011092:	9001      	str	r0, [sp, #4]
 8011094:	2f13      	cmp	r7, #19
 8011096:	dc34      	bgt.n	8011102 <floor+0x82>
 8011098:	2f00      	cmp	r7, #0
 801109a:	da16      	bge.n	80110ca <floor+0x4a>
 801109c:	4a38      	ldr	r2, [pc, #224]	; (8011180 <floor+0x100>)
 801109e:	4b39      	ldr	r3, [pc, #228]	; (8011184 <floor+0x104>)
 80110a0:	4660      	mov	r0, ip
 80110a2:	0031      	movs	r1, r6
 80110a4:	f7f0 f8a0 	bl	80011e8 <__aeabi_dadd>
 80110a8:	2200      	movs	r2, #0
 80110aa:	2300      	movs	r3, #0
 80110ac:	f7ef f9fc 	bl	80004a8 <__aeabi_dcmpgt>
 80110b0:	2800      	cmp	r0, #0
 80110b2:	d007      	beq.n	80110c4 <floor+0x44>
 80110b4:	2e00      	cmp	r6, #0
 80110b6:	da5d      	bge.n	8011174 <floor+0xf4>
 80110b8:	0073      	lsls	r3, r6, #1
 80110ba:	085b      	lsrs	r3, r3, #1
 80110bc:	431c      	orrs	r4, r3
 80110be:	d001      	beq.n	80110c4 <floor+0x44>
 80110c0:	2400      	movs	r4, #0
 80110c2:	4d31      	ldr	r5, [pc, #196]	; (8011188 <floor+0x108>)
 80110c4:	46a4      	mov	ip, r4
 80110c6:	002e      	movs	r6, r5
 80110c8:	e029      	b.n	801111e <floor+0x9e>
 80110ca:	4b30      	ldr	r3, [pc, #192]	; (801118c <floor+0x10c>)
 80110cc:	413b      	asrs	r3, r7
 80110ce:	9300      	str	r3, [sp, #0]
 80110d0:	400b      	ands	r3, r1
 80110d2:	4303      	orrs	r3, r0
 80110d4:	d023      	beq.n	801111e <floor+0x9e>
 80110d6:	4a2a      	ldr	r2, [pc, #168]	; (8011180 <floor+0x100>)
 80110d8:	4b2a      	ldr	r3, [pc, #168]	; (8011184 <floor+0x104>)
 80110da:	4660      	mov	r0, ip
 80110dc:	0031      	movs	r1, r6
 80110de:	f7f0 f883 	bl	80011e8 <__aeabi_dadd>
 80110e2:	2200      	movs	r2, #0
 80110e4:	2300      	movs	r3, #0
 80110e6:	f7ef f9df 	bl	80004a8 <__aeabi_dcmpgt>
 80110ea:	2800      	cmp	r0, #0
 80110ec:	d0ea      	beq.n	80110c4 <floor+0x44>
 80110ee:	2e00      	cmp	r6, #0
 80110f0:	da03      	bge.n	80110fa <floor+0x7a>
 80110f2:	2380      	movs	r3, #128	; 0x80
 80110f4:	035b      	lsls	r3, r3, #13
 80110f6:	413b      	asrs	r3, r7
 80110f8:	18f5      	adds	r5, r6, r3
 80110fa:	9b00      	ldr	r3, [sp, #0]
 80110fc:	2400      	movs	r4, #0
 80110fe:	439d      	bics	r5, r3
 8011100:	e7e0      	b.n	80110c4 <floor+0x44>
 8011102:	2f33      	cmp	r7, #51	; 0x33
 8011104:	dd0f      	ble.n	8011126 <floor+0xa6>
 8011106:	2380      	movs	r3, #128	; 0x80
 8011108:	00db      	lsls	r3, r3, #3
 801110a:	429f      	cmp	r7, r3
 801110c:	d107      	bne.n	801111e <floor+0x9e>
 801110e:	0002      	movs	r2, r0
 8011110:	000b      	movs	r3, r1
 8011112:	4660      	mov	r0, ip
 8011114:	0031      	movs	r1, r6
 8011116:	f7f0 f867 	bl	80011e8 <__aeabi_dadd>
 801111a:	4684      	mov	ip, r0
 801111c:	000e      	movs	r6, r1
 801111e:	4660      	mov	r0, ip
 8011120:	0031      	movs	r1, r6
 8011122:	b003      	add	sp, #12
 8011124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011126:	4a1a      	ldr	r2, [pc, #104]	; (8011190 <floor+0x110>)
 8011128:	189b      	adds	r3, r3, r2
 801112a:	2201      	movs	r2, #1
 801112c:	4252      	negs	r2, r2
 801112e:	40da      	lsrs	r2, r3
 8011130:	9200      	str	r2, [sp, #0]
 8011132:	4210      	tst	r0, r2
 8011134:	d0f3      	beq.n	801111e <floor+0x9e>
 8011136:	4a12      	ldr	r2, [pc, #72]	; (8011180 <floor+0x100>)
 8011138:	4b12      	ldr	r3, [pc, #72]	; (8011184 <floor+0x104>)
 801113a:	4660      	mov	r0, ip
 801113c:	0031      	movs	r1, r6
 801113e:	f7f0 f853 	bl	80011e8 <__aeabi_dadd>
 8011142:	2200      	movs	r2, #0
 8011144:	2300      	movs	r3, #0
 8011146:	f7ef f9af 	bl	80004a8 <__aeabi_dcmpgt>
 801114a:	2800      	cmp	r0, #0
 801114c:	d0ba      	beq.n	80110c4 <floor+0x44>
 801114e:	2e00      	cmp	r6, #0
 8011150:	da02      	bge.n	8011158 <floor+0xd8>
 8011152:	2f14      	cmp	r7, #20
 8011154:	d103      	bne.n	801115e <floor+0xde>
 8011156:	3501      	adds	r5, #1
 8011158:	9b00      	ldr	r3, [sp, #0]
 801115a:	439c      	bics	r4, r3
 801115c:	e7b2      	b.n	80110c4 <floor+0x44>
 801115e:	2334      	movs	r3, #52	; 0x34
 8011160:	1bdf      	subs	r7, r3, r7
 8011162:	3b33      	subs	r3, #51	; 0x33
 8011164:	40bb      	lsls	r3, r7
 8011166:	18e4      	adds	r4, r4, r3
 8011168:	9b01      	ldr	r3, [sp, #4]
 801116a:	429c      	cmp	r4, r3
 801116c:	419b      	sbcs	r3, r3
 801116e:	425b      	negs	r3, r3
 8011170:	18f5      	adds	r5, r6, r3
 8011172:	e7f1      	b.n	8011158 <floor+0xd8>
 8011174:	2400      	movs	r4, #0
 8011176:	0025      	movs	r5, r4
 8011178:	e7a4      	b.n	80110c4 <floor+0x44>
 801117a:	46c0      	nop			; (mov r8, r8)
 801117c:	fffffc01 	.word	0xfffffc01
 8011180:	8800759c 	.word	0x8800759c
 8011184:	7e37e43c 	.word	0x7e37e43c
 8011188:	bff00000 	.word	0xbff00000
 801118c:	000fffff 	.word	0x000fffff
 8011190:	fffffbed 	.word	0xfffffbed

08011194 <_init>:
 8011194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011196:	46c0      	nop			; (mov r8, r8)
 8011198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801119a:	bc08      	pop	{r3}
 801119c:	469e      	mov	lr, r3
 801119e:	4770      	bx	lr

080111a0 <_fini>:
 80111a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111a2:	46c0      	nop			; (mov r8, r8)
 80111a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80111a6:	bc08      	pop	{r3}
 80111a8:	469e      	mov	lr, r3
 80111aa:	4770      	bx	lr
